{"version":3,"file":"decode.service.js","sourceRoot":"","sources":["../../src/services/decode.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {getDefaultValueForType} from './field.service';\nimport {\n    FieldVersionCollection,\n    IFieldDefinition,\n    ListItem,\n    Lookup,\n    ListService,\n    User\n} from '../factories';\nimport {IListFieldMapping} from '../factories/list-service.factory';\nimport {XMLListAttributeTypes, XMLFieldAttributeTypes} from '../constants';\nimport {each, unescape, cloneDeep, map} from 'lodash';\n\n\n/**\n * @ngdoc service\n * @name angularPoint.apDecodeService\n * @description\n * Processes the XML received from SharePoint and converts it into JavaScript objects based on predefined field types.\n *\n * @requires angularPoint.apUtilityService\n * @requires angularPoint.apConfig\n * @requires angularPoint.CacheService\n */\nexport {\n    checkResponseForErrors,\n    convertUTCDateToLocalDate,\n    extendFieldDefinitionsFromXML,\n    extendListDefinitionFromXML,\n    extendListMetadata,\n    extendObjectWithXMLAttributes,\n    jsAttachments,\n    jsBoolean,\n    jsCalc,\n    jsChoiceMulti,\n    jsDate,\n    jsFloat,\n    jsInt,\n    jsLookup,\n    jsLookupMulti,\n    jsObject,\n    jsString,\n    jsUser,\n    jsUserMulti,\n    locateListItemNodes,\n    parseFieldVersions,\n    parseStringValue,\n    parseXmlEntity,\n    processListItems\n    // IXMLToJsonOptions\n}\n\n/**\n * @ngdoc function\n * @name angularPoint.apDecodeService:checkResponseForErrors\n * @methodOf angularPoint.apDecodeService\n * @description\n * Errors don't always throw correctly from SPServices so this function checks to see if part\n * of the XHR response contains an \"errorstring\" element.\n * @param {object} responseXML XHR response from the server.\n * @returns {string} Returns an error string if present.\n */\nfunction checkResponseForErrors(responseXML: Document): string {\n    /** Look for <errorstring></errorstring> or <ErrorText></ErrorText> for details on any errors */\n    for (let element of ['ErrorText', 'errorstring']) {\n        let matchingElements = responseXML.getElementsByTagName(element);\n\n        if (matchingElements[0]) {\n            /** Break early if found */\n            return matchingElements[0].textContent;\n        }\n    }\n    return undefined;\n}\n\n/** Converts UTC date to a localized date\n * Taken from: http://stackoverflow.com/questions/6525538/convert-utc-date-time-to-local-date-time-using-javascript\n */\nfunction convertUTCDateToLocalDate(date: Date): Date {\n    let newDate = new Date(date.getTime() + date.getTimezoneOffset() * 60 * 1000);\n\n    let offset = date.getTimezoneOffset() / 60;\n    let hours = date.getHours();\n\n    newDate.setHours(hours - offset);\n\n    return newDate;\n}\n\n\n/**\n * @ngdoc function\n * @name angularPoint.apDecodeService:extendFieldDefinitionsFromXML\n * @methodOf angularPoint.apDecodeService\n * @description\n * Takes the XML response from a web service call and extends any field definitions in the model\n * with additional field metadata.  Important to note that all properties will coming from the XML start\n * with a capital letter.\n * @param {object[]} fieldDefinitions Field definitions from the model.\n * @param {object} responseXML XML response from the server.\n */\nfunction extendFieldDefinitionsFromXML(fieldDefinitions: IFieldDefinition[], responseXML: Element): IFieldDefinition[] {\n    let fieldMap = {};\n\n    /** Map all custom fields with keys of the staticName and values = field definition */\n    for (let field of fieldDefinitions) {\n        if (field.staticName) {\n            fieldMap[field.staticName] = field;\n        }\n    }\n\n    /** Iterate over each of the field nodes */\n    let filteredNodes = responseXML.getElementsByTagName('Field');\n\n    each(filteredNodes, xmlField => {\n        let staticName = xmlField.getAttribute('StaticName');\n        let fieldDefinition = fieldMap[staticName];\n\n        /** If we've defined this field then we should extend it */\n        if (fieldDefinition) {\n\n            extendObjectWithXMLAttributes(xmlField, fieldDefinition, XMLFieldAttributeTypes);\n\n            /** Additional processing for Choice fields to include the default value and choices */\n            if (fieldDefinition.objectType === 'Choice' || fieldDefinition.objectType === 'MultiChoice') {\n                fieldDefinition.Choices = [];\n                /** Convert XML Choices object to an array of choices */\n                let xmlChoices = xmlField.getElementsByTagName('CHOICE');\n                each(xmlChoices, (xmlChoice: Element) => {\n                    fieldDefinition.Choices.push(xmlChoice.textContent);\n                });\n                let defaultVal = xmlField.getElementsByTagName('Default');\n                fieldDefinition.Default = defaultVal[0] ? defaultVal[0].textContent : undefined;\n            }\n        }\n    });\n\n    return fieldDefinitions;\n}\n\n/**\n * @ngdoc function\n * @name angularPoint.apDecodeService:extendListDefinitionFromXML\n * @methodOf angularPoint.apDecodeService\n * @description\n * Takes the XML response from a web service call and extends the listService definition in the listService\n * with additional field metadata.  Important to note that all properties will coming from the XML start\n * with a capital letter.\n * @param {object} listService listService\n * @param {object} responseXML XML response from the server.\n * @returns {object} Extended listService object.\n */\nfunction extendListDefinitionFromXML(listService: ListService<any>, responseXML: Element): ListService<any> {\n    let service = this;\n    let listElements = responseXML.getElementsByTagName('List');\n    each(listElements, (element: Element) => {\n        service.extendObjectWithXMLAttributes(element, listService, XMLListAttributeTypes);\n    });\n    return listService;\n}\n\n/**\n * @ngdoc function\n * @name angularPoint.apDecodeService:extendListMetadata\n * @methodOf angularPoint.apDecodeService\n * @description\n * Convenience method that extends the list definition and the field definitions from an xml list response\n * from the server.  Can be used specifically with GetListItemsSinceToken and GetList operations.\n * @param {object} listSer ListService for a given list.\n * @param {object} responseXML XML response from the server.\n */\nfunction extendListMetadata(listService: ListService<any>, responseXML: Element): void {\n    extendListDefinitionFromXML(listService, responseXML);\n    extendFieldDefinitionsFromXML(listService.fields, responseXML);\n}\n\n/**\n * @ngdoc function\n * @name angularPoint.apDecodeService:extendObjectWithXMLAttributes\n * @methodOf angularPoint.apDecodeService\n * @description\n * Takes an XML element and copies all attributes over to a given JS object with corresponding values.  If\n * no JS Object is provided, it extends an empty object and returns it.  If an attributeTypes object is provided\n * we parse each of the defined field so they are typed correctly instead of being a simple string.\n * Note: Properties are not necessarily CAMLCase.\n * @param {object} xmlObject An XML element.\n * @param {object} [jsObject={}] An optional JS Object to extend XML attributes to.\n * @param {object} [attributeTypes={}] Key/Val object with keys being the name of the field and val being the\n * type of field.\n * @returns {object} JS Object\n */\nfunction extendObjectWithXMLAttributes(xmlObject: Element, jsObject?: Object, attributeTypes?: Object): Object {\n    let objectToExtend = jsObject || {};\n    let attributeMap = attributeTypes || {};\n    let xmlAttributes = xmlObject.attributes;\n\n    each(xmlAttributes, (attr, attrNum) => {\n        let attrName = xmlAttributes[attrNum].name;\n        objectToExtend[attrName] = xmlObject.getAttribute(attrName);\n        if (attributeMap[attrName]) {\n            objectToExtend[attrName] = parseStringValue(objectToExtend[attrName], attributeMap[attrName]);\n        }\n    });\n    return objectToExtend;\n}\n\n\nfunction jsAttachments(str): string[] | number | string {\n    /* Depending on CAMLQueryOptions Config an attachment can be formatted in 1 of the below 3 ways:\n     1. {number} The number of attachments for a given list item.\n     CAMLQueryOptions\n     <IncludeAttachmentUrls>FALSE</IncludeAttachmentUrls>\n     <IncludeAttachmentVersion>FALSE</IncludeAttachmentVersion>\n\n     Example\n     ows_Attachments=\"2\"\n\n     2. {string}\n     CAMLQueryOptions\n     <IncludeAttachmentUrls>TRUE</IncludeAttachmentUrls>\n     <IncludeAttachmentVersion>FALSE</IncludeAttachmentVersion>\n\n     Format\n     ;#[ListUrl]/Attachments/[ListItemId]/[FileName];#\n\n     Example:\n     ows_Attachments=\";#https://SharePointSite.com/Lists/Widgets/Attachments/4/DocumentName.xlsx;#\"\n\n     //Todo Check to see if there is any value in this option\n     3. {string} NOTE: We don't currently handle this format.\n     CAMLQueryOptions\n     <IncludeAttachmentUrls>TRUE</IncludeAttachmentUrls>\n     <IncludeAttachmentVersion>TRUE</IncludeAttachmentVersion>\n\n     Format\n     ;#[ListUrl]/Attachments/[ListItemId]/[FileName];#[AttachmentGUID],[Version Number];#\n\n     Example:\n     ows_Attachments=\";#https://SharePointSite.com/Lists/Widgets/Attachments/4/DocumentName.xlsx;#{4378D394-8601-480D-ABD0-0A0505E726FB},1;#\"\n     */\n    if (str.length > 0 && !isNaN(str)) {\n        /** Value is a number current stored as a string */\n        let int = parseInt(str, 10);\n        if (int > 0) {\n            return int;\n        } else {\n            return '';\n        }\n    } else {\n        /** Split into an array of attachment URLs */\n        return jsChoiceMulti(str);\n    }\n}\n\nfunction jsBoolean(str: string): boolean {\n    /** SharePoint uses different string representations for booleans in different places so account for each */\n    return str === '1' || str === 'True' || str === 'TRUE';\n}\n\nfunction jsCalc(str: string): any {\n    if (str.length === 0) {\n        return null;\n    } else {\n        let thisCalc = str.split(';#');\n        // The first value will be the calculated column value type, the second will be the value\n        return parseStringValue(thisCalc[1], thisCalc[0]);\n    }\n}\n\nfunction jsChoiceMulti(str: string): string[] {\n    if (str.length === 0) {\n        return [];\n    } else {\n        let thisChoiceMultiObject = [];\n        let thisChoiceMulti = str.split(';#');\n        for (let i = 0; i < thisChoiceMulti.length; i++) {\n            if (thisChoiceMulti[i].length !== 0) {\n                thisChoiceMultiObject.push(thisChoiceMulti[i]);\n            }\n        }\n        return thisChoiceMultiObject;\n    }\n}\n\nfunction jsDate(str: string): Date {\n    if (!str) {\n        return null;\n    } else {\n        /** Replace dashes with slashes and the \"T\" deliminator with a space if found */\n        let dt = str.split('T')[0] !== str ? str.split('T') : str.split(' ');\n        let d = dt[0].split('-');\n        let t = dt[1].split(':');\n        let t3 = t[2].split('Z');\n        return new Date(parseInt(d[0], 10), (parseInt(d[1], 10) - 1), parseInt(d[2], 10), parseInt(t[0], 10), parseInt(t[1], 10), parseInt(t3[0], 10));\n    }\n}\n\nfunction jsFloat(str: string): number | any {\n    if (!str) {\n        return str;\n    } else {\n        return parseFloat(str);\n    }\n}\n\nfunction jsInt(str: string): number | any {\n    if (!str) {\n        return str;\n    } else {\n        return parseInt(str, 10);\n    }\n}\n\nfunction jsLookup(str: string): Lookup<any> {\n    if (str.length === 0) {\n        return null;\n    } else {\n        //Send to constructor\n        return new Lookup(str);\n    }\n}\n\nfunction jsLookupMulti(str: string): Lookup<any>[] {\n    if (str.length === 0) {\n        return [];\n    } else {\n        let thisLookupMultiObject = [];\n        let thisLookupMulti = str.split(';#');\n        for (let i = 0; i < thisLookupMulti.length; i = i + 2) {\n            /** Ensure a lookup id is present before attempting to push a new lookup */\n            if (thisLookupMulti[i]) {\n                let thisLookup = jsLookup(thisLookupMulti[i] + ';#' + thisLookupMulti[i + 1]);\n                thisLookupMultiObject.push(thisLookup);\n            }\n        }\n        return thisLookupMultiObject;\n    }\n}\n\nfunction jsObject(str: string): Object {\n    if (!str) {\n        return str;\n    } else {\n        /** Ensure JSON is valid and if not throw error with additional detail */\n        let json = null;\n        try {\n            json = JSON.parse(str);\n        } catch (err) {\n            console.error('Invalid JSON: ', str);\n        }\n        return json;\n    }\n}\n\nfunction jsString(str: string): string {\n    return str;\n}\n\nfunction jsUser(str: string): User {\n    if (str.length === 0) {\n        return null;\n    }\n    //Send to constructor\n    return new User(str);\n}\n\nfunction jsUserMulti(str: string): User[] {\n    if (str.length === 0) {\n        return [];\n    } else {\n        let thisUserMultiObject = [];\n        let thisUserMulti = str.split(';#');\n        for (let i = 0; i < thisUserMulti.length; i = i + 2) {\n            let thisUser = jsUser(thisUserMulti[i] + ';#' + thisUserMulti[i + 1]);\n            thisUserMultiObject.push(thisUser);\n        }\n        return thisUserMultiObject;\n    }\n}\n\n/**\n * @ngdoc function\n * @name angularPoint.apDecodeService:locateListItemNodes\n * @methodOf angularPoint.apDecodeService\n * @description\n * Takes an XML response from SharePoint and finds all \"<z:row ...\" elements which represent each list item.\n *\n * @param {Element} responseXML Returned XML from web service call.\n * @returns {NodeListOf<Element>} Array of <z:row elements.\n */\nfunction locateListItemNodes(responseXML: Element): NodeListOf<Element> {\n    /** Looking for \"<z:row\" elements, which is under the xmlns:z namespace and element would then be \"row\"\n     * We can't find using normal getElementsByTagName method so we need to include the namespace*/\n    const rowNS = '#RowsetSchema';\n    const rowElement = 'row';\n\n    /** Map returned XML to JS objects based on mapping from model */\n    return responseXML.getElementsByTagNameNS(rowNS, rowElement);\n}\n\n\n/**\n * @ngdoc function\n * @name angularPoint.apDecodeService:parseFieldVersions\n * @methodOf angularPoint.apDecodeService\n * @description\n * Takes an XML response from SharePoint webservice and returns an array of field versions.\n *\n * @param {xml} responseXML Returned XML from web service call.\n * @param {object} fieldDefinition Field definition from the model.\n *\n * @returns {FieldVersionCollection} FieldVersionCollection object with all versions included.\n */\nfunction parseFieldVersions(responseXML: Element, fieldDefinition: IFieldDefinition): FieldVersionCollection {\n    let xmlVersions = responseXML.getElementsByTagName('Version');\n    let versionCount = xmlVersions.length;\n\n    let fieldVersionCollection = new FieldVersionCollection(fieldDefinition);\n\n    each(xmlVersions, (xmlVersion, index) => {\n\n        /** Bug in SOAP Web Service returns time in UTC time for version history\n         *  Details: https://spservices.codeplex.com/discussions/391879\n         */\n        let utcDate = parseStringValue(xmlVersion.getAttribute('Modified'), 'DateTime');\n\n        /** Parse the xml and create a representation of the version as a js object */\n        let editor = parseStringValue(xmlVersion.getAttribute('Editor'), 'User');\n        /** Turn the SharePoint formatted date into a valid date object */\n        let modified = convertUTCDateToLocalDate(utcDate);\n        /** Properly format field based on definition from model */\n        let value = parseStringValue(xmlVersion.getAttribute(fieldDefinition.staticName), fieldDefinition.objectType);\n        let version = versionCount - index;\n\n        /** Add each distict version to the version collection */\n        fieldVersionCollection.addVersion(editor, modified, value, version);\n\n    });\n\n    return fieldVersionCollection;\n}\n\n/**\n * @ngdoc function\n * @name angularPoint.apDecodeService:parseStringValue\n * @methodOf angularPoint.apDecodeService\n * @description\n * Converts a SharePoint string representation of a field into the correctly formatted JavaScript version\n * based on object type.  A majority of this code is directly taken from Marc Anderson's incredible\n * [SPServices](http://spservices.codeplex.com/) project but it needed some minor tweaking to work here.\n * @param {string} str SharePoint string representing the value.\n * @param {string} [objectType='Text'] The type based on field definition.  See\n * See [List.customFields](#/api/List.FieldDefinition) for additional info on how to define a field type.\n * @returns {*} The newly instantiated JavaScript value based on field type.\n */\nfunction parseStringValue(str: string, objectType?: string): any {\n\n    let unescapedValue = unescape(str);\n\n    let colValue;\n\n    switch (objectType) {\n        case 'Attachments':\n            colValue = jsAttachments(unescapedValue);\n            break;\n        case 'Boolean':\n            colValue = jsBoolean(unescapedValue);\n            break;\n        case 'Calculated': // Formatted like type;#value so we break it apart and then pass back in to format correctly\n            colValue = jsCalc(unescapedValue);\n            break;\n        case 'datetime': // For calculated columns, stored as datetime;#value\n        case 'DateTime':\n            // Dates have dashes instead of slashes: ows_Created='2009-08-25 14:24:48'\n            colValue = jsDate(unescapedValue);\n            break;\n        case 'Lookup':\n            colValue = jsLookup(unescapedValue);\n            break;\n        case 'User':\n            colValue = jsUser(unescapedValue);\n            break;\n        case 'LookupMulti':\n            colValue = jsLookupMulti(unescapedValue);\n            break;\n        case 'UserMulti':\n            colValue = jsUserMulti(unescapedValue);\n            break;\n        case 'Integer':\n        case 'Counter': // Only really used for the ID field\n            colValue = jsInt(unescapedValue);\n            break;\n        case 'Number':\n        case 'Currency':\n        case 'float': // For calculated columns, stored as float;#value\n        case 'Float':\n            colValue = jsFloat(unescapedValue);\n            break;\n        case 'MultiChoice':\n            colValue = jsChoiceMulti(unescapedValue);\n            break;\n        case 'JSON': // Not a true SharePoint field type but acts as a decorator for Note\n            colValue = jsObject(unescapedValue);\n            break;\n        case 'Choice':\n        case 'HTML':\n        case 'Note':\n        default:\n            // All other objectTypes will be simple strings\n            colValue = jsString(unescapedValue);\n            break;\n    }\n    return colValue;\n}\n\n/**\n * @ngdoc function\n * @name angularPoint.apDecodeService:parseXMLEntity\n * @methodOf angularPoint.apDecodeService\n * @description\n * Convert an XML list item into a JS object using the fields defined in the model for the given list item.\n * @param {object} xmlEntity XML Object.\n * @param {object} options Configuration options.\n * @param {string} options.mapping Mapping of fields we'd like to extend on our JS object.\n * @returns {object} New entity using the factory on the model.\n */\nfunction parseXmlEntity<T extends ListItem<any>>(xmlEntity: Element, mapping: IListFieldMapping) {\n    let entity = {};\n    let rowAttrs = xmlEntity.attributes;\n\n    /** Bring back all mapped columns, even those with no value */\n    each(mapping, (fieldDefinition) => {\n        entity[fieldDefinition.mappedName] = getDefaultValueForType(fieldDefinition.objectType);\n    });\n\n    /** Parse through the element's attributes */\n    each(rowAttrs, (attr) => {\n        let thisAttrName = attr.name;\n        let thisMapping = mapping[thisAttrName];\n        if (thisMapping !== undefined) {\n            let thisObjectName = typeof thisMapping !== 'undefined' ? thisMapping.mappedName : thisAttrName.split('ows_')[1];\n            let thisObjectType = typeof thisMapping !== 'undefined' ? thisMapping.objectType : undefined;\n\n            entity[thisObjectName] = parseStringValue(attr.value, thisObjectType);\n        }\n\n    });\n    return entity;\n}\n\n/**\n * @ngdoc function\n * @name angularPoint.apDecodeService:processListItems\n * @methodOf angularPoint.apDecodeService\n * @description\n * Converts xml <z:row elements into JS objects based on field mapping found in list service and finally instantiates\n * newly created list items with list service factory.\n * @param {xml} responseXML XML respose from SOAP web service.\n * @param {IListFieldMapping} mapping Field definitions, typically stored on the listService.\n * @param {ListService} listService Allow list items to reference parent list service directly.\n * @returns {Object} Inedexed Cache.\n */\nfunction processListItems<T extends ListItem<any>>(responseXML: Element, mapping: IListFieldMapping, listService: ListService<T>): T[] {\n\n    /** Locate all \"<z:row ...\" elements in xml */\n    let filteredNodes = locateListItemNodes(responseXML);\n\n    /** Convert XML entities into JS objects */\n    let parsedEntities = map(filteredNodes, xmlEntity => parseXmlEntity(xmlEntity, mapping));\n\n    /** Instantiate each list item with factory on listService and add to cache */\n    let listItems = parsedEntities.map((rawListItemObject: {getPristine?: any, getListService?: any}) => {\n\n        //Store the value instead of just a reference to the original object\n        let pristineValue = cloneDeep(rawListItemObject);\n\n        // let listItem = new listService.factory(rawListItemObject, listService, ...listService.factoryProviders);\n        /**\n         * @ngdoc function\n         * @name ListItem.getPristine\n         * @description\n         * Allow us to reference the uninstantiated version of this list item.  Reference set\n         * via angularPoint.apDecodeService:createListItemProvider.\n         */\n        rawListItemObject.getPristine = () => pristineValue;\n\n        /**\n         * @ngdoc function\n         * @name ListItem.getListService\n         * @description\n         * Allow us to reference the parent list service directly from a list item.\n         */\n        rawListItemObject.getListService = () => listService;\n        \n        \n        // listItem.getPristine = () => pristineValue;\n        let listItem = listService.factory(rawListItemObject);\n        \n        return listItem;\n\n    });\n\n    return listItems;\n}\n"]}