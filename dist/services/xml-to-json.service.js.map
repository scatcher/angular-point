{"version":3,"file":"xml-to-json.service.js","sourceRoot":"","sources":["../../src/services/xml-to-json.service.ts"],"names":[],"mappings":";AAAA,+BAA+B,4BAA4B,CAAC,CAAA;AAC5D,uBAAmB,QAAQ,CAAC,CAAA;AAe5B,IAAI,gBAAgB,GAAG;IAEnB;;;;;;;OAOG;IACH,KAAK,YAAC,UAA+B,EAAE,EAA4F;YAA5F,4BAA4F,EAA3F,uBAAsB,EAAtB,2CAAsB,EAAE,eAAY,EAAZ,iCAAY,EAAE,iBAAgB,EAAhB,qCAAgB,EAAE,cAAc,EAAd,mCAAc;QAC1G,IAAI,aAAa,GAAG,EAAE,CAAC;QAEvB,aAAI,CAAC,UAAU,EAAE,UAAC,IAAa;YAC3B,IAAI,GAAG,GAAG,EAAE,CAAC;YACb,IAAI,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC;YAE/B,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACV,0DAA0D;gBAC1D,aAAI,CAAC,OAAO,EAAE,UAAC,MAAM,IAAK,OAAA,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE,EAA3B,CAA2B,CAAC,CAAC;YAC3D,CAAC;YAED,aAAI,CAAC,QAAQ,EAAE,UAAC,YAAY;gBACxB,IAAI,aAAa,GAAG,YAAY,CAAC,IAAI,CAAC;gBACtC,IAAI,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;gBAC3C,IAAI,UAAU,GAAG,OAAO,aAAa,KAAK,WAAW,GAAG,aAAa,CAAC,UAAU,GAAG,SAAS,GAAG,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC;gBAC9I,IAAI,UAAU,GAAG,OAAO,aAAa,KAAK,WAAW,GAAG,aAAa,CAAC,UAAU,GAAG,SAAS,CAAC;gBAC7F,EAAE,CAAC,CAAC,eAAe,IAAI,aAAa,KAAK,SAAS,CAAC,CAAC,CAAC;oBACjD,GAAG,CAAC,UAAU,CAAC,GAAG,iCAAgB,CAAC,YAAY,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;gBACvE,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,sCAAsC;YACtC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;QAEH,yBAAyB;QACzB,MAAM,CAAC,aAAa,CAAC;IAEzB,CAAC;CACJ;AAGO,wBAAgB,oBAHtB;AAGuB","sourcesContent":["import {parseStringValue} from '../services/decode.service';\nimport {each} from 'lodash';\n\n\n\nexport interface IParseOptions {\n    // If true, return all attributes, regardless whether they are in the mapping\n    includeAllAttrs?: boolean;\n    // columnName: mappedName: \"mappedName\", objectType: \"objectType\"\n    mapping?: Object;\n    // Specifically for GetListItems, if true, the leading ows_ will be stripped off the field name\n    removeOws?: boolean;\n    // If true, empty (\"\") values will not be returned\n    sparse?: boolean;\n}\n\nlet xmlToJSONService = {\n\n    /**\n     * @ngdoc function\n     * @name apXMLToJSONService.parse\n     * @methodOf apXMLToJSONService\n     * @param {Element} xmlNodeSet Object to parse, can either be a jQuery object or an xml response.\n     * @param {Object} [options] Optionally override defaults.\n     * @returns {Object[]} XML List items converted to JS.\n     */\n    parse(xmlNodeSet: NodeListOf<Element>, {includeAllAttrs = true, mapping = {}, removeOws = true, sparse = false}: IParseOptions = {}): Object[] {\n        let parsedObjects = [];\n\n        each(xmlNodeSet, (node: Element) => {\n            let row = {};\n            let rowAttrs = node.attributes;\n\n            if (!sparse) {\n                // Bring back all mapped columns, even those with no value\n                each(mapping, (column) => row[column.mappedName] = '');\n            }\n\n            each(rowAttrs, (rowAttribute) => {\n                let attributeName = rowAttribute.name;\n                let columnMapping = mapping[attributeName];\n                let objectName = typeof columnMapping !== 'undefined' ? columnMapping.mappedName : removeOws ? attributeName.split('ows_')[1] : attributeName;\n                let objectType = typeof columnMapping !== 'undefined' ? columnMapping.objectType : undefined;\n                if (includeAllAttrs || columnMapping !== undefined) {\n                    row[objectName] = parseStringValue(rowAttribute.value, objectType);\n                }\n            });\n\n            // Push this item into the JSON Object\n            parsedObjects.push(row);\n        });\n\n        // Return the JSON object\n        return parsedObjects;\n\n    }\n};\n\n\nexport {xmlToJSONService}\n"]}