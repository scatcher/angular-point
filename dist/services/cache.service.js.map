{"version":3,"file":"cache.service.js","sourceRoot":"","sources":["../../src/services/cache.service.ts"],"names":[],"mappings":";AACA,gCAAqB,mBAAmB,CAAC,CAAA;AACzC,gCAA8B,sBAAsB,CAAC,CAAA;AAErD;;;;;;;;;;;;;;;;;GAiBG;AACH,IAAI,eAAe,GAAmE,EAAE;AAgDpF,uBAAe,mBAhDsE;AAEzF;;;;;;;;;;;;;;;GAeG;AACH,IAAI,mBAAmB,GAAmD,EAAE;AA+BxE,2BAAmB,uBA/BsD;AAC7E;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AAEH,IAAI,oBAAoB,GAAG,IAAI,iCAAe,CAAC,SAAS,CAAC;AAKrD,4BAAoB,wBALkC;AAY1D;;;;;;;;GAQG;AACH,mBAAmB,SAAiB;IAChC,EAAE,CAAC,CAAC,wBAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QACpB,WAAW;QACX,MAAM,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC;IACnC,CAAC;IAAC,IAAI,CAAC,CAAC;QACJ,iBAAiB;QACjB,MAAM,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAC;IAC5C,CAAC;AACL,CAAC;AAvBG,iBAAS,aAuBZ;AAED;;;;;;;;GAQG;AACH,+BAA+B,IAAY;IACvC,IAAI,IAAI,CAAC;IACT,EAAE,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACxD,IAAI,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC;IACxC,CAAC;IACD,MAAM,CAAC,IAAI,CAAC;AAChB,CAAC;AAvCG,6BAAqB,yBAuCxB;AAED;;;;;;;;GAQG;AACH,wBAAwB,MAAc;IAClC,IAAI,KAAK,EACL,aAAa,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC;IAEtC,EAAE,CAAC,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QACrC,KAAK,GAAG,mBAAmB,CAAC,aAAa,CAAC,CAAC,KAAK,CAAC;IACrD,CAAC;IACD,MAAM,CAAC,KAAK,CAAC;AACjB,CAAC;AAzDG,sBAAc,kBAyDjB;AAED;;;;;;;;GAQG;AACH,6BAA6B,WAA6B;IACtD,EAAE,CAAC,CAAC,WAAW,CAAC,SAAS,EAAE,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;QAC/C,IAAI,MAAM,GAAG,WAAW,CAAC,SAAS,EAAE,CAAC,WAAW,EAAE,CAAC;QACnD,mDAAmD;QACnD,eAAe,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG;YACjC,KAAK,EAAE,WAAW;YAClB,MAAM,EAAE,MAAM;SACjB,CAAC;QAEF,kDAAkD;QAClD,mBAAmB,CAAC,MAAM,CAAC,GAAG;YAC1B,KAAK,EAAE,WAAW;SACrB,CAAC;QAEF,oBAAoB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC3C,CAAC;AAEL,CAAC;AApFG,2BAAmB,uBAoFtB","sourcesContent":["import {ListService} from \"../factories\";\nimport {isGuid} from \"./utility.service\";\nimport {BehaviorSubject} from \"rxjs/BehaviorSubject\";\n\n/**\n * @description Stores list names when a new model is registered along with the GUID to allow us to\n *     retrieve the GUID in future\n * @example\n * <pre>\n *     listNameToIdMap = {\n *          list1Name: {\n *              model: list1Model,\n *              listId: list1GUID\n *          },\n *          list2Name: {\n *              model: list2Model,\n *              listId: list2GUID\n *          }\n *          ...\n *     }\n * </pre>\n */\nlet listNameToIdMap: { [key: string]: { model: ListService<any>; listId: string } } = {};\n\n/**\n * @description Stores list GUID when a new model is registered with a reference to the model for\n *     future reference.\n * @example\n * <pre>\n *     listsMappedByListId = {\n     *          list1GUID: {\n     *              model: list1Model\n     *          },\n     *          list2GUID: {\n     *              model: list2Model\n     *          }\n     *          ...\n     *     }\n * </pre>\n */\nlet listsMappedByListId: { [key: string]: { model: ListService<any> } } = {};\n/**\n * @description The Main cache object which stores ModelCache objects.  Keys being the model GUID and\n *     value being an a ModelCache object\n * @example\n * <pre>\n *     entityCache = {\n     *          list1GUID: {\n     *              item1ID: { //EnityCache for entity 1\n     *                  associationQueue: [],\n     *                  updateCount: 3,\n     *                  listId: list1GUID,\n     *                  entityId: item1ID,\n     *                  entity: {} //This is where the actual entity is referenced\n     *              }\n     *              item2ID: { //EnityCache for entity 2\n     *                  ...\n     *              }\n     *          },\n     *          list2GUID: {\n     *              item1ID: ...\n     *          }\n     *          ...\n     *     }\n * </pre>\n */\n\nlet modelBehaviorSubject = new BehaviorSubject(undefined);\n\nexport {\n    listNameToIdMap,\n    listsMappedByListId,\n    modelBehaviorSubject,\n    getListId,\n    getListIdFromListName,\n    getListService,\n    registerListService\n}\n\n/**\n * @ngdoc function\n * @name angularPoint.apCacheService:getListId\n * @methodOf angularPoint.apCacheService\n * @description\n * Allows us to use either the List Name or the list GUID and returns the lowercase GUID\n * @param {string} keyString List GUID or name.\n * @returns {string} Lowercase list GUID.\n */\nfunction getListId(keyString: string): string {\n    if (isGuid(keyString)) {\n        /** GUID */\n        return keyString.toLowerCase();\n    } else {\n        /** List Title */\n        return getListIdFromListName(keyString);\n    }\n}\n\n/**\n * @ngdoc function\n * @name angularPoint.apCacheService:getListIdFromListName\n * @methodOf angularPoint.apCacheService\n * @description\n * Allows us to lookup an entity cache using the name of the list instead of the GUID.\n * @param {string} name The name of the list.\n * @returns {string} GUID for the list.\n */\nfunction getListIdFromListName(name: string): string {\n    let guid;\n    if (listNameToIdMap[name] && listNameToIdMap[name].listId) {\n        guid = listNameToIdMap[name].listId;\n    }\n    return guid;\n}\n\n/**\n * @ngdoc function\n * @name angularPoint.apCacheService:getListService\n * @methodOf angularPoint.apCacheService\n * @description\n * Allows us to retrieve a reference to a given model by either the list title or list GUID.\n * @param {string} listId List title or list GUID.\n * @returns {object} A reference to the requested model.\n */\nfunction getListService(listId: string): ListService<any> {\n    let model,\n        entityTypeKey = getListId(listId);\n\n    if (listsMappedByListId[entityTypeKey]) {\n        model = listsMappedByListId[entityTypeKey].model;\n    }\n    return model;\n}\n\n/**\n * @ngdoc function\n * @name angularPoint.apCacheService:registerModel\n * @methodOf angularPoint.apCacheService\n * @description\n * Creates a new ModelCache for the provide model where all list items will be stored with the key equaling\n * the entity id's and value being a EntityContainer.  The entity is stored at EntityContainer.entity.\n * @param {ListService<any>} listService ListService to create the cache for.\n */\nfunction registerListService(listService: ListService<any>): void {\n    if (listService.getListId() && listService.title) {\n        let listId = listService.getListId().toLowerCase();\n        /** Store a reference to the model by list title */\n        listNameToIdMap[listService.title] = {\n            model: listService,\n            listId: listId\n        };\n\n        /** Store a reference to the model by list guid */\n        listsMappedByListId[listId] = {\n            model: listService\n        };\n\n        modelBehaviorSubject.next(listService);\n    }\n\n}\n"]}