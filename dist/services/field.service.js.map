{"version":3,"file":"field.service.js","sourceRoot":"","sources":["../../src/services/field.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {isFunction, times, random, each} from 'lodash';\n\n\nlet uniqueCount = 0;\n\n\nconst fieldTypes = getFieldTypes();\n\n/**\n * @ngdoc service\n * @name angularPoint.apFieldService\n * @description\n * Handles the mapping of the various types of fields used within a SharePoint list\n */\nexport {\n    fieldTypes,\n    getDefaultValueForType,\n    getDefinition,\n    // getMockData,\n    // mockPermMask,\n    resolveValueForEffectivePermMask\n};\n\n/**\n * @ngdoc function\n * @name angularPoint.apFieldService:getDefaultValueForType\n * @methodOf angularPoint.apFieldService\n * @description\n * Returns the empty value expected for a field type\n * @param {string} fieldType Type of field.\n * @returns {*} Default value based on field type.\n */\nfunction getDefaultValueForType(fieldType: string): any {\n    let fieldDefinition = getDefinition(fieldType),\n        defaultValue;\n\n    if (fieldDefinition) {\n        defaultValue = fieldDefinition.defaultValue;\n    }\n    return defaultValue;\n}\n\n/**\n * Returns an object defining a specific field type\n * @param {string} fieldType\n * @returns {object} fieldTypeDefinition\n */\nfunction getDefinition(fieldType) {\n    return fieldTypes[fieldType] ? fieldTypes[fieldType] : fieldTypes['Text'];\n}\n\n\n/**\n * @ngdoc function\n * @name angularPoint.apFieldService:getMockData\n * @methodOf angularPoint.apFieldService\n * @description\n * Can return mock data appropriate for the field type, by default it dynamically generates data but\n * the staticValue param will instead return a hard coded type specific value\n *\n * @requires ChanceJS to produce dynamic data.\n * https://github.com/victorquinn/chancejs\n * @param {string} fieldType Field type from the field definition.\n * @param {object} [options] Optional params.\n * @param {boolean} [options.staticValue=false] Default to dynamically build mock data.\n * @returns {*} mockData\n */\n// function getMockData(fieldType, options) {\n//     let mock;\n//     let fieldDefinition = getDefinition(fieldType);\n//     if (fieldDefinition) {\n//         if (isFunction(chance) && options && !options.staticValue) {\n//             /** Return dynamic data if ChanceJS is available and flag isn't set requiring static data */\n//             mock = fieldDefinition.dynamicMock(options);\n//         } else {\n//             /** Return static data if the flag is set or ChanceJS isn't available */\n//             mock = fieldDefinition.staticMock;\n//         }\n//     }\n//     return mock;\n// }\n\n/**\n * @ngdoc function\n * @name angularPoint.apFieldService:mockPermMask\n * @methodOf angularPoint.apFieldService\n * @description\n * Defaults to a full mask but allows simulation of each of main permission levels\n * @param {object} [options] Options container.\n * @param {string} [options.permissionLevel=FullMask] Optional mask.\n * @returns {string} Values for mask.\n */\n// function mockPermMask(options?: { permissionLevel: string }) {\n//     let mask = 'FullMask';\n//     if (options && options.permissionLevel) {\n//         mask = options.permissionLevel;\n//     }\n//     return resolveValueForEffectivePermMask(mask);\n// }\n\n/**\n * @ngdoc function\n * @name angularPoint.apFieldService:resolveValueForEffectivePermMask\n * @methodOf angularPoint.apFieldService\n * @description\n * Takes the name of a permission mask and returns a permission value which can then be used\n * to generate a permission object using modelService.resolvePermissions(outputfromthis)\n * @param {string} perMask Options:\n *  - AddListItems\n *  - EditListItems\n *  - DeleteListItems\n *  - ApproveItems\n *  - FullMask\n *  - ViewListItems\n * @returns {string} value\n */\nfunction resolveValueForEffectivePermMask(perMask) {\n    let permissionValue;\n    switch (perMask) {\n        case 'AddListItems':\n            permissionValue = 0x0000000000000002;\n            break;\n        case 'EditListItems':\n            permissionValue = 0x0000000000000004;\n            break;\n        case 'DeleteListItems':\n            permissionValue = 0x0000000000000008;\n            break;\n        case 'ApproveItems':\n            permissionValue = 0x0000000000000010;\n            break;\n        case 'FullMask':\n            permissionValue = 0x7FFFFFFFFFFFFFFF;\n            break;\n        case 'ViewListItems':\n        default:\n            permissionValue = 0x0000000000000001;\n            break;\n    }\n    return permissionValue;\n}\n\n/********************PRIVATE FUNCTIONS**********************/\n\nfunction getFieldTypes() {\n    return {\n        Text: {\n            defaultValue: '',\n            // staticMock: 'Test String',\n            // dynamicMock: randomString\n        },\n        Note: {\n            defaultValue: '',\n            // staticMock: 'This is a sentence.',\n            // dynamicMock: randomParagraph\n        },\n        Boolean: {\n            defaultValue: null,\n            // staticMock: true,\n            // dynamicMock: randomBoolean\n        },\n        Calculated: {\n            defaultValue: null,\n            // staticMock: 'float;#123.45',\n            // dynamicMock: randomCalc\n        },\n        Choice: {\n            defaultValue: '',\n            // staticMock: 'My Choice',\n            // dynamicMock: randomString\n        },\n        Counter: {\n            defaultValue: null,\n            // staticMock: getUniqueCounter(),\n            // dynamicMock: getUniqueCounter\n        },\n        Currency: {\n            defaultValue: null,\n            // staticMock: 120.50,\n            // dynamicMock: randomCurrency\n        },\n        DateTime: {\n            defaultValue: null,\n            // staticMock: new Date(2014, 5, 4, 11, 33, 25),\n            // dynamicMock: randomDate\n        },\n        Integer: {\n            defaultValue: null,\n            // staticMock: 14,\n            // dynamicMock: randomInteger\n        },\n        JSON: {\n            defaultValue: '',\n            // staticMock: [\n            //     {id: 1, title: 'test'},\n            //     {id: 2}\n            // ],\n            // dynamicMock: randomString\n        },\n        Lookup: {\n            defaultValue: '',\n            // staticMock: {lookupId: 49, lookupValue: 'Static Lookup'},\n            // dynamicMock: randomLookup\n        },\n        LookupMulti: {\n            defaultValue: [],\n            // staticMock: [\n            //     {lookupId: 50, lookupValue: 'Static Multi 1'},\n            //     {lookupId: 51, lookupValue: 'Static Multi 2'}\n            // ],\n            // dynamicMock: randomLookupMulti\n        },\n        Mask: {\n            defaultValue: '',\n            // defaultValue: mockPermMask(),\n            // staticMock: mockPermMask(),\n            // dynamicMock: mockPermMask\n        },\n        Attachments: {\n            defaultValue: [],\n            // staticMock: ['http://someserver/somesite/attachments/12/MyAttachment.jpg'],\n            // dynamicMock: randomAttachments\n        },\n        MultiChoice: {\n            defaultValue: [],\n            // staticMock: ['A Good Choice', 'A Bad Choice'],\n            // dynamicMock: randomStringArray\n        },\n        User: {\n            defaultValue: '',\n            // staticMock: {lookupId: 52, lookupValue: 'Static User'},\n            // dynamicMock: randomUser\n        },\n        UserMulti: {\n            defaultValue: [],\n            // staticMock: [\n            //     {lookupId: 53, lookupValue: 'Static User 1'},\n            //     {lookupId: 54, lookupValue: 'Static User 2'}\n            // ],\n            // dynamicMock: randomUserMulti\n        }\n    };\n}\n\n// function getUniqueCounter() {\n//     uniqueCount++;\n//     return uniqueCount;\n// }\n\n// function randomAttachments() {\n//     return chance.url({ extensions: ['gif', 'jpg', 'png', 'docx'] });\n// }\n\n// function randomBoolean() {\n//     return chance.bool();\n// }\n\n// function randomCalc() {\n//     return 'float;#' + chance.floating({min: 0, max: 10000});\n// }\n\n// function randomString() {\n//     return chance.word() + ' ' + chance.word();\n// }\n\n// function randomStringArray() {\n//     let randomArr = [];\n//     /** Create a random (1-4) number of strings and add to array */\n//     times(random(1, 4), function () {\n//         randomArr.push(randomString());\n//     });\n//     return randomArr;\n// }\n\n// function randomParagraph() {\n//     return chance.paragraph();\n// }\n\n// function randomCurrency() {\n//     let min = 100;\n//     let max = 1000000000;\n//     /** Return a currency value with two decimal places */\n//     return (Math.floor(Math.random() * (max - min)) + min) / 100;\n// }\n\n// function randomDate() {\n//     return chance.date();\n// }\n\n// function randomInteger() {\n//     return chance.integer();\n// }\n\n\n// function randomLookup() {\n//     return {\n//         lookupId: getUniqueCounter(),\n//         lookupValue: chance.word()\n//     };\n// }\n\n// function randomUser() {\n//     return {\n//         lookupId: getUniqueCounter(),\n//         lookupValue: chance.name()\n//     };\n// }\n\n// function randomLookupMulti() {\n//     let mockData = [];\n//     each(random(10), function () {\n//         mockData.push(randomLookup());\n//     });\n//     return mockData;\n// }\n\n// function randomUserMulti() {\n//     let mockData = [];\n//     each(random(10), function () {\n//         mockData.push(randomUser());\n//     });\n//     return mockData;\n// }\n\n\n\n"]}