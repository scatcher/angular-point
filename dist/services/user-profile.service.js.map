{"version":3,"file":"user-profile.service.js","sourceRoot":"","sources":["../../src/services/user-profile.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAyB,eAAe,CAAC,CAAA;AACzC,oCAA0B,uBAAuB,CAAC,CAAA;AAGlD,8CAA8C;AAC9C,IAAI,oBAAoB,EAAE,gBAAgB,CAAC;AAG3C;;;;;;;;GAQG;AAEH;IACI,4BAAoB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;IAAI,CAAC;IACjD;;;;;;;;;;OAUG;IACH,0CAAa,GAAb,UAAc,SAAiB;QAC3B,6EAA6E;QAC7E,MAAM,CAAC,IAAI;aACN,kBAAkB,EAAE;aACpB,GAAG,CAAC,UAAA,eAAe;YAChB,IAAI,eAAe,GAAG,eAAe,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,IAAI,KAAK,SAAS,EAAxB,CAAwB,CAAC,CAAC;YAC9E,MAAM,CAAC,eAAe,CAAC;QAC3B,CAAC,CAAC,CAAC;IACX,CAAC;IAED;;;;;;;OAOG;IACH,+CAAkB,GAAlB;QAAA,iBAWC;QAVG,EAAE,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC;YACxB,0DAA0D;YAC1D,oBAAoB,GAAG,IAAI;iBACtB,cAAc,EAAE;iBAChB,GAAG,CAAC,UAAA,WAAW;gBACZ,MAAM,CAAC,KAAI,CAAC,WAAW,CAAC,0BAA0B,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;YAClF,CAAC,CAAC;iBACD,OAAO,CAAC,UAAA,eAAe,IAAI,OAAA,eAAe,EAAf,CAAe,CAAC,CAAC;QACrD,CAAC;QACD,MAAM,CAAC,oBAAoB,CAAC;IAChC,CAAC;IAED;;;;;;;;;OASG;IACH,2CAAc,GAAd;QACI,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;YACpB,0DAA0D;YAC1D,gBAAgB,GAAG,IAAI,CAAC,WAAW,CAAC,oBAAoB,EAAE,CAAC;QAC/D,CAAC;QACD,MAAM,CAAC,gBAAgB,CAAC;IAC5B,CAAC;IA7DL;QAAC,iBAAU,EAAE;;0BAAA;IAgEb,yBAAC;AAAD,CAAC,AA/DD,IA+DC;AA/DY,0BAAkB,qBA+D9B,CAAA","sourcesContent":["import {Injectable} from '@angular/core';\nimport {DataService} from './dataservice.service';\nimport {Observable} from 'rxjs/Observable';\n\n/** Local references to cached observabless */\nvar _getGroupCollection$, _getUserProfile$;\n\n\n/**\n * @ngdoc service\n * @name angularPoint.UserProfileService\n * @description\n * Simple service that allows us to request and cache both the current user and their group memberships.\n *\n * @requires DataService\n *\n */\n@Injectable()\nexport class UserProfileService {\n    constructor(private dataService: DataService) { }\n    /**\n     * @ngdoc function\n     * @name angularPoint.UserProfileService:checkIfMember\n     * @methodOf angularPoint.UserProfileService\n     * @description\n     * Checks to see if current user is a member of the specified group.\n     * @param {string} groupName Name of the group.\n     * @returns {Observable<IXMLGroup>} Returns the group definition if the user is a member. {ID:string, Name:string, Description:string, OwnerId:string, OwnerIsUser:string}\n     * @example\n     * <pre>{ID: \"190\", Name: \"Blog Contributors\", Description: \"We are bloggers...\", OwnerID: \"126\", OwnerIsUser: \"False\"}</pre>\n     */\n    checkIfMember(groupName: string): Observable<IXMLGroup> {\n        //Initially ensure groups are ready, any future calls will receive the return\n        return this\n            .getGroupCollection()\n            .map(groupCollection => {\n                var groupDefinition = groupCollection.find(group => group.Name === groupName);\n                return groupDefinition;\n            });\n    }\n\n    /**\n     * @ngdoc function\n     * @name angularPoint.UserProfileService:getGroupCollection\n     * @methodOf angularPoint.UserProfileService\n     * @description\n     * Returns the group definitions for the current user and caches results.\n     * @returns {Observable<IXMLGroup[]>} Observable which resolves with the array of groups the user belongs to.\n     */\n    getGroupCollection(): Observable<IXMLGroup[]> {\n        if (!_getGroupCollection$) {\n            /** Create a new deferred object if not already defined */\n            _getGroupCollection$ = this\n                .getUserProfile()\n                .map(userProfile => {\n                    return this.dataService.getGroupCollectionFromUser(userProfile.userLoginName);\n                })\n                .flatMap(groupCollection => groupCollection);\n        }\n        return _getGroupCollection$;\n    }\n\n    /**\n     * @ngdoc function\n     * @name angularPoint.UserProfileService:getUserProfile\n     * @methodOf angularPoint.UserProfileService\n     * @description\n     * Returns the user profile for the current user and caches results.\n     * Pull user profile info and parse into a profile object\n     * http://spservices.codeplex.com/wikipage?title=GetUserProfileByName\n     * @returns {Observable<IXMLUserProfile>} Observable which resolves with the requested user profile.\n     */\n    getUserProfile(): Observable<IXMLUserProfile> {\n        if (!_getUserProfile$) {\n            /** Create a new deferred object if not already defined */\n            _getUserProfile$ = this.dataService.getUserProfileByName();\n        }\n        return _getUserProfile$;\n    }\n\n\n}\n\nexport interface IXMLGroup {\n    Description: string;\n    ID: string;\n    Name: string;\n    OwnerID: string;\n    OwnerIsUser: string;\n}\n\nexport interface IXMLUser {\n    Email: string;\n    Flags: string;\n    ID: string;\n    IsDomainGroup: string;\n    IsSiteAdmin: string;\n    LoginName: string;\n    Name: string;\n    Notes: string;\n    Sid: string;\n}\n\nexport interface IXMLUserProfile {\n    userLoginName: string; // added to allow us to optionally add a prefix if necessary from apConfig\n    UserProfile_GUID: string;\n    AccountName: string;\n    FirstName: string;\n    'SPS-PhoneticFirstName': string;\n    LastName: string;\n    'SPS-PhoneticLastName': string;\n    PreferredName: string;\n    'SPS-PhoneticDisplayName': string;\n    WorkPhone: string;\n    Department: string;\n    Title: string;\n    'SPS-JobTitle': string;\n    Manager: string;\n    AboutMe: string;\n    PersonalSpace: string;\n    PictureURL: string;\n    UserName: string;\n    QuickLinks: string;\n    WebSite: string;\n    PublicSiteRedirect: string;\n    'SPS-Dotted-line': string;\n    'SPS-Peers': string;\n    'SPS-Responsibility': string;\n    'SPS-SipAddress': string;\n    'SPS-MySiteUpgrade': string;\n    'SPS-DontSuggestList': string;\n    'SPS-ProxyAddresses': string;\n    'SPS-HireDate': string;\n    'SPS-DisplayOrder': string;\n    'SPS-ClaimID': string;\n    'SPS-ClaimProviderID': string;\n    'SPS-ClaimProviderType': string;\n    'SPS-LastColleagueAdded': string;\n    'SPS-OWAUrl': string;\n    'SPS-SavedAccountName': string;\n    'SPS-ResourceAccountName': string;\n    'SPS-ObjectExists': string;\n    'SPS-MasterAccountName': string;\n    'SPS-DistinguishedName': string;\n    'SPS-SourceObjectDN': string;\n    'SPS-LastKeywordAdded': string;\n    WorkEmail: string;\n    CellPhone: string;\n    Fax: string;\n    HomePhone: string;\n    Office: string;\n    'SPS-Location': string;\n    'SPS-TimeZone': string;\n    Assistant: string;\n    'SPS-PastProjects': string;\n    'SPS-Skills': string;\n    'SPS-School': string;\n    'SPS-Birthday': string;\n    'SPS-StatusNotes': string;\n    'SPS-Interests': string;\n    'SPS-EmailOptin': string;\n}"]}