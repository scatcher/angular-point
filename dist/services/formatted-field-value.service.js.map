{"version":3,"file":"formatted-field-value.service.js","sourceRoot":"","sources":["../../src/services/formatted-field-value.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {Lookup} from '../factories';\nimport {isBoolean, isNumber, isDate, each} from 'lodash';\n\nexport {\n    getFormattedFieldValue,\n    stringifyBoolean,\n    stringifyCalc,\n    stringifyCurrency,\n    stringifyDate,\n    stringifyLookup,\n    stringifyMultiChoice,\n    stringifyMultiLookup,\n    stringifyNumber\n}\n\n/**\n * @ngdoc service\n * @name angularPoint.apFormattedFieldValueService\n * @description\n * Returns the formatted string value for a field based on field type.\n */\n\n/**\n * @ngdoc function\n * @name angularPoint.apFormattedFieldValueService:getFormattedFieldValue\n * @methodOf angularPoint.apFormattedFieldValueService\n * @param {object|array|string|integer|boolean} prop Target that we'd like to stringify.\n * @param {string} [propertyType='String'] Assumes by default that it's already a string.  Most of the normal field\n * types identified in the model field definitions are supported.\n *\n * - Lookup\n * - User\n * - Boolean\n * - DateTime\n * - Integer\n * - Number\n * - Counter\n * - MultiChoice\n * - UserMulti\n * - LookupMulti\n * @param {object} options Optional config.\n * @param {string} [options.delim=', '] Optional delimiter to split concatenated strings.\n * @param {string} [options.dateFormat='short'] Either 'json' which converts a date into ISO8601 or short which default to user locale format.\n * @example\n * <pre>\n *  var project = {\n     *    title: 'Super Project',\n     *   members: [\n     *     { lookupId: 12, lookupValue: 'Joe' },\n     *     { lookupId: 19, lookupValue: 'Beth' }\n     *   ]\n     * };\n *\n * var membersAsString = apFormattedFieldValueService:getFormattedFieldValue({\n     *    project.members,\n     *    'UserMulti',\n     *    { delim: ' | '} //Custom Delimiter\n     * });\n *\n * // membersAsString = 'Joe | Beth';\n *\n * </pre>\n * @returns {string} Stringified property on the object based on the field type.\n */\nfunction getFormattedFieldValue(prop: any, propertyType: string = 'String', options: { delim?: string; dateFormat?: string } = {}): string {\n\n    var str: string = '';\n    /** Only process if prop is defined */\n    if (prop) {\n        switch (propertyType) {\n            case 'Boolean':\n                str = stringifyBoolean(prop);\n                break;\n            case 'Calculated': // can be DateTime, Float, or String\n                str = stringifyCalc(prop);\n                break;\n            case 'Lookup':\n            case 'User':\n                str = stringifyLookup(prop);\n                break;\n            case 'DateTime':\n                str = stringifyDate(prop, options.dateFormat);\n                break;\n            case 'Integer':\n            case 'Number':\n            case 'Float':\n            case 'Counter':\n                str = stringifyNumber(prop);\n                break;\n            case 'Currency':\n                str = stringifyCurrency(prop);\n                break;\n            case 'MultiChoice':\n                str = stringifyMultiChoice(prop, options.delim);\n                break;\n            case 'UserMulti':\n            case 'LookupMulti':\n                str = stringifyMultiLookup(prop, options.delim);\n                break;\n            default:\n                str = prop;\n        }\n    }\n    return str;\n}\n\n/**\n * @ngdoc function\n * @name angularPoint.apFormattedFieldValueService:stringifyBoolean\n * @methodOf angularPoint.apFormattedFieldValueService\n * @param {boolean} prop Boolean to stringify.\n * @description\n * Returns the stringified boolean if it is set.\n * @returns {string} Stringified boolean.\n */\nfunction stringifyBoolean(prop: boolean): string {\n    var str = '';\n    if (isBoolean(prop)) {\n        str = prop.toString();\n    }\n    return str;\n}\n\nfunction stringifyCalc(prop: any): string {\n    if (prop.length === 0) {\n        return '';\n    } else if (isNumber(prop)) {\n        return getFormattedFieldValue(prop, 'Number');\n    } else if (isDate(prop)) {\n        return getFormattedFieldValue(prop, 'DateTime');\n    } else {\n        return getFormattedFieldValue(prop, 'Text');\n    }\n}\n\n/**\n * @ngdoc function\n * @name angularPoint.apFormattedFieldValueService:stringifyCurrency\n * @methodOf angularPoint.apFormattedFieldValueService\n * @description\n * Converts a numeric value into a formatted currency string.\n * @param {number} prop Property on object to parse.\n * @returns {string} Stringified currency.\n */\nfunction stringifyCurrency(prop: number): string {\n    return (prop).toLocaleString(\"en-US\", {style: \"currency\", currency: \"USD\", minimumFractionDigits: 2});\n}\n\n/**\n * @ngdoc function\n * @name angularPoint.apFormattedFieldValueService:stringifyDate\n * @methodOf angularPoint.apFormattedFieldValueService\n * @param {date} prop Date object.\n * @param {string} dateFormat Either 'json' which converts a date into ISO8601 date string using user locale.\n * @description\n * Returns JSON date.\n * @returns {string} JSON date.\n */\nfunction stringifyDate(prop: Date, dateFormat: string = 'short'): string {\n    var str = '';\n    if (isDate(prop)) {\n        str = dateFormat === 'json' ? prop.toJSON() : prop.toLocaleString('en-US');\n    }\n    return str;\n}\n\n/**\n * @ngdoc function\n * @name angularPoint.apFormattedFieldValueService:stringifyLookup\n * @methodOf angularPoint.apFormattedFieldValueService\n * @param {obj} prop Property on object to parse.\n * @description\n * Returns the property.lookupValue if present.\n * @returns {string} Property.lookupValue.\n */\nfunction stringifyLookup(prop: Lookup<any>): string {\n    var str = '';\n    if (prop && prop.lookupValue) {\n        str = prop.lookupValue;\n    }\n    return str;\n}\n\n\n/**\n * @ngdoc function\n * @name angularPoint.apFormattedFieldValueService:stringifyMultiChoice\n * @methodOf angularPoint.apFormattedFieldValueService\n * @param {string[]} choices Array of selected choices.\n * @param {string} [delim='; '] Custom delimiter used between the concatenated values.\n * @description\n * Converts an array of strings into a single concatenated string.\n * @returns {string} Concatenated string representation.\n */\nfunction stringifyMultiChoice(choices: string[] = [], delim = '; '): string {\n    var str = '';\n    each(choices, (choice, i) => {\n        if (i > 0) {\n            str += delim;\n        }\n        str += choice;\n    });\n    return str;\n}\n\n\n/**\n * @ngdoc function\n * @name angularPoint.apFormattedFieldValueService:stringifyMultiLookup\n * @methodOf angularPoint.apFormattedFieldValueService\n * @param {object[]} prop Array of lookup objects.\n * @param {string} [delim='; '] Custom delimiter used between the concatenated values.\n * @description\n * Converts an array of selected lookup values into a single concatenated string.\n * @returns {string} Concatenated string representation.\n */\nfunction stringifyMultiLookup(prop: Lookup<any>[], delim: string = '; '): string {\n    var str = '';\n    each(prop, function (val, valIndex) {\n\n        /** Add artificial delim */\n        if (valIndex > 0) {\n            str += delim;\n        }\n\n        str += stringifyLookup(val);\n    });\n    return str;\n}\n\n\n/**\n * @ngdoc function\n * @name angularPoint.apFormattedFieldValueService:stringifyNumber\n * @methodOf angularPoint.apFormattedFieldValueService\n * @param {number} prop Property on object to parse.\n * @description\n * Converts a number to a string representation.\n * @returns {string} Stringified number.\n */\nfunction stringifyNumber(prop: number): string {\n    var str = '';\n    if (isNumber(prop)) {\n        str = prop.toString();\n    }\n    return str;\n}\n"]}