{"version":3,"file":"encode.service.js","sourceRoot":"","sources":["../../src/services/encode.service.ts"],"names":[],"mappings":";AAAA,gCAA0B,mBAAmB,CAAC,CAAA;AAG9C,uBAA+D,QAAQ,CAAC,CAAA;AAExE,IAAI,aAAqB,CAAC;AAE1B,gGAAgG;AAChG,IAAM,8BAA8B,GAAG;IACnC,GAAG,EAAE,OAAO;IACZ,GAAG,EAAE,QAAQ;IACb,GAAG,EAAE,MAAM;IACX,GAAG,EAAE,MAAM;CACd,CAAC;AAcF;;;;GAIG;AACH,6BAA6B,OAAiB;IAC1C,IAAI,GAAG,GAAG,EAAE,CAAC;IACb,IAAI,KAAK,GAAG,IAAI,CAAC;IAEjB,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QACrB,mDAAmD;QACnD,GAAG,IAAI,KAAK,CAAC;QAEb,qEAAqE;QACrE,GAAG,CAAC,CAAe,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO,CAAC;YAAtB,IAAI,MAAM,gBAAA;YACX,GAAG,IAAI,MAAM,GAAG,KAAK,CAAC;SACzB;IAEL,CAAC;IACD,MAAM,CAAC,GAAG,CAAC;AACf,CAAC;AA/BG,2BAAmB,uBA+BtB;AAED;;;;;;;;;;;;;;;;;;;GAmBG;AACH,yBAAyB,eAAiC,EAAE,KAAU;IAClE,IAAI,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;IACvE,MAAM,CAAC,CAAC,eAAe,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;AACtD,CAAC;AAvDG,uBAAe,mBAuDlB;AAED;;;;;;;GAOG;AACH,qBAAqB,SAAiB,EAAE,KAAU;IAC9C,IAAI,GAAG,GAAW,EAAE,CAAC;IACrB,oEAAoE;IACpE,EAAE,CAAC,CAAC,KAAK,KAAK,EAAE,IAAI,CAAC,oBAAW,CAAC,KAAK,CAAC,IAAI,CAAC,eAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACxD,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YAChB,KAAK,QAAQ,CAAC;YACd,KAAK,MAAM;gBACP,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACjB,0CAA0C;oBAC1C,GAAG,GAAG,KAAK,CAAC,QAAQ,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,WAAW,IAAI,EAAE,CAAC,CAAC;gBAC5D,CAAC;gBACD,KAAK,CAAC;YACV,KAAK,aAAa,CAAC;YACnB,KAAK,WAAW;gBACZ,GAAG,GAAG,IAAI,CAAC,8BAA8B,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;gBAC7D,KAAK,CAAC;YACV,KAAK,aAAa;gBACd,GAAG,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;gBACtC,KAAK,CAAC;YACV,KAAK,SAAS;gBACV,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,GAAG,CAAC;gBACxB,KAAK,CAAC;YACV,KAAK,UAAU;gBACX,sEAAsE;gBACtE,GAAG,GAAG,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;gBAC1C,KAAK,CAAC;YACV,KAAK,MAAM;gBACP,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gBAC5B,KAAK,CAAC;YACV,KAAK,MAAM,CAAC;YACZ,KAAK,MAAM,CAAC;YACZ;gBACI,GAAG,GAAG,KAAK,CAAC;QACpB,CAAC;IACL,CAAC;IACD,EAAE,CAAC,CAAC,iBAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAChB,8DAA8D;QAC9D,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;IAC9B,CAAC;IACD,MAAM,CAAC,GAAG,CAAC;AACf,CAAC;AAxGG,mBAAW,eAwGd;AAED,mBAAmB,GAAW;IAC1B,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,YAAY,EAAE,UAAU,GAAG,EAAE,IAAI;QAChD,MAAM,CAAC,8BAA8B,CAAC,IAAI,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;AACP,CAAC;AA7GG,iBAAS,aA6GZ;AAED;;;;;;;;;;;;;GAaG;AACH,4BAA4B,gBAA6C,EAAE,QAAuB;IAAlG,iBASC;IARG,IAAI,KAAK,GAAG,gBAAgB;SACvB,MAAM,CAAC,UAAC,KAAuB;QAC5B,MAAM,CAAC,YAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,UAAU,CAAC,CAAC;IAC3C,CAAC,CAAC;SACD,GAAG,CAAC,UAAC,KAAuB;QACzB,MAAM,CAAC,KAAI,CAAC,eAAe,CAAC,KAAK,EAAE,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;IACnE,CAAC,CAAC,CAAC;IACP,MAAM,CAAC,KAAK,CAAC;AACjB,CAAC;AArIG,0BAAkB,sBAqIrB;AAED;;;;;;;;;GASG;AACH,+BAA+B,gBAAoC;IAE/D,sBAAsB;IACtB,IAAI,UAAU,GAAG,cAAc,CAAC;IAEhC,GAAG,CAAA,CAAc,UAAgB,EAAhB,qCAAgB,EAAhB,8BAAgB,EAAhB,IAAgB,CAAC;QAA9B,IAAI,KAAK,yBAAA;QACT,UAAU,IAAI,sBAAmB,KAAK,CAAC,UAAU,SAAK,CAAC;KAC1D;IAED,uBAAuB;IACvB,UAAU,IAAI,eAAe,CAAC;IAC9B,MAAM,CAAC,UAAU,CAAA;AACrB,CAAC;AA5JG,6BAAqB,yBA4JxB;AAED;;;;;;;;;;;GAWG;AACH,iCAAiC,IAAmB;IAChD,IAAI,MAAY,CAAC;IACjB,EAAE,CAAC,CAAC,CAAC,eAAM,CAAC,IAAI,CAAC,IAAI,iBAAQ,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;QAClE,uCAAuC;QACvC,IAAI,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACrC,MAAM,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACtI,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,eAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACvB,MAAM,IAAI,KAAK,CAAC,yBAAyB,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IACjE,CAAC;IAAC,IAAI,CAAC,CAAC;QACJ,MAAM,GAAG,IAAI,CAAC;IAClB,CAAC;IAED,IAAI,UAAU,GAAG,EAAE,CAAC;IACpB,UAAU,IAAI,MAAM,CAAC,WAAW,EAAE,CAAC;IACnC,UAAU,IAAI,GAAG,CAAC;IAClB,UAAU,IAAI,6BAAW,CAAC,MAAM,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;IACjD,UAAU,IAAI,GAAG,CAAC;IAClB,UAAU,IAAI,6BAAW,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC;IAC5C,UAAU,IAAI,GAAG,CAAC;IAClB,UAAU,IAAI,6BAAW,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC7C,UAAU,IAAI,GAAG,CAAC;IAClB,UAAU,IAAI,6BAAW,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC;IAC/C,UAAU,IAAI,GAAG,CAAC;IAClB,UAAU,IAAI,6BAAW,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC;IAC/C,UAAU,IAAI,IAAI,CAAC;IAEnB,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;QACjB;oDAC4C;QAC5C,aAAa,GAAG,IAAI,IAAI,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE,CAAC;IACxD,CAAC;IACD,UAAU,IAAI,6BAAW,CAAC,aAAa,CAAC,CAAC;IACzC,UAAU,IAAI,KAAK,CAAC;IACpB,MAAM,CAAC,UAAU,CAAC;AACtB,CAAC;AA3MG,+BAAuB,2BA2M1B;AAED;;;;;;;;;;;;;GAaG;AACH,wCAAwC,gBAA+B,EAAE,UAAuB,EAAE,aAA6B;IAAtD,0BAAuB,GAAvB,uBAAuB;IAAE,6BAA6B,GAA7B,6BAA6B;IAC3H,IAAI,iBAAiB,GAAG,EAAE,CAAC;IAC3B,IAAI,MAAM,GAAG,UAAU,IAAI,UAAU,CAAC;IACtC,IAAI,OAAO,GAAG,aAAa,IAAI,aAAa,CAAC;IAC7C,aAAI,CAAC,gBAAgB,EAAE,UAAU,YAAY,EAAE,SAAS;QACpD,qFAAqF;QACrF,iBAAiB,IAAI,YAAY,CAAC,MAAM,CAAC,GAAG,IAAI,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;QACjF,2FAA2F;QAC3F,EAAE,CAAC,CAAC,SAAS,GAAG,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5C,iBAAiB,IAAI,IAAI,CAAC;QAC9B,CAAC;IACL,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,iBAAiB,CAAC;AAC7B,CAAC;AAvOG,sCAA8B,kCAuOjC;AAED;;;;;;;;GAQG;AACH,kBAAkB,IAAY,EAAE,GAAkB;IAC9C,IAAI,SAAS,GAAG,OAAO,GAAG,KAAK,WAAW,GAAG,GAAG,GAAG,EAAE,CAAC;IACtD,MAAM,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,SAAS,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,CAAC;AAC5D,CAAC;AApPG,gBAAQ,YAoPX","sourcesContent":["import {doubleDigit} from './utility.service';\nimport {Lookup, IFieldDefinition, ListItem} from '../factories';\nimport {IFieldConfigurationObject} from \"../factories/field-definition.factory\";\nimport {isUndefined, isNull, isString, has, isDate, each} from 'lodash';\n\nlet savedTimeZone: number;\n\n/* Taken from http://dracoblue.net/dev/encodedecode-special-xml-characters-in-javascript/155/ */\nconst xml_special_to_escaped_one_map = {\n    '&': '&amp;',\n    '\"': '&quot;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\n\nexport {\n    choiceMultiToString,\n    createValuePair,\n    encodeValue,\n    encodeXml,\n    generateValuePairs,\n    generateViewFieldsXML,\n    stringifySharePointDate,\n    stringifySharePointMultiSelect,\n    wrapNode\n}\n\n/**\n * Converts an array of selected values into a SharePoint MultiChoice string\n * @param {string[]} arr\n * @returns {string}\n */\nfunction choiceMultiToString(choices: string[]): string {\n    var str = '';\n    var delim = ';#';\n\n    if (choices.length > 0) {\n        /** String is required to begin with deliminator */\n        str += delim;\n\n        /** Append each item in the supplied array followed by deliminator */\n        for (let choice of choices) {\n            str += choice + delim;\n        }\n\n    }\n    return str;\n}\n\n/**\n * @ngdoc function\n * @name angularPoint.apEncodeService:createValuePair\n * @methodOf angularPoint.apEncodeService\n * @description\n * Uses a field definition from a model to properly format a value for submission to SharePoint.  Typically\n * used prior to saving a list item, we iterate over each of the non-readonly properties defined in the model\n * for a list item and convert those value into value pairs that we can then hand off to SPServices.\n * @param {object} fieldDefinition The field definition, typically defined in the model.\n * <pre>\n * {\n     *  staticName: \"Title\",\n     *  objectType: \"Text\",\n     *  mappedName: \"lastName\",\n     *  readOnly:false\n     * }\n * </pre>\n * @param {*} value Current field value.\n * @returns {Array} [fieldName, fieldValue]\n */\nfunction createValuePair(fieldDefinition: IFieldDefinition, value: any): [string, string] {\n    var encodedValue = this.encodeValue(fieldDefinition.objectType, value);\n    return [fieldDefinition.staticName, encodedValue];\n}\n\n/**\n * @ngdoc function\n * @name angularPoint.apEncodeService:encodeValue\n * @methodOf angularPoint.apEncodeService\n * @param {string} fieldType One of the valid field types.\n * @param {*} value Value to be encoded.\n * @returns {string} Encoded value ready to be sent to the server.\n */\nfunction encodeValue(fieldType: string, value: any): string {\n    var str: string = '';\n    /** Only process if note empty, undefined, or null.  Allow false. */\n    if (value !== '' && !isUndefined(value) && !isNull(value)) {\n        switch (fieldType) {\n            case 'Lookup':\n            case 'User':\n                if (value.lookupId) {\n                    /** Only include lookupValue if defined */\n                    str = value.lookupId + ';#' + (value.lookupValue || '');\n                }\n                break;\n            case 'LookupMulti':\n            case 'UserMulti':\n                str = this.stringifySharePointMultiSelect(value, 'lookupId');\n                break;\n            case 'MultiChoice':\n                str = this.choiceMultiToString(value);\n                break;\n            case 'Boolean':\n                str = value ? '1' : '0';\n                break;\n            case 'DateTime':\n                // a string date in ISO8601 format, e.g., '2013-05-08T01:20:29Z-05:00'\n                str = this.stringifySharePointDate(value);\n                break;\n            case 'JSON':\n                str = JSON.stringify(value);\n                break;\n            case 'HTML':\n            case 'Note':\n            default:\n                str = value;\n        }\n    }\n    if (isString(str)) {\n        // Ensure we encode before sending to server (replace \", <, >)\n        str = this.encodeXml(str);\n    }\n    return str;\n}\n\nfunction encodeXml(str: string): string {\n    return str.replace(/([\\&\"<>])/g, function (str, item) {\n        return xml_special_to_escaped_one_map[item];\n    });\n}\n\n/**\n * @ngdoc function\n * @name angularPoint.apEncodeService:generateValuePairs\n * @methodOf angularPoint.apEncodeService\n * @description\n * Typically used to iterate over the non-readonly field definitions stored in a model and convert a\n * given list item entity into value pairs that we can pass to SPServices for saving.\n * @param {Array} fieldDefinitions Definitions from the model.\n * @param {object} listItem list item that we'll attempt to iterate over to find the properties that we need to\n * save it to SharePoint.\n * @returns {[string, string][]} Value pairs of all non-readonly fields.\n * @example\n * [[fieldName1, fieldValue1], [fieldName2, fieldValue2], ...]\n */\nfunction generateValuePairs(fieldDefinitions: IFieldConfigurationObject[], listItem: ListItem<any>): [string, string][] {\n    let pairs = fieldDefinitions\n        .filter((field: IFieldDefinition) => {\n            return has(listItem, field.mappedName);\n        })\n        .map((field: IFieldDefinition) => {\n            return this.createValuePair(field, listItem[field.mappedName]);\n        });\n    return pairs;\n}\n\n/**\n * @ngdoc function\n * @name angularPoint.apEncodeService:generateViewFieldsXML\n * @methodOf angularPoint.apEncodeService\n * @description\n * Based on defined fields for a given list, generate XML used to query those fields when requesting list data from\n * SharePoint.\n * @param {IFieldDefinition[]} fieldDefinitions Array of field definitions used to generate valid xml for request.\n * @returns {string}\n */\nfunction generateViewFieldsXML(fieldDefinitions: IFieldDefinition[]): string {\n\n    /** Open viewFields */\n    let viewFields = '<ViewFields>';\n\n    for(let field of fieldDefinitions) {\n        viewFields += `<FieldRef Name=\"${field.staticName}\"/>`;\n    }\n\n    /** Close viewFields */\n    viewFields += '</ViewFields>';\n    return viewFields\n}\n\n/**\n * @ngdoc function\n * @name angularPoint.apEncodeService:stringifySharePointDate\n * @methodOf angularPoint.apEncodeService\n * @description\n * Converts a JavaScript date into a modified ISO8601 date string using the TimeZone\n * offset for the current user.\n * @example\n * <pre>'2014-05-08T08:12:18Z-07:00'</pre>\n * @param {Date} date Valid JS date.\n * @returns {string} ISO8601 date string.\n */\nfunction stringifySharePointDate(date: Date | string): string {\n    var jsDate: Date;\n    if (!isDate(date) && isString(date) && date.split('-').length === 3) {\n        /** Date string formatted YYYY-MM-DD */\n        var dateComponents = date.split('-');\n        jsDate = new Date(parseInt(dateComponents[0], 10), parseInt(dateComponents[1], 10) - 1, parseInt(dateComponents[2], 10), 0, 0, 0);\n    } else if (!isDate(date)) {\n        throw new Error('Invalid Date Provided: ' + date.toString());\n    } else {\n        jsDate = date;\n    }\n    \n    var dateString = '';\n    dateString += jsDate.getFullYear();\n    dateString += '-';\n    dateString += doubleDigit(jsDate.getMonth() + 1);\n    dateString += '-';\n    dateString += doubleDigit(jsDate.getDate());\n    dateString += 'T';\n    dateString += doubleDigit(jsDate.getHours());\n    dateString += ':';\n    dateString += doubleDigit(jsDate.getMinutes());\n    dateString += ':';\n    dateString += doubleDigit(jsDate.getSeconds());\n    dateString += 'Z-';\n\n    if (!savedTimeZone) {\n        /* get difference between UTC time and local time in minutes and convert to hours and\n         * store so we only need to do this once  */\n        savedTimeZone = new Date().getTimezoneOffset() / 60;\n    }\n    dateString += doubleDigit(savedTimeZone);\n    dateString += ':00';\n    return dateString;\n}\n\n/**\n * @ngdoc function\n * @name angularPoint.apEncodeService:stringifySharePointMultiSelect\n * @methodOf angularPoint.apEncodeService\n * @description\n * Turns an array of, typically {lookupId: someId, lookupValue: someValue}, objects into a string\n * of delimited id's that can be passed to SharePoint for a multi select lookup or multi user selection\n * field.  SharePoint doesn't need the lookup values so we only need to pass the ID's back.\n *\n * @param {object[]} multiSelectValue Array of {lookupId: #, lookupValue: 'Some Value'} objects.\n * @param {string} [idProperty='lookupId'] Property name where we'll find the ID value on each of the objects.\n * @param {string} [valueProperty='lookupValue'] Property name where we'll find the value for this object.\n * @returns {string} Need to format string of id's in following format [ID0];#;#[ID1];#;#[ID1]\n */\nfunction stringifySharePointMultiSelect(multiSelectValue: Lookup<any>[], idProperty = 'lookupId', valueProperty = 'lookupValue'): string {\n    var stringifiedValues = '';\n    var idProp = idProperty || 'lookupId';\n    var valProp = valueProperty || 'lookupValue';\n    each(multiSelectValue, function (lookupObject, iteration) {\n        /** Need to format string of id's in following format [ID0];#[VAL0];#[ID1];#[VAL1] */\n        stringifiedValues += lookupObject[idProp] + ';#' + (lookupObject[valProp] || '');\n        /** Append delim after all but last because we don't want trailing ';#' at end of string */\n        if (iteration < (multiSelectValue.length - 1)) {\n            stringifiedValues += ';#';\n        }\n    });\n    return stringifiedValues;\n}\n\n/**\n * @ngdoc function\n * @name angularPoint.apEncodeService:wrapNode\n * @methodOf angularPoint.apEncodeService\n * @param {string} node Node to wrap.\n * @param {string} val Value to be wrapped by xml node\n * @description Wrap an XML node (node) around a value (val)\n * @returns {string}\n */\nfunction wrapNode(node: string, val: string|number): string {\n    var thisValue = typeof val !== 'undefined' ? val : '';\n    return '<' + node + '>' + thisValue + '</' + node + '>';\n}\n"]}