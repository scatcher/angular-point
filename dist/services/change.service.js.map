{"version":3,"file":"change.service.js","sourceRoot":"","sources":["../../src/services/change.service.ts"],"names":[],"mappings":";AACA,gCAA8B,sBAAsB,CAAC,CAAA;AAkBrD;;;;;;GAMG;AAEH,IAAI,qBAAqB,GAAqC,IAAI,iCAAe,CAAC,IAAI,CAAC;AAGnF,6BAAqB,yBAH+D;AASxF,gCAAyD,QAAqB,EAAE,OAA0B;IACtG,qBAAqB,CAAC,IAAI,CAAC,EAAC,UAAA,QAAQ,EAAE,SAAA,OAAO,EAAC,CAAC,CAAC;AACpD,CAAC;AAPG,8BAAsB,0BAOzB;AAED,2DAA2D;AAC3D,4CAA4C;AAC5C,IAAI","sourcesContent":["import {ListItem} from '../factories';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\n\n\nexport interface IUpdateOptions<T extends ListItem<any>> {\n    batchCmd: string;\n    buildValuePairs: boolean;\n    ID: number;\n    listName: string;\n    operation: string;\n    valuePairs: string[][];\n    webURL: string;\n}\n\nexport interface IListItemUpdate {\n    listItem: ListItem<any>, \n    options: IUpdateOptions<any>;\n}\n\n/**\n * @ngdoc service\n * @name apChangeService\n * @description\n * Primarily used by mock backend so we can know what to expect before an attempt to update a list\n * item is intercepted.\n */\n\nlet listItemUpdateStream$: BehaviorSubject<IListItemUpdate> = new BehaviorSubject(null);\n\nexport {\n    listItemUpdateStream$,\n    registerListItemUpdate\n    // subscribeToUpdates\n};\n\n\nfunction registerListItemUpdate<T extends ListItem<any>>(listItem: ListItem<T>, options: IUpdateOptions<T>) {\n    listItemUpdateStream$.next({listItem, options});\n}\n\n// function subscribeToUpdates(callback: IListItemUpdate) {\n//     listItemUpdateStream$.push(callback);\n// }\n\n\n"]}