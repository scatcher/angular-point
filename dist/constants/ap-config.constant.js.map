{"version":3,"file":"ap-config.constant.js","sourceRoot":"","sources":["../../src/constants/ap-config.constant.ts"],"names":[],"mappings":";AAgEW,iBAAS,GAAc;IAC9B,QAAQ,EAAE,eAAe;IACzB,KAAK,EAAE,KAAK;IACZ,SAAS,EAAE,SAAS;IACpB,gBAAgB,EAAE,SAAS;IAC3B,UAAU,EAAE,EAAE;IACd,WAAW,EAAE,YAAY;IACzB,WAAW,EAAE,0CAA0C;IACvD,+EAA+E;IAC/E,sBAAsB,EAAE,QAAQ;IAChC,2BAA2B;IAC3B,6DAA6D;IAC7D,wDAAwD;IACxD,yDAAyD;IACzD,0DAA0D;IAC1D,wDAAwD;IACxD,qBAAqB;IACrB,wEAAwE;IACxE,iBAAiB,EAAE,GAAG;CACzB,CAAC;AAEF,uCAAuC;AACvC,yCAAyC","sourcesContent":["import {User} from '../factories/user.factory';\n/**\n * @ngdoc object\n * @name angularPoint.apConfig\n * @description\n * Basic config for the application (unique for each environment).  Update to change for your environment.\n *\n * @param {string} appTitle Name of the application in case you need to reference.\n * @param {boolean} debug Determines if we should show debug code.\n * @param {string} defaultUrl Automatically sets the defaultUrl for web service calls so we don't need to make the\n * initial blocking call by SPServices.\n * @param {string} [defaultQueryName='primary'] The name that a query is registered with on a model if a name isn't specified.\n * @param {string} [firebaseUrl] Necessary if you're using apSyncService.  Look there for more details.\n * @param {boolean} [offline] Automatically set based on the URL of the site.  Pulls offline XML when hosted locally.\n * @param {string} [offlineXML='dev/'] The location to look for offline xml files.\n * @example\n * <h4>Default Configuration</h4>\n * <pre>\n * .constant('apConfig', {\n *     appTitle: 'Angular-Point',\n *     debugEnabled: true,\n *     firebaseURL: \"The optional url of your firebase source\",\n *     offline: window.location.href.indexOf('localhost') > -1 ||\n *         window.location.href.indexOf('http://0.') > -1 ||\n *         window.location.href.indexOf('http://10.') > -1 ||\n *         window.location.href.indexOf('http://192.') > -1\n * })\n * </pre>\n *\n * <h4>To Override</h4>\n * <pre>\n * angular.module('MyApp', ['my dependencies'])\n *      .config(function ($stateProvider, $urlRouterProvider) {\n *          //My routes\n *      })\n *      .run(function(apConfig) {\n *          //To set the default site root\n *          apConfig.defaultUrl =\n *            '//sharepoint.myserver.com/siteRoot';\n *\n *          //To set the default location to look for\n *          //offline xml files.\n *          apConfig.offlineXML = 'myCachedQueries/';\n *      });\n * </pre>\n */\n\n\nexport interface IAPConfig {\n    appTitle: string;\n    debug: boolean;\n    debugUser: User;\n    defaultQueryName: string;\n    defaultUrl: string;\n    environment?: string;\n    firebaseURL?: string;\n    localStorageExpiration?: number;\n    // offline: boolean;\n    // online: boolean;\n    queryDebounceTime?: number;\n    userLoginNamePrefix?: string;\n    [key: string]: any;\n}\n\nexport let AP_CONFIG: IAPConfig = {\n    appTitle: 'Angular-Point',\n    debug: false,\n    debugUser: undefined,\n    defaultQueryName: 'primary',\n    defaultUrl: '',\n    environment: 'production',\n    firebaseURL: 'The optional url of your firebase source',\n    //expiration in milliseconds - Defaults to a day and if set to 0 doesn't expire\n    localStorageExpiration: 86400000,\n    //Are we in working offline\n    // offline: window.location.href.indexOf('localhost') > -1 ||\n    //     window.location.href.indexOf('http://0.') > -1 ||\n    //     window.location.href.indexOf('http://10.') > -1 ||\n    //     window.location.href.indexOf('http://127.') > -1 ||\n    //     window.location.href.indexOf('http://192.') > -1,\n    // online: undefined,\n    //Any identical query within this amount of time return the same promise\n    queryDebounceTime: 100\n};\n\n// convenience flag, inverse of offline\n// AP_CONFIG.online = !AP_CONFIG.offline;"]}