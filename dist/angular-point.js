(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("angular"), require("lodash"));
	else if(typeof define === 'function' && define.amd)
		define(["angular", "lodash"], factory);
	else if(typeof exports === 'object')
		exports["angular-point"] = factory(require("angular"), require("lodash"));
	else
		root["angular-point"] = factory(root["angular"], root["lodash"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_37__, __WEBPACK_EXTERNAL_MODULE_0__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmory imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmory exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		Object.defineProperty(exports, name, {
/******/ 			configurable: false,
/******/ 			enumerable: true,
/******/ 			get: getter
/******/ 		});
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

module.exports = require("lodash");

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_angular__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_angular___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_angular__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__constants_apDefaultFields__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__constants_apDefaultListItemQueryOptions__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__constants_apPermissionObject__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__constants_apWebServiceOperationConstants__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__constants_apXMLFieldAttributeTypes__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__constants_apXMLListAttributeTypes__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__factories_apCamlFactory__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__factories_apFieldFactory__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__factories_apIndexedCacheFactory__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__factories_apListItemFactory__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__factories_apModelFactory__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__factories_apListItemVersionFactory__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__factories_apLookupFactory__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__factories_apQueryFactory__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__factories_apUserFactory__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__models_apUserModel__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__services_apCacheService__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__services_apChangeService__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__services_apDataService__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__services_apDecodeService__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__services_apEncodeService__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__services_apExceptionHandlerService__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__services_apExportService__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__services_apFieldService__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__services_apFormattedFieldValueService__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__services_apSPServices__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__services_apLogger__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__services_apUtilityService__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__services_apWebServiceService__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30__services_apXMLToJSONService__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_31__constants__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_32__factories__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_33__models__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_34__services__ = __webpack_require__(36);
/* harmony export (binding) */ __webpack_require__.d(exports, "$AP_INJECTOR", function() { return $AP_INJECTOR; });
/* harmony export (binding) */ __webpack_require__.d(exports, "AngularPointModule", function() { return AngularPointModule; });
/* harmony export (binding) */ __webpack_require__.d(exports, "ENV", function() { return ENV; });
/* harmony export (immutable) */ exports["registerEnvironment"] = registerEnvironment;
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "DefaultFields", function() { return __WEBPACK_IMPORTED_MODULE_31__constants__["a"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "DefaultListItemQueryOptions", function() { return __WEBPACK_IMPORTED_MODULE_31__constants__["b"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "BasePermissionObject", function() { return __WEBPACK_IMPORTED_MODULE_31__constants__["c"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "WebServiceOperationConstants", function() { return __WEBPACK_IMPORTED_MODULE_31__constants__["d"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "XMLFieldAttributeTypes", function() { return __WEBPACK_IMPORTED_MODULE_31__constants__["e"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "XMLListAttributeTypes", function() { return __WEBPACK_IMPORTED_MODULE_31__constants__["f"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "CamlFactory", function() { return __WEBPACK_IMPORTED_MODULE_32__factories__["a"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "FieldDefinition", function() { return __WEBPACK_IMPORTED_MODULE_32__factories__["b"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "FieldFactory", function() { return __WEBPACK_IMPORTED_MODULE_32__factories__["c"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "IndexedCache", function() { return __WEBPACK_IMPORTED_MODULE_32__factories__["d"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "IndexedCacheFactory", function() { return __WEBPACK_IMPORTED_MODULE_32__factories__["e"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ListItem", function() { return __WEBPACK_IMPORTED_MODULE_32__factories__["f"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "StandardListItem", function() { return __WEBPACK_IMPORTED_MODULE_32__factories__["g"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ListItemFactory", function() { return __WEBPACK_IMPORTED_MODULE_32__factories__["h"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "FieldVersionCollection", function() { return __WEBPACK_IMPORTED_MODULE_32__factories__["i"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "FieldChangeSummary", function() { return __WEBPACK_IMPORTED_MODULE_32__factories__["j"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "VersionSummary", function() { return __WEBPACK_IMPORTED_MODULE_32__factories__["k"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ChangeSummary", function() { return __WEBPACK_IMPORTED_MODULE_32__factories__["l"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "VersionHistoryCollection", function() { return __WEBPACK_IMPORTED_MODULE_32__factories__["m"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ListItemVersionFactory", function() { return __WEBPACK_IMPORTED_MODULE_32__factories__["n"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "Lookup", function() { return __WEBPACK_IMPORTED_MODULE_32__factories__["o"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "LookupFactory", function() { return __WEBPACK_IMPORTED_MODULE_32__factories__["p"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "Model", function() { return __WEBPACK_IMPORTED_MODULE_32__factories__["q"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ModelFactory", function() { return __WEBPACK_IMPORTED_MODULE_32__factories__["r"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "LocalStorageQuery", function() { return __WEBPACK_IMPORTED_MODULE_32__factories__["s"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "Query", function() { return __WEBPACK_IMPORTED_MODULE_32__factories__["t"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "QueryFactory", function() { return __WEBPACK_IMPORTED_MODULE_32__factories__["u"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "UserFactory", function() { return __WEBPACK_IMPORTED_MODULE_32__factories__["v"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "List", function() { return __WEBPACK_IMPORTED_MODULE_32__factories__["w"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ListFactory", function() { return __WEBPACK_IMPORTED_MODULE_32__factories__["x"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "UserModel", function() { return __WEBPACK_IMPORTED_MODULE_33__models__["a"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "EntityContainer", function() { return __WEBPACK_IMPORTED_MODULE_34__services__["a"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ModelCache", function() { return __WEBPACK_IMPORTED_MODULE_34__services__["b"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "CacheService", function() { return __WEBPACK_IMPORTED_MODULE_34__services__["c"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ChangeService", function() { return __WEBPACK_IMPORTED_MODULE_34__services__["d"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "DataService", function() { return __WEBPACK_IMPORTED_MODULE_34__services__["e"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "DecodeService", function() { return __WEBPACK_IMPORTED_MODULE_34__services__["f"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "EncodeService", function() { return __WEBPACK_IMPORTED_MODULE_34__services__["g"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "exceptionLoggingService", function() { return __WEBPACK_IMPORTED_MODULE_34__services__["h"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "ExportService", function() { return __WEBPACK_IMPORTED_MODULE_34__services__["i"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "FieldService", function() { return __WEBPACK_IMPORTED_MODULE_34__services__["j"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "FormattedFieldValueService", function() { return __WEBPACK_IMPORTED_MODULE_34__services__["k"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "Logger", function() { return __WEBPACK_IMPORTED_MODULE_34__services__["l"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "SOAPEnvelope", function() { return __WEBPACK_IMPORTED_MODULE_34__services__["m"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "SPServicesCore", function() { return __WEBPACK_IMPORTED_MODULE_34__services__["n"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "UtilityService", function() { return __WEBPACK_IMPORTED_MODULE_34__services__["o"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "isGuid", function() { return __WEBPACK_IMPORTED_MODULE_34__services__["p"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "isDefined", function() { return __WEBPACK_IMPORTED_MODULE_34__services__["q"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "WebServiceService", function() { return __WEBPACK_IMPORTED_MODULE_34__services__["r"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(exports, "XMLToJSONService", function() { return __WEBPACK_IMPORTED_MODULE_34__services__["s"]; });



































var $AP_INJECTOR;
/**
 * @ngdoc overview
 * @module
 * @name angularPoint
 * @description
 * This is the primary angularPoint module and needs to be listed in your app.js dependencies to gain use of AngularPoint
 * functionality in your project.
 * @installModule
 */
var AngularPointModule = __WEBPACK_IMPORTED_MODULE_0_angular__["module"]('angularPoint', [])
    .constant('apDefaultFields', __WEBPACK_IMPORTED_MODULE_1__constants_apDefaultFields__["a" /* DefaultFields */])
    .constant('apDefaultListItemQueryOptions', __WEBPACK_IMPORTED_MODULE_2__constants_apDefaultListItemQueryOptions__["a" /* DefaultListItemQueryOptions */])
    .constant('apBasePermissionObject', __WEBPACK_IMPORTED_MODULE_3__constants_apPermissionObject__["a" /* BasePermissionObject */])
    .constant('apWebServiceOperationConstants', __WEBPACK_IMPORTED_MODULE_4__constants_apWebServiceOperationConstants__["a" /* WebServiceOperationConstants */])
    .constant('apXMLFieldAttributeTypes', __WEBPACK_IMPORTED_MODULE_5__constants_apXMLFieldAttributeTypes__["a" /* XMLFieldAttributeTypes */])
    .constant('apXMLListAttributeTypes', __WEBPACK_IMPORTED_MODULE_6__constants_apXMLListAttributeTypes__["a" /* XMLListAttributeTypes */])
    .service('apCamlFactory', __WEBPACK_IMPORTED_MODULE_7__factories_apCamlFactory__["a" /* CamlFactory */])
    .service('apFieldFactory', __WEBPACK_IMPORTED_MODULE_8__factories_apFieldFactory__["b" /* FieldFactory */])
    .service('apIndexedCacheFactory', __WEBPACK_IMPORTED_MODULE_9__factories_apIndexedCacheFactory__["b" /* IndexedCacheFactory */])
    .service('apListFactory', __WEBPACK_IMPORTED_MODULE_10__factories_apListItemFactory__["c" /* ListItemFactory */])
    .service('apListItemFactory', __WEBPACK_IMPORTED_MODULE_10__factories_apListItemFactory__["c" /* ListItemFactory */])
    .service('apListItemVersionFactory', __WEBPACK_IMPORTED_MODULE_12__factories_apListItemVersionFactory__["f" /* ListItemVersionFactory */])
    .service('apLookupFactory', __WEBPACK_IMPORTED_MODULE_13__factories_apLookupFactory__["b" /* LookupFactory */])
    .service('apModelFactory', __WEBPACK_IMPORTED_MODULE_11__factories_apModelFactory__["b" /* ModelFactory */])
    .service('apQueryFactory', __WEBPACK_IMPORTED_MODULE_14__factories_apQueryFactory__["c" /* QueryFactory */])
    .service('apUserFactory', __WEBPACK_IMPORTED_MODULE_15__factories_apUserFactory__["a" /* UserFactory */])
    .service('apUserModel', __WEBPACK_IMPORTED_MODULE_16__models_apUserModel__["a" /* UserModel */])
    .service('apCacheService', __WEBPACK_IMPORTED_MODULE_17__services_apCacheService__["c" /* CacheService */])
    .service('apChangeService', __WEBPACK_IMPORTED_MODULE_18__services_apChangeService__["a" /* ChangeService */])
    .service('apDataService', __WEBPACK_IMPORTED_MODULE_19__services_apDataService__["a" /* DataService */])
    .service('apDecodeService', __WEBPACK_IMPORTED_MODULE_20__services_apDecodeService__["a" /* DecodeService */])
    .service('apEncodeService', __WEBPACK_IMPORTED_MODULE_21__services_apEncodeService__["a" /* EncodeService */])
    .factory('$exceptionHandler', __WEBPACK_IMPORTED_MODULE_22__services_apExceptionHandlerService__["a" /* exceptionLoggingService */])
    .service('apExportService', __WEBPACK_IMPORTED_MODULE_23__services_apExportService__["a" /* ExportService */])
    .service('apFieldService', __WEBPACK_IMPORTED_MODULE_24__services_apFieldService__["a" /* FieldService */])
    .service('apFormattedFieldValueService', __WEBPACK_IMPORTED_MODULE_25__services_apFormattedFieldValueService__["a" /* FormattedFieldValueService */])
    .service('apLogger', __WEBPACK_IMPORTED_MODULE_27__services_apLogger__["a" /* Logger */])
    .factory('SPServices', __WEBPACK_IMPORTED_MODULE_26__services_apSPServices__["b" /* SPServicesCore */])
    .service('apUtilityService', __WEBPACK_IMPORTED_MODULE_28__services_apUtilityService__["b" /* UtilityService */])
    .service('apWebServiceService', __WEBPACK_IMPORTED_MODULE_29__services_apWebServiceService__["a" /* WebServiceService */])
    .service('apXMLToJSONService', __WEBPACK_IMPORTED_MODULE_30__services_apXMLToJSONService__["a" /* XMLToJSONService */])
    .run(['$injector', 'apListItemFactory', 'apModelFactory', function ($injector, apListItemFactory, apModelFactory) {
        // Expose angular $injector for use by the entire application
        $AP_INJECTOR = $injector;
    }]);
var ENV;
function registerEnvironment(env) {
    ENV = env;
}


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return BasePermissionObject; });
var BasePermissionObject = (function () {
    function BasePermissionObject() {
        this.AddAndCustomizePages = false;
        this.AddDelPrivateWebParts = false;
        this.AddListItems = false;
        this.ApplyStyleSheets = false;
        this.ApplyThemeAndBorder = false;
        this.ApproveItems = false;
        this.BrowseDirectories = false;
        this.BrowseUserInfo = false;
        this.CancelCheckout = false;
        this.CreateAlerts = false;
        this.CreateGroups = false;
        this.CreateSSCSite = false;
        this.DeleteListItems = false;
        this.DeleteVersions = false;
        this.EditListItems = false;
        this.EditMyUserInfo = false;
        this.EnumeratePermissions = false;
        this.FullMask = false;
        this.ManageAlerts = false;
        this.ManageLists = false;
        this.ManagePermissions = false;
        this.ManageSubwebs = false;
        this.ManageWeb = false;
        this.Open = false;
        this.OpenItems = false;
        this.PersonalViews = false;
        this.UpdatePersonalWebParts = false;
        this.UseRemoteAPIs = false;
        this.ViewFormPages = false;
        this.ViewListItems = false;
        this.ViewPages = false;
        this.ViewUsageData = false;
        this.ViewVersions = false;
    }
    return BasePermissionObject;
}());



/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return DefaultFields; });
/**
 * @ngdoc object
 * @name angularPoint.apDefaultFields
 * @description
 * Read only fields that should be included in all lists
 */
var DefaultFields = [
    { staticName: 'ID', objectType: 'Counter', mappedName: 'id', readOnly: true },
    { staticName: 'Modified', objectType: 'DateTime', mappedName: 'modified', readOnly: true },
    { staticName: 'Created', objectType: 'DateTime', mappedName: 'created', readOnly: true },
    { staticName: 'Author', objectType: 'User', mappedName: 'author', readOnly: true },
    { staticName: 'Editor', objectType: 'User', mappedName: 'editor', readOnly: true },
    { staticName: 'PermMask', objectType: 'Mask', mappedName: 'permMask', readOnly: true },
    { staticName: 'UniqueId', objectType: 'String', mappedName: 'uniqueId', readOnly: true },
    { staticName: 'FileRef', objectType: 'Lookup', mappedName: 'fileRef', readOnly: true }
];


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return DefaultListItemQueryOptions; });
var DefaultListItemQueryOptions = '' +
    '<QueryOptions>' +
    '   <IncludeMandatoryColumns>FALSE</IncludeMandatoryColumns>' +
    '   <IncludeAttachmentUrls>TRUE</IncludeAttachmentUrls>' +
    '   <IncludeAttachmentVersion>FALSE</IncludeAttachmentVersion>' +
    '   <ExpandUserField>FALSE</ExpandUserField>' +
    '</QueryOptions>';


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return WebServiceOperationConstants; });
var WebServiceOperationConstants = {
    GetAlerts: ['Alerts', false],
    DeleteAlerts: ['Alerts', true],
    Mode: ['Authentication', false],
    Login: ['Authentication', false],
    CopyIntoItems: ['Copy', true],
    CopyIntoItemsLocal: ['Copy', true],
    GetItem: ['Copy', false],
    GetForm: ['Forms', false],
    GetFormCollection: ['Forms', false],
    AddAttachment: ['Lists', true],
    AddDiscussionBoardItem: ['Lists', true],
    AddList: ['Lists', true],
    AddListFromFeature: ['Lists', true],
    ApplyContentTypeToList: ['Lists', true],
    CheckInFile: ['Lists', true],
    CheckOutFile: ['Lists', true],
    CreateContentType: ['Webs', true],
    DeleteAttachment: ['Lists', true],
    DeleteContentType: ['Lists', true],
    DeleteContentTypeXmlDocument: ['Lists', true],
    DeleteList: ['Lists', true],
    GetAttachmentCollection: ['Lists', false],
    GetList: ['Lists', false],
    GetListAndView: ['Lists', false],
    GetListCollection: ['Lists', false],
    GetListContentType: ['Lists', false],
    GetListContentTypes: ['Lists', false],
    GetListItemChanges: ['Lists', false],
    GetListItemChangesSinceToken: ['Lists', false],
    GetListItems: ['Lists', false],
    GetVersionCollection: ['Lists', false],
    UndoCheckOut: ['Lists', true],
    UpdateContentType: ['Webs', true],
    UpdateContentTypesXmlDocument: ['Lists', true],
    UpdateContentTypeXmlDocument: ['Lists', true],
    UpdateList: ['Lists', true],
    UpdateListItems: ['Lists', true],
    AddMeeting: ['Meetings', true],
    CreateWorkspace: ['Meetings', true],
    RemoveMeeting: ['Meetings', true],
    SetWorkSpaceTitle: ['Meetings', true],
    ResolvePrincipals: ['People', false],
    SearchPrincipals: ['People', false],
    AddPermission: ['Permissions', true],
    AddPermissionCollection: ['Permissions', true],
    GetPermissionCollection: ['Permissions', true],
    RemovePermission: ['Permissions', true],
    RemovePermissionCollection: ['Permissions', true],
    UpdatePermission: ['Permissions', true],
    GetLinks: ['PublishedLinksService', true],
    GetPortalSearchInfo: ['Search', false],
    GetQuerySuggestions: ['Search', false],
    GetSearchMetadata: ['Search', false],
    Query: ['Search', false],
    QueryEx: ['Search', false],
    Registration: ['Search', false],
    Status: ['Search', false],
    SendClientScriptErrorReport: ['SharePointDiagnostics', true],
    GetAttachments: ['SiteData', false],
    EnumerateFolder: ['SiteData', false],
    SiteDataGetList: ['SiteData', false],
    SiteDataGetListCollection: ['SiteData', false],
    SiteDataGetSite: ['SiteData', false],
    SiteDataGetSiteUrl: ['SiteData', false],
    SiteDataGetWeb: ['SiteData', false],
    CreateWeb: ['Sites', true],
    DeleteWeb: ['Sites', true],
    GetSite: ['Sites', false],
    GetSiteTemplates: ['Sites', false],
    AddComment: ['SocialDataService', true],
    AddTag: ['SocialDataService', true],
    AddTagByKeyword: ['SocialDataService', true],
    CountCommentsOfUser: ['SocialDataService', false],
    CountCommentsOfUserOnUrl: ['SocialDataService', false],
    CountCommentsOnUrl: ['SocialDataService', false],
    CountRatingsOnUrl: ['SocialDataService', false],
    CountTagsOfUser: ['SocialDataService', false],
    DeleteComment: ['SocialDataService', true],
    DeleteRating: ['SocialDataService', true],
    DeleteTag: ['SocialDataService', true],
    DeleteTagByKeyword: ['SocialDataService', true],
    DeleteTags: ['SocialDataService', true],
    GetAllTagTerms: ['SocialDataService', false],
    GetAllTagTermsForUrlFolder: ['SocialDataService', false],
    GetAllTagUrls: ['SocialDataService', false],
    GetAllTagUrlsByKeyword: ['SocialDataService', false],
    GetCommentsOfUser: ['SocialDataService', false],
    GetCommentsOfUserOnUrl: ['SocialDataService', false],
    GetCommentsOnUrl: ['SocialDataService', false],
    GetRatingAverageOnUrl: ['SocialDataService', false],
    GetRatingOfUserOnUrl: ['SocialDataService', false],
    GetRatingOnUrl: ['SocialDataService', false],
    GetRatingsOfUser: ['SocialDataService', false],
    GetRatingsOnUrl: ['SocialDataService', false],
    GetSocialDataForFullReplication: ['SocialDataService', false],
    GetTags: ['SocialDataService', true],
    GetTagsOfUser: ['SocialDataService', true],
    GetTagTerms: ['SocialDataService', true],
    GetTagTermsOfUser: ['SocialDataService', true],
    GetTagTermsOnUrl: ['SocialDataService', true],
    GetTagUrlsOfUser: ['SocialDataService', true],
    GetTagUrlsOfUserByKeyword: ['SocialDataService', true],
    GetTagUrls: ['SocialDataService', true],
    GetTagUrlsByKeyword: ['SocialDataService', true],
    SetRating: ['SocialDataService', true],
    UpdateComment: ['SocialDataService', true],
    SpellCheck: ['SpellCheck', false],
    AddTerms: ['TaxonomyClientService', true],
    GetChildTermsInTerm: ['TaxonomyClientService', false],
    GetChildTermsInTermSet: ['TaxonomyClientService', false],
    GetKeywordTermsByGuids: ['TaxonomyClientService', false],
    GetTermsByLabel: ['TaxonomyClientService', false],
    GetTermSets: ['TaxonomyClientService', false],
    AddGroup: ['usergroup', true],
    AddGroupToRole: ['usergroup', true],
    AddRole: ['usergroup', true],
    AddRoleDef: ['usergroup', true],
    AddUserCollectionToGroup: ['usergroup', true],
    AddUserCollectionToRole: ['usergroup', true],
    AddUserToGroup: ['usergroup', true],
    AddUserToRole: ['usergroup', true],
    GetAllUserCollectionFromWeb: ['usergroup', false],
    GetGroupCollection: ['usergroup', false],
    GetGroupCollectionFromRole: ['usergroup', false],
    GetGroupCollectionFromSite: ['usergroup', false],
    GetGroupCollectionFromUser: ['usergroup', false],
    GetGroupCollectionFromWeb: ['usergroup', false],
    GetGroupInfo: ['usergroup', false],
    GetRoleCollection: ['usergroup', false],
    GetRoleCollectionFromGroup: ['usergroup', false],
    GetRoleCollectionFromUser: ['usergroup', false],
    GetRoleCollectionFromWeb: ['usergroup', false],
    GetRoleInfo: ['usergroup', false],
    GetRolesAndPermissionsForCurrentUser: ['usergroup', false],
    GetRolesAndPermissionsForSite: ['usergroup', false],
    GetUserCollection: ['usergroup', false],
    GetUserCollectionFromGroup: ['usergroup', false],
    GetUserCollectionFromRole: ['usergroup', false],
    GetUserCollectionFromSite: ['usergroup', false],
    GetUserCollectionFromWeb: ['usergroup', false],
    GetUserInfo: ['usergroup', false],
    GetUserLoginFromEmail: ['usergroup', false],
    RemoveGroup: ['usergroup', true],
    RemoveGroupFromRole: ['usergroup', true],
    RemoveRole: ['usergroup', true],
    RemoveUserCollectionFromGroup: ['usergroup', true],
    RemoveUserCollectionFromRole: ['usergroup', true],
    RemoveUserCollectionFromSite: ['usergroup', true],
    RemoveUserFromGroup: ['usergroup', true],
    RemoveUserFromRole: ['usergroup', true],
    RemoveUserFromSite: ['usergroup', true],
    RemoveUserFromWeb: ['usergroup', true],
    UpdateGroupInfo: ['usergroup', true],
    UpdateRoleDefInfo: ['usergroup', true],
    UpdateRoleInfo: ['usergroup', true],
    UpdateUserInfo: ['usergroup', true],
    AddColleague: ['UserProfileService', true],
    AddLink: ['UserProfileService', true],
    AddMembership: ['UserProfileService', true],
    AddPinnedLink: ['UserProfileService', true],
    CreateMemberGroup: ['UserProfileService', true],
    CreateUserProfileByAccountName: ['UserProfileService', true],
    GetCommonColleagues: ['UserProfileService', false],
    GetCommonManager: ['UserProfileService', false],
    GetCommonMemberships: ['UserProfileService', false],
    GetInCommon: ['UserProfileService', false],
    GetPropertyChoiceList: ['UserProfileService', false],
    GetUserColleagues: ['UserProfileService', false],
    GetUserLinks: ['UserProfileService', false],
    GetUserMemberships: ['UserProfileService', false],
    GetUserPinnedLinks: ['UserProfileService', false],
    GetUserProfileByGuid: ['UserProfileService', false],
    GetUserProfileByIndex: ['UserProfileService', false],
    GetUserProfileByName: ['UserProfileService', false],
    GetUserProfileCount: ['UserProfileService', false],
    GetUserProfileSchema: ['UserProfileService', false],
    GetUserPropertyByAccountName: ['UserProfileService', false],
    ModifyUserPropertyByAccountName: ['UserProfileService', true],
    RemoveAllColleagues: ['UserProfileService', true],
    RemoveAllLinks: ['UserProfileService', true],
    RemoveAllMemberships: ['UserProfileService', true],
    RemoveAllPinnedLinks: ['UserProfileService', true],
    RemoveColleague: ['UserProfileService', true],
    RemoveLink: ['UserProfileService', true],
    RemoveMembership: ['UserProfileService', true],
    RemovePinnedLink: ['UserProfileService', true],
    UpdateColleaguePrivacy: ['UserProfileService', true],
    UpdateLink: ['UserProfileService', true],
    UpdateMembershipPrivacy: ['UserProfileService', true],
    UpdatePinnedLink: ['UserProfileService', true],
    DeleteAllVersions: ['Versions', true],
    DeleteVersion: ['Versions', true],
    GetVersions: ['Versions', false],
    RestoreVersion: ['Versions', true],
    AddView: ['Views', true],
    DeleteView: ['Views', true],
    GetView: ['Views', false],
    GetViewHtml: ['Views', false],
    GetViewCollection: ['Views', false],
    UpdateView: ['Views', true],
    UpdateViewHtml: ['Views', true],
    AddWebPart: ['WebPartPages', true],
    AddWebPartToZone: ['WebPartPages', true],
    GetWebPart2: ['WebPartPages', false],
    GetWebPartPage: ['WebPartPages', false],
    GetWebPartProperties: ['WebPartPages', false],
    GetWebPartProperties2: ['WebPartPages', false],
    GetColumns: ['Webs', false],
    GetContentType: ['Webs', false],
    GetContentTypes: ['Webs', false],
    GetCustomizedPageStatus: ['Webs', false],
    GetListTemplates: ['Webs', false],
    GetObjectIdFromUrl: ['Webs', false],
    GetWeb: ['Webs', false],
    GetWebCollection: ['Webs', false],
    GetAllSubWebCollection: ['Webs', false],
    UpdateColumns: ['Webs', true],
    WebUrlFromPageUrl: ['Webs', false],
    AlterToDo: ['Workflow', true],
    ClaimReleaseTask: ['Workflow', true],
    GetTemplatesForItem: ['Workflow', false],
    GetToDosForItem: ['Workflow', false],
    GetWorkflowDataForItem: ['Workflow', false],
    GetWorkflowTaskData: ['Workflow', false],
    StartWorkflow: ['Workflow', true]
};


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return IndexedCache; });
/* harmony export (binding) */ __webpack_require__.d(exports, "b", function() { return IndexedCacheFactory; });

/**
 * @ngdoc object
 * @name IndexedCache
 * @description
 * Attempts to be very similar to the ES6 Map instance.  Cache constructor that is extended to make it easier to work with
 * via prototype methods.  Located in apIndexedCacheFactory.
 * @param {object} [object] Optionally extend new cache with provided object.
 * @requires angularPoint.apIndexedCacheFactory
 * @constructor
 */
var IndexedCache = (function () {
    function IndexedCache(object) {
        if (object) {
            __WEBPACK_IMPORTED_MODULE_0_lodash__["assign"](this, object);
        }
    }
    /**
     * @ngdoc function
     * @name IndexedCache.clear
     * @methodOf IndexedCache
     * @description
     * Clears all cached (enumerable) elements from the containing cache object.
     */
    IndexedCache.prototype.clear = function () {
        var _this = this;
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](this.keys(), function (key) { return _this.delete(key); });
    };
    /**
     * @ngdoc function
     * @name IndexedCache.delete
     * @methodOf IndexedCache
     * @description
     * Removes any value associated to the key and returns the value that IndexedCache.has(value).
     * @param {number} id ID of listItem to be removed.
     */
    IndexedCache.prototype.delete = function (id) {
        var hasValue = this.has(id);
        if (id && hasValue) {
            delete this[id];
        }
        else if (!__WEBPACK_IMPORTED_MODULE_0_lodash__["isNumber"](id) && !__WEBPACK_IMPORTED_MODULE_0_lodash__["isString"](id)) {
            console.warn('A valid ID was not provided.');
        }
        return hasValue;
    };
    /**
     * @ngdoc function
     * @name IndexedCache.first
     * @methodOf IndexedCache
     * @description
     * Returns the first listItem in the index (smallest ID).
     * @returns {object} First listItem in cache or undefined if empty.
     */
    IndexedCache.prototype.first = function () {
        return this.nthEntity(0);
    };
    /**
     * @ngdoc function
     * @name IndexedCache.get
     * @methodOf IndexedCache
     * @returns {T} Returns the value associated to the key, or undefined if there is none.
     */
    IndexedCache.prototype.get = function (id) {
        return this[id];
    };
    /**
     * @ngdoc function
     * @name IndexedCache.has
     * @methodOf IndexedCache
     * @description
     * Determines if an entity exists in the cache.
     * @param {number} id The id of the requested list item.
     * @returns {boolean} Returns a Boolean asserting whether a value has been associated to the key cache.
     */
    IndexedCache.prototype.has = function (id) {
        return !!this[id];
    };
    /**
     * @ngdoc function
     * @name IndexedCache.keys
     * @methodOf IndexedCache
     * @description
     * Returns the array of enumerable keys (listItem ID's) for the cache.
     * @returns {string[]} Array of listItem id's as strings.
     */
    IndexedCache.prototype.keys = function () {
        return Object.keys(this);
    };
    /**
     * @ngdoc function
     * @name IndexedCache.last
     * @methodOf IndexedCache
     * @description
     * Returns the last listItem in the index (largest ID).
     * @returns {object} Last listItem in cache.
     */
    IndexedCache.prototype.last = function () {
        var keys = this.keys();
        return this[keys[keys.length - 1]];
    };
    /**
     * @ngdoc function
     * @name IndexedCache.nthEntity
     * @methodOf IndexedCache
     * @description
     * Based on the
     * @param {number} index The index of the item requested.
     * @returns {object} First listItem in cache.
     */
    IndexedCache.prototype.nthEntity = function (index) {
        var keys = this.keys();
        return this[keys[index]];
    };
    /**
     * @ngdoc function
     * @name IndexedCache.set
     * @methodOf IndexedCache
     * @description
     * Adds a new key to the cache if not already there with a value of the new listItem.
     * @param {number} key Entity to add to the cache.
     * @param {object} listItem Entity to add to the cache.
     */
    IndexedCache.prototype.set = function (key, listItem) {
        if (__WEBPACK_IMPORTED_MODULE_0_lodash__["isNumber"](key) && __WEBPACK_IMPORTED_MODULE_0_lodash__["isObject"](listItem)) {
            /** Only add the listItem to the cache if it's not already there */
            if (!this.has(listItem.id)) {
                this[key] = listItem;
            }
        }
        else {
            throw new Error('A valid listItem wasn\'t provided: ' + JSON.stringify(listItem, null, 2));
        }
        return this;
    };
    /**
     * @ngdoc function
     * @methodOf IndexedCache
     * @name IndexedCache.toArray
     * @description
     * Turns the cache object into an array of entities.  Uses IndexedCache.values() and is a temp fix to get
     * an array of objects until Map is fully supported.
     * @returns {object[]} Returns the array of entities currently in the cache.
     */
    IndexedCache.prototype.toArray = function () {
        return this.values();
    };
    /**
     * @ngdoc function
     * @name IndexedCache.values
     * @methodOf IndexedCache
     * @description
     * Turns the cache object into an array of entities similar to the method on Mvalues().  Unlike
     * the method on Map though this does not return the objects in insertion order.
     * @returns {IndexedCache<T>[]} Returns the array of entities currently in the cache.
     */
    IndexedCache.prototype.values = function () {
        return __WEBPACK_IMPORTED_MODULE_0_lodash__["toArray"](this);
    };
    /**
     * @ngdoc function
     * @methodOf IndexedCache
     * @deprecated
     * @description
     * DEPRECATED AND WILL BE REMOVED!  Use IndexedCache.set instead.
     * Adds a new key to the cache if not already there with a value of the new listItem.
     * @param {object} listItem Entity to add to the cache.
     */
    IndexedCache.prototype.addEntity = function (listItem) {
        console.warn('DEPRECATED METHOD!.  addEntity method deprecited.  Please use the set method in the future to comply with ES6 Map object.');
        this.set(listItem.id, listItem);
    };
    /**
     * @ngdoc function
     * @name IndexedCache.count
     * @methodOf IndexedCache
     * @description
     * Returns the number of entities in the cache.
     * @returns {number} Number of entities in the cache.
     */
    IndexedCache.prototype.count = function () {
        return this.keys().length;
    };
    /**
     * @ngdoc function
     * @methodOf IndexedCache
     * @deprecated
     * @description
     * DEPRECATED AND WILL BE REMOVED! Use IndexedCache.delete instead of removeEntityById.
     * Removes a listItem from the cache.
     * @param {number} id ID of listItem to be removed.
     */
    IndexedCache.prototype.removeEntityById = function (id) {
        console.warn('DEPRECATED METHOD! Use IndexedCache.delete() instead of removeEntityById().');
        this.delete(id);
    };
    return IndexedCache;
}());

/** Adds a getter to base prototype wich returns  the number of key/values stored in cache. */
Object.defineProperty(IndexedCache.prototype, "size", {
    get: function () {
        return this.count();
    },
    enumerable: false,
    configurable: false
});
/**
 * @ngdoc object
 * @name angularPoint.apIndexedCacheFactory
 * @description
 * Exposes the EntityFactory prototype and a constructor to instantiate a new Entity Factory in apCacheService.
 */
var IndexedCacheFactory = (function () {
    function IndexedCacheFactory() {
        this.IndexedCache = IndexedCache;
    }
    /**
     * @ngdoc function
     * @name angularPoint.apIndexedCacheFactory:create
     * @methodOf angularPoint.apIndexedCacheFactory
     * @description
     * Instantiates and returns a new Indexed Cache.grunt
     */
    IndexedCacheFactory.prototype.create = function (overrides) {
        return new IndexedCache(overrides);
    };
    return IndexedCacheFactory;
}());



/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return FieldVersionCollection; });
/* harmony export (binding) */ __webpack_require__.d(exports, "b", function() { return FieldChangeSummary; });
/* harmony export (binding) */ __webpack_require__.d(exports, "c", function() { return VersionSummary; });
/* harmony export (binding) */ __webpack_require__.d(exports, "d", function() { return ChangeSummary; });
/* harmony export (binding) */ __webpack_require__.d(exports, "e", function() { return VersionHistoryCollection; });
/* harmony export (binding) */ __webpack_require__.d(exports, "f", function() { return ListItemVersionFactory; });
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};

/**
 * @ngdoc object
 * @name apListItemVersionFactory.FieldVersionCollection
 * @param {FieldDefinition} fieldDefinition Field definition of each version of the field added.
 * @description
 * Object that contains the entire version history for a given list item field/property.
 */
var FieldVersionCollection = (function () {
    function FieldVersionCollection(fieldDefinition) {
        this.versions = {};
        this.fieldDefinition = fieldDefinition;
    }
    /**
     * @ngdoc object
     * @name apListItemVersionFactory.FieldVersionCollection.addVersion
     * @methodOf apListItemVersionFactory.FieldVersionCollection
     * @param {IUser} editor User who made the change.
     * @param {Date} modified Date modified.
     * @param {any} value Value of the field at this version.
     * @param {number} version The version number.
     * @description
     * Used to add a single version to the collection.
     */
    FieldVersionCollection.prototype.addVersion = function (editor, modified, value, version) {
        this.versions[version] = {
            editor: editor,
            modified: modified,
            value: value,
            version: version
        };
    };
    Object.defineProperty(FieldVersionCollection.prototype, "mappedName", {
        get: function () {
            return this.fieldDefinition.mappedName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldVersionCollection.prototype, "length", {
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_0_lodash__["keys"](this.versions).length;
        },
        enumerable: true,
        configurable: true
    });
    return FieldVersionCollection;
}());

var FieldChange = (function () {
    function FieldChange(propertyName, fieldDefinition, newerVersion, previousVersion) {
        if (previousVersion === void 0) { previousVersion = {}; }
        this.fieldName = fieldDefinition.displayName;
        this.newerVersion = newerVersion;
        /** Need to set property name before calling this.getFormattedValue */
        this.propertyName = propertyName;
        this.newValue = this.getFormattedValue(newerVersion);
        this.oldValue = this.getFormattedValue(previousVersion);
        this.previousVersion = previousVersion;
    }
    FieldChange.prototype.getFormattedValue = function (version) {
        var propertyValue = '';
        if (version.getFormattedValue) {
            propertyValue = version.getFormattedValue(this.propertyName);
        }
        return propertyValue;
    };
    return FieldChange;
}());
/**
 * @ngdoc object
 * @name apListItemVersionFactory.FieldChangeSummary
 * @param {ListItem<T>} newerVersion Updated version of list item.
 * @param {ListItem<T>} [previousVersion={}] Previous version of list item.
 * @description
 * Generates a snapshot between 2 versions of a list item and locates diferences.
 */
var FieldChangeSummary = (function () {
    function FieldChangeSummary(newerVersion, previousVersion) {
        if (previousVersion === void 0) { previousVersion = {}; }
        var _this = this;
        this.fieldsChanged = {};
        /** Loop through each of the properties on the newer list item */
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](newerVersion, function (val, propertyName) {
            var fieldDefinition = newerVersion.getFieldDefinition(propertyName);
            /** Only log non-readonly fields that aren't the same */
            if (fieldDefinition && !fieldDefinition.readOnly &&
                JSON.stringify(newerVersion[propertyName]) !== JSON.stringify(previousVersion[propertyName])) {
                var fieldChange = new FieldChange(propertyName, fieldDefinition, newerVersion, previousVersion);
                if (fieldChange.newValue !== fieldChange.oldValue) {
                    /** This field has changed */
                    _this.fieldsChanged[propertyName] = fieldChange;
                }
            }
        });
        this.changeCount = __WEBPACK_IMPORTED_MODULE_0_lodash__["keys"](this.fieldsChanged).length;
    }
    Object.defineProperty(FieldChangeSummary.prototype, "hasMajorChanges", {
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_0_lodash__["isNumber"](this.changeCount) && this.changeCount > 0;
        },
        enumerable: true,
        configurable: true
    });
    return FieldChangeSummary;
}());

/**
 * @ngdoc object
 * @name apListItemVersionFactory.VersionSummary
 * @param {IListItemVersion<T>} newerVersion Updated version of list item.
 * @param {IListItemVersion<T>} [previousVersion={}] Previous version of list item.
 * @description
 * Used specifically to determine difference between 2 distinct versions of a list item using the
 * version history.  Extends FieldChangeSummary.
 */
var VersionSummary = (function (_super) {
    __extends(VersionSummary, _super);
    function VersionSummary(newerVersion, previousVersion) {
        if (previousVersion === void 0) { previousVersion = {}; }
        var _this = _super.call(this, newerVersion, previousVersion) || this;
        _this.listItemVersion = newerVersion;
        _this.version = newerVersion.version;
        return _this;
    }
    Object.defineProperty(VersionSummary.prototype, "editor", {
        get: function () {
            return this.listItemVersion.editor;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VersionSummary.prototype, "modified", {
        get: function () {
            return this.listItemVersion.modified;
        },
        enumerable: true,
        configurable: true
    });
    return VersionSummary;
}(FieldChangeSummary));

/**
 * @ngdoc object
 * @name apListItemVersionFactory.ChangeSummary
 * @param {IListItemVersions} versions Multiple versions of a list item.
 * @description
 * Used to summarize all changes for a given list item.
 */
var ChangeSummary = (function () {
    function ChangeSummary(versions) {
        var _this = this;
        /** The number of versions where list item data actually changed */
        this.significantVersionCount = 0;
        this.versionSummaryCollection = {};
        /** First version won't have a previous version */
        var previousVersion;
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](versions, function (version) {
            var versionSummary = new VersionSummary(version, previousVersion);
            if (versionSummary.hasMajorChanges) {
                _this.significantVersionCount++;
            }
            _this.versionSummaryCollection[versionSummary.version] = versionSummary;
            /** Store this version so we can compare to the next version */
            previousVersion = version;
        });
    }
    Object.defineProperty(ChangeSummary.prototype, "changes", {
        //Use getter in case we need to alter the way we store this in future
        get: function () {
            return this.versionSummaryCollection;
        },
        enumerable: true,
        configurable: true
    });
    ChangeSummary.prototype.count = function () {
        return __WEBPACK_IMPORTED_MODULE_0_lodash__["keys"](this.versionSummaryCollection).length;
    };
    ChangeSummary.prototype.toArray = function () {
        return __WEBPACK_IMPORTED_MODULE_0_lodash__["toArray"](this.versionSummaryCollection);
    };
    return ChangeSummary;
}());

var VersionHistoryCollection = (function () {
    // getFactory: () => IModelFactory;
    function VersionHistoryCollection(fieldVersionCollections, factory) {
        var _this = this;
        /** Iterate through each of the field version collections */
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](fieldVersionCollections, function (fieldVersionCollection) {
            _this.addFieldCollection(fieldVersionCollection, factory);
        });
    }
    VersionHistoryCollection.prototype.addFieldCollection = function (fieldVersionCollection, factory) {
        var _this = this;
        /** Iterate through each version of this field */
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](fieldVersionCollection.versions, function (fieldVersion, versionNumberAsString) {
            /** Create a new version object if it doesn't already exist */
            _this[versionNumberAsString] = _this[versionNumberAsString] || new factory({
                editor: fieldVersion.editor,
                modified: fieldVersion.modified,
                /** Iterating over object properties which converts everything to string so convert back */
                version: parseInt(versionNumberAsString)
            });
            /** Add field to the version history for this version with computed property name */
            _this[versionNumberAsString][fieldVersionCollection.mappedName] = fieldVersion.value;
        });
    };
    VersionHistoryCollection.prototype.count = function () {
        return __WEBPACK_IMPORTED_MODULE_0_lodash__["keys"](this).length;
    };
    VersionHistoryCollection.prototype.generateChangeSummary = function () {
        return new ChangeSummary(this);
    };
    VersionHistoryCollection.prototype.toArray = function () {
        return __WEBPACK_IMPORTED_MODULE_0_lodash__["toArray"](this);
    };
    return VersionHistoryCollection;
}());

/**
 * @ngdoc function
 * @name apListItemVersionFactory
 * @description
 * Factory which handles parsing list item versions and identifying changes.
 *
 */
var ListItemVersionFactory = (function () {
    function ListItemVersionFactory() {
        this.ChangeSummary = ChangeSummary;
        this.FieldChangeSummary = FieldChangeSummary;
        this.FieldVersionCollection = FieldVersionCollection;
        this.VersionHistoryCollection = VersionHistoryCollection;
        this.VersionSummary = VersionSummary;
    }
    return ListItemVersionFactory;
}());



/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony export (binding) */ __webpack_require__.d(exports, "b", function() { return UtilityService; });
/* harmony export (immutable) */ exports["a"] = isGuid;
/* harmony export (immutable) */ exports["c"] = isDefined;

var SplitIndex = (function () {
    function SplitIndex(str) {
        var spl = str.split(';#');
        this.id = parseInt(spl[0], 10);
        this.value = spl[1];
    }
    return SplitIndex;
}());
// var service: UtilityService, $q, $timeout;
/**
 * @ngdoc service
 * @name angularPoint.apUtilityService
 * @description
 * Provides shared utility functionality across the application.
 *
 * @requires angularPoint.apConfig
 */
var UtilityService = (function () {
    function UtilityService($q, $timeout) {
        // service = this;
        // $q = _$q_;
        // $timeout = _$timeout_;
        this.$q = $q;
        this.$timeout = $timeout;
        this.SplitIndex = SplitIndex;
        /**
         * @ngdoc function
         * @name angularPoint.apUtilityService:isGuid
         * @methodOf angularPoint.apUtilityService
         * @param {any} value Checks if value is a GUID
         * @returns {boolean} Is the value a GUID.
         */
        this.isGuid = isGuid;
    }
    /**
     * @ngdoc function
     * @name angularPoint.apUtilityService:batchProcess
     * @methodOf angularPoint.apUtilityService
     * @description
     * We REALLY don't want to lock the user's browser (blocking the UI thread) while iterating over an array of
     * entities and performing some process on them.  This function cuts the process into as many 50ms chunks as are
     * necessary. Based on example found in the following article:
     * [Timed array processing in JavaScript](http://www.nczonline.net/blog/2009/08/11/timed-array-processing-in-javascript/);
     * @param {Object[]} entities The entities that need to be processed.
     * @param {Function} process Reference to the process to be executed for each of the entities.
     * @param {Object} context this
     * @param {Number} [delay=25] Number of milliseconds to delay between batches.
     * @param {Number} [maxItems=entities.length] Maximum number of entities to process before pausing.
     * @returns {Object} Promise
     * @example
     * <pre>
     * function buildProjectSummary = function() {
             *    var deferred = $q.defer();
             *
             *    // Taken from a fictitious projectsthis.js
             *    projectModel.getAllListItems().then(function(entities) {
             *      var summaryObject = {};
             *      var extendProjectSummary = function(project) {
             *          // Do some process intensive stuff here
             *
             *      };
             *
             *      // Now that we have all of our projects we want to iterate
             *      // over each to create our summary object. The problem is
             *      // this could easily cause the page to hang with a sufficient
             *      // number of entities.
             *      apUtilitythis.batchProcess(entities, extendProjectSummary, function() {
             *          // Long running process is complete so resolve promise
             *          deferred.resolve(summaryObject);
             *      }, 25, 1000);
             *    };
             *
             *    return deferred.promise;
             * }
     *
     * </pre>
     */
    UtilityService.prototype.batchProcess = function (entities, process, context, delay, maxItems) {
        if (delay === void 0) { delay = 25; }
        var itemCount = entities.length;
        var batchCount = 0;
        var chunkMax = maxItems || itemCount;
        var index = 0;
        var deferred = this.$q.defer();
        function chunkTimer() {
            batchCount++;
            var start = +new Date();
            var chunkIndex = index;
            while (index < itemCount && (index - chunkIndex) < chunkMax && (new Date() - start < 100)) {
                process.call(context, entities[index], index, batchCount);
                index += 1;
            }
            if (index < itemCount) {
                this.$timeout(chunkTimer, delay);
            }
            else {
                deferred.resolve(entities);
            }
        }
        chunkTimer();
        return deferred.promise;
    };
    /**
     * @ngdoc function
     * @name angularPoint.apUtilityService:convertEffectivePermMask
     * @methodOf angularPoint.apUtilityService
     * @description
     * GetListItemsSinceToken operation returns the list element with an EffectivePermMask attribute which is the
     * name of the PermissionMask.  We then need to convert the name into an actual mask so this function contains
     * the known permission names with their masks.  If a provided mask name is found, the cooresponding mask
     * is returned.  Otherwise returns null.  [MSDN Source](http://msdn.microsoft.com/en-us/library/jj575178(v=office.12).aspx)
     * @param {string} permMaskName Permission mask name.
     * @returns {string|null} Return the mask for the name.
     */
    UtilityService.prototype.convertEffectivePermMask = function (permMaskName) {
        var permissionMask = null;
        var permissions = {
            //General
            EmptyMask: '0x0000000000000000',
            FullMask: '0x7FFFFFFFFFFFFFFF',
            //List and document permissions
            ViewListItems: '0x0000000000000001',
            AddListItems: '0x0000000000000002',
            EditListItems: '0x0000000000000004',
            DeleteListItems: '0x0000000000000008',
            ApproveItems: '0x0000000000000010',
            OpenItems: '0x0000000000000020',
            ViewVersions: '0x0000000000000040',
            DeleteVersions: '0x0000000000000080',
            CancelCheckout: '0x0000000000000100',
            ManagePersonalViews: '0x0000000000000200',
            ManageLists: '0x0000000000000800',
            ViewFormPages: '0x0000000000001000',
            //Web level permissions
            Open: '0x0000000000010000',
            ViewPages: '0x0000000000020000',
            AddAndCustomizePages: '0x0000000000040000',
            ApplyThemeAndBorder: '0x0000000000080000',
            ApplyStyleSheets: '0x0000000000100000',
            ViewUsageData: '0x0000000000200000',
            CreateSSCSite: '0x0000000000400000',
            ManageSubwebs: '0x0000000000800000',
            CreateGroups: '0x0000000001000000',
            ManagePermissions: '0x0000000002000000',
            BrowseDirectories: '0x0000000004000000',
            BrowseUserInfo: '0x0000000008000000',
            AddDelPrivateWebParts: '0x0000000010000000',
            UpdatePersonalWebParts: '0x0000000020000000',
            ManageWeb: '0x0000000040000000',
            UseClientIntegration: '0x0000001000000000',
            UseRemoteAPIs: '0x0000002000000000',
            ManageAlerts: '0x0000004000000000',
            CreateAlerts: '0x0000008000000000',
            EditMyUserInfo: '0x0000010000000000',
            //Special Permissions
            EnumeratePermissions: '0x4000000000000000'
        };
        if (permissions[permMaskName]) {
            permissionMask = permissions[permMaskName];
        }
        return permissionMask;
    };
    /**
     * @ngdoc function
     * @name angularPoint.apUtilityService:dateWithinRange
     * @methodOf angularPoint.apUtilityService
     * @description
     * Converts dates into yyyymmdd formatted ints and evaluates to determine if the dateToCheck
     * falls within the date range provided
     * @param {Date} startDate Starting date.
     * @param {Date} endDate Ending date.
     * @param {Date} [dateToCheck=new Date()] Defaults to the current date.
     * @returns {boolean} Does the date fall within the range?
     */
    UtilityService.prototype.dateWithinRange = function (startDate, endDate, dateToCheck) {
        if (dateToCheck === void 0) { dateToCheck = new Date(); }
        /** Ensure both a start and end date are provided **/
        if (!startDate || !endDate) {
            return false;
        }
        /** Create an int representation of each of the dates */
        var startInt = this.yyyymmdd(startDate);
        var endInt = this.yyyymmdd(endDate);
        var dateToCheckInt = this.yyyymmdd(dateToCheck);
        return startInt <= dateToCheckInt && dateToCheckInt <= endInt;
    };
    /**
     * @ngdoc function
     * @name angularPoint.apUtilityService:doubleDigit
     * @methodOf angularPoint.apUtilityService
     * @description Add a leading zero if a number/string only contains a single character.  So in the case
     * where the number 9 is passed in the string '09' is returned.
     * @param {(number|string)} val A number or string to evaluate.
     * @returns {string} Two digit string.
     */
    UtilityService.prototype.doubleDigit = function (val) {
        if (typeof val === 'number') {
            return val > 9 ? val.toString() : '0' + val;
        }
        else if (typeof val === 'string') {
            return this.doubleDigit(parseInt(val, 10));
        }
    };
    /**
     * @ngdoc function
     * @name angularPoint.apUtilityService:fromCamelCase
     * @methodOf angularPoint.apUtilityService
     * @param {string} str String to convert.
     * @description
     * Converts a camel case string into a space delimited string with each word having a capitalized first letter.
     * @returns {string} Humanized string.
     */
    UtilityService.prototype.fromCamelCase = function (str) {
        // insert a space before all caps
        return str.replace(/([A-Z])/g, ' $1')
            .replace(/^./, function (str) {
            return str.toUpperCase();
        });
    };
    /**
     * @ngdoc function
     * @name angularPoint.apUtilityService:registerChange
     * @methodOf angularPoint.apUtilityService
     * @description
     * If online and sync is being used, notify all online users that a change has been made.
     * //Todo Break this functionality into FireBase module that can be used if desired.
     * @param {object} model event
     */
    UtilityService.prototype.registerChange = function (model, changeType, listItemId) {
        /** Disabled this functionality until I can spend the necessary time to test */
        if (model.sync && __WEBPACK_IMPORTED_MODULE_0_lodash__["isFunction"](model.sync.registerChange)) {
            /** Register change after successful update */
            model.sync.registerChange(changeType, listItemId);
        }
    };
    /**
     * @ngdoc function
     * @name angularPoint.apUtilityService:resolvePermissions
     * @methodOf angularPoint.apUtilityService
     * @param {string} permissionsMask The WSS Rights Mask is an 8-byte, unsigned integer that specifies
     * the rights that can be assigned to a user or site group. This bit mask can have zero or more flags set.
     * @description
     * Converts permMask into something usable to determine permission level for current user.  Typically used
     * directly from a list item.  See ListItem.resolvePermissions.
     *
     * <h3>Additional Info</h3>
     *
     * -   [PermMask in SharePoint DVWPs](http://sympmarc.com/2009/02/03/permmask-in-sharepoint-dvwps/)
     * -   [$().SPServices.SPLookupAddNew and security trimming](http://spservices.codeplex.com/discussions/208708)
     *
     * @returns {object} Object with properties for each permission level identifying if current user has rights (true || false)
     * @example
     * <pre>
     * var perm = apUtilitythis.resolvePermissions('0x0000000000000010');
     * </pre>
     * Example of what the returned object would look like
     * for a site admin.
     * <pre>
     * perm = {
             *    "ViewListItems":true,
             *    "AddListItems":true,
             *    "EditListItems":true,
             *    "DeleteListItems":true,
             *    "ApproveItems":true,
             *    "OpenItems":true,
             *    "ViewVersions":true,
             *    "DeleteVersions":true,
             *    "CancelCheckout":true,
             *    "PersonalViews":true,
             *    "ManageLists":true,
             *    "ViewFormPages":true,
             *    "Open":true,
             *    "ViewPages":true,
             *    "AddAndCustomizePages":true,
             *    "ApplyThemeAndBorder":true,
             *    "ApplyStyleSheets":true,
             *    "ViewUsageData":true,
             *    "CreateSSCSite":true,
             *    "ManageSubwebs":true,
             *    "CreateGroups":true,
             *    "ManagePermissions":true,
             *    "BrowseDirectories":true,
             *    "BrowseUserInfo":true,
             *    "AddDelPrivateWebParts":true,
             *    "UpdatePersonalWebParts":true,
             *    "ManageWeb":true,
             *    "UseRemoteAPIs":true,
             *    "ManageAlerts":true,
             *    "CreateAlerts":true,
             *    "EditMyUserInfo":true,
             *    "EnumeratePermissions":true,
             *    "FullMask":true
             * }
     * </pre>
     */
    UtilityService.prototype.resolvePermissions = function (permissionsMask) {
        var permissionSet = {
            ViewListItems: (1 & permissionsMask) > 0,
            AddListItems: (2 & permissionsMask) > 0,
            EditListItems: (4 & permissionsMask) > 0,
            DeleteListItems: (8 & permissionsMask) > 0,
            ApproveItems: (16 & permissionsMask) > 0,
            OpenItems: (32 & permissionsMask) > 0,
            ViewVersions: (64 & permissionsMask) > 0,
            DeleteVersions: (128 & permissionsMask) > 0,
            CancelCheckout: (256 & permissionsMask) > 0,
            PersonalViews: (512 & permissionsMask) > 0,
            ManageLists: (2048 & permissionsMask) > 0,
            ViewFormPages: (4096 & permissionsMask) > 0,
            Open: (65536 & permissionsMask) > 0,
            ViewPages: (131072 & permissionsMask) > 0,
            AddAndCustomizePages: (262144 & permissionsMask) > 0,
            ApplyThemeAndBorder: (524288 & permissionsMask) > 0,
            ApplyStyleSheets: (1048576 & permissionsMask) > 0,
            ViewUsageData: (2097152 & permissionsMask) > 0,
            CreateSSCSite: (4194314 & permissionsMask) > 0,
            ManageSubwebs: (8388608 & permissionsMask) > 0,
            CreateGroups: (16777216 & permissionsMask) > 0,
            ManagePermissions: (33554432 * permissionsMask) > 0,
            BrowseDirectories: (67108864 & permissionsMask) > 0,
            BrowseUserInfo: (134217728 & permissionsMask) > 0,
            AddDelPrivateWebParts: (268435456 & permissionsMask) > 0,
            UpdatePersonalWebParts: (536870912 & permissionsMask) > 0,
            ManageWeb: (1073741824 & permissionsMask) > 0,
            UseRemoteAPIs: (137438953472 & permissionsMask) > 0,
            ManageAlerts: (274877906944 & permissionsMask) > 0,
            CreateAlerts: (549755813888 & permissionsMask) > 0,
            EditMyUserInfo: (1099511627776 & permissionsMask) > 0,
            EnumeratePermissions: (4611686018427387904 & permissionsMask) > 0,
            FullMask: (9223372036854775807 == permissionsMask)
        };
        /**
         * Full Mask only resolves correctly for the Full Mask level
         * so in that case, set everything to true
         */
        if (permissionSet.FullMask) {
            __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](permissionSet, function (perm, key) {
                permissionSet[key] = true;
            });
        }
        return permissionSet;
    };
    /**
     * @ngdoc function
     * @name angularPoint.apUtilityService:stringifyXML
     * @methodOf angularPoint.apUtilityService
     * @description Simple utility to convert an XML object into a string and remove unnecessary whitespace.
     * @param {object} xml XML object.
     * @returns {string} Stringified version of the XML object.
     */
    UtilityService.prototype.stringifyXML = function (xml) {
        var str;
        if (__WEBPACK_IMPORTED_MODULE_0_lodash__["isObject"](xml)) {
            str = this.xmlToString(xml).replace(/\s+/g, ' ');
        }
        else if (__WEBPACK_IMPORTED_MODULE_0_lodash__["isString"](xml)) {
            str = xml;
        }
        return str;
    };
    UtilityService.prototype.toCamelCase = function (str) {
        return str.replace(/(?:^\w|[A-Z]|\b\w)/g, function (letter, index) {
            return index == 0 ? letter.toLowerCase() : letter.toUpperCase();
        }).replace(/\s+/g, '');
    };
    /**
     * @ngdoc function
     * @name angularPoint.apUtilityService:yyyymmdd
     * @methodOf angularPoint.apUtilityService
     * @description
     * Convert date into a int formatted as yyyymmdd
     * We don't need the time portion of comparison so an int makes this easier to evaluate
     */
    UtilityService.prototype.yyyymmdd = function (date) {
        var yyyy = date.getFullYear();
        var mm = date.getMonth() + 1;
        var dd = date.getDate();
        /** Add leading 0's to month and day if necessary */
        return parseInt(yyyy + this.doubleDigit(mm) + this.doubleDigit(dd));
    };
    UtilityService.prototype.xmlToString = function (xmlData) {
        var xmlString;
        if (typeof XMLSerializer !== 'undefined') {
            /** Modern Browsers */
            xmlString = (new XMLSerializer()).serializeToString(xmlData);
        }
        else {
            /** Old versions of IE */
            xmlString = xmlData.xml;
        }
        return xmlString;
    };
    return UtilityService;
}());

UtilityService.$inject = ['$q', '$timeout'];
/** Extend lodash with a simple helper function */
__WEBPACK_IMPORTED_MODULE_0_lodash__["mixin"]({
    isDefined: function (value) {
        return !__WEBPACK_IMPORTED_MODULE_0_lodash__["isUndefined"](value);
    },
    /** Based on functionality in Breeze.js */
    isGuid: function (value) {
        return (typeof value === 'string') && /[a-fA-F\d]{8}-(?:[a-fA-F\d]{4}-){3}[a-fA-F\d]{12}/
            .test(value);
    }
});
/**
 * @ngdoc function
 * @name angularPoint.apUtilityService:isGuid
 * @methodOf angularPoint.apUtilityService
 * @param {any} value Checks if value is a GUID
 * @returns {boolean} Is the value a GUID.
 */
function isGuid(value) {
    return (typeof value === 'string') && /[a-fA-F\d]{8}-(?:[a-fA-F\d]{4}-){3}[a-fA-F\d]{12}/
        .test(value);
}
function isDefined(value) {
    return !__WEBPACK_IMPORTED_MODULE_0_lodash__["isUndefined"](value);
}


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return XMLFieldAttributeTypes; });
/**
 * @ngdoc object
 * @name angularPoint.apXMLListAttributeTypes
 * @description Constant object map which contains many common XML attributes found on a field definition with their
 * corresponding type.
 */
var XMLFieldAttributeTypes = {
    Decimals: 'Number',
    EnforceUniqueValues: 'Boolean',
    Filterable: 'Boolean',
    FromBaseType: 'Boolean',
    Hidden: 'Boolean',
    Indexed: 'Boolean',
    NumLines: 'Number',
    ReadOnly: 'Boolean',
    Required: 'Boolean',
    Sortable: 'Boolean'
};


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return XMLListAttributeTypes; });
/**
 * @ngdoc object
 * @name angularPoint.apXMLListAttributeTypes
 * @description Constant object map which contains many common XML attributes found on a list definition with their
 * corresponding type.
 */
var XMLListAttributeTypes = {
    BaseType: 'Number',
    ServerTemplate: 'Number',
    Created: 'DateTime',
    Modified: 'DateTime',
    LastDeleted: 'DateTime',
    Version: 'Number',
    ThumbnailSize: 'Number',
    WebImageWidth: 'Number',
    WebImageHeight: 'Number',
    Flags: 'Number',
    ItemCount: 'Number',
    ReadSecurity: 'Number',
    WriteSecurity: 'Number',
    Author: 'Number',
    MajorWithMinorVersionsLimit: 'Number',
    HasUniqueScopes: 'Boolean',
    NoThrottleListOperations: 'Boolean',
    HasRelatedLists: 'Boolean',
    AllowDeletion: 'Boolean',
    AllowMultiResponses: 'Boolean',
    EnableAttachments: 'Boolean',
    EnableModeration: 'Boolean',
    EnableVersioning: 'Boolean',
    HasExternalDataSource: 'Boolean',
    Hidden: 'Boolean',
    MultipleDataList: 'Boolean',
    Ordered: 'Boolean',
    ShowUser: 'Boolean',
    EnablePeopleSelector: 'Boolean',
    EnableResourceSelector: 'Boolean',
    EnableMinorVersion: 'Boolean',
    RequireCheckout: 'Boolean',
    ThrottleListOperations: 'Boolean',
    ExcludeFromOfflineClient: 'Boolean',
    EnableFolderCreation: 'Boolean',
    IrmEnabled: 'Boolean',
    IsApplicationList: 'Boolean',
    PreserveEmptyValues: 'Boolean',
    StrictTypeCoercion: 'Boolean',
    EnforceDataValidation: 'Boolean',
    MaxItemsPerThrottledOperation: 'Number'
};


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return CamlFactory; });

/**
 * @ngdoc function
 * @name angularPoint.apCamlFactory
 * @description
 * Tools to assist with the creation of CAML queries.
 *
 */
var CamlFactory = (function () {
    function CamlFactory() {
    }
    /**
     * @ngdoc function
     * @name angularPoint.apCamlFactory:camlContainsQuery
     * @methodOf angularPoint.apCamlFactory
     * @parameter {object[]} fieldDefinitionsArray Array of fields to search for a given search string.
     * @parameter {string} searchString String of text to search records for.
     * @description
     * Returns a combination of selectors using CAML '<Or></Or>' elements
     * @returns {string} Caml select string.
     * @example
     * <pre>
     *
     * var testHTML = {objectType: 'HTML', staticName: 'HTML'};
     * var testJSON = {objectType: 'JSON', staticName: 'JSON'};
     * var testText = {objectType: 'Text', staticName: 'Text'};
     * var testText2 = {objectType: 'Text', staticName: 'Text'};
     *
     * var testCaml = camlContainsQuery([testHTML, testText, testJSON, testText2], 'Test Query');
     * console.log(testCaml);
     *
     * //Returns
     * <Or><Contains><FieldRef Name=\"HTML\" /><Value Type=\"Text\"><![CDATA[Test Query]]>
     * </Value></Contains><Or><Contains><FieldRef Name=\"Text\" /><Value Type=\"Text\">Test Query</Value>
     * </Contains><Or><Contains><FieldRef Name=\"JSON\" /><Value Type=\"Text\"><![CDATA[Test Query]]>
     * </Value></Contains><Contains><FieldRef Name=\"Text\" /><Value Type=\"Text\">Test Query</Value>
     * </Contains></Or></Or></Or>
     * </pre>
     */
    CamlFactory.prototype.camlContainsQuery = function (fieldDefinitionsArray, searchString) {
        var _this = this;
        var selectStatements = [];
        /** Create a select statement for each field */
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](fieldDefinitionsArray, function (fieldDefinition, definitionIndex) {
            selectStatements.push(_this.createCamlContainsSelector(fieldDefinition, searchString));
        });
        return this.chainCamlSelects(selectStatements, 'And');
    };
    /**
     * @ngdoc function
     * @name angularPoint.apCamlFactory:chainCamlSelects
     * @methodOf angularPoint.apCamlFactory
     * @description
     * Used to combine multiple caml selectors into a single CAML query string wrapped properly.
     * @param {object[]} selectStatements An array of select statements to wrap in "<Or>".
     * @param {string} joinType Valid caml join type ('Or', 'And', ...).
     * @returns {string} CAML query string.
     */
    CamlFactory.prototype.chainCamlSelects = function (selectStatements, joinType) {
        var camlQuery = '';
        var camlQueryClosure = '';
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](selectStatements, function (statement, statementIndex) {
            /** Add an or clause if we still have additional fields to process */
            if (statementIndex < selectStatements.length - 1) {
                camlQuery += '<' + joinType + '>';
                camlQueryClosure = '</' + joinType + '>' + camlQueryClosure;
            }
            camlQuery += statement;
        });
        return camlQuery + camlQueryClosure;
    };
    /**
     * @ngdoc function
     * @name angularPoint.apCamlFactory:createCamlContainsSelector
     * @methodOf angularPoint.apCamlFactory
     * @description
     * Escapes characters that SharePoint gets upset about based on field type.
     * @example
     * <pre>
     * var testHTML = {objectType: 'HTML', staticName: 'HTML'};
     *
     * var testCaml = createCamlContainsSelector(testHTML, 'Test Query');
     * console.log(testCaml);
     *
     * //Returns
     * <Contains>
     *   <FieldRef Name=\"HTML\" />
     *   <Value Type=\"Text\"><![CDATA[Test Query]]></Value>
     * </Contains>
     * </pre>
     */
    CamlFactory.prototype.createCamlContainsSelector = function (fieldDefinition, searchString) {
        var camlSelector;
        switch (fieldDefinition.objectType) {
            case 'HTML':
            case 'JSON':
                camlSelector = '' +
                    '<Contains>' +
                    '<FieldRef Name="' + fieldDefinition.staticName + '" />' +
                    /** Use CDATA wrapper to escape [&, <, > ] */
                    '<Value Type="Text"><![CDATA[' + searchString + ']]></Value>' +
                    '</Contains>';
                break;
            default:
                camlSelector = '' +
                    '<Contains>' +
                    '<FieldRef Name="' + fieldDefinition.staticName + '" />' +
                    '<Value Type="Text">' + searchString + '</Value>' +
                    '</Contains>';
        }
        return camlSelector;
    };
    return CamlFactory;
}());



/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return FieldDefinition; });
/* harmony export (binding) */ __webpack_require__.d(exports, "b", function() { return FieldFactory; });

var apFieldService, apUtilityService, apFormattedFieldValueService;
/**
 * @ngdoc object
 * @name Field
 * @description
 * Defined in the MODEL.list.fieldDefinitions array.  Each field definition object maps an internal field
 * in a SharePoint list/library to a JavaScript object using the internal SharePoint field name, the field
 * type, and the desired JavaScript property name to add onto the parsed list item object. Ignore shown usage,
 * each field definition is just an object within the fieldDefinitions array.
 * @param {object} obj Field definition.
 * @param {string} obj.staticName The actual SharePoint field name.
 * @param {string} [obj.objectType='Text']
 * <dl>
 *     <dt>Boolean</dt>
 *     <dd>Used to store a TRUE/FALSE value (stored in SharePoint as 0 or 1).</dd>
 *     <dt>Calc</dt>
 *     <dd>";#" Delimited String: The first value will be the calculated column value
 *     type, the second will be the value</dd>
 *     <dt>Choice</dt>
 *     <dd>Simple text string but when processing the initial list definition, we
 *     look for a Choices XML element within the field definition and store each
 *     value.  We can then retrieve the valid Choices with one of the following:
 *     ```var fieldDefinition = LISTITEM.getFieldDefinition('CHOICE_FIELD_NAME');```
 *                                      or
 *     ```var fieldDefinition = MODELNAME.getFieldDefinition('CHOICE_FIELD_NAME');```
 *     ```var choices = fieldDefinition.Choices;```
 *     </dd>
 *     <dt>Counter</dt>
 *     <dd>Same as Integer. Generally used only for the internal ID field. Its integer
 *     value is set automatically to be unique with respect to every other item in the
 *     current list. The Counter type is always read-only and cannot be set through a
 *     form post.</dd>
 *     <dt>Currency</dt>
 *     <dd>Floating point number.</dd>
 *     <dt>DateTime</dt>
 *     <dd>Replace dashes with slashes and the "T" deliminator with a space if found.  Then
 *     converts into a valid JS date object.</dd>
 *     <dt>Float</dt>
 *     <dd>Floating point number.</dd>
 *     <dt>HTML</dt>
 *     <dd>```_.unescape(STRING)```</dd>
 *     <dt>Integer</dt>
 *     <dd>Parses the string to a base 10 int.</dd>
 *     <dt>JSON</dt>
 *     <dd>Parses JSON if valid and converts into a a JS object.  If not valid, an error is
 *     thrown with additional info on specifically what is invalid.</dd>
 *     <dt>Lookup</dt>
 *     <dd>Passes string to Lookup constructor where it is broken into an object containing
 *     a "lookupValue" and "lookupId" attribute.  Inherits additional prototype methods from
 *     Lookup.  See [Lookup](#/api/Lookup) for more information.
 *     </dd>
 *     <dt>LookupMulti</dt>
 *     <dd>Converts multiple delimited ";#" strings into an array of Lookup objects.</dd>
 *     <dt>MultiChoice</dt>
 *     <dd>Converts delimited ";#" string into an array of strings representing each of the
 *     selected choices.  Similar to the single "Choice", the XML Choices are stored in the
 *     field definition after the initial call is returned from SharePoint so we can reference
 *     later.
 *     </dd>
 *     <dt>Number</dt>
 *     <dd>Treats as a float.</dd>
 *     <dt>Text</dt>
 *     <dd>**Default** No processing of the text string from XML.</dd>
 *     <dt>User</dt>
 *     <dd>Similar to Lookup but uses the "User" prototype as a constructor to convert into a
 *     User object with "lookupId" and "lookupValue" attributes.  The lookupId is the site collection
 *     ID for the user and the lookupValue is typically the display name.
 *     See [User](#/api/User) for more information.
 *     </dd>
 *     <dt>UserMulti</dt>
 *     <dd>Parses delimited string to returns an array of User objects.</dd>
 * </dl>
 * @param {string} obj.mappedName The attribute name we'd like to use
 * for this field on the newly created JS object.
 * @param {boolean} [obj.readOnly=false] When saving, we only push fields
 * that are mapped and not read only.
 * @param {boolean} [obj.required=false] Allows us to validate the field to ensure it is valid based
 * on field type.
 * @returns {object} Field
 *
 * @requires angularPoint.apFieldFactory
 * @constructor
 */
var FieldDefinition = (function () {
    function FieldDefinition(obj) {
        this.objectType = 'Text';
        this.readOnly = false;
        __WEBPACK_IMPORTED_MODULE_0_lodash__["assign"](this, obj);
        this.displayName = this.displayName ? this.displayName : apUtilityService.fromCamelCase(this.mappedName);
        /** Deprecated internal name and replace with staticName but maintain compatibility */
        this.staticName = this.staticName || this.internalName;
    }
    /**
     * @ngdoc function
     * @name Field:getDefaultValueForType
     * @methodOf Field
     * @description
     * Can return mock data appropriate for the field type, by default it dynamically generates data but
     * the staticValue param will instead return a hard coded type specific value.
     */
    FieldDefinition.prototype.getDefaultValueForType = function () {
        return apFieldService.getDefaultValueForType(this.objectType);
    };
    /**
     * @ngdoc function
     * @name Field:getFormattedValue
     * @methodOf Field
     * @description
     * By default uses the formatted field service to convert a field value into a formatted string
     * readable by user.  Optionally can override in field definition with formatter property to return
     * custom formatted value. A good example of this would be to stringify a discussion thread.
     * @param {ListItem<any>} listItem List used to generate field value.
     * @param {object} [options] Pass through to apFormattedFieldValueService.getFormattedFieldValue.
     * @returns {string} Formatted field value suitable for outputting to user.
     * @example
     * <pre>
     *  //In model.list.customFields defining a field
     * {
         * 	  mappedName: 'lookup',
         * 	  objectType: 'Lookup',
         *    staticName: 'MyAwesomeLookup',
         * 	  formatter: (listItem: ListItem<any>, fieldDefinition: IFieldDefinition, options?: Object) => {
         * 	  	 return listItem[fieldDefinition.mappedName].lookupValue.toUpperCase();
         * 	  }
         * }
     * </pre>
     */
    FieldDefinition.prototype.getFormattedValue = function (listItem, options) {
        //Optionally provide a custom method to convert a field value into a formatted string
        return __WEBPACK_IMPORTED_MODULE_0_lodash__["isFunction"](this.formatter) ? this.formatter(listItem, this, options) :
            apFormattedFieldValueService
                .getFormattedFieldValue(listItem[this.mappedName], this.objectType, options);
    };
    /**
     * @ngdoc function
     * @name Field:getMockData
     * @methodOf Field
     * @param {object} [options] Optional params passed to apFieldService.getMockData.
     * @param {boolean} [options.staticValue=false] Default to dynamically build mock data.
     * @returns {*} mockData
     */
    FieldDefinition.prototype.getMockData = function (options) {
        return apFieldService.getMockData(this.objectType, options);
    };
    return FieldDefinition;
}());

/**
 * @ngdoc service
 * @name angularPoint.apFieldFactory
 * @description
 * Contains the Field constructor and prototype definitions.
 * @property {constructor} Field The Field constructor.
 *
 * @requires angularPoint.apFieldService
 * @requires angularPoint.apUtilityService
 *
 */
var FieldFactory = (function () {
    function FieldFactory(_apFieldService_, _apUtilityService_, _apFormattedFieldValueService_) {
        this.FieldDefinition = FieldDefinition;
        apFieldService = _apFieldService_;
        apUtilityService = _apUtilityService_;
        apFormattedFieldValueService = _apFormattedFieldValueService_;
    }
    return FieldFactory;
}());

FieldFactory.$inject = ['apFieldService', 'apUtilityService', 'apFormattedFieldValueService'];


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__apIndexedCacheFactory__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__app_module__ = __webpack_require__(1);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return ListItem; });
/* harmony export (binding) */ __webpack_require__.d(exports, "b", function() { return StandardListItem; });
/* harmony export (binding) */ __webpack_require__.d(exports, "c", function() { return ListItemFactory; });



var $q, apCacheService, apDataService, apDecodeService, apEncodeService, apUtilityService, apListItemVersionFactory, apChangeService;
/**
 * @ngdoc object
 * @name ListItem
 * @description
 * Base prototype which all list items inherit from.  All methods can be accessed through this prototype so all CRUD
 * functionality can be called directly from a given list item.
 * @constructor
 */
var ListItem = (function () {
    function ListItem() {
    }
    /**
     * @ngdoc function
     * @name ListItem.changes
     * @description
     * Checks a given list item compared to its pristine state and retuns a field change summary
     * with information on any significant changes to non-readonly fields.
     * @returns {FieldChangeSummary<T>} Change summary of all fields that have been modified
     * since last save.
     */
    ListItem.prototype.changes = function () {
        //Instantiate a copy of the original list item for comparrison
        var pristineListItem = __WEBPACK_IMPORTED_MODULE_0_lodash__["cloneDeep"](this.getPristine());
        if (!pristineListItem) {
            throw new Error('Could not retrieve a pristine version of this list item.');
        }
        //Remove id so when we instantiate we don't register in cache
        pristineListItem.id = undefined;
        //Need to instantiate using the same factory as the current list item
        var factory = this.constructor;
        var instantiatedPristineListItem = new factory(pristineListItem);
        return new apListItemVersionFactory.FieldChangeSummary(this, instantiatedPristineListItem);
    };
    /**
     * @ngdoc function
     * @name ListItem.deleteAttachment
     * @description
     * Delete an attachment from a list item.
     * @param {string} url Requires the URL for the attachment we want to delete.
     * @returns {object} Promise which resolves with the updated attachment collection.
     * @example
     * <pre>
     * $scope.deleteAttachment = function (attachment) {
         *     let confirmation = window.confirm("Are you sure you want to delete this file?");
         *     if (confirmation) {
         *         scope.listItem.deleteAttachment(attachment).then(function () {
         *             alert("Attachment successfully deleted");
         *         });
         *     }
         * };
     * </pre>
     */
    ListItem.prototype.deleteAttachment = function (url) {
        return apDataService.serviceWrapper({
            operation: 'DeleteAttachment',
            filterNode: 'Field',
            listItemID: this.id,
            url: url,
            listName: this.getListId()
        });
    };
    /**
     * @ngdoc function
     * @name ListItem.deleteItem
     * @description
     * Deletes record directly from the object and removes record from user cache.
     * @returns {object} Promise which really only lets us know the request is complete.
     * @example
     * ```
     * <ul>
     *    <li ng-repeat="task in tasks">
     *        {{task.title}} <a href ng-click="task.deleteItem()>delete</a>
     *    </li>
     * </ul>
     * ```
     * List of tasks.  When the delete link is clicked, the list item item is removed from the local cache and
     * the view is updated to no longer show the task.
     */
    ListItem.prototype.deleteItem = function () {
        var listItem = this;
        var model = listItem.getModel();
        var deferred = $q.defer();
        var config = {
            operation: 'UpdateListItems',
            listName: model.getListId(),
            batchCmd: 'Delete',
            ID: listItem.id,
            valuePairs: undefined,
            webURL: model.list.identifyWebURL()
        };
        if (__WEBPACK_IMPORTED_MODULE_0_lodash__["isFunction"](listItem.preDeleteAction) && !listItem.preDeleteAction()) {
            //preDeleteAction exists but returned false so we don't delete
            deferred.reject('Pre-Delete Action Returned False');
        }
        else {
            /** Check to see if list item or document because documents need the FileRef as well as id to delete */
            if (listItem.fileRef && listItem.fileRef.lookupValue) {
                var fileExtension = listItem.fileRef.lookupValue.split('.').pop();
                if (__WEBPACK_IMPORTED_MODULE_0_lodash__["isNaN"](fileExtension)) {
                    /** File extension instead of numeric extension so it's a document
                     * @Example
                     * Document: "Site/library/file.csv"
                     * List Item: "Site/List/5_.000"
                     * */
                    config.valuePairs = [['FileRef', listItem.fileRef.lookupValue]];
                }
            }
            apDataService.serviceWrapper(config)
                .then(function (response) {
                /** Optionally broadcast change event */
                apUtilityService.registerChange(model, 'delete', listItem.id);
                /** Success */
                apCacheService.deleteEntity(config.listName, listItem.id);
                deferred.resolve(response);
            })
                .catch(function (err) {
                //In the event of an error, display toast
                var msg = 'There was an error deleting list item ' + listItem.id + ' from ' + model.list.title +
                    ' due to the following Error: ' + err;
                deferred.reject(msg);
            });
        }
        return deferred.promise;
    };
    /**
     * @ngdoc function
     * @name ListItem.getAttachmentCollection
     * @description
     * Requests all attachments for a given list item.
     * @returns {object} Promise which resolves with all attachments for a list item.
     * @example
     * <pre>
     * //Pull down all attachments for the current list item
     * let fetchAttachments = function (listItem) {
         *     listItem.getAttachmentCollection()
         *         .then(function (attachments) {
         *             scope.attachments = attachments;
         *         });
         * };
     * </pre>
     */
    ListItem.prototype.getAttachmentCollection = function () {
        var listItem = this;
        return apDataService.getCollection({
            operation: 'GetAttachmentCollection',
            listName: listItem.getListId(),
            webURL: listItem.getList().webURL,
            ID: listItem.id,
            filterNode: 'Attachment'
        });
    };
    /**
     * @ngdoc function
     * @name ListItem.getAvailableWorkflows
     * @description
     * Wrapper for apDataService.getAvailableWorkflows.  Simply passes the current item in.
     * @returns {promise} Array of objects defining each of the available workflows.
     */
    ListItem.prototype.getAvailableWorkflows = function () {
        var listItem = this;
        return apDataService.getAvailableWorkflows(listItem.fileRef.lookupValue);
    };
    /**
     * @ngdoc function
     * @name ListItem.getChanges
     * @description
     * Wrapper for model.getListItemById.  Queries server for any changes and extends the existing
     * list item with those changes.
     * @returns {promise} Promise which resolves with the updated list item.
     */
    ListItem.prototype.getChanges = function () {
        var model = this.getModel();
        return model.getListItemById(this.id);
    };
    /**
     * @ngdoc function
     * @name ListItem.getChangeSummary
     * @description
     * Uses ListItem.getVersionHistory and determines what information changed between each list item
     * version.
     * @param {string[]} [fieldNames] An array/single string of field names on the list item to fetch a version
     * history for.
     * @returns {ng.IPromise<ChangeSummary<T>>} Promise which resolves with an array of list item versions.
     * @example
     * Assuming we have a modal form where we want to display each version of the title and project fields
     * of a given list item.
     * <pre>
     * myGenericListItem.getChangeSummary(['title', 'project'])
     *     .then(function(changeSummary: ChangeSummary) {
         *            // We now have an array of every version of these fields
         *            $ctrl.changeSummary = changeSummary;
         *      };
     * </pre>
     */
    ListItem.prototype.getChangeSummary = function (fieldNames) {
        return this.getVersionHistory(fieldNames)
            .then(function (versionHistoryCollection) { return versionHistoryCollection.generateChangeSummary(); });
    };
    /**
     * @ngdoc function
     * @name ListItem.getFieldChoices
     * @param {string} fieldName Internal field name.
     * @description
     * Uses the field definition defined in the model to attempt to find the choices array for a given Lookup or
     * MultiLookup type field.  The default value is fieldDefinition.choices which can optionally be added to a
     * given field definition.  If this isn't found, we check fieldDefinition.Choices which is populated after a
     * GetListItemsSinceToken operation or a Model.extendListMetadata operation.  Finally if that isn't available
     * we return an empty array.
     * @returns {string[]} An array of choices for a Choice or MultiChoice type field.
     */
    ListItem.prototype.getFieldChoices = function (fieldName) {
        var listItem = this;
        var fieldDefinition = listItem.getFieldDefinition(fieldName);
        return fieldDefinition.choices || fieldDefinition.Choices || [];
    };
    /**
     * @ngdoc function
     * @name ListItem.getFieldDefinition
     * @description
     * Returns the field definition from the definitions defined in the custom fields array within a model.
     * @example
     * <pre>
     * let project = {
         *    title: 'Project 1',
         *    location: {
         *        lookupId: 5,
         *        lookupValue: 'Some Building'
         *    }
         * };
     *
     * //To get field metadata
     * let locationDefinition = project.getFieldDefinition('location');
     * </pre>
     * @param {string} fieldName Internal field name.
     * @returns {object} Field definition.
     */
    ListItem.prototype.getFieldDefinition = function (fieldName) {
        var listItem = this;
        return listItem.getModel().getFieldDefinition(fieldName);
    };
    /**
     * @ngdoc function
     * @name ListItem.getFieldDescription
     * @param {string} fieldName Internal field name.
     * @description
     * Uses the field definition defined in the model to attempt to find the description for a given field.  The default
     * value is fieldDefinition.Description which is populated after a GetListItemsSinceToken operation or a
     * Model.extendListMetadata operation.  If this isn't available we look for an optional attribute of a field
     * fieldDefinition.description.  Finally if that have anything it returns an empty string.
     * @returns {string} The description for a given field object.
     */
    ListItem.prototype.getFieldDescription = function (fieldName) {
        var listItem = this;
        var fieldDefinition = listItem.getFieldDefinition(fieldName);
        return fieldDefinition.description || fieldDefinition.Description || '';
    };
    /**
     * @ngdoc function
     * @name ListItem.getFieldLabel
     * @param {string} fieldName Internal field name.
     * @description
     * Uses the field definition defined in the model to attempt to find the label for a given field.  The default
     * value is fieldDefinition.label.  If not available it will then use fieldDefinition.DisplayName which is
     * populated after a GetListItemsSinceToken operation or a Model.extendListMetadata operation.  If this isn't
     * available it will fallback to the the fieldDefinition.DisplayName which is a best guess at converting the
     * caml case version of the mapped name using apUtilityService.fromCamelCase.
     * @returns {string} The label for a given field object.
     */
    ListItem.prototype.getFieldLabel = function (fieldName) {
        var listItem = this;
        var fieldDefinition = listItem.getFieldDefinition(fieldName);
        return fieldDefinition.label || fieldDefinition.DisplayName || fieldDefinition.displayName;
    };
    /**
     * @ngdoc function
     * @name ListItem.getFormattedValue
     * @description
     * Given the attribute name on a listItem, we can lookup the field type and from there return a formatted
     * string representation of that value.
     * @param {string} fieldName Attribute name on the object that contains the value to stringify.
     * @param {object} [options] Pass through to apFormattedFieldValueService.getFormattedFieldValue or any
     * custom method specified on the field definition.
     * @returns {string} Formatted string representing the field value.
     */
    ListItem.prototype.getFormattedValue = function (fieldName, options) {
        var listItem = this;
        var fieldDefinition = listItem.getFieldDefinition(fieldName);
        if (!fieldDefinition) {
            throw new Error("A field definition for a field named " + fieldName + " wasn't found.");
        }
        return fieldDefinition.getFormattedValue(this, options);
    };
    /**
     * @ngdoc function
     * @name ListItem.getList
     * @description
     * Abstraction to allow logic in model to be used instead of defining the list location in more than one place.
     * @returns {object} List for the list item.
     */
    ListItem.prototype.getList = function () {
        var model = this.getModel();
        return model.getList();
    };
    /**
     * @ngdoc function
     * @name ListItem.getListId
     * @description
     * Allows us to reference the list ID directly from the list item.  This is added to the
     * model.factory prototype in apModelFactory.
     * @returns {string} List ID.
     */
    ListItem.prototype.getListId = function () {
        var model = this.getModel();
        return model.getListId();
    };
    /**
     * @ngdoc function
     * @name ListItem.getLookupReference
     * @description
     * Allows us to retrieve the listItem being referenced in a given lookup field.
     * @param {string} fieldName Name of the lookup property on the list item that references a listItem.
     * @param {number} [lookupId=listItem.fieldName.lookupId] The listItem.lookupId of the lookup object.  This allows us to also use this logic
     * on a multi-select by iterating over each of the lookups.
     * @example
     * <pre>
     * let project = {
         *    title: 'Project 1',
         *    location: {
         *        lookupId: 5,
         *        lookupValue: 'Some Building'
         *    }
         * };
     *
     * //To get the location listItem
     * let listItem = project.getLookupReference('location');
     * </pre>
     * @returns {object} The listItem the lookup is referencing or undefined if not in the cache.
     */
    ListItem.prototype.getLookupReference = function (fieldName, lookupId) {
        var listItem = this;
        var lookupReference;
        if (__WEBPACK_IMPORTED_MODULE_0_lodash__["isUndefined"](fieldName)) {
            throw new Error('A field name is required.');
        }
        else if (__WEBPACK_IMPORTED_MODULE_0_lodash__["isEmpty"](listItem[fieldName])) {
            lookupReference = '';
        }
        else {
            var model = listItem.getModel();
            var fieldDefinition = model.getFieldDefinition(fieldName);
            /** Ensure the field definition has the List attribute which contains the GUID of the list
             *  that a lookup is referencing. */
            if (fieldDefinition && fieldDefinition.List) {
                var targetId = lookupId || listItem[fieldName].lookupId;
                lookupReference = apCacheService.getCachedEntity(fieldDefinition.List, targetId);
            }
            else {
                throw new Error("This isn't a valid Lookup field or the field definitions need to be extended\n                        before we can complete this request.");
            }
        }
        return lookupReference;
    };
    /**
     * @ngdoc function
     * @name ListItem.getVersionHistory
     * @description
     * Takes an array of field names, finds the version history for field, and returns a snapshot of the object at each
     * version.  If no fields are provided, we look at the field definitions in the model and pull all non-readonly
     * fields.  The only way to do this that I've been able to get working is to get the version history for each
     * field independently and then build the history by combining the server responses for each requests into a
     * snapshot of the object.  Each version has the standard modified date but also includes a version property with
     * the version number.
     * @param {string[]} [properties] An array of property names on the list item
     * that we're interested in.
     * @returns {ng.IPromise<VersionHistoryCollection<T>>} Promise which resolves with an object with keys=version
     * and values = ListItemVersion.
     * @example
     * Assuming we have a modal form where we want to display each version of the title and project fields
     * of a given list item.
     * <pre>
     * myGenericListItem.getVersionHistory(['title', 'project'])
     *     .then(function(versionHistory) {
         *            // We now have an array of every version of these fields
         *            $ctrl.versionHistory = versionHistory;
         *      })
     *      .catch(function(err) {
         *          // Do something with the error
         *      });
     * </pre>
     */
    ListItem.prototype.getVersionHistory = function (properties) {
        var listItem = this;
        var model = listItem.getModel();
        var promiseArray = [];
        if (properties && !__WEBPACK_IMPORTED_MODULE_0_lodash__["isArray"](properties))
            throw new Error('Properties are required to be formatted as an array of strings.');
        if (!properties) {
            /** If fields aren't provided, pull the version history for all NON-readonly fields */
            var targetFields = model.list.fields.filter(function (field) { return field.readOnly === false; });
            properties = __WEBPACK_IMPORTED_MODULE_0_lodash__["map"](targetFields, 'mappedName');
        }
        /** Generate promises for each field */
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](properties, function (prop) {
            var promise = createPromise(prop);
            promiseArray.push(promise);
        });
        /** Pause until all requests are resolved */
        return $q.all(promiseArray)
            .then(function (fieldVersionCollections) {
            var versionHistoryCollection = new apListItemVersionFactory.VersionHistoryCollection(fieldVersionCollections, model.factory);
            return versionHistoryCollection;
        });
        /** Constructor that creates a promise for each field */
        function createPromise(prop) {
            var fieldDefinition = listItem.getFieldDefinition(prop);
            var payload = {
                operation: 'GetVersionCollection',
                strlistID: model.getListId(),
                strlistItemID: listItem.id,
                strFieldName: fieldDefinition.staticName,
                webURL: undefined
            };
            /** Manually set site url if defined, prevents SPServices from making a blocking call to fetch it. */
            // if (apConfig.defaultUrl) {
            payload.webURL = __WEBPACK_IMPORTED_MODULE_2__app_module__["ENV"].site;
            // }
            return apDataService.getFieldVersionHistory(payload, fieldDefinition);
        }
    };
    /**
     * @ngdoc function
     * @name ListItem.isPristine
     * @description
     * Determines if a list item has changed since it was instantiated.
     * @returns {boolean} The list item is unchanged.
     */
    ListItem.prototype.isPristine = function () {
        return !this.changes().hasMajorChanges;
    };
    /**
     * @ngdoc function
     * @name ListItem.prototype.registerPreDeleteAction
     * @param {Function} action Function that accepts no arguments and returns a boolean determining if delete can continue.
     * @returns {Function} Function that can be called to unregister.
     * @description
     * Register a function on the list item prototype that is executed prior to deleting.  Good use case
     * is to perform cleanup prior to deleting or determining if user can delete.  Method returns boolean and if
     * true delete will continue, otherwise delete is prevented. There is no ListItem.registerPostDeleteAction because
     * the list item no longer exists.
     *
     * @example
     * <pre>
     * //In example projectsService.ts
     *  export class Project extends ListItem<Project>{
         *      title: string;
         *      users: User[];
         *      ...some other expected attributes
         *      constructor(obj) {
         *          super(obj);
         *          _.assign(this, obj);
         *      }
         *  }
     *
     *  let unregister = Project.prototype.registerPreDeleteAction(function() {
         *      //Do some validation here and return true if user can delete
         *      //otherwise return false to prevent delete action
         *  });
     *
     *  //At some point in the future if no longer necessary
     *  unregister();
     *
     * </pre>
     */
    ListItem.prototype.registerPreDeleteAction = function (action) {
        var _this = this;
        this.preDeleteAction = action;
        //Return function to unregister
        return function () { return _this.preDeleteAction = undefined; };
    };
    /**
     * @ngdoc function
     * @name ListItem.prototype.registerPreSaveAction
     * @param {Function} action Function that accepts no arguments and returns a boolean determining is save can continue.
     * @returns {Function} Function that can be called to unregister.
     * @description
     * Register a function on the list item prototype that is executed prior to saving.  Good use case
     * is to validate list item or perform cleanup prior to saving.  Method returns boolean and if
     * true save will continue, otherwise save is prevented.
     *
     * @example
     * <pre>
     * //In example projectsService.ts
     *  export class Project extends ListItem<Project>{
         *      title: string;
         *      users: User[];
         *      ...some other expected attributes
         *      constructor(obj) {
         *          super(obj);
         *          _.assign(this, obj);
         *      }
         *  }
     *
     *  let unregister = Project.prototype.registerPreSaveAction(function() {
         *      //Do some validation here and return true if user can save
         *      //otherwise return false to prevent save action
         *  });
     *
     *  //At some point in the future if no longer necessary
     *  unregister();
     *
     * </pre>
     */
    ListItem.prototype.registerPreSaveAction = function (action) {
        var _this = this;
        this.preSaveAction = action;
        //Return function to unregister
        return function () { return _this.preSaveAction = undefined; };
    };
    /**
     * @ngdoc function
     * @name ListItem.prototype.registerPostSaveAction
     * @param {Function} action Callback function that accepts no arguments, returns nothing, and is called
     * after a list item has completed saving.
     * @returns {Function} Function that can be called to unregister.
     * @description
     * Register a function on the model prototype that is executed after saving.  Good use case
     * is to perform cleanup after save.
     *
     * @example
     * <pre>
     * //In example projectsService.ts
     *  export class Project extends ListItem<Project>{
         *      title: string;
         *      users: User[];
         *      ...some other expected attributes
         *      constructor(obj) {
         *          super(obj);
         *          _.assign(this, obj);
         *      }
         *  }
     *
     *  let unregister = Project.prototype.registerPostSaveAction(function() {
         *      //Use this method to perform any cleanup after save event
         *      //for any list item of this type
         *  });
     *
     *  //At some point in the future if no longer necessary
     *  unregister();
     *
     * </pre>
     */
    ListItem.prototype.registerPostSaveAction = function (action) {
        var _this = this;
        this.postSaveAction = action;
        //Return function to unregister
        return function () { return delete _this.postSaveAction; };
    };
    /**
     * @ngdoc function
     * @name ListItem.resolvePermissions
     * @description
     * See apModelService.resolvePermissions for details on what we expect to have returned.
     * @returns {Object} Contains properties for each permission level evaluated for current user.
     * @example
     * Lets assume we're checking to see if a user has edit rights for a given task list item.
     * <pre>
     * let canUserEdit = function(task) {
         *      let userPermissions = task.resolvePermissions();
         *      return userPermissions.EditListItems;
         * };
     * </pre>
     * Example of what the returned object would look like
     * for a site admin.
     * <pre>
     * userPermissions = {
         *    "ViewListItems": true,
         *    "AddListItems": true,
         *    "EditListItems": true,
         *    "DeleteListItems": true,
         *    "ApproveItems": true,
         *    "OpenItems": true,
         *    "ViewVersions": true,
         *    "DeleteVersions": true,
         *    "CancelCheckout": true,
         *    "PersonalViews": true,
         *    "ManageLists": true,
         *    "ViewFormPages": true,
         *    "Open": true,
         *    "ViewPages": true,
         *    "AddAndCustomizePages": true,
         *    "ApplyThemeAndBorder": true,
         *    "ApplyStyleSheets": true,
         *    "ViewUsageData": true,
         *    "CreateSSCSite": true,
         *    "ManageSubwebs": true,
         *    "CreateGroups": true,
         *    "ManagePermissions": true,
         *    "BrowseDirectories": true,
         *    "BrowseUserInfo": true,
         *    "AddDelPrivateWebParts": true,
         *    "UpdatePersonalWebParts": true,
         *    "ManageWeb": true,
         *    "UseRemoteAPIs": true,
         *    "ManageAlerts": true,
         *    "CreateAlerts": true,
         *    "EditMyUserInfo": true,
         *    "EnumeratePermissions": true,
         *    "FullMask": true
         * }
     * </pre>
     */
    ListItem.prototype.resolvePermissions = function () {
        return apUtilityService.resolvePermissions(this.permMask);
    };
    /**
     * @ngdoc function
     * @name ListItem.saveChanges
     * @description
     * Updates record directly from the object
     * @param {object} [options] Optionally pass params to the data service.
     * @param {boolean} [options.updateAllCaches=false] Search through the cache for each query to ensure listItem is
     * updated everywhere.  This is more process intensive so by default we only update the cached listItem in the
     * cache where this listItem is currently stored.
     * @returns {object} Promise which resolved with the updated list item from the server.
     * @example
     * <pre>
     * // Example of save function on a fictitious
     * // app/modules/tasks/TaskDetailsCtrl.js modal form.
     * $scope.saveChanges = function(task) {
         *      task.saveChanges().then(function() {
         *          // Successfully saved so we can do something
         *          // like close form
         *
         *          }, function() {
         *          // Failure
         *
         *          });
         * }
     * </pre>
     */
    ListItem.prototype.saveChanges = function (_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.target, target = _c === void 0 ? this.getCache ? this.getCache() : new __WEBPACK_IMPORTED_MODULE_1__apIndexedCacheFactory__["a" /* IndexedCache */]() : _c, _d = _b.valuePairs, valuePairs = _d === void 0 ? undefined : _d, _e = _b.buildValuePairs, buildValuePairs = _e === void 0 ? true : _e;
        var listItem = this;
        var model = listItem.getModel();
        var deferred = $q.defer();
        var config = {
            batchCmd: 'Update',
            buildValuePairs: buildValuePairs,
            ID: listItem.id,
            listName: model.getListId(),
            operation: 'UpdateListItems',
            target: target,
            valuePairs: valuePairs,
            webURL: model.list.identifyWebURL()
        };
        if (__WEBPACK_IMPORTED_MODULE_0_lodash__["isFunction"](listItem.preSaveAction) && !listItem.preSaveAction()) {
            //preSaveAction exists but returned false so we don't save
            deferred.reject('Pre-Save Action Returned False');
        }
        else {
            //Either no preSaveAction registered or it passed validation
            /** Redirect if the request is actually creating a new list item.  This can occur if we create
             * an empty item that is instantiated from the model and then attempt to save instead of using
             * model.addNewItem */
            if (!listItem.id) {
                return model.addNewItem(listItem, { valuePairs: valuePairs, buildValuePairs: buildValuePairs });
            }
            if (buildValuePairs === true) {
                var editableFields = __WEBPACK_IMPORTED_MODULE_0_lodash__["filter"](model.list.fields, { readOnly: false });
                config.valuePairs = apEncodeService.generateValuePairs(editableFields, listItem);
            }
            var request = apDataService.serviceWrapper(config)
                .then(function (response) {
                var indexedCache = apDecodeService.processListItems(model, listItem.getQuery(), response, config);
                //Identify updated list item
                var updatedListItem = indexedCache.get(listItem.id);
                /** Optionally broadcast change event */
                apUtilityService.registerChange(model, 'update', updatedListItem.id);
                //Optionally perform any post save cleanup if registered
                if (__WEBPACK_IMPORTED_MODULE_0_lodash__["isFunction"](listItem.postSaveAction)) {
                    listItem.postSaveAction();
                }
                ;
                //Resolve with the updated list item
                deferred.resolve(updatedListItem);
            });
            /** Notify change service to expect a request, only useful at this point when working offline */
            apChangeService.registerListItemUpdate(listItem, config, deferred.promise);
        }
        return deferred.promise;
    };
    /**
     * @ngdoc function
     * @name ListItem.saveFields
     * @description
     * Saves a named subset of fields back to SharePoint.  This is an alternative to saving all fields.
     * @param {string[]} fieldArray Array of internal field names that should be saved to SharePoint.
     * @param {object} [options] Optionally pass params to the data service.
     * @returns {object} Promise which resolves with the updated list item from the server.
     * @example
     * <pre>
     * // Example of saveFields function on a fictitious
     * // app/modules/tasks/TaskDetailsCtrl.js modal form.
     * // Similar to saveChanges but instead we only save
     * // specified fields instead of pushing everything.
     * $scope.updateStatus = function(task) {
         *      task.saveFields(['status', 'notes'])
         *          .then(function(updatedListItem) {
         *              // Successfully updated the status and
         *              // notes fields for the given task
         *
         *          })
         *          .catch(function(err) {
         *              // Failure to update the field
         *
         *          });
         * }
     * </pre>
     */
    ListItem.prototype.saveFields = function (fieldArray, _a) {
        var _b = (_a === void 0 ? {} : _a).target, target = _b === void 0 ? this.getCache ? this.getCache() : new __WEBPACK_IMPORTED_MODULE_1__apIndexedCacheFactory__["a" /* IndexedCache */]() : _b;
        var listItem = this;
        var model = listItem.getModel();
        var definitions = [];
        var fieldName;
        if (__WEBPACK_IMPORTED_MODULE_0_lodash__["isString"](fieldArray)) {
            console.warn('Field names should be an array of strings instead of a single string.  This will be deperecated.');
        }
        /** Allow a string to be passed in to save a single field */
        var fieldNames = __WEBPACK_IMPORTED_MODULE_0_lodash__["isString"](fieldArray) ? [fieldArray] : fieldArray;
        /** Find the field definition for each of the requested fields */
        for (var _i = 0, fieldNames_1 = fieldNames; _i < fieldNames_1.length; _i++) {
            var fieldName_1 = fieldNames_1[_i];
            var match = __WEBPACK_IMPORTED_MODULE_0_lodash__["find"](model.list.customFields, { mappedName: fieldName_1 });
            if (match) {
                definitions.push(match);
            }
        }
        /** Generate value pairs for specified fields */
        var valuePairs = apEncodeService.generateValuePairs(definitions, listItem);
        return this.saveChanges({
            buildValuePairs: false,
            target: target,
            valuePairs: valuePairs
        });
    };
    /**
     * @ngdoc function
     * @name ListItem.setPristine
     * @param {ListItem} [listItem] Optionally pass list item object back to the list item constructor to
     * run any initialization logic.  Otherwise we just overwrite existing values on the object with a copy from the
     * original object.
     * @description
     * Resets all list item properties back to a pristine state but doesn't update any properties added
     * manually to the list item.
     */
    ListItem.prototype.setPristine = function (listItem) {
        if (!this.id || !__WEBPACK_IMPORTED_MODULE_0_lodash__["isFunction"](this.getPristine)) {
            throw new Error('Unable to find the pristine state for this list item.');
        }
        var pristineState = this.getPristine();
        if (listItem) {
            listItem.constructor(pristineState);
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_lodash__["assign"](this, pristineState);
        }
    };
    /**
     * @ngdoc function
     * @name ListItem.startWorkflow
     * @description
     * Given a workflow name or templateId we initiate a given workflow using apDataService.startWorkflow.
     * @param {object} options Params for method and pass through options to apDataService.startWorkflow.
     * @param {string} [options.templateId] Used to directly start the workflow without looking up the templateId.
     * @param {string} [options.workflowName] Use this value to lookup the templateId and then start the workflow.
     * @returns {promise} Resolves with server response.
     */
    ListItem.prototype.startWorkflow = function (options) {
        var listItem = this, deferred = $q.defer();
        /** Set the relative file reference */
        options.fileRef = listItem.fileRef.lookupValue;
        if (!options.templateId && !options.workflowName) {
            throw new Error('Either a templateId or workflowName is required to initiate a workflow.');
        }
        else if (options.templateId) {
            /** The templateId is already provided so we don't need to look for it */
            initiateRequest();
        }
        else {
            /** We first need to get the template GUID for the workflow */
            listItem.getAvailableWorkflows()
                .then(function (workflows) {
                var targetWorklow = __WEBPACK_IMPORTED_MODULE_0_lodash__["find"](workflows, { name: options.workflowName });
                if (!targetWorklow) {
                    throw new Error("A workflow with the name " + options.workflowName + " wasn't found.  The workflows available are [" + __WEBPACK_IMPORTED_MODULE_0_lodash__["map"](workflows, 'name').toString() + "].");
                }
                /** Create an extended set of options to pass any overrides to apDataService */
                options.templateId = targetWorklow.templateId;
                initiateRequest();
            });
        }
        return deferred.promise;
        function initiateRequest() {
            apDataService.startWorkflow(options)
                .then(function (xmlResponse) {
                deferred.resolve(xmlResponse);
            });
        }
    };
    /**
     * @ngdoc function
     * @name ListItem.validateEntity
     * @description
     * Helper function that passes the current item to Model.validateEntity
     * @returns {boolean} Evaluation of validity.
     */
    ListItem.prototype.validateEntity = function () {
        var listItem = this, model = listItem.getModel();
        return model.validateEntity(listItem);
    };
    return ListItem;
}());

/** In the event that a factory isn't specified, just use a
 * standard constructor to allow it to inherit from ListItem */
var StandardListItem = (function () {
    function StandardListItem(obj) {
        __WEBPACK_IMPORTED_MODULE_0_lodash__["assign"](this, obj);
    }
    return StandardListItem;
}());

/**
 * @ngdoc object
 * @name apListItemFactory
 * @description
 * Exposes the ListItem prototype and a constructor to instantiate a new ListItem.
 * See [ListItem](#/api/ListItem) for details of the methods available on the prototype.
 *
 * @requires ListItem
 * @requires apCacheService
 * @requires apDataService
 * @requires apUtilityService
 */
var ListItemFactory = (function () {
    function ListItemFactory(_$q_, _apCacheService_, _apChangeService_, _apDataService_, _apDecodeService_, _apEncodeService_, _apUtilityService_, _apListItemVersionFactory_) {
        this.ListItem = ListItem;
        $q = _$q_;
        apCacheService = _apCacheService_;
        apChangeService = _apChangeService_;
        // apConfig = _apConfig_;
        apDataService = _apDataService_;
        apDecodeService = _apDecodeService_;
        apEncodeService = _apEncodeService_;
        apUtilityService = _apUtilityService_;
        apListItemVersionFactory = _apListItemVersionFactory_;
    }
    /**
     * @ngdoc function
     * @name apListItemFactory: create
     * @methodOf apListItemFactory
     * @description
     * Instantiates and returns a new ListItem.
     */
    ListItemFactory.prototype.create = function () {
        return new ListItem();
    };
    /**
     * @ngdoc function
     * @name apListItemFactory: createGenericFactory
     * @methodOf apListItemFactory
     * @description
     * In the event that a factory isn't specified, just use a
     * standard constructor to allow it to inherit from ListItem
     */
    ListItemFactory.prototype.createGenericFactory = function () {
        return new StandardListItem();
    };
    return ListItemFactory;
}());

ListItemFactory.$inject = ['$q', 'apCacheService', 'apChangeService', 'apDataService', 'apDecodeService', 'apEncodeService', 'apUtilityService', 'apListItemVersionFactory'];


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return Lookup; });
/* harmony export (binding) */ __webpack_require__.d(exports, "b", function() { return LookupFactory; });
var $q;
var apUtilityService;
/**
 * @ngdoc function
 * @name Lookup
 * @description
 * Allows for easier distinction when debugging if object type is shown as either Lookup or User.  Also allows us
 * to create an async request for the entity being referenced by the lookup
 * @param {string} s String to split into lookupValue and lookupId
 * @param {object} options Contains a reference to the parent list item and the property name.
 * @param {object} options.entity Reference to parent list item.
 * @param {object} options.propertyName Key on list item object.
 * @constructor
 */
var Lookup = (function () {
    function Lookup(str, options) {
        var thisLookup = new apUtilityService.SplitIndex(str);
        this.lookupId = thisLookup.id;
        this.lookupValue = thisLookup.value || '';
    }
    return Lookup;
}());

/**
 * @ngdoc function
 * @name angularPoint.apLookupFactory
 * @description
 * Tools to assist with the creation of CAML queries.
 */
var LookupFactory = (function () {
    function LookupFactory(_$q_, _apUtilityService_) {
        this.Lookup = Lookup;
        $q = _$q_;
        apUtilityService = _apUtilityService_;
    }
    /**
     * @ngdoc function
     * @name angularPoint.apLookupFactory:create
     * @methodOf angularPoint.apLookupFactory
     * @description
     * Instantiates and returns a new Lookup field.
     */
    LookupFactory.prototype.create = function (str, options) {
        return new Lookup(str, options);
    };
    return LookupFactory;
}());

LookupFactory.$inject = ['$q', 'apUtilityService'];


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__apListFactory__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__constants_apPermissionObject__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__app_module__ = __webpack_require__(1);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return Model; });
/* harmony export (binding) */ __webpack_require__.d(exports, "b", function() { return ModelFactory; });




var apCacheService, apDataService, apListFactory, apQueryFactory, apUtilityService, apFieldService, apIndexedCacheFactory, apDecodeService, apEncodeService, $q;
/**
 * @ngdoc function
 * @name Model
 * @description
 * Model Constructor
 * Provides the Following
 * - adds an empty "data" array
 * - adds an empty "queries" object
 * - adds a deferred obj "ready"
 * - builds "model.list" with constructor
 * - adds "getAllListItems" function
 * - adds "addNewItem" function
 * @param {object} config Object containing optional params.
 * @param {object} [config.factory = apListItemFactory.createGenericFactory()] - Constructor function for
 * individual list items.
 * @param {boolean} [config.fieldDefinitionsExtended=false] Queries using the GetListItemChangesSinceToken
 * operation return the full list definition along with the requested entities.  The first time one of these
 * queries is executed we will try to extend our field definitions defined in the model with the additional
 * information provided from the server.  Examples are options for a Choice field, display name of the field,
 * field description, and any other field information provided for the fields specified in the model.  This
 * flag is set once the first query is complete so we don't process again.
 * @param {object} config.list - Definition of the list in SharePoint.
 * be passed to the list constructor to extend further
 * @param {string} config.list.title - List name, no spaces.  Offline XML file will need to be
 * named the same (ex: CustomList so xml file would be apConfig.offlineXML + '/CustomList.xml')
 * @param {string} config.list.getListId() - Unique SharePoint ID (ex: '{3DBEB25A-BEF0-4213-A634-00DAF46E3897}')
 * @param {object[]} config.list.customFields - Maps SharePoint fields with names we'll use within the
 * application.  Identifies field types and formats accordingly.  Also denotes if a field is read only.
 * @constructor
 *
 * @example
 * <pre>
 * //Taken from a fictitious projectsService.ts
 *
 * export class ProjectsModel extends Model {
     *      constructor() {
     *          super({
     *              factory: Project,
     *              list: {
     *                  guid: '{PROJECT LIST GUID}',
     *                  title: 'Projects',
     *                  customFields: [
     *                      {
     *                         staticName: 'Title',
     *                         objectType: 'Text',
     *                         mappedName: 'title',
     *                         readOnly: false
     *                      },
     *                      {
     *                         staticName: 'Customer',
     *                         objectType: 'Lookup',
     *                         mappedName: 'customer',
     *                         readOnly: false
     *                      },
     *                      {
     *                         staticName: 'ProjectDescription',
     *                         objectType: 'Text',
     *                         mappedName: 'projectDescription',
     *                         readOnly: false
     *                      },
     *                      {
     *                         staticName: 'Status',
     *                         objectType: 'Text',
     *                         mappedName: 'status',
     *                         readOnly: false
     *                      },
     *                      {
     *                         staticName: 'TaskManager',
     *                         objectType: 'User',
     *                         mappedName: 'taskManager',
     *                         readOnly: false
     *                      },
     *                      {
     *                         staticName: 'ProjectGroup',
     *                         objectType: 'Lookup',
     *                         mappedName: 'group',
     *                         readOnly: false
     *                      },
     *                      {
     *                         staticName: 'CostEstimate',
     *                         objectType: 'Currency',
     *                         mappedName: 'costEstimate',
     *                         readOnly: false
     *                      },
     *                      {
     *                         staticName: 'Active',
     *                         objectType: 'Boolean',
     *                         mappedName: 'active',
     *                         readOnly: false
     *                      },
     *                      {
     *                         staticName: 'Attachments',
     *                         objectType: 'Attachments',
     *                         mappedName: 'attachments',
     *                         readOnly: true
     *                      }
     *                  ]
     *              }
     *          });
     *
     *          var model = this;
     *
     *          //Any other model setup
     *      }
     *      someExposedModelMethod() {
     *          this.dosomething...
     *      }
     *
     *   }
 * </pre>
 */
var Model = (function () {
    function Model(config) {
        var _this = this;
        this.data = [];
        this.fieldDefinitionsExtended = false;
        this.queries = {};
        /** Assign all properties of config to the model */
        __WEBPACK_IMPORTED_MODULE_0_lodash__["assign"](this, config);
        /** Allow us to reference the model directly from the list item's factory prototype */
        this.factory.prototype.getModel = function () { return _this; };
        /** Use list constructor to instantiate valid list */
        this.list = new __WEBPACK_IMPORTED_MODULE_1__apListFactory__["a" /* List */](this.list);
        /** Register cache name with cache service so we can map factory name with list GUID */
        apCacheService.registerModel(this);
        /** Convenience querys that simply returns all list items within a list. */
        this.registerQuery({
            name: '__getAllListItems',
            operation: 'GetListItems'
        });
        /** Get a single list item from a list, primarily used to quickly identify user
         *  permissions on list using the ows_PermMask property.  List items can have unique permissions
         *  so can't rely on this 100% to correctly resolve list permissions.  In the case where that is
         *  necessary you will need to use a similar query using GetListItemChangesSinceToken method which
         *  will take longer but will correctly resolve the list permissions. */
        this.registerQuery({
            name: '__sample',
            operation: 'GetListItems',
            rowLimit: 1
        });
    }
    /**
     * @ngdoc function
     * @name Model.addNewItem
     * @module Model
     * @description
     * Using the definition of a list stored in a model, create a new list item in SharePoint.
     * @param {object} entity An object that will be converted into key/value pairs based on the field definitions
     * defined in the model.
     * @param {object} [options] - Pass additional options to the data service.
     * @param {boolean} [options.buildValuePairs=true] Automatically generate pairs based on fields defined in model.
     * @param {object} [options.indexedCache=apIndexedCacheFactory.create({})] Optionally place new item in a specified cache.
     * @param {Array[]} [options.valuePairs] Precomputed value pairs to use instead of generating them for each
     * field identified in the model.
     * @returns {ng.IPromise<T>} A promise which when resolved will returned the newly created list item from there server.
     * This allows us to update the view with a valid new object that contains a unique list item id.
     *
     * @example
     * <pre>
     * <file name="app/modules/project/projectsService.js">
     * projectModel.addNewItem({
         *        title: 'A Project',
         *        customer: {lookupValue: 'My Customer', lookupId: 123},
         *        description: 'This is the project description'
         *     }).then(function(newEntityFromServer) {
         *         //The local query cache is automatically updated but
         *         //any other dependent logic can go here
         * };
     * </file>
     * </pre>
     */
    Model.prototype.addNewItem = function (entity, _a) {
        var _this = this;
        var _b = _a === void 0 ? {} : _a, _c = _b.buildValuePairs, buildValuePairs = _c === void 0 ? true : _c, _d = _b.indexedCache, indexedCache = _d === void 0 ? apIndexedCacheFactory.create({}) : _d, _e = _b.valuePairs, valuePairs = _e === void 0 ? [] : _e;
        var config = {
            batchCmd: 'New',
            buildValuePairs: buildValuePairs,
            listName: this.getListId(),
            //Method gets added onto new list item and allows access to parent cache
            getCache: function () { return indexedCache; },
            indexedCache: indexedCache,
            operation: 'UpdateListItems',
            target: indexedCache,
            valuePairs: valuePairs,
            webURL: this.list.identifyWebURL()
        };
        if (entity.id) {
            throw new Error('Cannot add a new list item that already has an ID. ' + JSON.stringify(entity, null, 2));
        }
        if (config.buildValuePairs === true) {
            var editableFields = __WEBPACK_IMPORTED_MODULE_0_lodash__["filter"](this.list.fields, { readOnly: false });
            config.valuePairs = apEncodeService.generateValuePairs(editableFields, entity);
        }
        /** Overload the function then pass anything past the first parameter to the supporting methods */
        return apDataService.serviceWrapper(config)
            .then(function (response) {
            /** Online this should return an XML object */
            var indexedCache = apDecodeService.processListItems(_this, config, response, config);
            /** Last listItem in cache is new because it has the highest id */
            var newListItem = indexedCache.last();
            /** Optionally broadcast change event */
            apUtilityService.registerChange(_this, 'create', newListItem.id);
            /** Return reference to last listItem in cache because it will have the new highest id */
            return newListItem;
        })
            .catch(function (err) {
            throw new Error('Unable to create new list item.  Err:' + err);
            // return err;
        });
    };
    /**
     * @ngdoc function
     * @name Model.createEmptyItem
     * @module Model
     * @description
     * Creates an object using the editable fields from the model, all attributes are empty based on the field
     * type unless an overrides object is passed in.  The overrides object extends the defaults.  A benefit to this
     * approach is the returned object inherits from the ListItem prototype so we have the ability to call
     * entity.saveChanges instead of calling the model.addNewItem(entity).
     *
     * @param {object} [overrides] - Optionally extend the new empty item with specific values.
     * @returns {object} Newly created list item.
     */
    Model.prototype.createEmptyItem = function (overrides) {
        var model = this;
        var newItem = {};
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](model.list.customFields, function (fieldDefinition) {
            /** Create attributes for each non-readonly field definition */
            if (!fieldDefinition.readOnly) {
                /** Create an attribute with the expected empty value based on field definition type */
                newItem[fieldDefinition.mappedName] = apFieldService.getDefaultValueForType(fieldDefinition.objectType);
            }
        });
        /** Extend any values that should override the default empty values */
        var rawObject = __WEBPACK_IMPORTED_MODULE_0_lodash__["assign"]({}, newItem, overrides);
        return new model.factory(rawObject);
    };
    /**
     * @ngdoc function
     * @name Model.executeQuery
     * @module Model
     * @description
     * The primary method for retrieving data from a query registered on a model.  It returns a promise
     * which resolves to the local cache after post processing entities with constructors.
     *
     * @param {string} [queryName=apConfig.defaultQueryName] A unique key to identify this query
     * @param {object} [options] Pass options to the data service.
     * @returns {object} Promise that when resolves returns an array of list items which inherit from ListItem and
     * optionally go through a defined constructor on the model.
     *
     * @example To call the query or check for changes since the last call.
     * <pre>
     * projectModel.executeQuery('MyCustomQuery').then(function(entities) {
         *      //We now have a reference to array of entities stored in the local cache
         *      //These inherit from the ListItem prototype as well as the Project prototype on the model
         *      $scope.subsetOfProjects = entities;
         *  });
     * </pre>
     */
    Model.prototype.executeQuery = function (queryName, options) {
        var model = this;
        var query = model.getQuery(queryName);
        if (query) {
            return query.execute(options);
        }
    };
    /**
     * @ngdoc function
     * @name Model.extendListMetadata
     * @module Model
     * @description
     * Extends the List and Fields with list information returned from the server.  Only runs once and after that
     * returns the existing promise.
     * @returns {ng.IPromise<Model>} Promise that is resolved with the extended model.
     */
    Model.prototype.extendListMetadata = function () {
        var model = this, deferred = $q.defer();
        /** Only request information if the list hasn't already been extended and is not currently being requested */
        if (!model.deferredListDefinition) {
            /** All Future Requests get this */
            model.deferredListDefinition = deferred.promise;
            var getListAction = apDataService.getList({
                listName: model.getListId(),
                webURL: model.getList().webURL
            });
            /** We can potentially have 2 seperate requests for data so store them in array so we can wait until
             * all are resolved. */
            var promiseArray = [getListAction];
            /** Add a request for a sample list item to the server requests if we haven't
             * already resolved user permissions for the list. */
            if (!model.getList().permissions) {
                /** Permissions not set yet, when the query is resolved with a sample list item
                 * the query class will use the permMask from the list item to set the temp permissions
                 * for the list until a time where we can run a GetListItemChangesSinceToken request and
                 * set the actual permissions. */
                promiseArray.push(model.executeQuery('__sample'));
            }
            $q.all(promiseArray)
                .then(function (resolvedPromises) {
                apDecodeService.extendListMetadata(model, resolvedPromises[0]);
                deferred.resolve(model);
            });
        }
        return model.deferredListDefinition;
    };
    /**
     * @ngdoc function
     * @name Model.generateMockData
     * @module Model
     * @description
     * Generates 'n' mock records for testing using the field types defined in the model to provide something to visualize.
     *
     * @param {object} [options] Object containing optional parameters.
     * @param {number} [options.quantity=10] The requested number of mock records to return.
     * @param {string} [options.permissionLevel=FullMask] Sets the mask on the mock records to simulate desired
     * permission level.
     * @param {boolean} [options.staticValue=false] By default all mock data is dynamically created but if set,
     * this will cause static data to be used instead.
     */
    Model.prototype.generateMockData = function (options) {
        var mockData = [], model = this;
        var defaults = {
            quantity: 10,
            staticValue: false,
            permissionLevel: 'FullMask'
        };
        /** Extend defaults with any provided options */
        var opts = __WEBPACK_IMPORTED_MODULE_0_lodash__["assign"]({}, defaults, options);
        __WEBPACK_IMPORTED_MODULE_0_lodash__["times"](opts.quantity, function (count) {
            var mock = {
                id: count + 1
            };
            /** Create an attribute with mock data for each field */
            __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](model.list.fields, function (field) {
                mock[field.mappedName] = field.getMockData(opts);
            });
            /** Use the factory on the model to extend the object */
            mockData.push(new model.factory(mock));
        });
        return mockData;
    };
    /**
     * @ngdoc function
     * @name Model.getAllListItems
     * @module Model
     * @description
     * Inherited from Model constructor
     * Gets all list items in the current list, processes the xml, and caches the data in model.
     * @returns {object} Promise returning all list items when resolved.
     * @example
     * <pre>
     * //Taken from a fictitious projectsService.js
     * projectModel.getAllListItems().then(function(entities) {
         *     //Do something with all of the returned entities
         *     $scope.projects = entities;
         * };
     * </pre>
     */
    Model.prototype.getAllListItems = function () {
        var model = this;
        return model.executeQuery('__getAllListItems');
    };
    /**
     * @ngdoc function
     * @name Model.getCache
     * @module Model
     * @description
     * Helper function that return the local cache for a named query if provided, otherwise
     * it returns the cache for the primary query for the model.  Useful if you know the query
     * has already been resolved and there's no need to check SharePoint for changes.
     *
     * @param {string} [queryName=apConfig.defaultQueryName] A unique key to identify this query.
     * @returns {IndexedCache<T>} Returns the contents of the current cache for a named query.
     *
     * @example
     * <pre>
     * var primaryQueryCache = projectModel.getCache();
     * </pre>
     *
     * <pre>
     * var primaryQueryCache = projectModel.getCache('primary');
     * </pre>
     *
     * <pre>
     * var namedQueryCache = projectModel.getCache('customQuery');
     * </pre>
     */
    Model.prototype.getCache = function (queryName) {
        var model = this, query, cache;
        query = model.getQuery(queryName);
        if (query && query.indexedCache) {
            cache = query.indexedCache;
        }
        return cache;
    };
    /**
     * @ngdoc function
     * @name Model.getCachedEntities
     * @module Model
     * @description
     * Returns all entities registered for this model regardless of query.
     * @returns {IndexedCache<T>} All registered entities for this model.
     */
    Model.prototype.getCachedEntities = function () {
        var model = this;
        return apCacheService.getCachedEntities(model.getListId());
    };
    /**
     * @ngdoc function
     * @name Model.getCachedEntity
     * @module Model
     * @description
     * Attempts to locate a model listItem by id.
     * @param {number} listItemId The ID of the requested listItem.
     * @returns {object} Returns either the requested listItem or undefined if it's not found.
     */
    Model.prototype.getCachedEntity = function (listItemId) {
        var model = this;
        return apCacheService.getCachedEntity(model.getListId(), listItemId);
    };
    /**
     * @ngdoc function
     * @name Model.getFieldDefinition
     * @module Model
     * @description
     * Returns the field definition from the definitions defined in the custom fields array within a model.
     * <pre>
     * var project = {
         *    title: 'Project 1',
         *    location: {
         *        lookupId: 5,
         *        lookupValue: 'Some Building'
         *    }
         * };
     *
     * //To get field metadata
     * var locationDefinition = projectsService.getFieldDefinition('location');
     * </pre>
     * @param {string} fieldName Internal field name.
     * @returns {object} Field definition.
     */
    Model.prototype.getFieldDefinition = function (fieldName) {
        var model = this;
        return __WEBPACK_IMPORTED_MODULE_0_lodash__["find"](model.list.fields, { mappedName: fieldName });
    };
    /**
     * @ngdoc function
     * @name ListItem.getList
     * @description
     * Allows us to reference the list definition directly from the list item.  This is added to the
     * model.factory prototype in apModelFactory.  See the [List](#/api/List) documentation for more info.
     * @returns {object} List for the list item.
     */
    Model.prototype.getList = function () {
        return this.list;
    };
    /**
     * @ngdoc function
     * @name ListItem.getListId
     * @description
     * Allows us to reference the list ID directly from the model.
     * @returns {string} List ID.
     */
    Model.prototype.getListId = function () {
        return this.getList().getListId();
    };
    /**
     * @ngdoc function
     * @name Model.getListItemById
     * @param {number} listItemId Id of the item being requested.
     * @param {object} options Used to override apDataService defaults.
     * @description
     * Inherited from Model constructor
     * Attempts to retrieve the requested list item from the server.
     * @returns {object} Promise that resolves with the requested list item if found.  Otherwise it returns undefined.
     * @example
     * <pre>
     * //Taken from a fictitious projectsService.js
     * projectModel.getListItemById(12).then(function(listItem) {
         *     //Do something with the located listItem
         *     $scope.project = listItem;
         * };
     * </pre>
     */
    Model.prototype.getListItemById = function (listItemId, options) {
        var model = this, 
        /** Unique Query Name */
        queryKey = 'GetListItemById-' + listItemId;
        /** Register a new Query if it doesn't already exist */
        if (!model.getQuery(queryKey)) {
            var defaults = {
                name: queryKey,
                operation: 'GetListItems',
                rowLimit: 1,
                CAMLQuery: '' +
                    '<Query>' +
                    ' <Where>' +
                    '   <Eq>' +
                    '     <FieldRef Name="ID"/>' +
                    '     <Value Type="Number">' + listItemId + '</Value>' +
                    '   </Eq>' +
                    ' </Where>' +
                    '</Query>'
            };
            /** Allows us to override defaults */
            var opts = __WEBPACK_IMPORTED_MODULE_0_lodash__["assign"]({}, defaults, options);
            model.registerQuery(opts);
        }
        return model.executeQuery(queryKey)
            .then(function (indexedCache) {
            /** Should return an indexed cache object with a single listItem so just return the requested listItem */
            return indexedCache.first();
        });
    };
    /**
     * @ngdoc function
     * @name ListItem.getModel
     * @description
     * Allows us to reference the parent model directly from the list item.  This is added to the
     * model.factory prototype in apModelFactory.  See the [List](#/api/List) documentation for more info.
     * @returns {object} Model for the list item.
     */
    Model.prototype.getModel = function () {
        return this;
    };
    /**
     * @ngdoc function
     * @name Model.getQuery
     * @module Model
     * @description
     * Helper function that attempts to locate and return a reference to the requested or catchall query.
     * @param {string} [queryName=apConfig.defaultQueryName] A unique key to identify this query.
     * @returns {object} See Query prototype for additional details on what a Query looks like.
     *
     * @example
     * <pre>
     * var primaryQuery = projectModel.getQuery();
     * </pre>
     *
     * <pre>
     * var primaryQuery = projectModel.getQuery('primary');
     * </pre>
     *
     * <pre>
     * var namedQuery = projectModel.getQuery('customQuery');
     * </pre>
     */
    Model.prototype.getQuery = function (queryName) {
        var model = this, query;
        if (__WEBPACK_IMPORTED_MODULE_0_lodash__["isObject"](model.queries[queryName])) {
            /** The named query exists */
            query = model.queries[queryName];
        }
        else if (__WEBPACK_IMPORTED_MODULE_0_lodash__["isObject"](model.queries[__WEBPACK_IMPORTED_MODULE_3__app_module__["ENV"].defaultQueryName]) && !queryName) {
            /** A named query wasn't specified and the catchall query exists */
            query = model.queries[__WEBPACK_IMPORTED_MODULE_3__app_module__["ENV"].defaultQueryName];
        }
        else {
            /** Requested query not found */
            query = undefined;
        }
        return query;
    };
    /**
     * @ngdoc function
     * @name Model.isInitialised
     * @module Model
     * @description
     * Methods which allows us to easily determine if we've successfully made any queries this session.
     * @returns {boolean} Returns evaluation.
     */
    Model.prototype.isInitialised = function () {
        var model = this;
        return __WEBPACK_IMPORTED_MODULE_0_lodash__["isDate"](model.lastServerUpdate);
    };
    /**
     * @ngdoc function
     * @name Model.registerQuery
     * @module Model
     * @description
     * Constructor that allows us create a static query with the option to build dynamic queries as seen in the
     * third example.  This construct is a passthrough to [SPServices](http: //spservices.codeplex.com/)
     * @param {object} queryOptions Initialization parameters.
     * @param {boolean} [queryOptions.force=false] Ignore cached data and force server query.
     * @param {number} [queryOptions.listItemID] Optionally request for a single list item by id.
     * @param {boolean} [queryOptions.localStorage=false] Should we store data from this query in local storage to speed up requests in the future.
     * @param {number} [queryOptions.localStorageExpiration=86400000] Set expiration in milliseconds - Defaults to a day
     * and if set to 0 doesn't expire.  Can be updated globally using apConfig.localStorageExpiration.
     * @param {string} [queryOptions.name=primary] The name that we use to identify this query.
     * @param {string} [queryOptions.operation=GetListItemChangesSinceToken] Optionally use 'GetListItems' to
     * receive a more efficient response, just don't have the ability to check for changes since the last time
     * the query was called. Defaults to [GetListItemChangesSinceToken](http://msdn.microsoft.com/en-us/library/lists.lists.getlistitemchangessincetoken%28v=office.12%29.aspx)
     * but for a smaller payload and faster response you can use [GetListItems](http: //spservices.codeplex.com/wikipage?title=GetListItems&referringTitle=Lists).
     * @param {string} [queryOptions.query=Ordered ascending by ID] CAML query passed to SharePoint to control
     * the data SharePoint returns. Josh McCarty has a good quick reference [here](http: //joshmccarty.com/2012/06/a-caml-query-quick-reference).
     * @param {string} [queryOptions.queryOptions] SharePoint options xml as string.
     * <pre>
     * <QueryOptions>
     *    <IncludeMandatoryColumns>FALSE</IncludeMandatoryColumns>
     *    <IncludeAttachmentUrls>TRUE</IncludeAttachmentUrls>
     *    <IncludeAttachmentVersion>FALSE</IncludeAttachmentVersion>
     *    <ExpandUserField>FALSE</ExpandUserField>
     * </QueryOptions>
     * </pre>
     * @param {string} [queryOptions.rowLimit] The number of list items to return, 0 returns all list items.
     * @param {boolean} [queryOptions.runOnce] Pertains to GetListItems only, optionally run a single time and return initial value for all future
     * calls.  Works well with data that isn't expected to change throughout the session but unlike localStorage or sessionStorage
     * the data doesn't persist between sessions.
     * @param {boolean} [queryOptions.sessionStorage=false] Use the browsers sessionStorage to cache the list items and uses the
     * queryOptions.localStorageExpiration param to validate how long the cache is good for.
     * @param {string} [queryOptions.viewFields] XML as string that specifies fields to return.
     * @param {string} [queryOptions.webURL] Used to override the default URL if list is located somewhere else.
     * @returns {object} Query Returns a new query object.
     *
     * @example
     * <h4>Example #1</h4>
     * <pre>
     * // Query to retrieve the most recent 25 modifications
     * model.registerQuery({
        *    name: 'recentChanges',
        *    rowLimit: 25,
        *    query: '' +
        *        '<Query>' +
        *        '   <OrderBy>' +
        *        '       <FieldRef Name="Modified" Ascending="FALSE"/>' +
        *        '   </OrderBy>' +
        *            //Prevents any records from being returned if user doesn't
        *            // have permissions on project
        *        '   <Where>' +
        *        '       <IsNotNull>' +
        *        '           <FieldRef Name="Project"/>' +
        *        '       </IsNotNull>' +
        *        '   </Where>' +
        *        '</Query>'
        * });
     * </pre>
     *
     * <h4>Example #2</h4>
     * <pre>
     * // Could be placed on the projectModel and creates the query but doesn't
     * // call it.  Uses the session cache to make the initial call faster.
     * projectModel.registerQuery({
        *     name: 'primary',
        *     sessionCache: true,
        *     //Set an expiration value of 8 hours rather than use the default of 24
        *     localStorageExpiration: 28800000,
        *     query: '' +
        *         '<Query>' +
        *         '   <OrderBy>' +
        *         '       <FieldRef Name="Title" Ascending="TRUE"/>' +
        *         '   </OrderBy>' +
        *         '</Query>'
        * });
     *
     * //To call the query or check for changes since the last call
     * projectModel.executeQuery('primary')
     *   .then((entities) => {
        *     // We now have a reference to array of entities stored in the local
        *     // cache.  These inherit from the ListItem prototype as well as the
        *     // Project prototype on the model
        *     $ctrl.projects = entities;
        *   })
     *   .catch((err) => {
        *       //Handle error
        *   })
     * </pre>
     *
     * <h4>Example #3</h4>
     * <pre>
     * // Advanced functionality that would allow us to dynamically create
     * // queries for list items with a lookup field associated with a specific
     * // project id.  Let's assume this is on the projectTasksModel.
     * model.queryByProjectId(projectId) {
        *     // Unique query name
        *     var queryKey = 'pid' + projectId;
        *
        *     // Register project query if it doesn't exist
        *     if (!_.isObject(model.queries[queryKey])) {
        *         model.registerQuery({
        *             name: queryKey,
        *             query: '' +
        *                 '<Query>' +
        *                 '   <OrderBy>' +
        *                 '       <FieldRef Name="ID" Ascending="TRUE"/>' +
        *                 '   </OrderBy>' +
        *                 '   <Where>' +
        *                 '       <And>' +
        *                              // Prevents any records from being returned
        *                              //if user doesn't have permissions on project
        *                 '           <IsNotNull>' +
        *                 '               <FieldRef Name="Project"/>' +
        *                 '           </IsNotNull>' +
        *                              // Return all records for the project matching
        *                              // param projectId
        *                 '           <Eq>' +
        *                 '               <FieldRef Name="Project" LookupId="TRUE"/>' +
        *                 '               <Value Type="Lookup">' + projectId + '</Value>' +
        *                 '           </Eq>' +
        *                 '       </And>' +
        *                 '   </Where>' +
        *                 '</Query>'
        *         });
        *     }
        *     //Still using execute query but now we have a custom query
        *     return model.executeQuery(queryKey);
        * };
     * </pre>
     */
    Model.prototype.registerQuery = function (queryOptions) {
        var model = this;
        var defaults = {
            /** If name isn't set, assume this is the only model and designate as primary */
            name: __WEBPACK_IMPORTED_MODULE_3__app_module__["ENV"].defaultQueryName
        };
        queryOptions = __WEBPACK_IMPORTED_MODULE_0_lodash__["assign"]({}, defaults, queryOptions);
        model.queries[queryOptions.name] = apQueryFactory.create(queryOptions, model);
        /** Return the newly created query */
        return model.queries[queryOptions.name];
    };
    /**
     * @ngdoc function
     * @name Model.resolvePermissions
     * @module Model
     * @description
     * See apModelFactory.resolvePermissions for details on what we expect to have returned.
     * @returns {Object} Contains properties for each permission level evaluated for current user.
     * @example
     * Lets assume we're checking to see if a user has edit rights for a given list.
     * <pre>
     * var userPermissions = tasksModel.resolvePermissions();
     * var userCanEdit = userPermissions.EditListItems;
     * </pre>
     * Example of what the returned object would look like
     * for a site admin.
     * <pre>
     * perm = {
            *    "ViewListItems": true,
            *    "AddListItems": true,
            *    "EditListItems": true,
            *    "DeleteListItems": true,
            *    "ApproveItems": true,
            *    "OpenItems": true,
            *    "ViewVersions": true,
            *    "DeleteVersions": true,
            *    "CancelCheckout": true,
            *    "PersonalViews": true,
            *    "ManageLists": true,
            *    "ViewFormPages": true,
            *    "Open": true,
            *    "ViewPages": true,
            *    "AddAndCustomizePages": true,
            *    "ApplyThemeAndBorder": true,
            *    "ApplyStyleSheets": true,
            *    "ViewUsageData": true,
            *    "CreateSSCSite": true,
            *    "ManageSubwebs": true,
            *    "CreateGroups": true,
            *    "ManagePermissions": true,
            *    "BrowseDirectories": true,
            *    "BrowseUserInfo": true,
            *    "AddDelPrivateWebParts": true,
            *    "UpdatePersonalWebParts": true,
            *    "ManageWeb": true,
            *    "UseRemoteAPIs": true,
            *    "ManageAlerts": true,
            *    "CreateAlerts": true,
            *    "EditMyUserInfo": true,
            *    "EnumeratePermissions": true,
            *    "FullMask": true
            * }
     * </pre>
     */
    Model.prototype.resolvePermissions = function () {
        var model = this, list = model.getList();
        if (list && list.permissions) {
            /** If request has been made to GetListItemChangesSinceToken we have already stored the
             * permission for this list. */
            return list.permissions;
        }
        else if (model.getCachedEntities().first()) {
            /** Next option is to use the same permission as one of the
             * already cached list items for this model. */
            return list.extendPermissionsFromListItem(model.getCachedEntities().first());
        }
        else {
            window.console.error('Attempted to resolve permissions of a model that hasn\'t been initialized.', model);
            return new __WEBPACK_IMPORTED_MODULE_2__constants_apPermissionObject__["a" /* BasePermissionObject */]();
        }
    };
    /**
     * @ngdoc function
     * @name Model.validateEntity
     * @module Model
     * @description
     * Uses the custom fields defined in an model to ensure each field (required = true) is evaluated
     * based on field type
     * @param {object} listItem SharePoint list item.
     * @returns {boolean} Evaluation of validity.
     */
    Model.prototype.validateEntity = function (listItem) {
        var valid = true, model = this;
        var checkObject = function (fieldValue) {
            return __WEBPACK_IMPORTED_MODULE_0_lodash__["isObject"](fieldValue) && __WEBPACK_IMPORTED_MODULE_0_lodash__["isNumber"](fieldValue.lookupId);
        };
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](model.list.customFields, function (fieldDefinition) {
            var fieldValue = listItem[fieldDefinition.mappedName];
            var fieldDescriptor = '"' + fieldDefinition.objectType + '" value.';
            /** Only evaluate required fields */
            if ((fieldDefinition.required || fieldDefinition.Required) && valid) {
                switch (fieldDefinition.objectType) {
                    case 'Boolean':
                        valid = __WEBPACK_IMPORTED_MODULE_0_lodash__["isBoolean"](fieldValue);
                        break;
                    case 'DateTime':
                        valid = __WEBPACK_IMPORTED_MODULE_0_lodash__["isDate"](fieldValue);
                        break;
                    case 'Lookup':
                    case 'User':
                        valid = checkObject(fieldValue);
                        break;
                    case 'LookupMulti':
                    case 'UserMulti':
                        /** Ensure it's a valid array containing objects */
                        valid = __WEBPACK_IMPORTED_MODULE_0_lodash__["isArray"](fieldValue) && fieldValue.length > 0;
                        if (valid) {
                            /** Additionally check that each lookup/person contains a lookupId */
                            __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](fieldValue, function (fieldObject) {
                                if (valid) {
                                    valid = checkObject(fieldObject);
                                }
                                else {
                                    /** Short circuit */
                                    return false;
                                }
                            });
                        }
                        break;
                    default:
                        /** Evaluate everything else as a string */
                        valid = !__WEBPACK_IMPORTED_MODULE_0_lodash__["isEmpty"](fieldValue);
                }
            }
            if (!valid) {
                return false;
            }
        });
        return valid;
    };
    return Model;
}());

var ModelFactory = (function () {
    function ModelFactory(_$q_, _apCacheService_, _apDataService_, _apDecodeService_, _apEncodeService_, _apFieldService_, _apIndexedCacheFactory_, _apListFactory_, _apQueryFactory_, _apUtilityService_) {
        this.Model = Model;
        $q = _$q_;
        apCacheService = _apCacheService_;
        apDataService = _apDataService_;
        apDecodeService = _apDecodeService_;
        apEncodeService = _apEncodeService_;
        apFieldService = _apFieldService_;
        apIndexedCacheFactory = _apIndexedCacheFactory_;
        apListFactory = _apListFactory_;
        apQueryFactory = _apQueryFactory_;
        apUtilityService = _apUtilityService_;
    }
    ModelFactory.prototype.create = function (config) {
        return new Model(config);
    };
    return ModelFactory;
}());

ModelFactory.$inject = ['$q', 'apCacheService', 'apDataService', 'apDecodeService', 'apEncodeService', 'apFieldService', 'apIndexedCacheFactory', 'apListFactory', 'apQueryFactory', 'apUtilityService'];


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__constants_apDefaultListItemQueryOptions__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__app_module__ = __webpack_require__(1);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return LocalStorageQuery; });
/* harmony export (binding) */ __webpack_require__.d(exports, "b", function() { return Query; });
/* harmony export (binding) */ __webpack_require__.d(exports, "c", function() { return QueryFactory; });



var $q, apIndexedCacheFactory, apDefaultListItemQueryOptions, apDataService, apDecodeService, apLogger;
var LocalStorageQuery = (function () {
    function LocalStorageQuery(key, stringifiedQuery) {
        this.key = key;
        var parsedQuery = JSON.parse(stringifiedQuery);
        __WEBPACK_IMPORTED_MODULE_0_lodash__["assign"](this, parsedQuery);
        this.lastRun = new Date(parsedQuery.lastRun);
    }
    LocalStorageQuery.prototype.hasExpired = function (localStorageExpiration) {
        if (localStorageExpiration === void 0) { localStorageExpiration = __WEBPACK_IMPORTED_MODULE_2__app_module__["ENV"].localStorageExpiration; }
        var hasExpired = true;
        if (__WEBPACK_IMPORTED_MODULE_0_lodash__["isNaN"](localStorage)) {
            throw new Error('Local storage expiration is required to be a numeric value and instead is ' + localStorageExpiration);
        }
        else if (localStorageExpiration === 0) {
            //No expiration
            hasExpired = false;
        }
        else {
            //Evaluate if cache has exceeded expiration
            hasExpired = this.lastRun.getMilliseconds() + localStorageExpiration <= new Date().getMilliseconds();
        }
        return hasExpired;
    };
    LocalStorageQuery.prototype.removeItem = function () {
        localStorage.removeItem(this.key);
    };
    return LocalStorageQuery;
}());

/**
 * @ngdoc function
 * @name Query
 * @description
 * Primary constructor that all queries inherit from. This object is a passthrough to [SPServices](http: //spservices.codeplex.com/).  All
 * options to passed through to [dataService.executeQuery](#/api/dataService.executeQuery).
 * @param {object} queryOptions Initialization parameters.
 * @param {boolean} [queryOptions.force=false] Ignore cached data and force server query.
 * @param {number} [queryOptions.listItemID] Optionally request for a single list item by id.
 * @param {boolean} [queryOptions.localStorage=false] Should we store data from this query in local storage to speed up requests in the future.
 * @param {number} [queryOptions.localStorageExpiration=86400000] Set expiration in milliseconds - Defaults to a day
 * and if set to 0 doesn't expire.  Can be updated globally using apConfig.localStorageExpiration.
 * @param {string} [queryOptions.name=primary] The name that we use to identify this query.
 * @param {string} [queryOptions.operation=GetListItemChangesSinceToken] Optionally use 'GetListItems' to
 * receive a more efficient response, just don't have the ability to check for changes since the last time
 * the query was called. Defaults to [GetListItemChangesSinceToken](http://msdn.microsoft.com/en-us/library/lists.lists.getlistitemchangessincetoken%28v=office.12%29.aspx)
 * but for a smaller payload and faster response you can use [GetListItems](http: //spservices.codeplex.com/wikipage?title=GetListItems&referringTitle=Lists).
 * @param {string} [queryOptions.query=Ordered ascending by ID] CAML query passed to SharePoint to control
 * the data SharePoint returns. Josh McCarty has a good quick reference [here](http: //joshmccarty.com/2012/06/a-caml-query-quick-reference).
 * @param {string} [queryOptions.queryOptions] SharePoint options xml as string.
 * <pre>
 * <QueryOptions>
 *    <IncludeMandatoryColumns>FALSE</IncludeMandatoryColumns>
 *    <IncludeAttachmentUrls>TRUE</IncludeAttachmentUrls>
 *    <IncludeAttachmentVersion>FALSE</IncludeAttachmentVersion>
 *    <ExpandUserField>FALSE</ExpandUserField>
 * </QueryOptions>
 * </pre>
 * @param {string} [queryOptions.rowLimit] The number of list items to return, 0 returns all list items.
 * @param {boolean} [queryOptions.runOnce] Pertains to GetListItems only, optionally run a single time and return initial value for all future
 * calls.  Works well with data that isn't expected to change throughout the session but unlike localStorage or sessionStorage
 * the data doesn't persist between sessions.
 * @param {boolean} [queryOptions.sessionStorage=false] Use the browsers sessionStorage to cache the list items and uses the
 * queryOptions.localStorageExpiration param to validate how long the cache is good for.
 * @param {string} [queryOptions.viewFields] XML as string that specifies fields to return.
 * @param {string} [queryOptions.webURL] Used to override the default URL if list is located somewhere else.
 * @param {object} model Reference to the parent model for the query.  Allows us to reference when out of
 * scope.
 * @example
 * <pre>
 * // Query to retrieve the most recent 25 modifications
 * model.registerQuery({
     *    name: 'recentChanges',
     *    rowLimit: 25,
     *    query: '' +
     *        '<Query>' +
     *        '   <OrderBy>' +
     *        '       <FieldRef Name="Modified" Ascending="FALSE"/>' +
     *        '   </OrderBy>' +
     *            // Prevents any records from being returned if user
     *            // doesn't have permissions on project
     *        '   <Where>' +
     *        '       <IsNotNull>' +
     *        '           <FieldRef Name="Project"/>' +
     *        '       </IsNotNull>' +
     *        '   </Where>' +
     *        '</Query>'
     * });
 * </pre>
 */
var Query = (function () {
    function Query(queryOptions, model) {
        /** Very memory intensive to enable cacheXML which is disabled by default*/
        this.cacheXML = false;
        this.force = false;
        /** Key value hash map with key being the id of the entity */
        this.indexedCache = apIndexedCacheFactory.create();
        /** Promise resolved after first time query is executed */
        this.initialized = $q.defer();
        /** Should we store data from this query in local storage to speed up requests in the future */
        this.localStorage = false;
        /** Set expiration in milliseconds - Defaults to a day and if set to 0 doesn't expire */
        this.localStorageExpiration = __WEBPACK_IMPORTED_MODULE_2__app_module__["ENV"].localStorageExpiration;
        /** Flag to prevent us from makeing concurrent requests */
        this.negotiatingWithServer = false;
        /** Every time we run we want to check to update our cached data with
         * any changes made on the server */
        this.operation = 'GetListItemChangesSinceToken';
        /** Default query returns list items in ascending ID order */
        this.query = "\n        <Query>\n           <OrderBy>\n               <FieldRef Name=\"ID\" Ascending=\"TRUE\"/>\n           </OrderBy>\n        </Query>";
        this.queryOptions = __WEBPACK_IMPORTED_MODULE_1__constants_apDefaultListItemQueryOptions__["a" /* DefaultListItemQueryOptions */];
        this.runOnce = false;
        this.sessionStorage = false;
        this.webURL = __WEBPACK_IMPORTED_MODULE_2__app_module__["ENV"].site;
        var list = model.getList();
        //Use the default viewFields from the model
        this.viewFields = list.viewFields;
        this.listName = model.getListId();
        //Allow all values on query to be overwritten by queryOptions object
        __WEBPACK_IMPORTED_MODULE_0_lodash__["assign"](this, queryOptions);
        /** Allow the model to be referenced at a later time */
        this.getModel = function () { return model; };
    }
    Object.defineProperty(Query.prototype, "hasExecuted", {
        /** Has this query been executed at least once. */
        get: function () {
            return __WEBPACK_IMPORTED_MODULE_0_lodash__["isDate"](this.lastRun);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Query.prototype, "usesBrowserStorage", {
        /** Is this query setup to use browser storage. */
        get: function () {
            return this.localStorage || this.sessionStorage;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @ngdoc function
     * @name Query.execute
     * @methodOf Query
     * @description
     * Query SharePoint, pull down all initial records on first call along with list definition if using
     * "GetListItemChangesSinceToken".  Note: this is  substantially larger than "GetListItems" on first call.
     * Subsequent calls pulls down changes (Assuming operation: "GetListItemChangesSinceToken").
     * @returns {ng.IPromise<IndexedCache<T>>} Promise that resolves with the cache for this query.
     */
    Query.prototype.execute = function () {
        var _this = this;
        var query = this;
        var model = query.getModel();
        var deferred = $q.defer();
        /** Return existing promise if request is already underway or has been previously executed in the past
         * 1/10th of a second */
        if (query.negotiatingWithServer || (__WEBPACK_IMPORTED_MODULE_0_lodash__["isDate"](query.lastRun) && query.lastRun.getTime() + __WEBPACK_IMPORTED_MODULE_2__app_module__["ENV"].queryDebounceTime > new Date().getTime())) {
            return query.promise;
        }
        else {
            /** Set flag to prevent another call while this query is active */
            query.negotiatingWithServer = true;
            var localStorageData = void 0;
            if (this.usesBrowserStorage) {
                localStorageData = this.getLocalStorage();
            }
            /** Clear out existing cached list items if GetListItems is the selected operation because otherwise
             * we could potentially have stale data if a list item no longer meets the query parameters but already
             * exists in the cache from a previous request. Don't clear the cache in the case where runOnce is set.*/
            if (this.operation === 'GetListItems' && !this.runOnce) {
                query.getCache().clear();
            }
            /** Flag used to determine if we need to make a request to the server */
            var makeRequest = true;
            /** See if we already have data in local storage and hydrate if it hasn't expired, which
             * then allows us to only request the changes. */
            if (!query.force && localStorageData) {
                switch (this.operation) {
                    case 'GetListItemChangesSinceToken':
                        //Only run the first time, after that the token/data are already in sync
                        if (!query.hasExecuted) {
                            query.hydrateFromLocalStorage(localStorageData);
                        }
                        break;
                    case 'GetListItems':
                        query.hydrateFromLocalStorage(localStorageData);
                        //Use cached data if we have data already available
                        makeRequest = this.getCache().size === 0;
                }
            }
            /** Optionally handle query.runOnce for GetListItems when initial call has already been made */
            if (this.hasExecuted && this.runOnce) {
                makeRequest = false;
            }
            /** Only make server request if necessary. */
            if (makeRequest) {
                this.makeRequest()
                    .then(function (results) {
                    _this.postExecutionCleanup(results);
                    deferred.resolve(results);
                });
            }
            else {
                this.postExecutionCleanup(this.getCache());
                deferred.resolve(this.getCache());
            }
            /** Save reference on the query **/
            query.promise = deferred.promise;
            return deferred.promise;
        }
    };
    /**
     * @ngdoc function
     * @name Query.getCache
     * @methodOf Query
     * @description
     * Use this to return the cache instead of using the actual property to allow for future refactoring.
     * @returns {IndexedCache<T>} Indexed Cache containing all elements in query.
     */
    Query.prototype.getCache = function () {
        return this.indexedCache;
    };
    /**
     * @ngdoc function
     * @name Query.getList
     * @methodOf Query
     * @description
     * Shortcut to retrieve the list definition from the model this query belongs to.
     * @returns {List} List definition for model.
     */
    Query.prototype.getList = function () {
        var model = this.getModel();
        return model.getList();
    };
    /**
     * @ngdoc function
     * @name Query.getLocalStorage
     * @methodOf Query
     * @description
     * Use this to return query data currenty saved in user's local or session storage.
     * @returns {LocalStorageQuery} Local storage data for this query.
     */
    Query.prototype.getLocalStorage = function () {
        var parsedQuery, localStorageKey = this.getLocalStorageKey();
        var stringifiedQuery = localStorage.getItem(localStorageKey) || sessionStorage.getItem(localStorageKey);
        if (stringifiedQuery) {
            parsedQuery = new LocalStorageQuery(localStorageKey, stringifiedQuery);
        }
        return parsedQuery;
    };
    /**
     * @ngdoc function
     * @name Query.hydrateFromLocalStorage
     * @methodOf Query
     * @description
     * If data already exists in browser local storage, we rehydrate JSON using list item constructor and
     * then have the ability to just check the server to see what has changed from the current state.
     */
    Query.prototype.hydrateFromLocalStorage = function (localStorageQuery) {
        var _this = this;
        if (localStorageQuery.hasExpired(this.localStorageExpiration)) {
            //Don't continue and purge if data has exceeded expiration
            localStorageQuery.removeItem();
        }
        else {
            var listItemProvider_1 = apDecodeService.createListItemProvider(this.getModel(), this, this.getCache());
            var fieldDefinitions = this.getList().fields;
            //Identify all DateTime JSON fields so we can cast as Date objects
            var dateTimeProperties_1 = fieldDefinitions
                .filter(function (fieldDefinition) { return fieldDefinition.objectType === 'DateTime'; })
                .map(function (fieldDefinition) { return fieldDefinition.mappedName; });
            //Hydrate each raw list item and add to cache
            __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](localStorageQuery.indexedCache, function (jsonObject) {
                var hydratedObject = _this.hydrateJSONDates(jsonObject, dateTimeProperties_1);
                listItemProvider_1(hydratedObject);
            });
            //Set the last run date
            this.lastRun = localStorageQuery.lastRun;
            //Store the change token
            this.changeToken = localStorageQuery.changeToken;
            //Resolve initial query promise in case any other concurrent requests are waiting for the data
            this.initialized.resolve(this.getCache());
        }
    };
    /**
     * @ngdoc function
     * @name Query.hydrateJSONDates
     * @methodOf Query
     * @description
     * Objects pulled from local storage have JSON date strings so we need to convert to real dates.
     * @returns {Object} JSON object with date strings converted to Date objects.
     */
    Query.prototype.hydrateJSONDates = function (jsonObject, dateTimeProperties) {
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](dateTimeProperties, function (prop) {
            if (__WEBPACK_IMPORTED_MODULE_0_lodash__["isString"](jsonObject[prop])) {
                jsonObject[prop] = new Date(jsonObject[prop]);
            }
        });
        return jsonObject;
    };
    /**
     * @ngdoc function
     * @name Query.postExecutionCleanup
     * @methodOf Query
     * @description
     * Internal method exposed to allow for testing.  Handle cleanup after query execution is complete.
     */
    Query.prototype.postExecutionCleanup = function (results) {
        var query = this;
        var model = query.getModel();
        var cache = this.getCache();
        /** Set flag if this if the first time this query has been run */
        var firstRunQuery = __WEBPACK_IMPORTED_MODULE_0_lodash__["isNull"](query.lastRun);
        if (firstRunQuery) {
            /** Promise resolved the first time query is completed */
            query.initialized.resolve(results);
        }
        /** Set list permissions if not already set */
        var list = model.getList();
        if (!list.permissions && results.first()) {
            /** Query needs to have returned at least 1 item so we can use permMask */
            list.extendPermissionsFromListItem(results.first());
        }
        /** Remove lock to allow for future requests */
        query.negotiatingWithServer = false;
        /** Store query completion date/time on model to allow us to identify age of data */
        model.lastServerUpdate = new Date();
        /** Overwrite local storage value with updated state so we can potentially restore in
         * future sessions. */
        if (query.usesBrowserStorage) {
            query.saveToLocalStorage();
        }
    };
    /**
     * @ngdoc function
     * @name Query.saveToLocalStorage
     * @methodOf Query
     * @description
     * Save a snapshot of the current state to local/session storage so we can speed up calls
     * for data already residing on the users machine.
     */
    Query.prototype.saveToLocalStorage = function () {
        //Don't use storage when running offline
        if (!__WEBPACK_IMPORTED_MODULE_2__app_module__["ENV"].production)
            return;
        var model = this.getModel();
        var store = {
            changeToken: this.changeToken,
            indexedCache: this.getCache(),
            lastRun: this.lastRun
        };
        var stringifiedQuery = JSON.stringify(store);
        var storageType = this.localStorage ? 'local' : 'session';
        var localStorageKey = this.getLocalStorageKey();
        //Use try/catch in case we've exceeded browser storage limit (typically 5MB)
        try {
            if (this.localStorage) {
                localStorage.setItem(localStorageKey, stringifiedQuery);
            }
            else {
                sessionStorage.setItem(localStorageKey, stringifiedQuery);
            }
        }
        catch (e) {
            if (e.code == 22) {
            }
            apLogger.debug('Looks like we\'re out of space in ' + storageType + ' storage.', {
                json: {
                    query: this.name,
                    model: this.getModel().list.title
                }
            });
            if (this.localStorage) {
                localStorage.clear();
            }
            else {
                sessionStorage.clear();
            }
            //Disable storage for remainder of session to prevent throwing additional errors
            this.localStorage = false;
            this.sessionStorage = false;
        }
    };
    /** They key we use for local storage */
    Query.prototype.getLocalStorageKey = function () {
        var model = this.getModel();
        return model.getListId() + '.query.' + this.name;
    };
    Query.prototype.makeRequest = function () {
        var query = this;
        var model = this.getModel();
        var cache = this.getCache();
        return apDataService.serviceWrapper(query)
            .then(function (responseXML) {
            if (query.operation === 'GetListItemChangesSinceToken') {
                apDataService.processChangeTokenXML(model, query, responseXML, cache);
            }
            /** Convert the XML into JS objects */
            var entities = apDecodeService.processListItems(model, query, responseXML, { target: cache });
            /** Set date time to allow for time based updates */
            query.lastRun = new Date();
            return entities;
        });
    };
    return Query;
}());

/**
 * @ngdoc object
 * @name angularPoint.apQueryFactory
 * @description
 * Exposes the Query prototype and a constructor to instantiate a new Query.
 *
 * @requires angularPoint.apDataService
 * @requires angularPoint.apConfig
 */
var QueryFactory = (function () {
    function QueryFactory(_$q_, _apDataService_, _apDefaultListItemQueryOptions_, _apIndexedCacheFactory_, _apDecodeService_, _apLogger_) {
        this.Query = Query;
        $q = _$q_;
        apDataService = _apDataService_;
        apDefaultListItemQueryOptions = _apDefaultListItemQueryOptions_;
        apIndexedCacheFactory = _apIndexedCacheFactory_;
        apDecodeService = _apDecodeService_;
        apLogger = _apLogger_;
    }
    /**
     * @ngdoc function
     * @name angularPoint.apQueryFactory:create
     * @methodOf angularPoint.apQueryFactory
     * @param {object} config Options object.
     * @param {object} model Reference to the model.
     * @description
     * Instantiates and returns a new Query.
     */
    QueryFactory.prototype.create = function (config, model) {
        return new Query(config, model);
    };
    return QueryFactory;
}());

QueryFactory.$inject = ['$q', 'apDataService', 'apDefaultListItemQueryOptions', 'apIndexedCacheFactory', 'apDecodeService', 'apLogger'];


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return UserFactory; });
var apUtilityService;
/**
 * @ngdoc function
 * @name User
 * @description
 * Allows for easier distinction when debugging if object type is shown as a User.  Turns a delimited ";#"
 * string into an object shown below depeinding on field settings:
 * <pre>
 * {
         *      lookupId: 1,
         *      lookupValue: 'Joe User'
         * }
 * </pre>
 * or
 * <pre>
 * {
         *      lookupId: 1,
         *      lookupValue: 'Joe User',
         *      loginName: 'joe.user',
         *      email: 'joe@company.com',
         *      sipAddress: 'whatever',
         *      title: 'Sr. Widget Maker'
         * }
 * </pre>
 * @param {string} s Delimited string used to create a User object.
 * @constructor
 */
var User = (function () {
    function User(str) {
        var thisUser = new apUtilityService.SplitIndex(str);
        var thisUserExpanded = thisUser.value.split(',#');
        if (thisUserExpanded.length === 1) {
            //Standard user columns only return a id,#value pair
            this.lookupId = thisUser.id;
            this.lookupValue = thisUser.value;
        }
        else {
            //Allow for case where user adds additional properties when setting up field
            this.lookupId = thisUser.id;
            this.lookupValue = thisUserExpanded[0].replace(/(,,)/g, ',');
            this.loginName = thisUserExpanded[1].replace(/(,,)/g, ',');
            this.email = thisUserExpanded[2].replace(/(,,)/g, ',');
            this.sipAddress = thisUserExpanded[3].replace(/(,,)/g, ',');
            this.title = thisUserExpanded[4].replace(/(,,)/g, ',');
        }
    }
    return User;
}());
/**
 * @ngdoc function
 * @name angularPoint.apUserFactory
 * @description
 * Tools to assist with the creation of CAML queries.
 *
 */
var UserFactory = (function () {
    function UserFactory(_apUtilityService_) {
        this.User = User;
        apUtilityService = _apUtilityService_;
    }
    /**
     * @ngdoc function
     * @name angularPoint.apUserFactory:create
     * @methodOf angularPoint.apUserFactory
     * @description
     * Instantiates and returns a new User field.
     */
    UserFactory.prototype.create = function (s) {
        return new User(s);
    };
    return UserFactory;
}());

UserFactory.$inject = ['apUtilityService'];


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return UserModel; });

/** Local references to cached promises */
var _getGroupCollection, _getUserProfile;
/**
 * @ngdoc service
 * @name angularPoint.apUserModel
 * @description
 * Simple service that allows us to request and cache both the current user and their group memberships.
 *
 * @requires apDataService
 *
 */
var UserModel = (function () {
    function UserModel($q, apDataService) {
        this.$q = $q;
        this.apDataService = apDataService;
    }
    /**
     * @ngdoc function
     * @name angularPoint.apUserModel:checkIfMember
     * @methodOf angularPoint.apUserModel
     * @description
     * Checks to see if current user is a member of the specified group.
     * @param {string} groupName Name of the group.
     * @param {boolean} [force=false] Ignore any cached value.
     * @returns {object} Returns the group definition if the user is a member. {ID:string, Name:string, Description:string, OwnerId:string, OwnerIsUser:string}
     * @example
     * <pre>{ID: "190", Name: "Blog Contributors", Description: "We are bloggers...", OwnerID: "126", OwnerIsUser: "False"}</pre>
     */
    UserModel.prototype.checkIfMember = function (groupName, force) {
        if (force === void 0) { force = false; }
        //Allow function to be called before group collection is ready
        var deferred = this.$q.defer();
        //Initially ensure groups are ready, any future calls will receive the return
        this.getGroupCollection(force).then(function (groupCollection) {
            var groupDefinition = __WEBPACK_IMPORTED_MODULE_0_lodash__["find"](groupCollection, { Name: groupName });
            deferred.resolve(groupDefinition);
        });
        return deferred.promise;
    };
    /**
     * @ngdoc function
     * @name angularPoint.apUserModel:getGroupCollection
     * @methodOf angularPoint.apUserModel
     * @description
     * Returns the group definitions for the current user and caches results.
     * @param {boolean} [force=false] Ignore any cached value.
     * @returns {IGroupDefinition[]} Promise which resolves with the array of groups the user belongs to.
     */
    UserModel.prototype.getGroupCollection = function (force) {
        var _this = this;
        if (force === void 0) { force = false; }
        if (!_getGroupCollection || force) {
            /** Create a new deferred object if not already defined */
            var deferred = this.$q.defer();
            this.getUserProfile(force).then(function (userProfile) {
                _this.apDataService.getGroupCollectionFromUser(userProfile.userLoginName)
                    .then(function (groupCollection) {
                    deferred.resolve(groupCollection);
                });
            });
            _getGroupCollection = deferred.promise;
        }
        return _getGroupCollection;
    };
    /**
     * @ngdoc function
     * @name angularPoint.apUserModel:getUserProfile
     * @methodOf angularPoint.apUserModel
     * @description
     * Returns the user profile for the current user and caches results.
     * Pull user profile info and parse into a profile object
     * http://spservices.codeplex.com/wikipage?title=GetUserProfileByName
     * @param {boolean} [force=false] Ignore any cached value.
     * @returns {object} Promise which resolves with the requested user profile.
     */
    UserModel.prototype.getUserProfile = function (force) {
        if (force === void 0) { force = false; }
        if (!_getUserProfile || force) {
            /** Create a new deferred object if not already defined */
            _getUserProfile = this.apDataService.getUserProfileByName();
        }
        return _getUserProfile;
    };
    return UserModel;
}());

UserModel.$inject = ['$q', 'apDataService'];


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__apUtilityService__ = __webpack_require__(8);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return EntityContainer; });
/* harmony export (binding) */ __webpack_require__.d(exports, "b", function() { return ModelCache; });
/* harmony export (binding) */ __webpack_require__.d(exports, "c", function() { return CacheService; });


var service, $q, $log, apIndexedCacheFactory;
/**
 * @description Stores list names when a new model is registered along with the GUID to allow us to
 *     retrieve the GUID in future
 * @example
 * <pre>
 *     listNameToIdMap = {
         *          list1Name: {
         *              model: list1Model,
         *              listId: list1GUID
         *          },
         *          list2Name: {
         *              model: list2Model,
         *              listId: list2GUID
         *          }
         *          ...
         *     }
 * </pre>
 */
var listNameToIdMap = {}, 
/**
 * @description Stores list GUID when a new model is registered with a reference to the model for
 *     future reference.
 * @example
 * <pre>
 *     listsMappedByListId = {
     *          list1GUID: {
     *              model: list1Model
     *          },
     *          list2GUID: {
     *              model: list2Model
     *          }
     *          ...
     *     }
 * </pre>
 */
listsMappedByListId = {}, 
/**
 * @description The Main cache object which stores ModelCache objects.  Keys being the model GUID and
 *     value being an a ModelCache object
 * @example
 * <pre>
 *     entityCache = {
     *          list1GUID: {
     *              item1ID: { //EnityCache for entity 1
     *                  associationQueue: [],
     *                  updateCount: 3,
     *                  listId: list1GUID,
     *                  entityId: item1ID,
     *                  entityLocations: [],
     *                  entity: {} //This is where the actual entity is referenced
     *              }
     *              item2ID: { //EnityCache for entity 2
     *                  ...
     *              }
     *          },
     *          list2GUID: {
     *              item1ID: ...
     *          }
     *          ...
     *     }
 * </pre>
 */
entityCache = {};
/**
 * @name EntityCache
 * @description
 * Cache constructor that maintains a queue of all requests for a list item, counter for the number of times
 * the cache has been updated, timestamp of last update, and add/update/remove functionality.
 * @constructor apCacheService
 * @param {string} listId GUID for list the list item belongs to.
 * @param {number} entityId The entity.id.
 */
var EntityContainer = (function () {
    function EntityContainer(listId, entityId) {
        this.entityId = entityId;
        this.associationQueue = [];
        this.entityLocations = [];
        this.updateCount = 0;
        this.listId = service.getListId(listId);
    }
    /**
     * @name EntityContainer.getEntity
     * @description
     * Promise which returns the requested entity once it has been registered in the cache.
     */
    EntityContainer.prototype.getEntity = function () {
        var deferred = $q.defer();
        if (this.entity) {
            /** Entity already exists so resolve immediately */
            deferred.resolve(this.entity);
        }
        else {
            this.associationQueue.push(deferred);
        }
        return deferred.promise;
    };
    EntityContainer.prototype.removeEntity = function () {
        service.removeEntityById(this.listId, this.entityId);
    };
    return EntityContainer;
}());

/**
 * @name ModelCache
 * @description
 * Cache of Entity Containers for each registered entity retrieved by the model.
 * @constructor
 */
var ModelCache = (function () {
    function ModelCache() {
    }
    return ModelCache;
}());

/**
 * @ngdoc service
 * @name angularPoint.apCacheService
 * @description
 * Stores a reference for all list items based on list GUID and list item id.  Allows us to then register promises
 *     that resolve once a requested list item is registered in the future.
 */
var CacheService = (function () {
    function CacheService(_$q_, _$log_, _apIndexedCacheFactory_) {
        this.entityCache = entityCache;
        $q = _$q_;
        $log = _$log_;
        apIndexedCacheFactory = _apIndexedCacheFactory_;
        service = this;
    }
    /**
     * @ngdoc function
     * @name angularPoint.apCacheService:deleteEntity
     * @methodOf angularPoint.apCacheService
     * @description
     * Deletes all references to an entity.
     * @param {string} listId GUID for list the list item belongs to.
     * @param {number} entityId The entity.id.
     */
    CacheService.prototype.deleteEntity = function (listId, entityId) {
        var entityTypeKey = this.getListId(listId);
        this.removeEntityById(entityTypeKey, entityId);
        var model = this.getModel(entityTypeKey);
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](model.queries, function (query) {
            var cache = query.getCache();
            if (cache.has(entityId)) {
                cache.delete(entityId);
            }
        });
    };
    /**
     * @ngdoc function
     * @name angularPoint.apCacheService:getCachedEntities
     * @methodOf angularPoint.apCacheService
     * @description
     * Returns all entities for a given model as an indexed cache with keys being the entity id's.
     * @param {string} listId GUID for list the list item belongs to.
     * @returns {object} Indexed cache containing all entities for a model.
     */
    CacheService.prototype.getCachedEntities = function (listId) {
        var modelCache = this.getModelCache(listId), allEntities = apIndexedCacheFactory.create();
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](modelCache, function (entityContainer) {
            if (entityContainer.entity && entityContainer.entity.id) {
                allEntities.set(entityContainer.entity.id, entityContainer.entity);
            }
        });
        return allEntities;
    };
    /**
     * @ngdoc function
     * @name angularPoint.apCacheService:getCachedEntity
     * @methodOf angularPoint.apCacheService
     * @description
     * Synchronise call to return a cached entity;
     * @param {string} listId GUID for list the list item belongs to.
     * @param {number} entityId The entity.id.
     * @returns {object} entity || undefined
     */
    CacheService.prototype.getCachedEntity = function (listId, entityId) {
        return this.getEntityContainer(listId, entityId).entity;
    };
    /**
     * @ngdoc function
     * @name angularPoint.apCacheService:getEntity
     * @methodOf angularPoint.apCacheService
     * @description
     * Returns a deferred object that resolves with the requested entity immediately if already present or at
     *     some point in the future assuming the entity is eventually registered.
     * @param {string} listId GUID for list the list item belongs to.
     * @param {number} entityId The entity.id.
     * @returns {promise} entity
     */
    CacheService.prototype.getEntity = function (listId, entityId) {
        var entityContainer = this.getEntityContainer(listId, entityId);
        return entityContainer.getEntity();
    };
    CacheService.prototype.getEntityContainer = function (listId, entityId) {
        var entityTypeKey = this.getListId(listId);
        var modelCache = this.getModelCache(entityTypeKey);
        /** Create the object structure if it doesn't already exist */
        modelCache[entityId] = modelCache[entityId] || new EntityContainer(entityTypeKey, entityId);
        return modelCache[entityId];
    };
    /**
     * @ngdoc function
     * @name angularPoint.apCacheService:getListId
     * @methodOf angularPoint.apCacheService
     * @description
     * Allows us to use either the List Name or the list GUID and returns the lowercase GUID
     * @param {string} keyString List GUID or name.
     * @returns {string} Lowercase list GUID.
     */
    CacheService.prototype.getListId = function (keyString) {
        if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__apUtilityService__["a" /* isGuid */])(keyString)) {
            /** GUID */
            return keyString.toLowerCase();
        }
        else {
            /** List Title */
            return this.getListIdFromListName(keyString);
        }
    };
    /**
     * @ngdoc function
     * @name angularPoint.apCacheService:getListIdFromListName
     * @methodOf angularPoint.apCacheService
     * @description
     * Allows us to lookup an entity cache using the name of the list instead of the GUID.
     * @param {string} name The name of the list.
     * @returns {string} GUID for the list.
     */
    CacheService.prototype.getListIdFromListName = function (name) {
        var guid;
        if (listNameToIdMap[name] && listNameToIdMap[name].listId) {
            guid = listNameToIdMap[name].listId;
        }
        return guid;
    };
    /**
     * @ngdoc function
     * @name angularPoint.apCacheService:getModel
     * @methodOf angularPoint.apCacheService
     * @description
     * Allows us to retrieve a reference to a given model by either the list title or list GUID.
     * @param {string} listId List title or list GUID.
     * @returns {object} A reference to the requested model.
     */
    CacheService.prototype.getModel = function (listId) {
        var model, entityTypeKey = this.getListId(listId);
        if (listsMappedByListId[entityTypeKey]) {
            model = listsMappedByListId[entityTypeKey].model;
        }
        return model;
    };
    /** Locates the stored cache for a model */
    CacheService.prototype.getModelCache = function (listId) {
        var entityTypeKey = this.getListId(listId);
        entityCache[entityTypeKey] = entityCache[entityTypeKey] || new ModelCache();
        return entityCache[entityTypeKey];
    };
    /**
     * @ngdoc function
     * @name angularPoint.apCacheService:registerEntity
     * @methodOf angularPoint.apCacheService
     * @description
     * Registers an entity in the cache and fulfills any pending deferred requests for the entity. If the
     * entity already exists in the cache, we extend the existing object with the updated entity and return a
     * reference to this updated object so the there is only a single instance of this entity withing the cache.
     * @param {object} entity Pass in a newly created entity to add to the cache.
     * @param {object} [targetCache] Optionally pass in a secondary cache to add a reference to this entity.
     */
    CacheService.prototype.registerEntity = function (entity, targetCache) {
        var model = entity.getModel();
        var entityContainer = this.getEntityContainer(model.getListId(), entity.id);
        /** Maintain a single object in cache for this entity */
        if (!__WEBPACK_IMPORTED_MODULE_0_lodash__["isObject"](entityContainer.entity)) {
            /** Entity isn't currently in the cache */
            entityContainer.entity = entity;
        }
        else {
            /** Already exists so update to maintain any other references being used for this entity. */
            //TODO Look at performance hit from extending and see if it would be acceptable just to replace
            __WEBPACK_IMPORTED_MODULE_0_lodash__["assign"](entityContainer.entity, entity);
        }
        /** Counter to keep track of the number of updates for this entity */
        entityContainer.updateCount++;
        if (__WEBPACK_IMPORTED_MODULE_0_lodash__["isObject"](targetCache) && !__WEBPACK_IMPORTED_MODULE_0_lodash__["isArray"](targetCache) && !targetCache[entity.id]) {
            /** Entity hasn't been added to the target cache yet */
            targetCache[entity.id] = entityContainer.entity;
        }
        /** Resolve any requests for this entity */
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](entityContainer.associationQueue, function (deferredRequest) {
            deferredRequest.resolve(entityContainer.entity);
            /** Remove request from queue */
            entityContainer.associationQueue.shift();
        });
        return entityContainer.entity;
    };
    /**
     * @ngdoc function
     * @name angularPoint.apCacheService:registerModel
     * @methodOf angularPoint.apCacheService
     * @description
     * Creates a new ModelCache for the provide model where all list items will be stored with the key equaling
     * the entity id's and value being a EntityContainer.  The entity is stored at EntityContainer.entity.
     * @param {object} model Model to create the cache for.
     */
    CacheService.prototype.registerModel = function (model) {
        if (model.list && model.getListId() && model.list.title) {
            var listId = model.getListId().toLowerCase();
            /** Store a reference to the model by list title */
            listNameToIdMap[model.list.title] = {
                model: model,
                listId: listId
            };
            /** Store a reference to the model by list guid */
            listsMappedByListId[listId] = {
                model: model
            };
        }
    };
    /**
     * @ngdoc function
     * @name angularPoint.apCacheService:removeEntityById
     * @methodOf angularPoint.apCacheService
     * @description
     * Removes the entity from the local entity cache.
     * @param {string} listId GUID for list the list item belongs to.
     * @param {number} entityId The entity.id.
     */
    CacheService.prototype.removeEntityById = function (listId, entityId) {
        var modelCache = this.getModelCache(listId);
        if (modelCache[entityId]) {
            delete modelCache[entityId];
        }
    };
    return CacheService;
}());

CacheService.$inject = ['$q', '$log', 'apIndexedCacheFactory'];


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return ChangeService; });

/**
 * @ngdoc service
 * @name apChangeService
 * @description
 * Primarily used for apMockBackend so we can know what to expect before an attempt to update a list
 * item is intercepted.
 */
var ChangeService = (function () {
    function ChangeService() {
        this.callbackQueue = [];
    }
    ChangeService.prototype.registerListItemUpdate = function (entity, options, promise) {
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](this.callbackQueue, function (callback) {
            callback(entity, options, promise);
        });
    };
    ChangeService.prototype.subscribeToUpdates = function (callback) {
        this.callbackQueue.push(callback);
    };
    return ChangeService;
}());



/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__constants_apWebServiceOperationConstants__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__constants_apPermissionObject__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__app_module__ = __webpack_require__(1);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return DataService; });




var service, $q, $timeout, $http, apUtilityService, apCacheService, apDecodeService, apEncodeService, apFieldService, apIndexedCacheFactory, SPServices, apBasePermissionObject, apXMLToJSONService, apChangeService, apLogger;
var DataService = (function () {
    function DataService(_$http_, _$q_, _$timeout_, _apCacheService_, _apChangeService_, _apDecodeService_, _apDefaultListItemQueryOptions_, _apEncodeService_, _apFieldService_, _apIndexedCacheFactory_, _apUtilityService_, _apWebServiceOperationConstants_, _apXMLToJSONService_, _SPServices_, _apBasePermissionObject_, _apLogger_) {
        service = this;
        $http = _$http_;
        $q = _$q_;
        $timeout = _$timeout_;
        apCacheService = _apCacheService_;
        apChangeService = _apChangeService_;
        apDecodeService = _apDecodeService_;
        // apDefaultListItemQueryOptions = _apDefaultListItemQueryOptions_;
        apEncodeService = _apEncodeService_;
        apFieldService = _apFieldService_;
        apIndexedCacheFactory = _apIndexedCacheFactory_;
        apUtilityService = _apUtilityService_;
        // apWebServiceOperationConstants = _apWebServiceOperationConstants_;
        apXMLToJSONService = _apXMLToJSONService_;
        SPServices = _SPServices_;
        apBasePermissionObject = _apBasePermissionObject_;
        apLogger = _apLogger_;
    }
    DataService.prototype.createItemUrlFromFileRef = function (fileRefString) {
        return window.location.protocol + '//' + window.location.hostname + '/' + fileRefString;
    };
    /**
     * @ngdoc function
     * @name DataService.generateWebServiceUrl
     * @description
     * Builds the appropriate SharePoint resource URL.  If a URL isn't provided and it hasn't already been cached
     * we make a call to the server to find the root URL.  All future requests will then use this cached value.
     * @param {string} service The name of the service the SOAP operation is using.
     * @param {string} [webURL] Optionally provide the URL so we don't need to make a call to the server.
     * @returns {promise} Resolves with the url for the service.
     */
    DataService.prototype.generateWebServiceUrl = function (service, webURL) {
        var ajaxURL = "_vti_bin/" + service + ".asmx", deferred = $q.defer();
        if (webURL) {
            ajaxURL = webURL.charAt(webURL.length - 1) === '/' ?
                webURL + ajaxURL : webURL + '/' + ajaxURL;
            deferred.resolve(ajaxURL);
        }
        else {
            this.getCurrentSite().then(function (thisSite) {
                ajaxURL = thisSite + ((thisSite.charAt(thisSite.length - 1) === '/') ? ajaxURL : ('/' + ajaxURL));
                deferred.resolve(ajaxURL);
            });
        }
        return deferred.promise;
    };
    /**
     * @ngdoc function
     * @name DataService.getAvailableWorkflows
     * @description
     * Given a list item or document, return an array of all available workflows.  This is used in combination with
     * DataService.startWorkflow because it requires the template GUID for the target workflow.
     * @example
     * <pre>
     * DataService.getAvailableWorkflows(listItem.fileRef.lookupValue)
     *     .then(function(templateArray) {
         *          ....templateArray = [{
         *              "name": "WidgetApproval",
         *              "instantiationUrl": "https: //sharepoint.mycompany.com/_layouts/IniWrkflIP.aspx?List=fc17890e-8c0…311-cea9-40d1-a183-6edde9333815}&Web={ec744d8e-ae0a-45dd-bcd1-8a63b9b399bd}",
         *              "templateId": "59062311-cea9-40d1-a183-6edde9333815"
         *          }]
     *     });
     * </pre>
     * @param {string} fileRefString Relative or static url referencing the item.
     * @returns {object} Resolves with an array of objects defining each of the available workflows for the item.
     */
    DataService.prototype.getAvailableWorkflows = function (fileRefString) {
        /** Build the full url for the fileRef if not already provided.  FileRef for an item defaults to a relative url */
        var itemUrl = fileRefString.indexOf(': //') > -1 ? fileRefString : this.createItemUrlFromFileRef(fileRefString);
        return this.serviceWrapper({
            operation: 'GetTemplatesForItem',
            item: itemUrl
        })
            .then(function (responseXML) {
            var workflowTemplates = [];
            var xmlTemplates = apXMLToJSONService.filterNodes(responseXML, 'WorkflowTemplate');
            __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](xmlTemplates, function (xmlTemplate) {
                var template = {
                    name: $(xmlTemplate).attr('Name'),
                    instantiationUrl: $(xmlTemplate).attr('InstantiationUrl'),
                    templateId: '{' + $(xmlTemplate).find('WorkflowTemplateIdSet').attr('TemplateId') + '}'
                };
                workflowTemplates.push(template);
            });
            return workflowTemplates;
        });
    };
    /**
     * @ngdoc function
     * @name DataService.getCollection
     * @description
     * Used to handle any of the Get[filterNode]Collection calls to SharePoint
     *
     * @param {Object} options - object used to extend payload and needs to include all SPServices required attributes
     * @param {string} options.operation Can be any of the below or any other requests for collections:
     *  - GetAttachmentCollection @requires options.listName & options.ID
     *  - GetGroupCollectionFromSite
     *  - GetGroupCollectionFromUser @requires options.userLoginName
     *  - GetListCollection
     *  - GetUserCollectionFromGroup @requires options.groupName
     *  - GetUserCollectionFromSite
     *  - GetViewCollection @requires options.listName
     * @param {string} options.filterNode Value to iterate over in returned XML
     *         if not provided it's extracted from the name of the operation
     *         ex: Get[User]CollectionFromSite, "User" is used as the filterNode
     * @param {string} [options.groupName] Valid for 'GetUserCollectionFromGroup'
     * @param {string} [options.listName] Valid for 'GetViewCollection' or 'GetAttachmentCollection'
     * @param {string} [options.userLoginName] Valid for 'GetGroupCollectionFromUser'
     * @returns {Promise<object[]>} Promise which when resolved will contain an array of objects representing the
     * requested collection.
     *
     * @example
     * <pre>
     * DataService.getCollection({
         *        operation: "GetGroupCollectionFromUser",
         *        userLoginName: $scope.state.selectedUser.LoginName
         *        }).then(function (response) {
         *            postProcessFunction(response);
         *       });
     * </pre>
     */
    DataService.prototype.getCollection = function (options) {
        var defaults = {
            postProcess: processXML
        };
        var opts = __WEBPACK_IMPORTED_MODULE_0_lodash__["assign"]({}, defaults, options);
        /** Determine the XML node to iterate over if filterNode isn't provided */
        var filterNode = opts.filterNode || opts.operation.split('Get')[1].split('Collection')[0];
        var deferred = $q.defer();
        /** Convert the xml returned from the server into an array of js objects */
        function processXML(responseXML) {
            var convertedItems = [];
            var filteredNodes = apXMLToJSONService.filterNodes(responseXML, filterNode);
            /** Get attachments only returns the links associated with a list item */
            if (opts.operation === 'GetAttachmentCollection') {
                /** Unlike other call, get attachments only returns strings instead of an object with attributes */
                __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](filteredNodes, function (node) { return convertedItems.push($(node).text()); });
            }
            else {
                convertedItems = apXMLToJSONService.parse(filteredNodes, { includeAllAttrs: true, removeOws: false });
            }
            return convertedItems;
        }
        var validPayload = this.validateCollectionPayload(opts);
        if (validPayload) {
            this.serviceWrapper(opts)
                .then(function (response) {
                deferred.resolve(response);
            })
                .catch(function (err) { return deferred.reject(err); });
        }
        else {
            deferred.reject("Invalid payload for " + opts.operation + " request.");
        }
        return deferred.promise;
    };
    /**
     * @ngdoc function
     * @name DataService.getCurrentSite
     * @description
     * Requests and caches the root url for the current site.  It caches the response so any future calls receive
     * the cached promise.
     * @returns {promise} Resolves with the current site root url.
     */
    DataService.prototype.getCurrentSite = function () {
        var _this = this;
        var deferred = $q.defer();
        //let self = this.getCurrentSite;
        if (!this.queryForCurrentSite) {
            /** We only want to run this once so cache the promise the first time and just reference it in the future */
            this.queryForCurrentSite = deferred.promise;
            var soapData_1 = SPServices.SOAPEnvelope.header +
                "<WebUrlFromPageUrl xmlns='" + SPServices.SCHEMASharePoint + "/soap/' ><pageUrl>" +
                ((location.href.indexOf("?") > 0) ? location.href.substr(0, location.href.indexOf("?")) : location.href) +
                "</pageUrl></WebUrlFromPageUrl>" +
                SPServices.SOAPEnvelope.footer;
            $http({
                method: 'POST',
                url: '/_vti_bin/Webs.asmx',
                data: soapData_1,
                responseType: "document",
                headers: {
                    "Content-Type": "text/xml;charset='utf-8'"
                }
            })
                .then(function (response) {
                /** Success */
                var errorMsg = apDecodeService.checkResponseForErrors(response.data);
                if (errorMsg) {
                    _this.errorHandler('Failed to get current site.  ' + errorMsg, deferred, soapData_1);
                }
                // environment.site = $(response.data).find("WebUrlFromPageUrlResult").text();
                deferred.resolve(__WEBPACK_IMPORTED_MODULE_3__app_module__["ENV"].site);
            })
                .catch(function (err) {
                /** Error */
                _this.errorHandler('Failed to get current site.  ' + err, deferred, soapData_1);
            });
        }
        return this.queryForCurrentSite;
    };
    /**
     * @ngdoc function
     * @name DataService.getFieldVersionHistory
     * @description
     * Returns the version history for a field in a list item.
     * @param {object} options Configuration object passed to SPServices.
     * <pre>
     * let options = {
         *        operation: 'GetVersionCollection',
         *        webURL: apConfig.defaultUrl,
         *        strlistID: model.getListId(),
         *        strlistItemID: listItem.id,
         *        strFieldName: fieldDefinition.staticName
         *    };
     * </pre>
     * @param {object} fieldDefinition Field definition object from the model.
     * @returns {object[]} Promise which resolves with an array of list item changes for the specified field.
     */
    DataService.prototype.getFieldVersionHistory = function (options, fieldDefinition) {
        var defaults = {
            operation: 'GetVersionCollection'
        };
        var opts = __WEBPACK_IMPORTED_MODULE_0_lodash__["assign"]({}, defaults, options);
        return this.serviceWrapper(opts)
            .then(function (response) {
            /** Parse XML response */
            var fieldVersionCollection = apDecodeService.parseFieldVersions(response, fieldDefinition);
            /** Resolve with an array of all field versions */
            return fieldVersionCollection;
        })
            .catch(function (err) {
            /** Failure */
            throw new Error("Failed to fetch version history. Error: " + err);
        });
    };
    /**
     * @ngdoc function
     * @name DataService.getGroupCollectionFromUser
     * @description
     * Fetches an array of group names the user is a member of.  If no user is provided we use the current user.
     * @param {string} [login=CurrentUser] Optional param of another user's login to return the profile for.
     * @returns {string[]} Promise which resolves with the array of groups the user belongs to.
     */
    DataService.prototype.getGroupCollectionFromUser = function (login) {
        var _this = this;
        /** Create a new deferred object if not already defined */
        var deferred = $q.defer();
        var getGroupCollection = function (userLoginName) {
            _this.serviceWrapper({
                operation: 'GetGroupCollectionFromUser',
                userLoginName: userLoginName,
                filterNode: 'Group'
            }).then(function (groupCollection) { return deferred.resolve(groupCollection); });
        };
        if (!login) {
            /** No login name provided so lookup profile for current user */
            this.getUserProfileByName()
                .then(function (userProfile) { return getGroupCollection(userProfile.userLoginName); });
        }
        else {
            getGroupCollection(login);
        }
        return deferred.promise;
    };
    /**
     * @ngdoc function
     * @name DataService.getList
     * @description
     * Returns all list details including field and list config.
     * @param {object} options Configuration parameters.
     * @param {string} options.listName GUID of the list.
     * @param {string} [options.webURL] URL to the site containing the list if differnt from primary data site in apConfig.
     * @returns {object} Promise which resolves with an object defining field and list config.
     */
    DataService.prototype.getList = function (options) {
        var defaults = {
            operation: 'GetList'
        };
        var opts = __WEBPACK_IMPORTED_MODULE_0_lodash__["assign"]({}, defaults, options);
        return this.serviceWrapper(opts);
    };
    /**
     * @ngdoc function
     * @name DataService.getListFields
     * @description
     * Returns field definitions for a specified list.
     * @param {object} options Configuration parameters.
     * @param {string} options.listName GUID of the list.
     * @param {string} [options.webURL] URL to the site containing the list if differnt from primary data site in apConfig.
     * @returns {Promise} Promise which resolves with an array of field definitions for the list.
     */
    DataService.prototype.getListFields = function (options) {
        return this.getList(options)
            .then(function (responseXML) {
            var filteredNodes = apXMLToJSONService.filterNodes(responseXML, 'Field');
            var fields = apXMLToJSONService.parse(filteredNodes, { includeAllAttrs: true, removeOws: false });
            return fields;
        });
    };
    /**
     * @ngdoc function
     * @name DataService.getUserProfile
     * @description
     * Returns the profile for an optional user, but defaults the the current user if one isn't provided.
     * Pull user profile info and parse into a profile object
     * http: //spservices.codeplex.com/wikipage?title=GetUserProfileByName
     * @param {string} [login=CurrentUser] Optional param of another user's login to return the profile for.
     * @returns {object} Promise which resolves with the requested user profile.
     */
    DataService.prototype.getUserProfileByName = function (login) {
        var payload = {
            accountName: undefined,
            operation: 'GetUserProfileByName'
        };
        if (login) {
            payload.accountName = login;
        }
        return this.serviceWrapper(payload)
            .then(function (responseXML) {
            var userProfile = {
                AccountName: undefined,
                userLoginName: undefined
            };
            // Not formatted like a normal SP response so need to manually parse
            var filteredNodes = apXMLToJSONService.filterNodes(responseXML, 'PropertyData');
            __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](filteredNodes, function (node) {
                var nodeName = node.getElementsByTagName('Name')[0];
                var nodeValue = node.getElementsByTagName('Value')[0];
                if (nodeName && nodeValue) {
                    userProfile[nodeName.textContent.trim()] = nodeValue.textContent.trim();
                }
            });
            /** Optionally specify a necessary prefix that should appear before the user login */
            userProfile.userLoginName = __WEBPACK_IMPORTED_MODULE_3__app_module__["ENV"].userLoginNamePrefix ?
                (__WEBPACK_IMPORTED_MODULE_3__app_module__["ENV"].userLoginNamePrefix + userProfile.AccountName) : userProfile.AccountName;
            return userProfile;
        });
    };
    /**
     * @ngdoc function
     * @name DataService.processChangeTokenXML
     * @description
     * The initial call to GetListItemChangesSinceToken also includes the field definitions for the
     * list so extend the existing field definitions and list defined in the model.  After that, store
     * the change token and make any changes to the user's permissions for the list.
     * @param {Model} model List model.
     * @param {IQuery} query Valid query object.
     * @param {Element} responseXML XML response from the server.
     * @param {IndexedCache<T>} cache Cache to process in order to handle deletions.
     */
    DataService.prototype.processChangeTokenXML = function (model, query, responseXML, cache) {
        if (!model.deferredListDefinition) {
            //Extend our local list definition and field definitions with XML
            apDecodeService.extendListMetadata(model, responseXML);
            /**If loaded from local or session cache the list/field definitions won't be extended so ensure we check before
             * resolving promise verifying list has been extended.  One of the attributes we'd expect to see on all List/Libraries
             * is "BaseType" */
            if (model.getList().BaseType) {
                //List successfully extended
                /** Replace the null placeholder with this resolved promise so we don't have to process in the future and also
                 * don't have to query again if we run Model.extendListMetadata. */
                model.deferredListDefinition = $q.when(model);
            }
        }
        /** Store token for future web service calls to return changes */
        var changeToken = this.retrieveChangeToken(responseXML);
        if (changeToken) {
            /** Don't update change token if request fails to return a valid response */
            query.changeToken = changeToken;
        }
        /** Update the user permissions for this list */
        var permissions = this.retrieveListPermissions(responseXML);
        if (permissions) {
            model.list.permissions = permissions;
        }
        /** Change token query includes deleted items as well so we need to process them separately */
        this.processDeletionsSinceToken(responseXML, cache);
    };
    /**
     * @ngdoc function
     * @name DataService.processDeletionsSinceToken
     * @description
     * GetListItemChangesSinceToken returns items that have been added as well as deleted so we need
     * to remove the deleted items from the local cache.
     * @param {Element} responseXML XML response from the server.
     * @param {Object} cache Cached object of key value pairs.
     */
    DataService.prototype.processDeletionsSinceToken = function (responseXML, cache) {
        /** Remove any locally cached entities that were deleted from the server */
        var filteredNodes = apXMLToJSONService.filterNodes(responseXML, 'Id');
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](filteredNodes, function (node) {
            /** Check for the type of change */
            var changeType = $(node).attr('ChangeType');
            if (changeType === 'Delete') {
                var listItemId = parseInt($(node).text(), 10);
                /** Remove from local data array */
                cache.delete(listItemId);
            }
        });
    };
    /**
     * @ngdoc function
     * @name DataService.requestData
     * @description
     * The primary function that handles all communication with the server.  This is very low level and isn't
     * intended to be called directly.
     * @param {object} opts Payload object containing the details of the request.
     * @returns {promise} Promise that resolves with the server response.
     */
    DataService.prototype.requestData = function (opts) {
        var _this = this;
        var deferred = $q.defer();
        var soapData = SPServices.generateXMLComponents(opts);
        var service = __WEBPACK_IMPORTED_MODULE_1__constants_apWebServiceOperationConstants__["a" /* WebServiceOperationConstants */][opts.operation][0];
        this.generateWebServiceUrl(service, opts.webURL)
            .then(function (url) {
            $http.post(url, soapData.msg, {
                responseType: "text",
                // responseType: "document",
                headers: {
                    "Content-Type": "text/xml;charset='utf-8'",
                    SOAPAction: function () { return soapData.SOAPAction ? soapData.SOAPAction : null; }
                },
            })
                .then(function (response) {
                var parser = new DOMParser();
                var responseXML = parser.parseFromString(response.data, 'text/xml');
                // Success Code
                // Errors can still be resolved without throwing an error so check the XML
                var errorMsg = apDecodeService.checkResponseForErrors(responseXML);
                // let errorMsg = apDecodeService.checkResponseForErrors(<any>response.data);
                if (errorMsg) {
                    // Actuall error but returned with success resonse....thank you SharePoint
                    _this.errorHandler(errorMsg, deferred, soapData, response);
                }
                else {
                    /** Real success */
                    deferred.resolve(responseXML);
                }
            })
                .catch(function (err) {
                // Failure
                _this.errorHandler(err, deferred, soapData);
            });
        });
        return deferred.promise;
    };
    /**
     * @ngdoc function
     * @name DataService.retrieveChangeToken
     * @description
     * Returns the change token from the xml response of a GetListItemChangesSinceToken query
     * Note: this attribute is only found when using 'GetListItemChangesSinceToken'
     * @param {Element} responseXML XML response from the server.
     */
    DataService.prototype.retrieveChangeToken = function (responseXML) {
        return $(responseXML).find('Changes').attr('LastChangeToken');
    };
    /**
     * @ngdoc function
     * @name DataService.retrieveListPermissions
     * @description
     * Returns the text representation of the users permission mask
     * Note: this attribute is only found when using 'GetListItemChangesSinceToken'
     * @param {Element} responseXML XML response from the server.
     */
    DataService.prototype.retrieveListPermissions = function (responseXML) {
        //Permissions will be a string of Permission names delimited by commas
        //Example: "ViewListItems, AddListItems, EditListItems, DeleteListItems, ...."
        var listPermissions = $(responseXML).find('listitems').attr('EffectivePermMask');
        var permissionObject;
        if (__WEBPACK_IMPORTED_MODULE_0_lodash__["isString"](listPermissions)) {
            var permissionNameArray = listPermissions.split(',');
            permissionObject = new __WEBPACK_IMPORTED_MODULE_2__constants_apPermissionObject__["a" /* BasePermissionObject */]();
            //Set each of the identified permission levels to true
            __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](permissionNameArray, function (permission) {
                //Remove extra spaces
                var permissionName = permission.trim();
                //Find the permission level on the permission object that is currently set to false
                //and set to true
                permissionObject[permissionName] = true;
                if (permissionName === 'FullMask') {
                    //User has full rights so set all to true
                    __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](permissionObject, function (propertyValue, propertyName) {
                        permissionObject[propertyName] = true;
                    });
                }
            });
        }
        return permissionObject;
    };
    /**
     * @ngdoc function
     * @name DataService.serviceWrapper
     * @description
     * Generic wrapper for any SPServices web service call.  The big benefit to this function is it allows us
     * to continue to use the $q promise model throughout the application instead of using the promise
     * implementation used in SPServices so we have a more consistent experience.
     * Check http: //spservices.codeplex.com/documentation for details on expected parameters for each operation.
     *
     * @param {object} options Payload params that is directly passed to SPServices.
     * @param {string} [options.filterNode] XML filter string used to find the elements to iterate over.
     * This is typically 'z: row' for list items.
     * @param {Function} [options.postProcess] Method to process responseXML prior to returning.
     * @param {string} [options.webURL] XML filter string used to find the elements to iterate over.
     * @returns {object} Returns a promise which when resolved either returns clean objects parsed by the value
     * in options.filterNode or the raw XML response if a options.filterNode
     *
     *      If options.filterNode is provided, returns XML parsed by node name
     *      Otherwise returns the server response
     */
    DataService.prototype.serviceWrapper = function (options) {
        var defaults = {
            postProcess: processXML,
            webURL: __WEBPACK_IMPORTED_MODULE_3__app_module__["ENV"].site
        };
        var opts = __WEBPACK_IMPORTED_MODULE_0_lodash__["assign"]({}, defaults, options);
        /** Convert the xml returned from the server into an array of js objects */
        function processXML(responseXML) {
            if (opts.filterNode) {
                var filteredNodes = apXMLToJSONService.filterNodes(responseXML, opts.filterNode);
                return apXMLToJSONService.parse(filteredNodes, { includeAllAttrs: true, removeOws: false });
            }
            else {
                return responseXML;
            }
        }
        return this.requestData(opts)
            .then(function (responseXML) {
            /** Success */
            return opts.postProcess(responseXML);
        })
            .catch(function (err) {
            /** Failure */
            return err + '  Failed to complete the requested ' + opts.operation + ' operation.';
        });
    };
    /**
     * @ngdoc function
     * @name DataService.startWorkflow
     * @description
     * Initiate a workflow for a given list item or document.  You can view additional info at
     * [StartWorkflow](http: //spservices.codeplex.com/wikipage?title=StartWorkflow&referringTitle=Workflow).
     * @param {object} options Configuration options.
     * @param {string} options.item Full fileRef for the given list item/document.
     * @param {string} options.templateId The workflow template GUID.  You can use dataService.getAvailableWorkflows
     * to locate to appropriate one.
     * @param {string} [options.workflowParameters='<root />'] Optionally provide paramaters to the workflow.
     * @param {string} [options.fileRef] Optionally pass in the relative fileRef of an listItem and then we can
     * convert it to options.item.
     * @returns {object} Deferred object that resolves once complete.
     * @example
     * <pre>
     * DataService.startWorkflow({
         *     item: "https: //server/site/Lists/item" + idData + "_.000",
         *     templateId: "{c29c1291-a25c-47d7-9345-8fb1de2a1fa3}",
         *     workflowParameters: "<Data><monthName>" + txtBox.value + "</monthName></Data>",
         *   ...}).then(function() {
         *       //Success
         *   }, function(err) {
         *       //Error
         *   })
     * </pre>
     */
    DataService.prototype.startWorkflow = function (options) {
        var defaults = {
            operation: 'StartWorkflow',
            item: '',
            fileRef: '',
            templateId: '',
            workflowParameters: '<root />'
        };
        var opts = __WEBPACK_IMPORTED_MODULE_0_lodash__["assign"]({}, defaults, options);
        /** We have the relative file reference but we need to create the fully qualified reference */
        if (!opts.item && opts.fileRef) {
            opts.item = this.createItemUrlFromFileRef(opts.fileRef);
        }
        return this.serviceWrapper(opts);
    };
    /**
     * @description
     * Simply verifies that all components of the payload are present.
     * @param {object} opts Payload config.
     * @returns {boolean} Collection is valid.
     */
    DataService.prototype.validateCollectionPayload = function (opts) {
        var validPayload = true;
        var verifyParams = function (params) {
            __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](params, function (param) {
                if (!opts[param]) {
                    console.warn('options' + param + ' is required to complete this operation');
                    validPayload = false;
                }
            });
        };
        //Verify all required params are included
        switch (opts.operation) {
            case 'GetGroupCollectionFromUser':
                verifyParams(['userLoginName']);
                break;
            case 'GetUserCollectionFromGroup':
                verifyParams(['groupName']);
                break;
            case 'GetViewCollection':
                verifyParams(['listName']);
                break;
            case 'GetAttachmentCollection':
                verifyParams(['listName', 'ID']);
                break;
        }
        return validPayload;
    };
    DataService.prototype.errorHandler = function (errorMsg, deferred, soapData, response) {
        //Log error to any server side logging list
        apLogger.error(errorMsg, {
            json: {
                request: JSON.stringify(soapData, null, 2),
                response: JSON.stringify(response, null, 2)
            }
        });
        deferred.reject(errorMsg);
    };
    return DataService;
}());

DataService.$inject = ['$http', '$q', '$timeout', 'apCacheService', 'apChangeService', 'apDecodeService',
    'apDefaultListItemQueryOptions', 'apEncodeService', 'apFieldService', 'apIndexedCacheFactory',
    'apUtilityService', 'apWebServiceOperationConstants', 'apXMLToJSONService', 'SPServices',
    'apBasePermissionObject', 'apLogger'];


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__factories_apListItemVersionFactory__ = __webpack_require__(7);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return DecodeService; });


/**
 * @ngdoc service
 * @name angularPoint.apDecodeService
 * @description
 * Processes the XML received from SharePoint and converts it into JavaScript objects based on predefined field types.
 *
 * @requires angularPoint.apUtilityService
 * @requires angularPoint.apConfig
 * @requires angularPoint.apCacheService
 */
var DecodeService = (function () {
    function DecodeService(apCacheService, apLookupFactory, apUserFactory, apFieldService, apXMLListAttributeTypes, apXMLFieldAttributeTypes, apXMLToJSONService) {
        this.apCacheService = apCacheService;
        this.apLookupFactory = apLookupFactory;
        this.apUserFactory = apUserFactory;
        this.apFieldService = apFieldService;
        this.apXMLListAttributeTypes = apXMLListAttributeTypes;
        this.apXMLFieldAttributeTypes = apXMLFieldAttributeTypes;
        this.apXMLToJSONService = apXMLToJSONService;
    }
    /**
     * @ngdoc function
     * @name angularPoint.apDecodeService:checkResponseForErrors
     * @methodOf angularPoint.apDecodeService
     * @description
     * Errors don't always throw correctly from SPServices so this function checks to see if part
     * of the XHR response contains an "errorstring" element.
     * @param {object} responseXML XHR response from the server.
     * @returns {string} Returns an error string if present.
     */
    DecodeService.prototype.checkResponseForErrors = function (responseXML) {
        var error;
        /** Look for <errorstring></errorstring> or <ErrorText></ErrorText> for details on any errors */
        var errorElements = ['ErrorText', 'errorstring'];
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](errorElements, function (element) {
            $(responseXML).find(element).each(function () {
                error = $(this).text();
                /** Break early if found */
                return false;
            });
        });
        return error;
    };
    /** Converts UTC date to a localized date
     * Taken from: http://stackoverflow.com/questions/6525538/convert-utc-date-time-to-local-date-time-using-javascript
     * */
    DecodeService.prototype.convertUTCDateToLocalDate = function (date) {
        var newDate = new Date(date.getTime() + date.getTimezoneOffset() * 60 * 1000);
        var offset = date.getTimezoneOffset() / 60;
        var hours = date.getHours();
        newDate.setHours(hours - offset);
        return newDate;
    };
    /**
     * @ngdoc function
     * @name angularPoint.apDecodeService:createListItemProvider
     * @methodOf angularPoint.apDecodeService
     * @description
     * The initial constructor for a list item that references the array where the entity exists and the
     * query used to fetch the entity.  From there it extends the entity using the factory defined in the
     * model for the list item.
     * @param {object} model Reference to the model for the list item.
     * @param {object} query Reference to the query object used to retrieve the entity.
     * @param {object} indexedCache Location where we'll be pushing the new entity.
     * @returns {Function} Returns a function that takes the new list item while keeping model, query,
     * and container in scope for future reference.
     */
    DecodeService.prototype.createListItemProvider = function (model, query, indexedCache) {
        var _this = this;
        return function (rawObject) {
            var listItem;
            if (indexedCache.has(rawObject.id)) {
                //Object already exists in cache so we just need to update properties
                listItem = indexedCache.get(rawObject.id);
                //Call constructor on original list item to perform any initialization logic again
                listItem.constructor(rawObject);
            }
            else {
                //Creating a new List Item
                /** Create Reference to the indexed cache */
                rawObject.getCache = function () { return indexedCache; };
                /** Allow us to reference the originating query that generated this object */
                rawObject.getQuery = function () { return query; };
                listItem = new model.factory(rawObject);
                /** Register in global application listItem cache */
                _this.apCacheService.registerEntity(listItem, indexedCache);
            }
            //Store the value instead of just a reference to the original object
            var pristineValue = __WEBPACK_IMPORTED_MODULE_0_lodash__["cloneDeep"](rawObject);
            /**
             * @ngdoc function
             * @name ListItem.getPristine
             * @description
             * Allow us to reference the uninstantiated version of this list item.  Reference set
             * via angularPoint.apDecodeService:createListItemProvider.
             */
            listItem.getPristine = function () { return pristineValue; };
            return indexedCache.get(rawObject.id);
        };
    };
    /**
     * @ngdoc function
     * @name angularPoint.apDecodeService:extendFieldDefinitionsFromXML
     * @methodOf angularPoint.apDecodeService
     * @description
     * Takes the XML response from a web service call and extends any field definitions in the model
     * with additional field metadata.  Important to note that all properties will coming from the XML start
     * with a capital letter.
     * @param {object[]} fieldDefinitions Field definitions from the model.
     * @param {object} responseXML XML response from the server.
     */
    DecodeService.prototype.extendFieldDefinitionsFromXML = function (fieldDefinitions, responseXML) {
        var _this = this;
        var fieldMap = {};
        /** Map all custom fields with keys of the staticName and values = field definition */
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](fieldDefinitions, function (field) {
            if (field.staticName) {
                fieldMap[field.staticName] = field;
            }
        });
        /** Iterate over each of the field nodes */
        var filteredNodes = this.apXMLToJSONService.filterNodes(responseXML, 'Field');
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](filteredNodes, function (xmlField) {
            var staticName = $(xmlField).attr('StaticName');
            var fieldDefinition = fieldMap[staticName];
            /** If we've defined this field then we should extend it */
            if (fieldDefinition) {
                _this.extendObjectWithXMLAttributes(xmlField, fieldDefinition, _this.apXMLFieldAttributeTypes);
                /** Additional processing for Choice fields to include the default value and choices */
                if (fieldDefinition.objectType === 'Choice' || fieldDefinition.objectType === 'MultiChoice') {
                    fieldDefinition.Choices = [];
                    /** Convert XML Choices object to an array of choices */
                    var xmlChoices = $(xmlField).find('CHOICE');
                    __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](xmlChoices, function (xmlChoice) {
                        fieldDefinition.Choices.push($(xmlChoice).text());
                    });
                    fieldDefinition.Default = $(xmlField).find('Default').text();
                }
            }
        });
        return fieldDefinitions;
    };
    /**
     * @ngdoc function
     * @name angularPoint.apDecodeService:extendListDefinitionFromXML
     * @methodOf angularPoint.apDecodeService
     * @description
     * Takes the XML response from a web service call and extends the list definition in the model
     * with additional field metadata.  Important to note that all properties will coming from the XML start
     * with a capital letter.
     * @param {object} list model.list
     * @param {object} responseXML XML response from the server.
     * @returns {object} Extended list object.
     */
    DecodeService.prototype.extendListDefinitionFromXML = function (list, responseXML) {
        var service = this;
        $(responseXML).find("List").each(function () {
            service.extendObjectWithXMLAttributes(this, list, service.apXMLListAttributeTypes);
        });
        return list;
    };
    /**
     * @ngdoc function
     * @name angularPoint.apDecodeService:extendListMetadata
     * @methodOf angularPoint.apDecodeService
     * @description
     * Convenience method that extends the list definition and the field definitions from an xml list response
     * from the server.  Can be used specifically with GetListItemsSinceToken and GetList operations.
     * @param {object} model Model for a given list.
     * @param {object} responseXML XML response from the server.
     */
    DecodeService.prototype.extendListMetadata = function (model, responseXML) {
        this.extendListDefinitionFromXML(model.list, responseXML);
        this.extendFieldDefinitionsFromXML(model.list.fields, responseXML);
    };
    /**
     * @ngdoc function
     * @name angularPoint.apDecodeService:extendObjectWithXMLAttributes
     * @methodOf angularPoint.apDecodeService
     * @description
     * Takes an XML element and copies all attributes over to a given JS object with corresponding values.  If
     * no JS Object is provided, it extends an empty object and returns it.  If an attributeTypes object is provided
     * we parse each of the defined field so they are typed correctly instead of being a simple string.
     * Note: Properties are not necessarily CAMLCase.
     * @param {object} xmlObject An XML element.
     * @param {object} [jsObject={}] An optional JS Object to extend XML attributes to.
     * @param {object} [attributeTypes={}] Key/Val object with keys being the name of the field and val being the
     * type of field.
     * @returns {object} JS Object
     */
    DecodeService.prototype.extendObjectWithXMLAttributes = function (xmlObject, jsObject, attributeTypes) {
        var _this = this;
        var objectToExtend = jsObject || {};
        var attributeMap = attributeTypes || {};
        var xmlAttributes = xmlObject.attributes;
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](xmlAttributes, function (attr, attrNum) {
            var attrName = xmlAttributes[attrNum].name;
            objectToExtend[attrName] = $(xmlObject).attr(attrName);
            if (attributeMap[attrName]) {
                objectToExtend[attrName] = _this.parseStringValue(objectToExtend[attrName], attributeMap[attrName]);
            }
        });
        return objectToExtend;
    };
    DecodeService.prototype.jsAttachments = function (str) {
        /* Depending on CAMLQueryOptions Config an attachment can be formatted in 1 of the below 3 ways:
         1. {number} The number of attachments for a given list item.
         CAMLQueryOptions
         <IncludeAttachmentUrls>FALSE</IncludeAttachmentUrls>
         <IncludeAttachmentVersion>FALSE</IncludeAttachmentVersion>

         Example
         ows_Attachments="2"

         2. {string}
         CAMLQueryOptions
         <IncludeAttachmentUrls>TRUE</IncludeAttachmentUrls>
         <IncludeAttachmentVersion>FALSE</IncludeAttachmentVersion>

         Format
         ;#[ListUrl]/Attachments/[ListItemId]/[FileName];#

         Example:
         ows_Attachments=";#https://SharePointSite.com/Lists/Widgets/Attachments/4/DocumentName.xlsx;#"

         //Todo Check to see if there is any value in this option
         3. {string} NOTE: We don't currently handle this format.
         CAMLQueryOptions
         <IncludeAttachmentUrls>TRUE</IncludeAttachmentUrls>
         <IncludeAttachmentVersion>TRUE</IncludeAttachmentVersion>

         Format
         ;#[ListUrl]/Attachments/[ListItemId]/[FileName];#[AttachmentGUID],[Version Number];#

         Example:
         ows_Attachments=";#https://SharePointSite.com/Lists/Widgets/Attachments/4/DocumentName.xlsx;#{4378D394-8601-480D-ABD0-0A0505E726FB},1;#"
         */
        if (!isNaN(str)) {
            /** Value is a number current stored as a string */
            var int = parseInt(str);
            if (int > 0) {
                return int;
            }
            else {
                return '';
            }
        }
        else {
            /** Split into an array of attachment URLs */
            return this.jsChoiceMulti(str);
        }
    };
    DecodeService.prototype.jsBoolean = function (str) {
        /** SharePoint uses different string representations for booleans in different places so account for each */
        return str === '1' || str === 'True' || str === 'TRUE';
    };
    DecodeService.prototype.jsCalc = function (str) {
        if (str.length === 0) {
            return null;
        }
        else {
            var thisCalc = str.split(';#');
            // The first value will be the calculated column value type, the second will be the value
            return this.parseStringValue(thisCalc[1], thisCalc[0]);
        }
    };
    DecodeService.prototype.jsChoiceMulti = function (str) {
        if (str.length === 0) {
            return [];
        }
        else {
            var thisChoiceMultiObject = [];
            var thisChoiceMulti = str.split(';#');
            for (var i = 0; i < thisChoiceMulti.length; i++) {
                if (thisChoiceMulti[i].length !== 0) {
                    thisChoiceMultiObject.push(thisChoiceMulti[i]);
                }
            }
            return thisChoiceMultiObject;
        }
    };
    DecodeService.prototype.jsDate = function (str) {
        if (!str) {
            return null;
        }
        else {
            /** Replace dashes with slashes and the "T" deliminator with a space if found */
            var dt = str.split("T")[0] !== str ? str.split("T") : str.split(" ");
            var d = dt[0].split("-");
            var t = dt[1].split(":");
            var t3 = t[2].split("Z");
            return new Date(d[0], (d[1] - 1), d[2], t[0], t[1], t3[0]);
        }
    };
    DecodeService.prototype.jsFloat = function (str) {
        if (!str) {
            return str;
        }
        else {
            return parseFloat(str);
        }
    };
    DecodeService.prototype.jsInt = function (str) {
        if (!str) {
            return str;
        }
        else {
            return parseInt(str, 10);
        }
    };
    DecodeService.prototype.jsLookup = function (str, options) {
        if (str.length === 0) {
            return null;
        }
        else {
            //Send to constructor
            return this.apLookupFactory.create(str, options);
        }
    };
    DecodeService.prototype.jsLookupMulti = function (str, options) {
        if (str.length === 0) {
            return [];
        }
        else {
            var thisLookupMultiObject = [];
            var thisLookupMulti = str.split(';#');
            for (var i = 0; i < thisLookupMulti.length; i = i + 2) {
                /** Ensure a lookup id is present before attempting to push a new lookup */
                if (thisLookupMulti[i]) {
                    var thisLookup = this.jsLookup(thisLookupMulti[i] + ';#' + thisLookupMulti[i + 1], options);
                    thisLookupMultiObject.push(thisLookup);
                }
            }
            return thisLookupMultiObject;
        }
    };
    DecodeService.prototype.jsObject = function (str) {
        if (!str) {
            return str;
        }
        else {
            /** Ensure JSON is valid and if not throw error with additional detail */
            var json = null;
            try {
                json = JSON.parse(str);
            }
            catch (err) {
                console.error('Invalid JSON: ', str);
            }
            return json;
        }
    };
    DecodeService.prototype.jsString = function (str) {
        return str;
    };
    DecodeService.prototype.jsUser = function (str) {
        if (str.length === 0) {
            return null;
        }
        //Send to constructor
        return this.apUserFactory.create(str);
    };
    DecodeService.prototype.jsUserMulti = function (str) {
        if (str.length === 0) {
            return [];
        }
        else {
            var thisUserMultiObject = [];
            var thisUserMulti = str.split(';#');
            for (var i = 0; i < thisUserMulti.length; i = i + 2) {
                var thisUser = this.jsUser(thisUserMulti[i] + ';#' + thisUserMulti[i + 1]);
                thisUserMultiObject.push(thisUser);
            }
            return thisUserMultiObject;
        }
    };
    /**
     * @ngdoc function
     * @name angularPoint.apDecodeService:parseFieldVersions
     * @methodOf angularPoint.apDecodeService
     * @description
     * Takes an XML response from SharePoint webservice and returns an array of field versions.
     *
     * @param {xml} responseXML Returned XML from web service call.
     * @param {object} fieldDefinition Field definition from the model.
     *
     * @returns {FieldVersionCollection} FieldVersionCollection object with all versions included.
     */
    DecodeService.prototype.parseFieldVersions = function (responseXML, fieldDefinition) {
        var _this = this;
        // let versions = {};
        var xmlVersions = $(responseXML).find('Version');
        var versionCount = xmlVersions.length;
        var fieldVersionCollection = new __WEBPACK_IMPORTED_MODULE_1__factories_apListItemVersionFactory__["a" /* FieldVersionCollection */](fieldDefinition);
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](xmlVersions, function (xmlVersion, index) {
            /** Bug in SOAP Web SPServicesCore returns time in UTC time for version history
             *  Details: https://spservices.codeplex.com/discussions/391879
             */
            var utcDate = _this.parseStringValue($(xmlVersion).attr('Modified'), 'DateTime');
            /** Parse the xml and create a representation of the version as a js object */
            var editor = _this.parseStringValue($(xmlVersion).attr('Editor'), 'User');
            /** Turn the SharePoint formatted date into a valid date object */
            var modified = _this.convertUTCDateToLocalDate(utcDate);
            /** Properly format field based on definition from model */
            var value = _this.parseStringValue($(xmlVersion).attr(fieldDefinition.staticName), fieldDefinition.objectType);
            var version = versionCount - index;
            /** Add each distict version to the version collection */
            fieldVersionCollection.addVersion(editor, modified, value, version);
        });
        return fieldVersionCollection;
    };
    /**
     * @ngdoc function
     * @name angularPoint.apDecodeService:parseStringValue
     * @methodOf angularPoint.apDecodeService
     * @description
     * Converts a SharePoint string representation of a field into the correctly formatted JavaScript version
     * based on object type.  A majority of this code is directly taken from Marc Anderson's incredible
     * [SPServices](http://spservices.codeplex.com/) project but it needed some minor tweaking to work here.
     * @param {string} str SharePoint string representing the value.
     * @param {string} [objectType='Text'] The type based on field definition.  See
     * See [List.customFields](#/api/List.FieldDefinition) for additional info on how to define a field type.
     * @param {object} [options] Options to pass to the object constructor.
     * @param {object} [options.entity] Reference to the parent list item which can be used by child constructors.
     * @param {object} [options.propertyName] Name of property on the list item.
     * @returns {*} The newly instantiated JavaScript value based on field type.
     */
    DecodeService.prototype.parseStringValue = function (str, objectType, options) {
        var unescapedValue = __WEBPACK_IMPORTED_MODULE_0_lodash__["unescape"](str);
        var colValue;
        switch (objectType) {
            case 'Attachments':
                colValue = this.jsAttachments(unescapedValue);
                break;
            case 'Boolean':
                colValue = this.jsBoolean(unescapedValue);
                break;
            case 'Calculated':
                colValue = this.jsCalc(unescapedValue);
                break;
            case 'datetime': // For calculated columns, stored as datetime;#value
            case 'DateTime':
                // Dates have dashes instead of slashes: ows_Created='2009-08-25 14:24:48'
                colValue = this.jsDate(unescapedValue);
                break;
            case 'Lookup':
                colValue = this.jsLookup(unescapedValue, options);
                break;
            case 'User':
                colValue = this.jsUser(unescapedValue);
                break;
            case 'LookupMulti':
                colValue = this.jsLookupMulti(unescapedValue, options);
                break;
            case 'UserMulti':
                colValue = this.jsUserMulti(unescapedValue);
                break;
            case 'Integer':
            case 'Counter':
                colValue = this.jsInt(unescapedValue);
                break;
            case 'Number':
            case 'Currency':
            case 'float': // For calculated columns, stored as float;#value
            case 'Float':
                colValue = this.jsFloat(unescapedValue);
                break;
            case 'MultiChoice':
                colValue = this.jsChoiceMulti(unescapedValue);
                break;
            case 'JSON':
                colValue = this.jsObject(unescapedValue);
                break;
            case 'Choice':
            case 'HTML':
            case 'Note':
            default:
                // All other objectTypes will be simple strings
                colValue = this.jsString(unescapedValue);
                break;
        }
        return colValue;
    };
    /**
     * @ngdoc function
     * @name angularPoint.apDecodeService:parseXMLEntity
     * @methodOf angularPoint.apDecodeService
     * @description
     * Convert an XML list item into a JS object using the fields defined in the model for the given list item.
     * @param {object} xmlEntity XML Object.
     * @param {object} options Configuration options.
     * @param {string} options.mapping Mapping of fields we'd like to extend on our JS object.
     * @param {boolean} [options.includeAllAttrs=false] If true, return all attributes, regardless whether
     * @param {boolean} [options.removeOws=true] Specifically for GetListItems, if true, the leading ows_ will be removed.
     * @returns {object} New entity using the factory on the model.
     */
    DecodeService.prototype.parseXmlEntity = function (xmlEntity, _a) {
        var _this = this;
        var mapping = _a.mapping, _b = _a.includeAllAttrs, includeAllAttrs = _b === void 0 ? false : _b, _c = _a.removeOws, removeOws = _c === void 0 ? true : _c;
        var entity = {};
        var rowAttrs = xmlEntity.attributes;
        /** Bring back all mapped columns, even those with no value */
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](mapping, function (fieldDefinition) {
            entity[fieldDefinition.mappedName] = _this.apFieldService.getDefaultValueForType(fieldDefinition.objectType);
        });
        /** Parse through the element's attributes */
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](rowAttrs, function (attr) {
            var thisAttrName = attr.name;
            var thisMapping = mapping[thisAttrName];
            var thisObjectName = typeof thisMapping !== 'undefined' ? thisMapping.mappedName : removeOws ? thisAttrName.split('ows_')[1] : thisAttrName;
            var thisObjectType = typeof thisMapping !== 'undefined' ? thisMapping.objectType : undefined;
            if (includeAllAttrs || thisMapping !== undefined) {
                entity[thisObjectName] = _this.parseStringValue(attr.value, thisObjectType, {
                    entity: entity,
                    propertyName: thisObjectName
                });
            }
        });
        return entity;
    };
    /**
     * @ngdoc function
     * @name angularPoint.apDecodeService:processListItems
     * @methodOf angularPoint.apDecodeService
     * @description
     * Post processing of data after returning list items from server.  Returns a promise that resolves with
     * the processed entities.  Promise allows us to batch conversions of large lists to prevent ui slowdowns.
     * @param {object} model Reference to allow updating of model.
     * @param {object} query Reference to the query responsible for requesting entities.
     * @param {xml} responseXML Resolved promise from SPServices web service call.
     * @param {object} [options] Optional configuration object.
     * @param {boolean} [options.includeAllAttrs=false] If true, return all attributes, regardless whether
     * they are mapped.
     * @param {string} [options.filter='z:row'] XML filter string used to find the elements to iterate over.
     * @param {Array} [options.mapping=model.list.mapping] Field definitions, typically stored on the model.
     * @param {Array} [options.target=model.getCache()] Optionally pass in an Indexed Cache instead of using the defaul cache.
     * @returns {Object} Inedexed Cache.
     */
    DecodeService.prototype.processListItems = function (model, query, responseXML, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.includeAllAttrs, includeAllAttrs = _c === void 0 ? false : _c, _d = _b.filter, filter = _d === void 0 ? 'z:row' : _d, _e = _b.mapping, mapping = _e === void 0 ? model.list.mapping : _e, _f = _b.target, target = _f === void 0 ? model.getCache() : _f;
        /** Map returned XML to JS objects based on mapping from model */
        var filteredNodes = this.apXMLToJSONService.filterNodes(responseXML, filter);
        /** Prepare constructor for XML entities with references to the query and cached container */
        var listItemProvider = this.createListItemProvider(model, query, target);
        /** Convert XML entities into JS objects */
        var parsedEntities = this.xmlToJson(filteredNodes, { mapping: mapping, includeAllAttrs: includeAllAttrs });
        /** Instantiate each list list item with factory on model and add to cache */
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](parsedEntities, function (rawListItemObject) {
            listItemProvider(rawListItemObject);
        });
        return target;
    };
    /**
     * @ngdoc function
     * @name angularPoint.apDecodeService:xmlToJson
     * @methodOf angularPoint.apDecodeService
     * @description
     * Converts an XML node set to Javascript object array. This is a modified version of the SPServices
     * "SPXmlToJson" function.
     * @param {array} xmlEntities ["z:rows"] XML rows that need to be parsed.
     * @param {object} options Options object.
     * @param {IListFieldMapping} options.mapping [columnName: "mappedName", objectType: "objectType"]
     * @param {boolean} [options.includeAllAttrs=false] If true, return all attributes, regardless whether
     * they are mapped.
     * @param {boolean} [options.removeOws=true] Specifically for GetListItems, if true, the leading ows_ will
     * be stripped off the field name.
     * @returns {object[]} An array of JavaScript objects.
     */
    DecodeService.prototype.xmlToJson = function (xmlEntities, _a) {
        var _this = this;
        var mapping = _a.mapping, _b = _a.includeAllAttrs, includeAllAttrs = _b === void 0 ? false : _b, _c = _a.removeOws, removeOws = _c === void 0 ? true : _c;
        var parseOptions = { mapping: mapping, includeAllAttrs: includeAllAttrs, removeOws: removeOws };
        return __WEBPACK_IMPORTED_MODULE_0_lodash__["map"](xmlEntities, function (xmlEntity) {
            return _this.parseXmlEntity(xmlEntity, parseOptions);
        });
    };
    return DecodeService;
}());

DecodeService.$inject = ['apCacheService', 'apLookupFactory', 'apUserFactory', 'apFieldService',
    'apXMLListAttributeTypes', 'apXMLFieldAttributeTypes', 'apXMLToJSONService'];


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return EncodeService; });

/**
 * @ngdoc service
 * @name angularPoint.apEncodeService
 * @description
 * Processes JavaScript objects and converts them to a format SharePoint expects.
 *
 * @requires angularPoint.apUtilityService
 */
var EncodeService = (function () {
    function EncodeService(apUtilityService, SPServices) {
        this.apUtilityService = apUtilityService;
        this.SPServices = SPServices;
    }
    /**
     * Converts an array of selected values into a SharePoint MultiChoice string
     * @param {string[]} arr
     * @returns {string}
     */
    EncodeService.prototype.choiceMultiToString = function (choices) {
        var str = '';
        var delim = ';#';
        if (choices.length > 0) {
            /** String is required to begin with deliminator */
            str += delim;
            /** Append each item in the supplied array followed by deliminator */
            for (var _i = 0, choices_1 = choices; _i < choices_1.length; _i++) {
                var choice = choices_1[_i];
                str += choice + delim;
            }
        }
        return str;
    };
    /**
     * @ngdoc function
     * @name angularPoint.apEncodeService:createValuePair
     * @methodOf angularPoint.apEncodeService
     * @description
     * Uses a field definition from a model to properly format a value for submission to SharePoint.  Typically
     * used prior to saving a list item, we iterate over each of the non-readonly properties defined in the model
     * for a list item and convert those value into value pairs that we can then hand off to SPServices.
     * @param {object} fieldDefinition The field definition, typically defined in the model.
     * <pre>
     * {
             *  staticName: "Title",
             *  objectType: "Text",
             *  mappedName: "lastName",
             *  readOnly:false
             * }
     * </pre>
     * @param {*} value Current field value.
     * @returns {Array} [fieldName, fieldValue]
     */
    EncodeService.prototype.createValuePair = function (fieldDefinition, value) {
        var encodedValue = this.encodeValue(fieldDefinition.objectType, value);
        return [fieldDefinition.staticName, encodedValue];
    };
    /**
     * @ngdoc function
     * @name angularPoint.apEncodeService:encodeValue
     * @methodOf angularPoint.apEncodeService
     * @param {string} fieldType One of the valid field types.
     * @param {*} value Value to be encoded.
     * @returns {string} Encoded value ready to be sent to the server.
     */
    EncodeService.prototype.encodeValue = function (fieldType, value) {
        var str = '';
        /** Only process if note empty, undefined, or null.  Allow false. */
        if (value !== '' && !__WEBPACK_IMPORTED_MODULE_0_lodash__["isUndefined"](value) && !__WEBPACK_IMPORTED_MODULE_0_lodash__["isNull"](value)) {
            switch (fieldType) {
                case 'Lookup':
                case 'User':
                    if (value.lookupId) {
                        /** Only include lookupValue if defined */
                        str = value.lookupId + ';#' + (value.lookupValue || '');
                    }
                    break;
                case 'LookupMulti':
                case 'UserMulti':
                    str = this.stringifySharePointMultiSelect(value, 'lookupId');
                    break;
                case 'MultiChoice':
                    str = this.choiceMultiToString(value);
                    break;
                case 'Boolean':
                    str = value ? "1" : "0";
                    break;
                case 'DateTime':
                    //A string date in ISO8601 format, e.g., '2013-05-08T01:20:29Z-05:00'
                    str = this.stringifySharePointDate(value);
                    break;
                case 'JSON':
                    str = JSON.stringify(value);
                    break;
                case 'HTML':
                case 'Note':
                default:
                    str = value;
            }
        }
        if (__WEBPACK_IMPORTED_MODULE_0_lodash__["isString"](str)) {
            /** Ensure we encode before sending to server (replace ", <, >)*/
            str = this.SPServices.encodeXml(str);
        }
        return str;
    };
    /**
     * @ngdoc function
     * @name angularPoint.apEncodeService:generateValuePairs
     * @methodOf angularPoint.apEncodeService
     * @description
     * Typically used to iterate over the non-readonly field definitions stored in a model and convert a
     * given list item entity into value pairs that we can pass to SPServices for saving.
     * @param {Array} fieldDefinitions Definitions from the model.
     * @param {object} listItem list item that we'll attempt to iterate over to find the properties that we need to
     * save it to SharePoint.
     * @returns {[string, string][]} Value pairs of all non-readonly fields.
     * @example
     * [[fieldName1, fieldValue1], [fieldName2, fieldValue2], ...]
     */
    EncodeService.prototype.generateValuePairs = function (fieldDefinitions, listItem) {
        var _this = this;
        var pairs = [];
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](fieldDefinitions, function (field) {
            /** Check to see if item contains data for this field */
            if (__WEBPACK_IMPORTED_MODULE_0_lodash__["has"](listItem, field.mappedName)) {
                pairs.push(_this.createValuePair(field, listItem[field.mappedName]));
            }
        });
        return pairs;
    };
    /**
     * @ngdoc function
     * @name angularPoint.apEncodeService:stringifySharePointDate
     * @methodOf angularPoint.apEncodeService
     * @description
     * Converts a JavaScript date into a modified ISO8601 date string using the TimeZone
     * offset for the current user.
     * @example
     * <pre>'2014-05-08T08:12:18Z-07:00'</pre>
     * @param {Date} date Valid JS date.
     * @returns {string} ISO8601 date string.
     */
    EncodeService.prototype.stringifySharePointDate = function (date) {
        var jsDate;
        if (!__WEBPACK_IMPORTED_MODULE_0_lodash__["isDate"](date) && __WEBPACK_IMPORTED_MODULE_0_lodash__["isString"](date) && date.split('-').length === 3) {
            /** Date string formatted YYYY-MM-DD */
            var dateComponents = date.split('-');
            jsDate = new Date(parseInt(dateComponents[0]), parseInt(dateComponents[1]) - 1, parseInt(dateComponents[2]), 0, 0, 0);
        }
        else if (!__WEBPACK_IMPORTED_MODULE_0_lodash__["isDate"](date)) {
            throw new Error('Invalid Date Provided: ' + date.toString());
        }
        else {
            jsDate = date;
        }
        var dateString = '';
        dateString += jsDate.getFullYear();
        dateString += '-';
        dateString += this.apUtilityService.doubleDigit(jsDate.getMonth() + 1);
        dateString += '-';
        dateString += this.apUtilityService.doubleDigit(jsDate.getDate());
        dateString += 'T';
        dateString += this.apUtilityService.doubleDigit(jsDate.getHours());
        dateString += ':';
        dateString += this.apUtilityService.doubleDigit(jsDate.getMinutes());
        dateString += ':';
        dateString += this.apUtilityService.doubleDigit(jsDate.getSeconds());
        dateString += 'Z-';
        if (!this.savedTimeZone) {
            //Get difference between UTC time and local time in minutes and convert to hours
            //Store so we only need to do this once
            this.savedTimeZone = new Date().getTimezoneOffset() / 60;
        }
        dateString += this.apUtilityService.doubleDigit(this.savedTimeZone);
        dateString += ':00';
        return dateString;
    };
    /**
     * @ngdoc function
     * @name angularPoint.apEncodeService:stringifySharePointMultiSelect
     * @methodOf angularPoint.apEncodeService
     * @description
     * Turns an array of, typically {lookupId: someId, lookupValue: someValue}, objects into a string
     * of delimited id's that can be passed to SharePoint for a multi select lookup or multi user selection
     * field.  SharePoint doesn't need the lookup values so we only need to pass the ID's back.
     *
     * @param {object[]} multiSelectValue Array of {lookupId: #, lookupValue: 'Some Value'} objects.
     * @param {string} [idProperty='lookupId'] Property name where we'll find the ID value on each of the objects.
     * @param {string} [valueProperty='lookupValue'] Property name where we'll find the value for this object.
     * @returns {string} Need to format string of id's in following format [ID0];#;#[ID1];#;#[ID1]
     */
    EncodeService.prototype.stringifySharePointMultiSelect = function (multiSelectValue, idProperty, valueProperty) {
        if (idProperty === void 0) { idProperty = 'lookupId'; }
        if (valueProperty === void 0) { valueProperty = 'lookupValue'; }
        var stringifiedValues = '';
        var idProp = idProperty || 'lookupId';
        var valProp = valueProperty || 'lookupValue';
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](multiSelectValue, function (lookupObject, iteration) {
            /** Need to format string of id's in following format [ID0];#[VAL0];#[ID1];#[VAL1] */
            stringifiedValues += lookupObject[idProp] + ';#' + (lookupObject[valProp] || '');
            /** Append delim after all but last because we don't want trailing ';#' at end of string */
            if (iteration < (multiSelectValue.length - 1)) {
                stringifiedValues += ';#';
            }
        });
        return stringifiedValues;
    };
    return EncodeService;
}());

EncodeService.$inject = ['apUtilityService', 'SPServices'];


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ exports["a"] = exceptionLoggingService;
/**
 * @ngdoc service
 * @name angularPoint.$exceptionHandler
 * @description
 * Replaces the default angular implementation and handles logging errors to the apLogger service.
 * @requires angularPoint.apLogger
 */
exceptionLoggingService.$inject = ['$log', '$injector'];
function exceptionLoggingService($log, $injector) {
    function error(exception, cause) {
        /** Need to inject otherwise get circular dependency when using dependency injection */
        var apLogger = $injector.get('apLogger');
        // now try to log the error to the server side.
        apLogger.exception(exception, cause);
        // preserve the default behaviour which will log the error
        // to the console, and allow the application to continue running.
        $log.error.apply($log, arguments);
    }
    return error;
}


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return ExportService; });

/**
 * @ngdoc service
 * @name angularPoint.apExportService
 * @description
 * Tools to assist with development.
 * @requires angularPoint.apUtilityService
 */
var ExportService = (function () {
    function ExportService(apUtilityService, apFormattedFieldValueService) {
        this.apUtilityService = apUtilityService;
        this.apFormattedFieldValueService = apFormattedFieldValueService;
    }
    /**
     * @ngdoc function
     * @name angularPoint.apExportService:generateCSV
     * @methodOf angularPoint.apExportService
     * @description
     * Converts an array of objects into a parsed array of arrays based on a field config object.
     * @param {object[]} entities Array of objects to convert.
     * @param {object|string[]} fields Array of objects defining the fields to parse.  Can also pass in strings representing the name of the field which will then be parsed based on field type.
     * FieldDefinition:
     * {string} object.field Property name on the object that we want to parse.
     * {string} [object.label=object.field capitalized] Column Label
     * {function} [object.getVal] Custom function that overrides the default method of parsing based on field type.
     * @param {object} [options] Optional config settings.
     * @param {string} [options.delim='; '] Delimiter used to separate fields that potentially contain multiple values that will be concatenated into a string.
     * @returns {array[]} Return array of arrays, with the first array being the column names and every subsequent array representing a row in the csv dataset.
     * @example
     * <pre>
     * var customDelimiter = ' | ';
     * var saveCSV = function() {
             *    var parsedCSV = apExportService.generateCSV(entities, [
             *     //Field definition
             *     { label: 'ID', field: 'id' },
             *     //Field as simple string
             *     'title',
             *     'project',
             *     { label: 'Project:ID', field: 'project.lookupId' },
             *     { label: 'Type', field: 'eventType' },
             *     { label: 'Start Date', field: 'startDate' },
             *     { label: 'End Date', field: 'endDate' },
             *     'location',
             *     'description',
             *     //Field definition with custom parse logic
             *     { label: 'Comments', field: 'comments', stringify: function (comments) {
             *       var str = '';
             *       _.each(comments, function (comment, i) {
             *         if (i > 0) {
             *           str += '\n';
             *         }
             *         str += comment.text + '\n';
             *       });
             *       return str;
             *     }}
             *   ]);
             *
             *   //Save to user's machine
             *   apExportService.saveCSV(parsedCSV, 'MyFile', {delim: customDelimiter});
             * }
     * </pre>
     *
     */
    ExportService.prototype.generateCSV = function (entities, fields, options) {
        var _this = this;
        var defaults = {
            dateFormat: 'json',
            delim: '; ',
            includeTitleRow: true
        }, opts = __WEBPACK_IMPORTED_MODULE_0_lodash__["assign"]({}, defaults, options), entitiesArray = [
            []
        ];
        /** Process each of the entities in the data source */
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](entities, function (entity, entityIndex) {
            var entityArray = [];
            /** Process each of the specified fields */
            __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](fields, function (f) {
                /** Handle both string and object definition */
                var fieldDefinition = __WEBPACK_IMPORTED_MODULE_0_lodash__["isString"](f) ? { field: f } : f;
                /** Split the field name from the property if provided */
                var fieldComponents = fieldDefinition.field.split('.');
                var propertyName = fieldComponents[0];
                /** First array has the field names */
                if (entityIndex === 0 && opts.includeTitleRow) {
                    /** Take a best guess if a column label isn't specified by capitalizing and inserting spaces between camel humps*/
                    var label = fieldDefinition.label ?
                        fieldDefinition.label : _this.apUtilityService.fromCamelCase(propertyName);
                    entitiesArray[0].push(label);
                }
                var val = '';
                if (__WEBPACK_IMPORTED_MODULE_0_lodash__["isFunction"](fieldDefinition.stringify)) {
                    /** Allows us to override standard field logic for special cases */
                    val = fieldDefinition.stringify(entity[fieldDefinition.field]);
                }
                else if (fieldComponents.length > 1) {
                    /** Allow user to specify dot separated property path */
                    if (__WEBPACK_IMPORTED_MODULE_0_lodash__["has"](entity, fieldDefinition.field)) {
                        val = __WEBPACK_IMPORTED_MODULE_0_lodash__["get"](entity, fieldDefinition.field).toString();
                    }
                }
                else {
                    /** Get the value based on field type defined in the model for the entity*/
                    var modelDefinition = entity.getFieldDefinition(propertyName);
                    val = _this.apFormattedFieldValueService.getFormattedFieldValue(entity[fieldDefinition.field], modelDefinition.objectType, opts);
                }
                /** Add string to column */
                entityArray.push(val);
            });
            /** Add row */
            entitiesArray.push(entityArray);
        });
        return entitiesArray;
    };
    /**
     * @description Replaces commonly-used Windows 1252 encoded chars that do not exist in ASCII or
     *  ISO-8859-1 with ISO-8859-1 cognates.
     * @param {string} text Text to be validated and cleaned.
     * @returns {string}
     */
    ExportService.prototype.replaceWordChars = function (text) {
        var s = text;
        // smart single quotes and apostrophe
        s = s.replace(/[\u2018|\u2019|\u201A]/g, "\'");
        // smart double quotes
        s = s.replace(/[\u201C|\u201D|\u201E]/g, "\"");
        // ellipsis
        s = s.replace(/\u2026/g, "...");
        // dashes
        s = s.replace(/[\u2013|\u2014]/g, "-");
        // circumflex
        s = s.replace(/\u02C6/g, "^");
        // open angle bracket
        s = s.replace(/\u2039/g, "<");
        // close angle bracket
        s = s.replace(/\u203A/g, ">");
        // spaces
        s = s.replace(/[\u02DC|\u00A0]/g, " ");
        return s;
    };
    /**
     * @ngdoc function
     * @name angularPoint.apExportService:saveCSV
     * @methodOf angularPoint.apExportService
     * @description
     * Converts an array of arrays into a valid CSV file that is then downloaded to the users machine
     * @requires angularPoint.apExportService:saveFile
     * @param {array[]} data Array of arrays that we'd like to dump to a CSV file and save to the local machine.
     * @param {string} [filename=debug.csv] Optionally name the file.
     * @example
     * <pre>
     * //Lets assume we want to looks at an object that is too big to be easily viewed in the console.
     * apExportService.saveCSV(objectToSave, 'MyFile');
     * //This would download a file named MyFile.csv
     * </pre>
     *
     */
    ExportService.prototype.saveCSV = function (data, filename) {
        if (filename === void 0) { filename = 'debug.csv'; }
        var csvString = '';
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](data, function (row) {
            __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](row, function (column, columnIndex) {
                var result = column === null ? '' : this.replaceWordChars(column);
                if (columnIndex > 0) {
                    csvString += ',';
                }
                /** Escape single quotes with doubles in within the string */
                result = result.replace(/"/g, '""');
                /** Surround string with quotes so we can have line breaks */
                csvString += '"' + result + '"';
            });
            csvString += '\n';
        });
        this.saveFile(csvString, 'csv;charset=utf-8;', filename);
    };
    /**
     * @ngdoc function
     * @name angularPoint.apExportService:saveFile
     * @methodOf angularPoint.apExportService
     * @description
     * Used to convert a JS object or XML document into a file that is then downloaded on the users
     * local machine.  Original work located:
     * [here](http://bgrins.github.io/devtools-snippets/#console-save).
     * @param {object} data JS object that we'd like to dump to a JSON file and save to the local machine.
     * @param {string} fileType Can be either 'xml' or 'json'.
     * @param {string} [filename=debug.json] Optionally name the file.
     * @example
     * <pre>
     * //Lets assume we want to looks at an object that is too big to be easily viewed in the console.
     * apExportService.saveJSON(objectToSave, 'myobject.json');
     * </pre>
     *
     */
    ExportService.prototype.saveFile = function (data, fileType, filename) {
        if (filename === void 0) { filename = 'debug.json'; }
        if (!data) {
            console.error('apExportService.save' + fileType.toUpperCase() + ': No data');
            return;
        }
        /** If passed in fileType="csv;charset=utf-8;" we just want to use "csv" */
        var fileExtension = fileType.split(';')[0];
        if (!filename) {
            filename = 'debug.' + fileExtension;
        }
        if (fileType === 'json' && typeof data === 'object') {
            data = JSON.stringify(data, undefined, 4);
        }
        var blob = new Blob([data], { type: 'text/' + fileType }), e = document.createEvent('MouseEvents'), a = document.createElement('a');
        a.download = filename;
        a.href = window.URL.createObjectURL(blob);
        a.dataset['downloadurl'] = ['text/' + fileType, a.download, a.href].join(':');
        e.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
        a.dispatchEvent(e);
    };
    /**
     * @ngdoc function
     * @name angularPoint.apExportService:saveJSON
     * @methodOf angularPoint.apExportService
     * @description
     * Simple convenience function that uses angularPoint.apExportService:saveFile to download json to the local machine.
     * @requires angularPoint.apExportService:saveFile
     * @param {object} data JS object that we'd like to dump to a JSON file and save to the local machine.
     * @param {string} [filename=debug.json] Optionally name the file.
     * @example
     * <pre>
     * //Lets assume we want to looks at an object that is too big to be easily viewed in the console.
     * apExportService.saveJSON(objectToSave, 'myobject.json');
     * </pre>
     *
     */
    ExportService.prototype.saveJSON = function (data, filename) {
        if (filename === void 0) { filename = 'debug.json'; }
        this.saveFile(data, 'json', filename);
    };
    /**
     * @ngdoc function
     * @name angularPoint.apExportService:saveXML
     * @methodOf angularPoint.apExportService
     * @description
     * Simple convenience function that uses angularPoint.apExportService:saveFile to download xml to the local machine.
     * @requires angularPoint.apExportService:saveFile
     * @param {object} data XML object that we'd like to dump to a XML file and save to the local machine.
     * @param {string} [filename=debug.xml] Optionally name the file.
     * @example
     * <pre>
     * //Lets assume we want to looks at an object that is too big to be easily viewed in the console.
     * apExportService.saveXML(objectToSave, 'myobject.xml');
     * </pre>
     *
     */
    ExportService.prototype.saveXML = function (data, filename) {
        if (filename === void 0) { filename = 'debug.xml'; }
        this.saveFile(data, 'xml', filename);
    };
    return ExportService;
}());

ExportService.$inject = ['apUtilityService', 'apFormattedFieldValueService'];


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return FieldService; });
var service;
var uniqueCount = 0;
// interface IFieldType {
//     defaultValue: string;
//     dynamicMock: Function;
//     staticMock: any;
// }
/**
 * @ngdoc service
 * @name angularPoint.apFieldService
 * @description
 * Handles the mapping of the various types of fields used within a SharePoint list
 */
var FieldService = (function () {
    function FieldService() {
        service = this;
        this.fieldTypes = getFieldTypes();
    }
    /**
     * @ngdoc function
     * @name angularPoint.apFieldService:getDefaultValueForType
     * @methodOf angularPoint.apFieldService
     * @description
     * Returns the empty value expected for a field type
     * @param {string} fieldType Type of field.
     * @returns {*} Default value based on field type.
     */
    FieldService.prototype.getDefaultValueForType = function (fieldType) {
        var fieldDefinition = service.getDefinition(fieldType);
        var defaultValue;
        if (fieldDefinition) {
            defaultValue = fieldDefinition.defaultValue;
        }
        return defaultValue;
    };
    /**
     * Returns an object defining a specific field type
     * @param {string} fieldType
     * @returns {object} fieldTypeDefinition
     */
    FieldService.prototype.getDefinition = function (fieldType) {
        return service.fieldTypes[fieldType] ? service.fieldTypes[fieldType] : service.fieldTypes['Text'];
    };
    /**
     * @ngdoc function
     * @name angularPoint.apFieldService:getMockData
     * @methodOf angularPoint.apFieldService
     * @description
     * Can return mock data appropriate for the field type, by default it dynamically generates data but
     * the staticValue param will instead return a hard coded type specific value
     *
     * @requires ChanceJS to produce dynamic data.
     * https://github.com/victorquinn/chancejs
     * @param {string} fieldType Field type from the field definition.
     * @param {object} [options] Optional params.
     * @param {boolean} [options.staticValue=false] Default to dynamically build mock data.
     * @returns {*} mockData
     */
    FieldService.prototype.getMockData = function (fieldType, options) {
        var mock;
        var fieldDefinition = service.getDefinition(fieldType);
        if (fieldDefinition) {
            // if (_.isFunction(window.Chance) && options && !options.staticValue) {
            //     /** Return dynamic data if ChanceJS is available and flag isn't set requiring static data */
            //     mock = fieldDefinition.dynamicMock(options);
            // } else {
            /** Return static data if the flag is set or ChanceJS isn't available */
            mock = fieldDefinition.staticMock;
        }
        return mock;
    };
    /**
     * @ngdoc function
     * @name angularPoint.apFieldService:mockPermMask
     * @methodOf angularPoint.apFieldService
     * @description
     * Defaults to a full mask but allows simulation of each of main permission levels
     * @param {object} [options] Options container.
     * @param {string} [options.permissionLevel=FullMask] Optional mask.
     * @returns {string} Values for mask.
     */
    FieldService.prototype.mockPermMask = function (options) {
        var mask = 'FullMask';
        if (options && options.permissionLevel) {
            mask = options.permissionLevel;
        }
        return service.resolveValueForEffectivePermMask(mask);
    };
    /**
     * @ngdoc function
     * @name angularPoint.apFieldService:resolveValueForEffectivePermMask
     * @methodOf angularPoint.apFieldService
     * @description
     * Takes the name of a permission mask and returns a permission value which can then be used
     * to generate a permission object using modelService.resolvePermissions(outputfromthis)
     * @param {string} perMask Options:
     *  - AddListItems
     *  - EditListItems
     *  - DeleteListItems
     *  - ApproveItems
     *  - FullMask
     *  - ViewListItems
     * @returns {string} value
     */
    FieldService.prototype.resolveValueForEffectivePermMask = function (perMask) {
        var permissionValue;
        switch (perMask) {
            case 'AddListItems':
                permissionValue = 0x0000000000000002;
                break;
            case 'EditListItems':
                permissionValue = 0x0000000000000004;
                break;
            case 'DeleteListItems':
                permissionValue = 0x0000000000000008;
                break;
            case 'ApproveItems':
                permissionValue = 0x0000000000000010;
                break;
            case 'FullMask':
                permissionValue = 0x7FFFFFFFFFFFFFFF;
                break;
            case 'ViewListItems':
            default:
                permissionValue = 0x0000000000000001;
                break;
        }
        return permissionValue;
    };
    return FieldService;
}());

function getFieldTypes() {
    return {
        Text: {
            defaultValue: '',
            staticMock: 'Test String',
        },
        Note: {
            defaultValue: '',
            staticMock: 'This is a sentence.',
        },
        Boolean: {
            defaultValue: null,
            staticMock: true,
        },
        Calculated: {
            defaultValue: null,
            staticMock: 'float;#123.45',
        },
        Choice: {
            defaultValue: '',
            staticMock: 'My Choice',
        },
        Counter: {
            defaultValue: null,
            staticMock: getUniqueCounter(),
        },
        Currency: {
            defaultValue: null,
            staticMock: 120.50,
        },
        DateTime: {
            defaultValue: null,
            staticMock: new Date(2014, 5, 4, 11, 33, 25),
        },
        Integer: {
            defaultValue: null,
            staticMock: 14,
        },
        JSON: {
            defaultValue: '',
            staticMock: [
                { id: 1, title: 'test' },
                { id: 2 }
            ],
        },
        Lookup: {
            defaultValue: '',
            staticMock: { lookupId: 49, lookupValue: 'Static Lookup' },
        },
        LookupMulti: {
            defaultValue: [],
            staticMock: [
                { lookupId: 50, lookupValue: 'Static Multi 1' },
                { lookupId: 51, lookupValue: 'Static Multi 2' }
            ],
        },
        Mask: {
            defaultValue: service.mockPermMask(),
            staticMock: service.mockPermMask(),
        },
        MultiChoice: {
            defaultValue: [],
            staticMock: ['A Good Choice', 'A Bad Choice'],
        },
        User: {
            defaultValue: '',
            staticMock: { lookupId: 52, lookupValue: 'Static User' },
        },
        UserMulti: {
            defaultValue: [],
            staticMock: [
                { lookupId: 53, lookupValue: 'Static User 1' },
                { lookupId: 54, lookupValue: 'Static User 2' }
            ],
        }
    };
}
function getUniqueCounter() {
    uniqueCount++;
    return uniqueCount;
}
// function randomBoolean() {
//     return chance.bool();
// }
//
// function randomCalc() {
//     return 'float;#' + chance.floating({min: 0, max: 10000});
// }
//
// function randomString() {
//     return chance.word() + ' ' + chance.word();
// }
//
// function randomStringArray() {
//     var randomArr = [];
//     /** Create a random (1-4) number of strings and add to array */
//     _.times(_.random(1, 4), function () {
//         randomArr.push(randomString());
//     });
//     return randomArr;
// }
//
// function randomParagraph() {
//     return chance.paragraph();
// }
//
// function randomCurrency() {
//     return parseInt(_.random(10000000, true) * 100) / 100;
// }
//
// function randomDate() {
//     return chance.date();
// }
//
// function randomInteger() {
//     return chance.integer();
// }
//
//
// function randomLookup() {
//     return {
//         lookupId: getUniqueCounter(),
//         lookupValue: chance.word()
//     };
// }
//
// function randomUser() {
//     return {
//         lookupId: getUniqueCounter(),
//         lookupValue: chance.name()
//     };
// }
//
// function randomLookupMulti() {
//     var mockData = [];
//     _.each(_.random(10), function () {
//         mockData.push(randomLookup());
//     });
//     return mockData;
// }
//
// function randomUserMulti() {
//     var mockData = [];
//     _.each(_.random(10), function () {
//         mockData.push(randomUser());
//     });
//     return mockData;
// }


/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return FormattedFieldValueService; });

var service;
var $filter;
/**
 * @ngdoc service
 * @name angularPoint.apFormattedFieldValueService
 * @description
 * Returns the formatted string value for a field based on field type.
 */
var FormattedFieldValueService = (function () {
    function FormattedFieldValueService(_$filter_) {
        service = this;
        $filter = _$filter_;
    }
    /**
     * @ngdoc function
     * @name angularPoint.apFormattedFieldValueService:getFormattedFieldValue
     * @methodOf angularPoint.apFormattedFieldValueService
     * @param {object|array|string|integer|boolean} prop Target that we'd like to stringify.
     * @param {string} [propertyType='String'] Assumes by default that it's already a string.  Most of the normal field
     * types identified in the model field definitions are supported.
     *
     * - Lookup
     * - User
     * - Boolean
     * - DateTime
     * - Integer
     * - Number
     * - Counter
     * - MultiChoice
     * - UserMulti
     * - LookupMulti
     * @param {object} options Optional config.
     * @param {string} [options.delim=', '] Optional delimiter to split concatenated strings.
     * @param {string} [options.dateFormat='short'] Either 'json' which converts a date into ISO8601 date string
     * or a mask for the angular date filter.
     * @example
     * <pre>
     *  var project = {
         *    title: 'Super Project',
         *   members: [
         *     { lookupId: 12, lookupValue: 'Joe' },
         *     { lookupId: 19, lookupValue: 'Beth' }
         *   ]
         * };
     *
     * var membersAsString = apFormattedFieldValueService:getFormattedFieldValue({
         *    project.members,
         *    'UserMulti',
         *    { delim: ' | '} //Custom Delimiter
         * });
     *
     * // membersAsString = 'Joe | Beth';
     *
     * </pre>
     * @returns {string} Stringified property on the object based on the field type.
     */
    FormattedFieldValueService.prototype.getFormattedFieldValue = function (prop, propertyType, options) {
        if (propertyType === void 0) { propertyType = 'String'; }
        if (options === void 0) { options = {}; }
        var str = '';
        /** Only process if prop is defined */
        if (prop) {
            switch (propertyType) {
                case 'Boolean':
                    str = service.stringifyBoolean(prop);
                    break;
                case 'Calculated':
                    str = service.stringifyCalc(prop);
                    break;
                case 'Lookup':
                case 'User':
                    str = service.stringifyLookup(prop);
                    break;
                case 'DateTime':
                    str = service.stringifyDate(prop, options.dateFormat);
                    break;
                case 'Integer':
                case 'Number':
                case 'Float':
                case 'Counter':
                    str = service.stringifyNumber(prop);
                    break;
                case 'Currency':
                    str = service.stringifyCurrency(prop);
                    break;
                case 'MultiChoice':
                    str = service.stringifyMultiChoice(prop, options.delim);
                    break;
                case 'UserMulti':
                case 'LookupMulti':
                    str = service.stringifyMultiLookup(prop, options.delim);
                    break;
                default:
                    str = prop;
            }
        }
        return str;
    };
    /**
     * @ngdoc function
     * @name angularPoint.apFormattedFieldValueService:stringifyBoolean
     * @methodOf angularPoint.apFormattedFieldValueService
     * @param {boolean} prop Boolean to stringify.
     * @description
     * Returns the stringified boolean if it is set.
     * @returns {string} Stringified boolean.
     */
    FormattedFieldValueService.prototype.stringifyBoolean = function (prop) {
        var str = '';
        if (__WEBPACK_IMPORTED_MODULE_0_lodash__["isBoolean"](prop)) {
            str = prop.toString();
        }
        return str;
    };
    FormattedFieldValueService.prototype.stringifyCalc = function (prop) {
        if (prop.length === 0) {
            return '';
        }
        else if (__WEBPACK_IMPORTED_MODULE_0_lodash__["isNumber"](prop)) {
            return service.getFormattedFieldValue(prop, 'Number');
        }
        else if (__WEBPACK_IMPORTED_MODULE_0_lodash__["isDate"](prop)) {
            return service.getFormattedFieldValue(prop, 'DateTime');
        }
        else {
            return service.getFormattedFieldValue(prop, 'Text');
        }
    };
    /**
     * @ngdoc function
     * @name angularPoint.apFormattedFieldValueService:stringifyCurrency
     * @methodOf angularPoint.apFormattedFieldValueService
     * @description
     * Converts a numeric value into a formatted currency string.
     * @param {number} prop Property on object to parse.
     * @returns {string} Stringified currency.
     */
    FormattedFieldValueService.prototype.stringifyCurrency = function (prop) {
        return $filter('currency')(prop, '$');
    };
    /**
     * @ngdoc function
     * @name angularPoint.apFormattedFieldValueService:stringifyDate
     * @methodOf angularPoint.apFormattedFieldValueService
     * @param {date} prop Date object.
     * @param {string} dateFormat Either 'json' which converts a date into ISO8601 date string or a mask for
     * the angular date filter.
     * @description
     * Returns JSON date.
     * @returns {string} JSON date.
     */
    FormattedFieldValueService.prototype.stringifyDate = function (prop, dateFormat) {
        if (dateFormat === void 0) { dateFormat = 'short'; }
        var str = '';
        if (__WEBPACK_IMPORTED_MODULE_0_lodash__["isDate"](prop)) {
            str = dateFormat === 'json' ? prop.toJSON() : $filter('date')(prop, dateFormat);
        }
        return str;
    };
    /**
     * @ngdoc function
     * @name angularPoint.apFormattedFieldValueService:stringifyLookup
     * @methodOf angularPoint.apFormattedFieldValueService
     * @param {obj} prop Property on object to parse.
     * @description
     * Returns the property.lookupValue if present.
     * @returns {string} Property.lookupValue.
     */
    FormattedFieldValueService.prototype.stringifyLookup = function (prop) {
        var str = '';
        if (prop && prop.lookupValue) {
            str = prop.lookupValue;
        }
        return str;
    };
    /**
     * @ngdoc function
     * @name angularPoint.apFormattedFieldValueService:stringifyMultiChoice
     * @methodOf angularPoint.apFormattedFieldValueService
     * @param {string[]} prop Array of selected choices.
     * @param {string} [delim='; '] Custom delimiter used between the concatenated values.
     * @description
     * Converts an array of strings into a single concatenated string.
     * @returns {string} Concatenated string representation.
     */
    FormattedFieldValueService.prototype.stringifyMultiChoice = function (prop, delim) {
        if (delim === void 0) { delim = '; '; }
        var str = '';
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](prop, function (choice, i) {
            if (i > 0) {
                str += delim;
            }
            str += choice;
        });
        return str;
    };
    /**
     * @ngdoc function
     * @name angularPoint.apFormattedFieldValueService:stringifyMultiLookup
     * @methodOf angularPoint.apFormattedFieldValueService
     * @param {object[]} prop Array of lookup objects.
     * @param {string} [delim='; '] Custom delimiter used between the concatenated values.
     * @description
     * Converts an array of selected lookup values into a single concatenated string.
     * @returns {string} Concatenated string representation.
     */
    FormattedFieldValueService.prototype.stringifyMultiLookup = function (prop, delim) {
        if (delim === void 0) { delim = '; '; }
        var str = '';
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](prop, function (val, valIndex) {
            /** Add artificial delim */
            if (valIndex > 0) {
                str += delim;
            }
            str += service.stringifyLookup(val);
        });
        return str;
    };
    /**
     * @ngdoc function
     * @name angularPoint.apFormattedFieldValueService:stringifyNumber
     * @methodOf angularPoint.apFormattedFieldValueService
     * @param {number} prop Property on object to parse.
     * @description
     * Converts a number to a string representation.
     * @returns {string} Stringified number.
     */
    FormattedFieldValueService.prototype.stringifyNumber = function (prop) {
        var str = '';
        if (__WEBPACK_IMPORTED_MODULE_0_lodash__["isNumber"](prop)) {
            str = prop.toString();
        }
        return str;
    };
    return FormattedFieldValueService;
}());

FormattedFieldValueService.$inject = ['$filter'];


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return Logger; });

var deferred;
var registerCallback;
/**
 * @ngdoc service
 * @name angularPoint.apLogger
 * @description
 * Common definitions used in the application.
 *
 * HOW TO USE
 * 1. Create a logging model for logs to be stored
 * 2. Ensure everyone has write access to the list
 * 3. Add the model as one of the dependencies in your .run so it'll be instantiated immediately
 * 4. Subscribe to change events from on the model
 *
 *
 * @example
 * <pre>
 * export class Log extends ListItem{
     *     cause: string;
     *     event: string;
     *     formattedStackTrace: string;
     *     json: Object;
     *     message: string;
     *     stackTrace: string[];
     *     type: string;
     *     url: string;
     *     constructor(obj){
     *         _.assign(this, obj);
     *     }
     *     //override the default save and cleanup before actually saving
     *     saveChanges() {
     *          // stringify stacktrace prior to saving so we can display in email notifications
     *          if(this.stackTrace && !this.formattedStackTrace) {
     *          this.formattedStackTrace = this.stackTrace.map(function(sf) {
     *               return sf.toString();
     *           }).join('\n');
     *         }
     *         return super.saveChanges();
     *     }
     * }
 * var logCounter = 0;
 * var maxLogsPerSesssion = 5;
 * export class LogsModel extends Model{
     *     constructor(apLogger: Logger) {
     *         model = this;
     *         super({
     *             factory: Log,
     *             list: {
     *                 title: 'Logs',
     *                 guid: '{LOG LIST GUID...CHANGE ME}',
     *                 customFields: [
     *                     {staticName: 'Message', objectType: 'Note', mappedName: 'message', readOnly: false},
     *                     {staticName: 'Title', objectType: 'Text', mappedName: 'url', readOnly: false},
     *                     {staticName: 'LogType', objectType: 'Text', mappedName: 'type', readOnly: false},
     *                     {staticName: 'StackTrace', objectType: 'JSON', mappedName: 'stackTrace', readOnly: false},
     *                     {staticName: 'Cause', objectType: 'Text', mappedName: 'cause', readOnly: false},
     *                     {staticName: 'JSON', objectType: 'JSON', mappedName: 'json', readOnly: false},
     *                     {staticName: 'Event', objectType: 'Text', mappedName: 'event', readOnly: false},
     *                     {
     *                         staticName: 'FormattedStackTrace',
     *                         objectType: 'Note',
     *                         mappedName: 'formattedStackTrace',
     *                         readOnly: false,
     *                         description: 'Trace formatted to be readable in email notification.'
     *                     }
     *                 ]
     *             }
     *         });
     *         // Register this model as the list where all logs will be stored
     *         apLogger.subscribe(function (event: ILogEvent) {
     *             // Ensure we keep logging under control, prevents spamming server if loop occurs
     *             if(logCounter < maxLogsPerSesssion) {
     *                 var newLog = model.createEmptyItem(event);
     *                 console.log(newLog);
     *                 newLog.saveChanges();
     *                 logCounter++;
     *             }
     *         });
     *     }
     * }
 *
 * </pre>
 *
 */
var Logger = (function () {
    function Logger($q, $window, $log, $timeout) {
        this.$window = $window;
        this.$log = $log;
        this.$timeout = $timeout;
        /** Create a deferred object we can use to delay functionality until log model is registered */
        deferred = $q.defer();
        registerCallback = deferred.promise;
    }
    /**
     * @ngdoc function
     * @name angularPoint.apLogger.debug
     * @methodOf angularPoint.apLogger
     * @param {string} message Message to log.
     * @param {ILogger} [optionsOverride] Override any log options.
     */
    Logger.prototype.debug = function (message, optionsOverride) {
        var opts = __WEBPACK_IMPORTED_MODULE_0_lodash__["assign"]({
            message: message,
            type: 'debug'
        }, optionsOverride);
        return this.notify(opts);
    };
    ;
    /**
     * @ngdoc function
     * @name angularPoint.apLogger.error
     * @methodOf angularPoint.apLogger
     * @param {string} message Message to log.
     * @param {ILogger} [optionsOverride] Override any log options.
     */
    Logger.prototype.error = function (message, optionsOverride) {
        var opts = __WEBPACK_IMPORTED_MODULE_0_lodash__["assign"]({
            message: message,
            type: 'error'
        }, optionsOverride);
        return this.notify(opts);
    };
    ;
    /**
     * @ngdoc function
     * @name angularPoint.apLogger.exception
     * @methodOf angularPoint.apLogger
     * @param {Error} exception Error which caused event.
     * @param {string} [cause] Angular sometimes provides cause.
     * @param {ILogger} optionsOverride Override any log options.
     */
    Logger.prototype.exception = function (exception, cause, optionsOverride) {
        try {
            // generate a stack trace
            /* global ErrorStackParser:true */
            var stackTrace = ErrorStackParser.parse(exception);
            this.error(exception.message, __WEBPACK_IMPORTED_MODULE_0_lodash__["assign"]({}, {
                event: 'exception',
                stackTrace: stackTrace,
                cause: (cause || '')
            }, optionsOverride));
        }
        catch (loggingError) {
            this.$log.warn('Error server-side logging failed');
            this.$log.log(loggingError);
        }
    };
    /**
     * @ngdoc function
     * @name angularPoint.apLogger.info
     * @methodOf angularPoint.apLogger
     * @param {string} message Message to log.
     * @param {ILogger} [optionsOverride] Override any log options.
     */
    Logger.prototype.info = function (message, optionsOverride) {
        var opts = __WEBPACK_IMPORTED_MODULE_0_lodash__["assign"]({
            message: message,
            type: 'info'
        }, optionsOverride);
        return this.notify(opts);
    };
    ;
    /**
     * @ngdoc function
     * @name angularPoint.apLogger.log
     * @methodOf angularPoint.apLogger
     * @param {string} message Message to log.
     * @param {ILogger} [optionsOverride] Override any log options.
     */
    Logger.prototype.log = function (message, optionsOverride) {
        var opts = __WEBPACK_IMPORTED_MODULE_0_lodash__["assign"]({
            message: message,
            type: 'log'
        }, optionsOverride);
        return this.notify(opts);
    };
    ;
    Logger.prototype.registerEvent = function (logEvent) {
        return registerCallback.then(function (callback) {
            if (__WEBPACK_IMPORTED_MODULE_0_lodash__["isFunction"](callback)) {
                return callback(logEvent);
            }
        });
    };
    /**
     * @ngdoc function
     * @name angularPoint.apLogger.subscribe
     * @methodOf angularPoint.apLogger
     * @param {Function} callback Callend when event occurs.
     * @description Callback fired when log event occurs
     */
    Logger.prototype.subscribe = function (callback) {
        deferred.resolve(callback);
    };
    /**
     * @ngdoc function
     * @name angularPoint.apLogger.warn
     * @methodOf angularPoint.apLogger
     * @param {string} message Message to log.
     * @param {ILogger} [optionsOverride] Override any log options.
     */
    Logger.prototype.warn = function (message, optionsOverride) {
        var opts = __WEBPACK_IMPORTED_MODULE_0_lodash__["assign"]({
            message: message,
            type: 'warn'
        }, optionsOverride);
        return this.notify(opts);
    };
    ;
    Logger.prototype.notify = function (options) {
        var _this = this;
        // url before navigation
        var url = '1: ' + this.$window.location.href + '\n';
        return this.$timeout(function () {
            /** Allow navigation to settle before capturing 2nd url */
            url += '2: ' + _this.$window.location.href;
            return _this.registerEvent(__WEBPACK_IMPORTED_MODULE_0_lodash__["assign"]({}, { url: url }, options));
        }, 100);
    };
    return Logger;
}());

Logger.$inject = ['$q', '$window', '$log', '$timeout'];


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return SOAPEnvelope; });
/* harmony export (immutable) */ exports["b"] = SPServicesCore;

var SOAPEnvelope = (function () {
    function SOAPEnvelope() {
        this.header = "<soap:Envelope  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body>";
        this.footer = '</soap:Body></soap:Envelope>';
        this.payload = '';
    }
    return SOAPEnvelope;
}());

//TODO Cleanup and convert to TS
/**
 * @ngdoc service
 * @name angularPoint.SPServices
 * @description
 * This is just a trimmed down version of Marc Anderson's awesome [SPServices](http://spservices.codeplex.com/) library.
 * We're primarily looking for the ability to create the SOAP envelope and let AngularJS's $http service handle all
 * communication with the server.
 *
 * */
SPServicesCore.$inject = ['apWebServiceOperationConstants', 'apWebServiceService'];
function SPServicesCore(apWebServiceOperationConstants, apWebServiceService) {
    /*
     * SPServices - Work with SharePoint's Web Services using jQuery
     * Version 2014.02a
     * @requires jQuery v1.8 or greater - jQuery 1.10.x recommended
     *
     * Copyright (c) 2009-2013 Sympraxis Consulting LLC
     * Examples and docs at:
     * http://spservices.codeplex.com
     * Licensed under the MIT license:
     * http://www.opensource.org/licenses/mit-license.php
     */
    /*
     * @description Work with SharePoint's Web Services using jQuery
     * @type jQuery
     * @name SPServices
     * @category Plugins/SPServices
     * @author Sympraxis Consulting LLC/marc.anderson@sympraxisconsulting.com
     */
    /* jshint undef: true */
    /* global L_Menu_BaseUrl, _spUserId, _spPageContextInfo, GipAddSelectedItems, GipRemoveSelectedItems, GipGetGroupData */
    // Global variables
    var SCHEMASharePoint = 'http://schemas.microsoft.com/sharepoint';
    var i = 0; // Generic loop counter
    var encodeOptionList = ['listName', 'description']; // Used to encode options which may contain special characters
    // Defaults added as a function in our library means that the caller can override the defaults
    // for their session by calling this function.  Each operation requires a different set of options;
    // we allow for all in a standardized way.
    var defaults = {
        operation: '',
        webURL: '',
        makeViewDefault: false,
        // For operations requiring CAML, these options will override any abstractions
        CAMLViewName: '',
        CAMLQuery: '',
        CAMLViewFields: '',
        CAMLRowLimit: 0,
        CAMLQueryOptions: '<QueryOptions></QueryOptions>',
        // Abstractions for CAML syntax
        batchCmd: 'Update',
        valuePairs: [],
        // As of v0.7.1, removed all options which were assigned an empty string ('')
        DestinationUrls: [],
        behavior: 'Version3',
        storage: 'Shared',
        objectType: 'List',
        cancelMeeting: true,
        nonGregorian: false,
        fClaim: false,
        recurrenceId: 0,
        sequence: 0,
        maximumItemsToReturn: 0,
        startIndex: 0,
        isHighPriority: false,
        isPrivate: false,
        rating: 1,
        maxResults: 10,
        principalType: 'User',
        async: true,
        completefunc: null // Function to call on completion
    }; // End SPServices.defaults
    // Main function, which calls SharePoint's Web Services directly.
    var SPServices = {
        defaults: defaults,
        encodeXml: encodeXml,
        generateXMLComponents: generateXMLComponents,
        SCHEMASharePoint: SCHEMASharePoint,
        SOAPEnvelope: new SOAPEnvelope()
    };
    function generateXMLComponents(options) {
        /** Key/Value mapping of SharePoint properties to SPServices properties */
        var mapping = [
            ['query', 'CAMLQuery'],
            ['viewFields', 'CAMLViewFields'],
            ['rowLimit', 'CAMLRowLimit'],
            ['queryOptions', 'CAMLQueryOptions'],
            ['listItemID', 'ID']
        ];
        /** Ensure the SharePoint properties are available prior to extending with defaults */
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](mapping, function (map) {
            if (options[map[0]] && !options[map[1]]) {
                /** Ensure SPServices properties are added in the event the true property name is used */
                options[map[1]] = options[map[0]];
            }
        });
        var soapEnvelope = new SOAPEnvelope();
        var SOAPAction;
        // If there are no options passed in, use the defaults.  Extend replaces each default with the passed option.
        var opt = __WEBPACK_IMPORTED_MODULE_0_lodash__["assign"]({}, defaults, options);
        // Encode options which may contain special character, esp. ampersand
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](encodeOptionList, function (optionName) {
            if (__WEBPACK_IMPORTED_MODULE_0_lodash__["isString"](opt[optionName])) {
                opt[optionName] = encodeXml(opt[optionName]);
            }
        });
        var service = apWebServiceOperationConstants[opt.operation][0];
        // Put together operation header and SOAPAction for the SOAP call based on which Web SPServicesCore we're calling
        soapEnvelope.opheader = "<" + opt.operation + " xmlns=\"" + apWebServiceService.xmlns(service) + "\" >";
        SOAPAction = apWebServiceService.action(service);
        // Add the operation to the SOAPAction and opfooter
        SOAPAction += opt.operation;
        soapEnvelope.opfooter = "</" + opt.operation + ">";
        // Each operation requires a different set of values.  This switch statement sets them up in the soapEnvelope.payload.
        switch (opt.operation) {
            // ALERT OPERATIONS
            case 'GetAlerts':
                break;
            case 'DeleteAlerts':
                soapEnvelope.payload += '<IDs>';
                for (i = 0; i < opt.IDs.length; i++) {
                    soapEnvelope.payload += wrapNode('string', opt.IDs[i]);
                }
                soapEnvelope.payload += '</IDs>';
                break;
            // AUTHENTICATION OPERATIONS
            case 'Mode':
                break;
            case 'Login':
                addToPayload(opt, ['username', 'password']);
                break;
            // COPY OPERATIONS
            case 'CopyIntoItems':
                addToPayload(opt, ['SourceUrl']);
                soapEnvelope.payload += '<DestinationUrls>';
                for (i = 0; i < opt.DestinationUrls.length; i++) {
                    soapEnvelope.payload += wrapNode('string', opt.DestinationUrls[i]);
                }
                soapEnvelope.payload += '</DestinationUrls>';
                addToPayload(opt, ['Fields', 'Stream', 'Results']);
                break;
            case 'CopyIntoItemsLocal':
                addToPayload(opt, ['SourceUrl']);
                soapEnvelope.payload += '<DestinationUrls>';
                for (i = 0; i < opt.DestinationUrls.length; i++) {
                    soapEnvelope.payload += wrapNode('string', opt.DestinationUrls[i]);
                }
                soapEnvelope.payload += '</DestinationUrls>';
                break;
            case 'GetItem':
                addToPayload(opt, ['Url', 'Fields', 'Stream']);
                break;
            // FORM OPERATIONS
            case 'GetForm':
                addToPayload(opt, ['listName', 'formUrl']);
                break;
            case 'GetFormCollection':
                addToPayload(opt, ['listName']);
                break;
            // LIST OPERATIONS
            case 'AddAttachment':
                addToPayload(opt, ['listName', 'listItemID', 'fileName', 'attachment']);
                break;
            case 'AddDiscussionBoardItem':
                addToPayload(opt, ['listName', 'message']);
                break;
            case 'AddList':
                addToPayload(opt, ['listName', 'description', 'templateID']);
                break;
            case 'AddListFromFeature':
                addToPayload(opt, ['listName', 'description', 'featureID', 'templateID']);
                break;
            case 'ApplyContentTypeToList':
                addToPayload(opt, ['webUrl', 'contentTypeId', 'listName']);
                break;
            case 'CheckInFile':
                addToPayload(opt, ['pageUrl', 'comment', 'CheckinType']);
                break;
            case 'CheckOutFile':
                addToPayload(opt, ['pageUrl', 'checkoutToLocal', 'lastmodified']);
                break;
            case 'CreateContentType':
                addToPayload(opt, ['listName', 'displayName', 'parentType', 'fields', 'contentTypeProperties', 'addToView']);
                break;
            case 'DeleteAttachment':
                addToPayload(opt, ['listName', 'listItemID', 'url']);
                break;
            case 'DeleteContentType':
                addToPayload(opt, ['listName', 'contentTypeId']);
                break;
            case 'DeleteContentTypeXmlDocument':
                addToPayload(opt, ['listName', 'contentTypeId', 'documentUri']);
                break;
            case 'DeleteList':
                addToPayload(opt, ['listName']);
                break;
            case 'GetAttachmentCollection':
                addToPayload(opt, ['listName', ['listItemID', 'ID']]);
                break;
            case 'GetList':
                addToPayload(opt, ['listName']);
                break;
            case 'GetListAndView':
                addToPayload(opt, ['listName', 'viewName']);
                break;
            case 'GetListCollection':
                break;
            case 'GetListContentType':
                addToPayload(opt, ['listName', 'contentTypeId']);
                break;
            case 'GetListContentTypes':
                addToPayload(opt, ['listName']);
                break;
            case 'GetListItems':
                addToPayload(opt, ['listName', 'viewName',
                    ['query', 'CAMLQuery'],
                    ['viewFields', 'CAMLViewFields'],
                    ['rowLimit', 'CAMLRowLimit'],
                    ['queryOptions', 'CAMLQueryOptions']
                ]);
                break;
            case 'GetListItemChanges':
                addToPayload(opt, ['listName', 'viewFields', 'since', 'contains']);
                break;
            case 'GetListItemChangesSinceToken':
                addToPayload(opt, ['listName', 'viewName',
                    ['query', 'CAMLQuery'],
                    ['viewFields', 'CAMLViewFields'],
                    ['rowLimit', 'CAMLRowLimit'],
                    ['queryOptions', 'CAMLQueryOptions'],
                    {
                        name: 'changeToken',
                        sendNull: false
                    },
                    {
                        name: 'contains',
                        sendNull: false
                    }
                ]);
                break;
            case 'GetVersionCollection':
                addToPayload(opt, ['strlistID', 'strlistItemID', 'strFieldName']); // correct case
                break;
            case 'UndoCheckOut':
                addToPayload(opt, ['pageUrl']);
                break;
            case 'UpdateContentType':
                addToPayload(opt, ['listName', 'contentTypeId', 'contentTypeProperties', 'newFields', 'updateFields', 'deleteFields', 'addToView']);
                break;
            case 'UpdateContentTypesXmlDocument':
                addToPayload(opt, ['listName', 'newDocument']);
                break;
            case 'UpdateContentTypeXmlDocument':
                addToPayload(opt, ['listName', 'contentTypeId', 'newDocument']);
                break;
            case 'UpdateList':
                addToPayload(opt, ['listName', 'listProperties', 'newFields', 'updateFields', 'deleteFields', 'listVersion']);
                break;
            case 'UpdateListItems':
                addToPayload(opt, ['listName']);
                if (typeof opt.updates !== 'undefined' && opt.updates.length > 0) {
                    addToPayload(opt, ['updates']);
                }
                else {
                    soapEnvelope.payload += "<updates><Batch OnError=\"Continue\"><Method ID=\"1\" Cmd=\"" + opt.batchCmd + "\">";
                    __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](opt.valuePairs, function (valuePair) {
                        soapEnvelope.payload += "<Field Name=\"" + valuePair[0] + "\">" + escapeColumnValue(valuePair[1]) + "</Field>";
                    });
                    if (opt.batchCmd !== 'New') {
                        soapEnvelope.payload += "<Field Name=\"ID\">" + opt.ID + "</Field>";
                    }
                    soapEnvelope.payload += '</Method></Batch></updates>';
                }
                break;
            // MEETINGS OPERATIONS
            case 'AddMeeting':
                addToPayload(opt, ['organizerEmail', 'uid', 'sequence', 'utcDateStamp', 'title', 'location', 'utcDateStart', 'utcDateEnd', 'nonGregorian']);
                break;
            case 'CreateWorkspace':
                addToPayload(opt, ['title', 'templateName', 'lcid', 'timeZoneInformation']);
                break;
            case 'RemoveMeeting':
                addToPayload(opt, ['recurrenceId', 'uid', 'sequence', 'utcDateStamp', 'cancelMeeting']);
                break;
            case 'SetWorkspaceTitle':
                addToPayload(opt, ['title']);
                break;
            // PEOPLE OPERATIONS
            case 'ResolvePrincipals':
                addToPayload(opt, ['principalKeys', 'principalType', 'addToUserInfoList']);
                break;
            case 'SearchPrincipals':
                addToPayload(opt, ['searchText', 'maxResults', 'principalType']);
                break;
            // PERMISSION OPERATIONS
            case 'AddPermission':
                addToPayload(opt, ['objectName', 'objectType', 'permissionIdentifier', 'permissionType', 'permissionMask']);
                break;
            case 'AddPermissionCollection':
                addToPayload(opt, ['objectName', 'objectType', 'permissionsInfoXml']);
                break;
            case 'GetPermissionCollection':
                addToPayload(opt, ['objectName', 'objectType']);
                break;
            case 'RemovePermission':
                addToPayload(opt, ['objectName', 'objectType', 'permissionIdentifier', 'permissionType']);
                break;
            case 'RemovePermissionCollection':
                addToPayload(opt, ['objectName', 'objectType', 'memberIdsXml']);
                break;
            case 'UpdatePermission':
                addToPayload(opt, ['objectName', 'objectType', 'permissionIdentifier', 'permissionType', 'permissionMask']);
                break;
            // PUBLISHEDLINKSSERVICE OPERATIONS
            case 'GetLinks':
                break;
            // SEARCH OPERATIONS
            case 'GetPortalSearchInfo':
                soapEnvelope.opheader = "<" + opt.operation + " xmlns=\"http://microsoft.com/webservices/OfficeServer/QueryService\">";
                SOAPAction = "http://microsoft.com/webservices/OfficeServer/QueryService/" + opt.operation;
                break;
            case 'GetQuerySuggestions':
                soapEnvelope.opheader = "<" + opt.operation + " xmlns='http://microsoft.com/webservices/OfficeServer/QueryService'>";
                SOAPAction = "http://microsoft.com/webservices/OfficeServer/QueryService/" + opt.operation;
                soapEnvelope.payload += wrapNode('queryXml', encodeXml(opt.queryXml));
                break;
            case 'GetSearchMetadata':
                soapEnvelope.opheader = "<" + opt.operation + " xmlns='http://microsoft.com/webservices/OfficeServer/QueryService'>";
                SOAPAction = "http://microsoft.com/webservices/OfficeServer/QueryService/" + opt.operation;
                break;
            case 'Query':
                soapEnvelope.payload += wrapNode('queryXml', encodeXml(opt.queryXml));
                break;
            case 'QueryEx':
                soapEnvelope.opheader = "<" + opt.operation + " xmlns='http://microsoft.com/webservices/OfficeServer/QueryService'>";
                SOAPAction = "http://microsoft.com/webservices/OfficeServer/QueryService/" + opt.operation;
                soapEnvelope.payload += wrapNode('queryXml', encodeXml(opt.queryXml));
                break;
            case 'Registration':
                soapEnvelope.payload += wrapNode('registrationXml', encodeXml(opt.registrationXml));
                break;
            case 'Status':
                break;
            // SHAREPOINTDIAGNOSTICS OPERATIONS
            case 'SendClientScriptErrorReport':
                addToPayload(opt, ['message', 'file', 'line', 'client', 'stack', 'team', 'originalFile']);
                break;
            // SITEDATA OPERATIONS
            case 'EnumerateFolder':
                addToPayload(opt, ['strFolderUrl']);
                break;
            case 'GetAttachments':
                addToPayload(opt, ['strListName', 'strItemId']);
                break;
            case 'SiteDataGetList':
                addToPayload(opt, ['strListName']);
                // Because this operation has a name which duplicates the Lists WS, need to handle
                soapEnvelope = siteDataFixSOAPEnvelope(soapEnvelope, opt.operation);
                break;
            case 'SiteDataGetListCollection':
                // Because this operation has a name which duplicates the Lists WS, need to handle
                soapEnvelope = siteDataFixSOAPEnvelope(soapEnvelope, opt.operation);
                break;
            case 'SiteDataGetSite':
                // Because this operation has a name which duplicates the Lists WS, need to handle
                soapEnvelope = siteDataFixSOAPEnvelope(soapEnvelope, opt.operation);
                break;
            case 'SiteDataGetSiteUrl':
                addToPayload(opt, ['Url']);
                // Because this operation has a name which duplicates the Lists WS, need to handle
                soapEnvelope = siteDataFixSOAPEnvelope(soapEnvelope, opt.operation);
                break;
            case 'SiteDataGetWeb':
                // Because this operation has a name which duplicates the Lists WS, need to handle
                soapEnvelope = siteDataFixSOAPEnvelope(soapEnvelope, opt.operation);
                break;
            // SITES OPERATIONS
            case 'CreateWeb':
                addToPayload(opt, ['url', 'title', 'description', 'templateName', 'language', 'languageSpecified',
                    'locale', 'localeSpecified', 'collationLocale', 'collationLocaleSpecified', 'uniquePermissions',
                    'uniquePermissionsSpecified', 'anonymous', 'anonymousSpecified', 'presence', 'presenceSpecified'
                ]);
                break;
            case 'DeleteWeb':
                addToPayload(opt, ['url']);
                break;
            case 'GetSite':
                addToPayload(opt, ['SiteUrl']);
                break;
            case 'GetSiteTemplates':
                addToPayload(opt, ['LCID', 'TemplateList']);
                break;
            // SOCIALDATASERVICE OPERATIONS
            case 'AddComment':
                addToPayload(opt, ['url', 'comment', 'isHighPriority', 'title']);
                break;
            case 'AddTag':
                addToPayload(opt, ['url', 'termID', 'title', 'isPrivate']);
                break;
            case 'AddTagByKeyword':
                addToPayload(opt, ['url', 'keyword', 'title', 'isPrivate']);
                break;
            case 'CountCommentsOfUser':
                addToPayload(opt, ['userAccountName']);
                break;
            case 'CountCommentsOfUserOnUrl':
                addToPayload(opt, ['userAccountName', 'url']);
                break;
            case 'CountCommentsOnUrl':
                addToPayload(opt, ['url']);
                break;
            case 'CountRatingsOnUrl':
                addToPayload(opt, ['url']);
                break;
            case 'CountTagsOfUser':
                addToPayload(opt, ['userAccountName']);
                break;
            case 'DeleteComment':
                addToPayload(opt, ['url', 'lastModifiedTime']);
                break;
            case 'DeleteRating':
                addToPayload(opt, ['url']);
                break;
            case 'DeleteTag':
                addToPayload(opt, ['url', 'termID']);
                break;
            case 'DeleteTagByKeyword':
                addToPayload(opt, ['url', 'keyword']);
                break;
            case 'DeleteTags':
                addToPayload(opt, ['url']);
                break;
            case 'GetAllTagTerms':
                addToPayload(opt, ['maximumItemsToReturn']);
                break;
            case 'GetAllTagTermsForUrlFolder':
                addToPayload(opt, ['urlFolder', 'maximumItemsToReturn']);
                break;
            case 'GetAllTagUrls':
                addToPayload(opt, ['termID']);
                break;
            case 'GetAllTagUrlsByKeyword':
                addToPayload(opt, ['keyword']);
                break;
            case 'GetCommentsOfUser':
                addToPayload(opt, ['userAccountName', 'maximumItemsToReturn', 'startIndex']);
                break;
            case 'GetCommentsOfUserOnUrl':
                addToPayload(opt, ['userAccountName', 'url']);
                break;
            case 'GetCommentsOnUrl':
                addToPayload(opt, ['url', 'maximumItemsToReturn', 'startIndex']);
                if (typeof opt.excludeItemsTime !== 'undefined' && opt.excludeItemsTime.length > 0) {
                    soapEnvelope.payload += wrapNode('excludeItemsTime', opt.excludeItemsTime);
                }
                break;
            case 'GetRatingAverageOnUrl':
                addToPayload(opt, ['url']);
                break;
            case 'GetRatingOfUserOnUrl':
                addToPayload(opt, ['userAccountName', 'url']);
                break;
            case 'GetRatingOnUrl':
                addToPayload(opt, ['url']);
                break;
            case 'GetRatingsOfUser':
                addToPayload(opt, ['userAccountName']);
                break;
            case 'GetRatingsOnUrl':
                addToPayload(opt, ['url']);
                break;
            case 'GetSocialDataForFullReplication':
                addToPayload(opt, ['userAccountName']);
                break;
            case 'GetTags':
                addToPayload(opt, ['url']);
                break;
            case 'GetTagsOfUser':
                addToPayload(opt, ['userAccountName', 'maximumItemsToReturn', 'startIndex']);
                break;
            case 'GetTagTerms':
                addToPayload(opt, ['maximumItemsToReturn']);
                break;
            case 'GetTagTermsOfUser':
                addToPayload(opt, ['userAccountName', 'maximumItemsToReturn']);
                break;
            case 'GetTagTermsOnUrl':
                addToPayload(opt, ['url', 'maximumItemsToReturn']);
                break;
            case 'GetTagUrls':
                addToPayload(opt, ['termID']);
                break;
            case 'GetTagUrlsByKeyword':
                addToPayload(opt, ['keyword']);
                break;
            case 'GetTagUrlsOfUser':
                addToPayload(opt, ['termID', 'userAccountName']);
                break;
            case 'GetTagUrlsOfUserByKeyword':
                addToPayload(opt, ['keyword', 'userAccountName']);
                break;
            case 'SetRating':
                addToPayload(opt, ['url', 'rating', 'title', 'analysisDataEntry']);
                break;
            case 'UpdateComment':
                addToPayload(opt, ['url', 'lastModifiedTime', 'comment', 'isHighPriority']);
                break;
            // SPELLCHECK OPERATIONS
            case 'SpellCheck':
                addToPayload(opt, ['chunksToSpell', 'declaredLanguage', 'useLad']);
                break;
            // TAXONOMY OPERATIONS
            case 'AddTerms':
                addToPayload(opt, ['sharedServiceId', 'termSetId', 'lcid', 'newTerms']);
                break;
            case 'GetChildTermsInTerm':
                addToPayload(opt, ['sspId', 'lcid', 'termId', 'termSetId']);
                break;
            case 'GetChildTermsInTermSet':
                addToPayload(opt, ['sspId', 'lcid', 'termSetId']);
                break;
            case 'GetKeywordTermsByGuids':
                addToPayload(opt, ['termIds', 'lcid']);
                break;
            case 'GetTermsByLabel':
                addToPayload(opt, ['label', 'lcid', 'matchOption', 'resultCollectionSize', 'termIds', 'addIfNotFound']);
                break;
            case 'GetTermSets':
                addToPayload(opt, ['sharedServiceId', 'termSetId', 'lcid', 'clientTimeStamps', 'clientVersions']);
                break;
            // USERS AND GROUPS OPERATIONS
            case 'AddGroup':
                addToPayload(opt, ['groupName', 'ownerIdentifier', 'ownerType', 'defaultUserLoginName', 'description']);
                break;
            case 'AddGroupToRole':
                addToPayload(opt, ['groupName', 'roleName']);
                break;
            case 'AddRole':
                addToPayload(opt, ['roleName', 'description', 'permissionMask']);
                break;
            case 'AddRoleDef':
                addToPayload(opt, ['roleName', 'description', 'permissionMask']);
                break;
            case 'AddUserCollectionToGroup':
                addToPayload(opt, ['groupName', 'usersInfoXml']);
                break;
            case 'AddUserCollectionToRole':
                addToPayload(opt, ['roleName', 'usersInfoXml']);
                break;
            case 'AddUserToGroup':
                addToPayload(opt, ['groupName', 'userName', 'userLoginName', 'userEmail', 'userNotes']);
                break;
            case 'AddUserToRole':
                addToPayload(opt, ['roleName', 'userName', 'userLoginName', 'userEmail', 'userNotes']);
                break;
            case 'GetAllUserCollectionFromWeb':
                break;
            case 'GetGroupCollection':
                addToPayload(opt, ['groupNamesXml']);
                break;
            case 'GetGroupCollectionFromRole':
                addToPayload(opt, ['roleName']);
                break;
            case 'GetGroupCollectionFromSite':
                break;
            case 'GetGroupCollectionFromUser':
                addToPayload(opt, ['userLoginName']);
                break;
            case 'GetGroupCollectionFromWeb':
                break;
            case 'GetGroupInfo':
                addToPayload(opt, ['groupName']);
                break;
            case 'GetRoleCollection':
                addToPayload(opt, ['roleNamesXml']);
                break;
            case 'GetRoleCollectionFromGroup':
                addToPayload(opt, ['groupName']);
                break;
            case 'GetRoleCollectionFromUser':
                addToPayload(opt, ['userLoginName']);
                break;
            case 'GetRoleCollectionFromWeb':
                break;
            case 'GetRoleInfo':
                addToPayload(opt, ['roleName']);
                break;
            case 'GetRolesAndPermissionsForCurrentUser':
                break;
            case 'GetRolesAndPermissionsForSite':
                break;
            case 'GetUserCollection':
                addToPayload(opt, ['userLoginNamesXml']);
                break;
            case 'GetUserCollectionFromGroup':
                addToPayload(opt, ['groupName']);
                break;
            case 'GetUserCollectionFromRole':
                addToPayload(opt, ['roleName']);
                break;
            case 'GetUserCollectionFromSite':
                break;
            case 'GetUserCollectionFromWeb':
                break;
            case 'GetUserInfo':
                addToPayload(opt, ['userLoginName']);
                break;
            case 'GetUserLoginFromEmail':
                addToPayload(opt, ['emailXml']);
                break;
            case 'RemoveGroup':
                addToPayload(opt, ['groupName']);
                break;
            case 'RemoveGroupFromRole':
                addToPayload(opt, ['roleName', 'groupName']);
                break;
            case 'RemoveRole':
                addToPayload(opt, ['roleName']);
                break;
            case 'RemoveUserCollectionFromGroup':
                addToPayload(opt, ['groupName', 'userLoginNamesXml']);
                break;
            case 'RemoveUserCollectionFromRole':
                addToPayload(opt, ['roleName', 'userLoginNamesXml']);
                break;
            case 'RemoveUserCollectionFromSite':
                addToPayload(opt, ['userLoginNamesXml']);
                break;
            case 'RemoveUserFromGroup':
                addToPayload(opt, ['groupName', 'userLoginName']);
                break;
            case 'RemoveUserFromRole':
                addToPayload(opt, ['roleName', 'userLoginName']);
                break;
            case 'RemoveUserFromSite':
                addToPayload(opt, ['userLoginName']);
                break;
            case 'RemoveUserFromWeb':
                addToPayload(opt, ['userLoginName']);
                break;
            case 'UpdateGroupInfo':
                addToPayload(opt, ['oldGroupName', 'groupName', 'ownerIdentifier', 'ownerType', 'description']);
                break;
            case 'UpdateRoleDefInfo':
                addToPayload(opt, ['oldRoleName', 'roleName', 'description', 'permissionMask']);
                break;
            case 'UpdateRoleInfo':
                addToPayload(opt, ['oldRoleName', 'roleName', 'description', 'permissionMask']);
                break;
            case 'UpdateUserInfo':
                addToPayload(opt, ['userLoginName', 'userName', 'userEmail', 'userNotes']);
                break;
            // USERPROFILESERVICE OPERATIONS
            case 'AddColleague':
                addToPayload(opt, ['accountName', 'colleagueAccountName', 'group', 'privacy', 'isInWorkGroup']);
                break;
            case 'AddLink':
                addToPayload(opt, ['accountName', 'name', 'url', 'group', 'privacy']);
                break;
            case 'AddMembership':
                addToPayload(opt, ['accountName', 'membershipInfo', 'group', 'privacy']);
                break;
            case 'AddPinnedLink':
                addToPayload(opt, ['accountName', 'name', 'url']);
                break;
            case 'CreateMemberGroup':
                addToPayload(opt, ['membershipInfo']);
                break;
            case 'CreateUserProfileByAccountName':
                addToPayload(opt, ['accountName']);
                break;
            case 'GetCommonColleagues':
                addToPayload(opt, ['accountName']);
                break;
            case 'GetCommonManager':
                addToPayload(opt, ['accountName']);
                break;
            case 'GetCommonMemberships':
                addToPayload(opt, ['accountName']);
                break;
            case 'GetInCommon':
                addToPayload(opt, ['accountName']);
                break;
            case 'GetPropertyChoiceList':
                addToPayload(opt, ['propertyName']);
                break;
            case 'GetUserColleagues':
                addToPayload(opt, ['accountName']);
                break;
            case 'GetUserLinks':
                addToPayload(opt, ['accountName']);
                break;
            case 'GetUserMemberships':
                addToPayload(opt, ['accountName']);
                break;
            case 'GetUserPinnedLinks':
                addToPayload(opt, ['accountName']);
                break;
            case 'GetUserProfileByGuid':
                addToPayload(opt, ['guid']);
                break;
            case 'GetUserProfileByIndex':
                addToPayload(opt, ['index']);
                break;
            case 'GetUserProfileByName':
                // Note that this operation is inconsistent with the others, using AccountName rather than accountName
                if (typeof opt.accountName !== 'undefined' && opt.accountName.length > 0) {
                    addToPayload(opt, [
                        ['AccountName', 'accountName']
                    ]);
                }
                else {
                    addToPayload(opt, ['AccountName']);
                }
                break;
            case 'GetUserProfileCount':
                break;
            case 'GetUserProfileSchema':
                break;
            case 'GetUserPropertyByAccountName':
                addToPayload(opt, ['accountName', 'propertyName']);
                break;
            case 'ModifyUserPropertyByAccountName':
                addToPayload(opt, ['accountName', 'newData']);
                break;
            case 'RemoveAllColleagues':
                addToPayload(opt, ['accountName']);
                break;
            case 'RemoveAllLinks':
                addToPayload(opt, ['accountName']);
                break;
            case 'RemoveAllMemberships':
                addToPayload(opt, ['accountName']);
                break;
            case 'RemoveAllPinnedLinks':
                addToPayload(opt, ['accountName']);
                break;
            case 'RemoveColleague':
                addToPayload(opt, ['accountName', 'colleagueAccountName']);
                break;
            case 'RemoveLink':
                addToPayload(opt, ['accountName', 'id']);
                break;
            case 'RemoveMembership':
                addToPayload(opt, ['accountName', 'sourceInternal', 'sourceReference']);
                break;
            case 'RemovePinnedLink':
                addToPayload(opt, ['accountName', 'id']);
                break;
            case 'UpdateColleaguePrivacy':
                addToPayload(opt, ['accountName', 'colleagueAccountName', 'newPrivacy']);
                break;
            case 'UpdateLink':
                addToPayload(opt, ['accountName', 'data']);
                break;
            case 'UpdateMembershipPrivacy':
                addToPayload(opt, ['accountName', 'sourceInternal', 'sourceReference', 'newPrivacy']);
                break;
            case 'UpdatePinnedLink ':
                addToPayload(opt, ['accountName', 'data']);
                break;
            // VERSIONS OPERATIONS
            case 'DeleteAllVersions':
                addToPayload(opt, ['fileName']);
                break;
            case 'DeleteVersion':
                addToPayload(opt, ['fileName', 'fileVersion']);
                break;
            case 'GetVersions':
                addToPayload(opt, ['fileName']);
                break;
            case 'RestoreVersion':
                addToPayload(opt, ['fileName', 'fileVersion']);
                break;
            // VIEW OPERATIONS
            case 'AddView':
                addToPayload(opt, ['listName', 'viewName', 'viewFields', 'query', 'rowLimit', 'rowLimit', 'type', 'makeViewDefault']);
                break;
            case 'DeleteView':
                addToPayload(opt, ['listName', 'viewName']);
                break;
            case 'GetView':
                addToPayload(opt, ['listName', 'viewName']);
                break;
            case 'GetViewCollection':
                addToPayload(opt, ['listName']);
                break;
            case 'GetViewHtml':
                addToPayload(opt, ['listName', 'viewName']);
                break;
            case 'UpdateView':
                addToPayload(opt, ['listName', 'viewName', 'viewProperties', 'query', 'viewFields', 'aggregations', 'formats', 'rowLimit']);
                break;
            case 'UpdateViewHtml':
                addToPayload(opt, ['listName', 'viewName', 'viewProperties', 'toolbar', 'viewHeader', 'viewBody', 'viewFooter', 'viewEmpty', 'rowLimitExceeded',
                    'query', 'viewFields', 'aggregations', 'formats', 'rowLimit'
                ]);
                break;
            // WEBPARTPAGES OPERATIONS
            case 'AddWebPart':
                addToPayload(opt, ['pageUrl', 'webPartXml', 'storage']);
                break;
            case 'AddWebPartToZone':
                addToPayload(opt, ['pageUrl', 'webPartXml', 'storage', 'zoneId', 'zoneIndex']);
                break;
            case 'GetWebPart2':
                addToPayload(opt, ['pageUrl', 'storageKey', 'storage', 'behavior']);
                break;
            case 'GetWebPartPage':
                addToPayload(opt, ['documentName', 'behavior']);
                break;
            case 'GetWebPartProperties':
                addToPayload(opt, ['pageUrl', 'storage']);
                break;
            case 'GetWebPartProperties2':
                addToPayload(opt, ['pageUrl', 'storage', 'behavior']);
                break;
            // WEBS OPERATIONS
            case 'Webs.CreateContentType':
                addToPayload(opt, ['displayName', 'parentType', 'newFields', 'contentTypeProperties']);
                break;
            case 'GetColumns':
                addToPayload(opt, ['webUrl']);
                break;
            case 'GetContentType':
                addToPayload(opt, ['contentTypeId']);
                break;
            case 'GetContentTypes':
                break;
            case 'GetCustomizedPageStatus':
                addToPayload(opt, ['fileUrl']);
                break;
            case 'GetListTemplates':
                break;
            case 'GetObjectIdFromUrl':
                addToPayload(opt, ['objectUrl']);
                break;
            case 'GetWeb':
                addToPayload(opt, [
                    ['webUrl', 'webURL']
                ]);
                break;
            case 'GetWebCollection':
                break;
            case 'GetAllSubWebCollection':
                break;
            case 'UpdateColumns':
                addToPayload(opt, ['newFields', 'updateFields', 'deleteFields']);
                break;
            case 'Webs.UpdateContentType':
                addToPayload(opt, ['contentTypeId', 'contentTypeProperties', 'newFields', 'updateFields', 'deleteFields']);
                break;
            case 'WebUrlFromPageUrl':
                addToPayload(opt, [
                    ['pageUrl', 'pageURL']
                ]);
                break;
            // WORKFLOW OPERATIONS
            case 'AlterToDo':
                addToPayload(opt, ['item', 'todoId', 'todoListId', 'taskData']);
                break;
            case 'ClaimReleaseTask':
                addToPayload(opt, ['item', 'taskId', 'listId', 'fClaim']);
                break;
            case 'GetTemplatesForItem':
                addToPayload(opt, ['item']);
                break;
            case 'GetToDosForItem':
                addToPayload(opt, ['item']);
                break;
            case 'GetWorkflowDataForItem':
                addToPayload(opt, ['item']);
                break;
            case 'GetWorkflowTaskData':
                addToPayload(opt, ['item', 'listId', 'taskId']);
                break;
            case 'StartWorkflow':
                addToPayload(opt, ['item', 'templateId', 'workflowParameters']);
                break;
            default:
                break;
        }
        // Glue together the pieces of the SOAP message
        var msg = soapEnvelope.header + soapEnvelope.opheader + soapEnvelope.payload + soapEnvelope.opfooter + soapEnvelope.footer;
        var soapAction = apWebServiceOperationConstants[opt.operation][1] ? SOAPAction : false;
        return {
            msg: msg,
            SOAPEnvelope: soapEnvelope,
            SOAPAction: soapAction
        };
        // Add the option values to the soapEnvelope.payload for the operation
        //  opt = options for the call
        //  paramArray = an array of option names to add to the payload
        //      'paramName' if the parameter name and the option name match
        //      ['paramName', 'optionName'] if the parameter name and the option name are different (this handles early 'wrappings' with inconsistent naming)
        //      {name: 'paramName', sendNull: false} indicates the element is marked as 'add to payload only if non-null'
        function addToPayload(opt, paramArray) {
            var i;
            for (i = 0; i < paramArray.length; i++) {
                // the parameter name and the option name match
                if (typeof paramArray[i] === 'string') {
                    soapEnvelope.payload += wrapNode(paramArray[i], opt[paramArray[i]]);
                }
                else if (__WEBPACK_IMPORTED_MODULE_0_lodash__["isArray"](paramArray[i]) && paramArray[i].length === 2) {
                    soapEnvelope.payload += wrapNode(paramArray[i][0], opt[paramArray[i][1]]);
                }
                else if ((typeof paramArray[i] === 'object') && (paramArray[i].sendNull !== undefined)) {
                    soapEnvelope.payload += ((opt[paramArray[i].name] === undefined) || (opt[paramArray[i].name].length === 0)) ? '' : wrapNode(paramArray[i].name, opt[paramArray[i].name]);
                }
                else {
                    console.error(opt.operation, 'paramArray[' + i + ']: ' + paramArray[i], 'Invalid paramArray element passed to addToPayload()');
                }
            }
        } // End of function addToPayload
        // The SiteData operations have the same names as other Web SPServicesCore operations. To make them easy to call and unique, I'm using
        // the SiteData prefix on their names. This function replaces that name with the right name in the soapEnvelope.
        function siteDataFixSOAPEnvelope(SOAPEnvelope, siteDataOperation) {
            var siteDataOp = siteDataOperation.substring(8);
            SOAPEnvelope.opheader = SOAPEnvelope.opheader.replace(siteDataOperation, siteDataOp);
            SOAPEnvelope.opfooter = SOAPEnvelope.opfooter.replace(siteDataOperation, siteDataOp);
            return SOAPEnvelope;
        } // End of function siteDataFixSOAPEnvelope
    } // End SPServices.generateXMLComponents
    ////// PRIVATE FUNCTIONS ////////
    // Wrap an XML node (n) around a value (v)
    function wrapNode(n, v) {
        var thisValue = typeof v !== 'undefined' ? v : '';
        return '<' + n + '>' + thisValue + '</' + n + '>';
    }
    // Get the filename from the full URL
    function fileName(s) {
        return s.substring(s.lastIndexOf('/') + 1, s.length);
    }
    /* Taken from http://dracoblue.net/dev/encodedecode-special-xml-characters-in-javascript/155/ */
    var xml_special_to_escaped_one_map = {
        '&': '&amp;',
        '"': '&quot;',
        '<': '&lt;',
        '>': '&gt;'
    };
    function encodeXml(string) {
        return string.replace(/([\&"<>])/g, function (str, item) {
            return xml_special_to_escaped_one_map[item];
        });
    }
    /* Taken from http://dracoblue.net/dev/encodedecode-special-xml-characters-in-javascript/155/ */
    // Escape column values
    function escapeColumnValue(s) {
        if (typeof s === 'string') {
            return s.replace(/&(?![a-zA-Z]{1,8};)/g, '&amp;');
        }
        else {
            return s;
        }
    }
    // James Padolsey's Regex Selector for jQuery http://james.padolsey.com/javascript/regex-selector-for-jquery/
    // jQuery.expr[':'].regex = function (elem, index, match) {
    //     var matchParams = match[3].split(','),
    //         validLabels = /^(data|css):/,
    //         attr = {
    //             method: matchParams[0].match(validLabels) ?
    //                 matchParams[0].split(':')[0] : 'attr',
    //             property: matchParams.shift().replace(validLabels, '')
    //         },
    //         regexFlags = 'ig',
    //         regex = new RegExp(matchParams.join('').replace(/^\s+|\s+$/g, ''), regexFlags);
    //     const method = <any> jQuery(elem)[attr.method];
    //     return regex.test(method(attr.property));
    // };
    return SPServices;
}


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return WebServiceService; });
var SCHEMASharePoint = "http://schemas.microsoft.com/sharepoint";
var serviceDefinitions = {
    Alerts: {
        action: SCHEMASharePoint + '/soap/2002/1/alerts/',
        xmlns: SCHEMASharePoint + '/soap/2002/1/alerts/'
    },
    Meetings: {
        action: SCHEMASharePoint + '/soap/meetings/',
        xmlns: SCHEMASharePoint + '/soap/meetings/'
    },
    Permissions: {
        action: SCHEMASharePoint + '/soap/directory/',
        xmlns: SCHEMASharePoint + '/soap/directory/'
    },
    PublishedLinksService: {
        action: 'http://microsoft.com/webservices/SharePointPortalServer/PublishedLinksService/',
        xmlns: 'http://microsoft.com/webservices/SharePointPortalServer/PublishedLinksService/'
    },
    Search: {
        action: 'urn:Microsoft.Search/',
        xmlns: 'urn:Microsoft.Search'
    },
    SharePointDiagnostics: {
        action: 'http://schemas.microsoft.com/sharepoint/diagnostics/',
        xmlns: SCHEMASharePoint + '/diagnostics/'
    },
    SocialDataService: {
        action: 'http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/',
        xmlns: 'http://microsoft.com/webservices/SharePointPortalServer/SocialDataService'
    },
    SpellCheck: {
        action: 'http://schemas.microsoft.com/sharepoint/publishing/spelling/SpellCheck',
        xmlns: 'http://schemas.microsoft.com/sharepoint/publishing/spelling/'
    },
    TaxonomyClientService: {
        action: SCHEMASharePoint + '/taxonomy/soap/',
        xmlns: SCHEMASharePoint + '/taxonomy/soap/'
    },
    usergroup: {
        action: SCHEMASharePoint + '/soap/directory/',
        xmlns: SCHEMASharePoint + '/soap/directory/'
    },
    UserProfileService: {
        action: 'http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/',
        xmlns: 'http://microsoft.com/webservices/SharePointPortalServer/UserProfileService'
    },
    WebPartPages: {
        action: 'http://microsoft.com/sharepoint/webpartpages/',
        xmlns: 'http://microsoft.com/sharepoint/webpartpages'
    },
    Workflow: {
        action: SCHEMASharePoint + '/soap/workflow/',
        xmlns: SCHEMASharePoint + '/soap/workflow/'
    }
};
var WebServiceService = (function () {
    function WebServiceService() {
        this.webServices = [
            'Alerts',
            'Authentication',
            'Copy',
            'Forms',
            'Lists',
            'Meetings',
            'People',
            'Permissions',
            'PublishedLinksService',
            'Search',
            'SharePointDiagnostics',
            'SiteData',
            'Sites',
            'SocialDataService',
            'SpellCheck',
            'TaxonomyClientService',
            'usergroup',
            'UserProfileService',
            'Versions',
            'Views',
            'WebPartPages',
            'Webs',
            'Workflow'
        ];
    }
    WebServiceService.prototype.action = function (service) {
        return serviceDefinitions[service] ? serviceDefinitions[service].action : SCHEMASharePoint + '/soap/';
    };
    WebServiceService.prototype.xmlns = function (service) {
        return serviceDefinitions[service] ? serviceDefinitions[service].xmlns : SCHEMASharePoint + '/soap/';
    };
    return WebServiceService;
}());



/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return XMLToJSONService; });

/**
 * @ngdoc service
 * @name apXMLToJSONService
 * @description
 * This function converts an XML node set into an array of JS objects.
 * This is essentially Marc Anderson's [SPServices](http://spservices.codeplex.com/) SPXmlTOJson function wrapped in
 * an Angular service to make it more modular and allow for testing.
 *
 */
var XMLToJSONService = (function () {
    function XMLToJSONService($injector) {
        this.$injector = $injector;
    }
    /**
     * @ngdoc function
     * @name apXMLToJSONService.filterXMLNodeService
     * @methodOf apXMLToJSONService
     * @param {Element} xmlObject Object to parse, can either be a jQuery object or an xml response.
     * @param {string} name Name of node we're looking for.
     * @description
     * This method for finding specific nodes in the returned XML was developed by Steve Workman. See his blog post
     * http://www.steveworkman.com/html5-2/javascript/2011/improving-javascript-xml-node-finding-performance-by-2000/
     * for performance details.
     * @returns {NodeList} List of filtered nodes.
     */
    XMLToJSONService.prototype.filterNodes = function (xmlObject, name) {
        if (name.indexOf(':') > -1) {
            // Something like z:row so need to filter for namespace
            var tagName = name.split(':')[1]; // "row"
            return xmlObject.getElementsByTagNameNS('*', tagName);
        }
        else {
            // Normal tag
            return xmlObject.getElementsByTagName(name);
        }
        // Convert to jQuery object if not already
        // var jQueryObject: JQuery = xmlObject instanceof jQuery ? xmlObject : jQuery(xmlObject);
        // return jQueryObject.find('*').filter(function () {
        // return xmlObject.getElementsByTagName(name);
        // return xmlObject.find('*').filter(function () {
        //     // If jQuery parsed as HTML the nodeName will be in all caps and we need lower case
        //     return this.nodeName.toLowerCase() === name;
        // });
    };
    /**
     * @ngdoc function
     * @name apXMLToJSONService.parse
     * @methodOf apXMLToJSONService
     * @param {Element} xmlNodeSet Object to parse, can either be a jQuery object or an xml response.
     * @param {IParseOptions} [options] Override defaults.
     * @description
     * This method for finding specific nodes in the returned XML was developed by Steve Workman. See his blog post
     * http://www.steveworkman.com/html5-2/javascript/2011/improving-javascript-xml-node-finding-performance-by-2000/
     * for performance details.
     * @returns {Object[]} Object with jQuery values.
     */
    XMLToJSONService.prototype.parse = function (xmlNodeSet, options) {
        //Need to use injector because apDecode service also relies on this service so we'd otherwise have a circular dependency.
        var apDecodeService = this.$injector.get('apDecodeService');
        var defaults = {
            includeAllAttrs: false,
            mapping: {},
            removeOws: true,
            sparse: false // If true, empty ("") values will not be returned
        };
        var opts = __WEBPACK_IMPORTED_MODULE_0_lodash__["assign"]({}, defaults, options);
        var jsonObjectArray = [];
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](xmlNodeSet, function (node) {
            var row = {};
            var rowAttrs = node.attributes;
            if (!opts.sparse) {
                // Bring back all mapped columns, even those with no value
                __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](opts.mapping, function (column) { return row[column.mappedName] = ''; });
            }
            __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](rowAttrs, function (rowAttribute) {
                var attributeName = rowAttribute.name;
                var columnMapping = opts.mapping[attributeName];
                var objectName = typeof columnMapping !== "undefined" ? columnMapping.mappedName : opts.removeOws ? attributeName.split("ows_")[1] : attributeName;
                var objectType = typeof columnMapping !== "undefined" ? columnMapping.objectType : undefined;
                if (opts.includeAllAttrs || columnMapping !== undefined) {
                    row[objectName] = apDecodeService.parseStringValue(rowAttribute.value, objectType);
                }
            });
            // Push this item into the JSON Object
            jsonObjectArray.push(row);
        });
        // Return the JSON object
        return jsonObjectArray;
    };
    return XMLToJSONService;
}());

XMLToJSONService.$inject = ['$injector'];


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__constants_apDefaultFields__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__app_module__ = __webpack_require__(1);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return List; });
/* harmony export (binding) */ __webpack_require__.d(exports, "b", function() { return ListFactory; });



/**
 * @ngdoc object
 * @name List
 * @description
 * List Object Constructor.  This is handled automatically when creating a new model so there shouldn't be
 * any reason to manually call.
 * @param {object} config Initialization parameters.
 * @param {string} config.guid Unique SharePoint GUID for the list we'll be basing the model on
 * ex:'{4D74831A-42B2-4558-A67F-B0B5ADBC0EAC}'
 * @param {string} config.title Maps to the offline XML file in dev folder (no spaces)
 * ex: 'ProjectsList' so the offline XML file would be located at apConfig.offlineXML + 'ProjectsList.xml'
 * @param {object[]} [config.customFields] Mapping of SharePoint field names to the internal names we'll be using
 * in our application.  Also contains field type, readonly attribute, and any other non-standard settings.
 * <pre>
 * [
 *   {
         *       staticName: "Title",
         *       objectType: "Text",
         *       mappedName: "lastName",
         *       readOnly:false
         *   },
 *   {
         *       staticName: "FirstName",
         *       objectType: "Text",
         *       mappedName: "firstName",
         *       readOnly:false
         *   },
 *   {
         *       staticName: "Organization",
         *       objectType: "Lookup",
         *       mappedName: "organization",
         *       readOnly:false
         *   },
 *   {
         *       staticName: "Account",
         *       objectType: "User",
         *       mappedName: "account",
         *       readOnly:false
         *   },
 *   {
         *       staticName: "Details",
         *       objectType: "Text",
         *       mappedName: "details",
         *       readOnly:false
         *   }
 * ]
 * </pre>
 * @property {string} viewFields XML string defining each of the fields to include in all CRUD requests,
 * generated when the Model.List is instantiated.
 * <pre>
 *     <ViewFields>...</ViewFields>
 * </pre>
 * @property {Field[]} fields Generated when the Model.List is instantiated.  Combines the standard
 * default fields for all lists with the fields identified in the config.customFields and instantiates each
 * with the Field constructor.
 * @requires angularPoint.apListFactory
 * @constructor
 */
var List = (function () {
    function List(config) {
        this.customFields = [];
        this.fields = [];
        this.isReady = false;
        this.mapping = {};
        this.webURL = __WEBPACK_IMPORTED_MODULE_2__app_module__["ENV"].site;
        __WEBPACK_IMPORTED_MODULE_0_lodash__["assign"](this, config);
        this.environments = this.environments || { production: this.guid };
        this.extendFieldDefinitions();
    }
    /**
     * @description
     * 1. Populates the fields array which uses the Field constructor to combine the default
     * SharePoint fields with those defined in the list definition on the model
     * 2. Creates the list.viewFields XML string that defines the fields to be requested on a query
     *
     * @param {object} list Reference to the list within a model.
     */
    List.prototype.extendFieldDefinitions = function () {
        var _this = this;
        //Clear out
        this.viewFields = '';
        var apFieldFactory = __WEBPACK_IMPORTED_MODULE_2__app_module__["$AP_INJECTOR"].get('apFieldFactory');
        /**
         * Constructs the field
         * - adds to viewField
         * - create ows_ mapping
         * @param fieldDefinition
         */
        var buildField = function (fieldDefinition) {
            var field = new apFieldFactory.FieldDefinition(fieldDefinition);
            _this.fields.push(field);
            _this.viewFields += '<FieldRef Name="' + field.staticName + '"/>';
            _this.mapping['ows_' + field.staticName] = {
                mappedName: field.mappedName,
                objectType: field.objectType
            };
        };
        /** Open viewFields */
        this.viewFields += '<ViewFields>';
        /** Add the default fields */
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](__WEBPACK_IMPORTED_MODULE_1__constants_apDefaultFields__["a" /* DefaultFields */], function (field) { return buildField(field); });
        /** Add each of the fields defined in the model */
        __WEBPACK_IMPORTED_MODULE_0_lodash__["each"](this.customFields, function (field) { return buildField(field); });
        /** Close viewFields */
        this.viewFields += '</ViewFields>';
    };
    /**
     * @ngdoc function
     * @name List:extendPermissionsFromListItem
     * @methodOf List
     * @param {ListItem} listItem List item to use as sample of user's permisssions for list.
     * @description
     * If the user permissions haven't been resolved for the list, use the permissions from a
     * sample list item and assume they're the same for the entire list
     * @returns {IUserPermissionsObject} Resolved permissions for the list item.
     */
    List.prototype.extendPermissionsFromListItem = function (listItem) {
        if (!listItem) {
            throw new Error('A valid list item is required in order to extend list permissions.');
        }
        this.permissions = listItem.resolvePermissions();
        return this.permissions;
    };
    /**
     * @ngdoc function
     * @name List:getListId
     * @methodOf List
     * @description
     * Defaults to list.guid.  For a multi-environment setup, we accept a list.environments object with a property for each named
     * environment with a corresponding value of the list guid.  The active environment can be selected
     * by setting apConfig.environment to the string name of the desired environment.
     * @returns {string} List ID.
     */
    List.prototype.getListId = function () {
        return __WEBPACK_IMPORTED_MODULE_2__app_module__["ENV"].LIST_IDS[this.title];
        // if (_.isString(this.environments[apConfig.environment])) {
        //     /**
        //      * For a multi-environment setup, we accept a list.environments object with a property for each named
        //      * environment with a corresponding value of the list guid.  The active environment can be selected
        //      * by setting apConfig.environment to the string name of the desired environment.
        //      */
        //     return this.environments[apConfig.environment];
        // } else {
        //     throw new Error('There isn\'t a valid environment definition for apConfig.environment=' + apConfig.environment + '  ' +
        //         'Please confirm that the list "' + this.title + '" has the necessary environmental configuration.');
        // }
    };
    /**
     * @ngdoc function
     * @name List:identifyWebURL
     * @methodOf List
     * @description
     * If a list is extended, use the provided webURL, otherwise use list.webURL.  If never set it will default
     * to apConfig.defaultUrl.
     * @returns {string} webURL param.
     */
    List.prototype.identifyWebURL = function () {
        return this.webURL;
        // return this.WebFullUrl ? this.WebFullUrl : this.webURL;
    };
    return List;
}());

/**
 * @ngdoc service
 * @name angularPoint.apListFactory
 * @description
 * Exposes the List prototype and a constructor to instantiate a new List.
 *
 * @property {constructor} List The List constructor.
 *
 * @requires angularPoint.apConfig
 * @requires angularPoint.apDefaultFields
 * @requires angularPoint.apFieldFactory
 */
var ListFactory = (function () {
    function ListFactory() {
        this.List = List;
    }
    // static $inject = ['apDefaultFields', 'apFieldFactory'];
    //
    // constructor(_apDefaultFields_, _apFieldFactory_) {
    //
    //     // apConfig = _apConfig_;
    //     apDefaultFields = _apDefaultFields_;
    //     apFieldFactory = _apFieldFactory_;
    //
    // }
    /**
     * @ngdoc function
     * @name angularPoint.apListFactory:create
     * @methodOf angularPoint.apListFactory
     * @param {object} config Options object.
     * @description
     * Instantiates and returns a new List.
     */
    ListFactory.prototype.create = function (config) {
        return new List(config);
    };
    return ListFactory;
}());



/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__apDefaultFields__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__apDefaultListItemQueryOptions__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__apPermissionObject__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__apWebServiceOperationConstants__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__apXMLFieldAttributeTypes__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__apXMLListAttributeTypes__ = __webpack_require__(10);
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__apDefaultFields__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "b", function() { return __WEBPACK_IMPORTED_MODULE_1__apDefaultListItemQueryOptions__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "c", function() { return __WEBPACK_IMPORTED_MODULE_2__apPermissionObject__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "d", function() { return __WEBPACK_IMPORTED_MODULE_3__apWebServiceOperationConstants__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "e", function() { return __WEBPACK_IMPORTED_MODULE_4__apXMLFieldAttributeTypes__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "f", function() { return __WEBPACK_IMPORTED_MODULE_5__apXMLListAttributeTypes__["a"]; });








/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__apCamlFactory__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__apFieldFactory__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__apIndexedCacheFactory__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__apListFactory__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__apListItemFactory__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__apListItemVersionFactory__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__apLookupFactory__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__apModelFactory__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__apQueryFactory__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__apUserFactory__ = __webpack_require__(17);
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__apCamlFactory__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "b", function() { return __WEBPACK_IMPORTED_MODULE_1__apFieldFactory__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "c", function() { return __WEBPACK_IMPORTED_MODULE_1__apFieldFactory__["b"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "d", function() { return __WEBPACK_IMPORTED_MODULE_2__apIndexedCacheFactory__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "e", function() { return __WEBPACK_IMPORTED_MODULE_2__apIndexedCacheFactory__["b"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "w", function() { return __WEBPACK_IMPORTED_MODULE_3__apListFactory__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "x", function() { return __WEBPACK_IMPORTED_MODULE_3__apListFactory__["b"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "f", function() { return __WEBPACK_IMPORTED_MODULE_4__apListItemFactory__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "g", function() { return __WEBPACK_IMPORTED_MODULE_4__apListItemFactory__["b"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "h", function() { return __WEBPACK_IMPORTED_MODULE_4__apListItemFactory__["c"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "i", function() { return __WEBPACK_IMPORTED_MODULE_5__apListItemVersionFactory__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "j", function() { return __WEBPACK_IMPORTED_MODULE_5__apListItemVersionFactory__["b"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "k", function() { return __WEBPACK_IMPORTED_MODULE_5__apListItemVersionFactory__["c"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "l", function() { return __WEBPACK_IMPORTED_MODULE_5__apListItemVersionFactory__["d"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "m", function() { return __WEBPACK_IMPORTED_MODULE_5__apListItemVersionFactory__["e"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "n", function() { return __WEBPACK_IMPORTED_MODULE_5__apListItemVersionFactory__["f"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "o", function() { return __WEBPACK_IMPORTED_MODULE_6__apLookupFactory__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "p", function() { return __WEBPACK_IMPORTED_MODULE_6__apLookupFactory__["b"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "q", function() { return __WEBPACK_IMPORTED_MODULE_7__apModelFactory__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "r", function() { return __WEBPACK_IMPORTED_MODULE_7__apModelFactory__["b"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "s", function() { return __WEBPACK_IMPORTED_MODULE_8__apQueryFactory__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "t", function() { return __WEBPACK_IMPORTED_MODULE_8__apQueryFactory__["b"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "u", function() { return __WEBPACK_IMPORTED_MODULE_8__apQueryFactory__["c"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "v", function() { return __WEBPACK_IMPORTED_MODULE_9__apUserFactory__["a"]; });












/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__apUserModel__ = __webpack_require__(18);
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__apUserModel__["a"]; });



/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__apCacheService__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__apChangeService__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__apDataService__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__apDecodeService__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__apEncodeService__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__apExceptionHandlerService__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__apExportService__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__apFieldService__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__apFormattedFieldValueService__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__apLogger__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__apSPServices__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__apUtilityService__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__apWebServiceService__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__apXMLToJSONService__ = __webpack_require__(31);
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__apCacheService__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "b", function() { return __WEBPACK_IMPORTED_MODULE_0__apCacheService__["b"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "c", function() { return __WEBPACK_IMPORTED_MODULE_0__apCacheService__["c"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "d", function() { return __WEBPACK_IMPORTED_MODULE_1__apChangeService__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "e", function() { return __WEBPACK_IMPORTED_MODULE_2__apDataService__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "f", function() { return __WEBPACK_IMPORTED_MODULE_3__apDecodeService__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "g", function() { return __WEBPACK_IMPORTED_MODULE_4__apEncodeService__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "h", function() { return __WEBPACK_IMPORTED_MODULE_5__apExceptionHandlerService__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "i", function() { return __WEBPACK_IMPORTED_MODULE_6__apExportService__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "j", function() { return __WEBPACK_IMPORTED_MODULE_7__apFieldService__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "k", function() { return __WEBPACK_IMPORTED_MODULE_8__apFormattedFieldValueService__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "l", function() { return __WEBPACK_IMPORTED_MODULE_9__apLogger__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "m", function() { return __WEBPACK_IMPORTED_MODULE_10__apSPServices__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "n", function() { return __WEBPACK_IMPORTED_MODULE_10__apSPServices__["b"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "o", function() { return __WEBPACK_IMPORTED_MODULE_11__apUtilityService__["b"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "p", function() { return __WEBPACK_IMPORTED_MODULE_11__apUtilityService__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "q", function() { return __WEBPACK_IMPORTED_MODULE_11__apUtilityService__["c"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "r", function() { return __WEBPACK_IMPORTED_MODULE_12__apWebServiceService__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "s", function() { return __WEBPACK_IMPORTED_MODULE_13__apXMLToJSONService__["a"]; });
















/***/ },
/* 37 */
/***/ function(module, exports) {

module.exports = require("angular");

/***/ }
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,