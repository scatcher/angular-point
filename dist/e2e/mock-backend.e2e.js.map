{"version":3,"file":"mock-backend.e2e.js","sourceRoot":"","sources":["../../src/e2e/mock-backend.e2e.ts"],"names":[],"mappings":"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","sourcesContent":["import {ListItem} from \"../factories/list-item.factory\";\nimport {webServices} from \"../constants\";\nimport {modelBehaviorSubject} from \"../services/cache.service\";\nimport {encodeValue, generateValuePairs} from \"../services/encode.service\";\nimport {MockConnection} from \"@angular/http/testing\";\nimport {Response, Headers, ResponseOptions, ResponseType} from \"@angular/http\";\nimport {listItemUpdateStream$, IListItemUpdate} from \"../services/change.service\";\nimport {ListService} from \"../factories/list-service.factory.ts\";\n\nimport {User} from \"../factories/user.factory\";\nimport * as mockServicesXML from \"./mock-services-xml\";\n\nlet mockListsXML: { [ key: string ]: string } = {};\nlet mockUser: User;\n\nimport * as jQuery from 'jquery';\nimport {each, unescape, escape, uniqueId, isArray} from 'lodash';\n\n\n/**\n * @description Initialize mock backend with required data to\n * resovle mock requests when working offline\n * \n * @export\n * @param {{ [ key: string ]: string }} _mockListsXML GUID as key with xml as string for value\n * @param {User} _mockUser The user that will be used for all mock requests\n * @param {{ [ key: string ]: string }} [_mockServicesXML={}] Optionally specify additional\n * mock services that we'll extend\n */\nfunction initializeMockBackend(\n    _mockListsXML: { [ key: string ]: string },\n    _mockUser: User\n    // _mockServicesXML: { [ key: string ]: string } = {}\n) {\n    \n    if (!_mockListsXML || !_mockUser) {\n        throw new Error('Require MOCK data is missing.');\n    }\n    \n    Object.assign(mockListsXML, _mockListsXML);\n    mockUser = _mockUser;\n    // Object.assign(mockServicesXML, _mockServicesXML);\n}\n\nclass ModelChangeQueue {\n    pendingDeletions = [];\n    pendingUpdates = [];\n\n    constructor(private token: string) {\n    }\n\n    clear(updatedToken: string) {\n        this.token = updatedToken || '';\n        this.pendingDeletions = [];\n        this.pendingUpdates = [];\n    }\n}\n\nlet activeEntities: { [ key: number ]: ListItem<any> } = {}; // { listItem.id: ListItem, ...}\n\nlet changeQueue: { [ key: string ]: ModelChangeQueue } = {};\nconst xmlNS = {\n    listItems: `xmlns:s=\"uuid:BDC6E3F0-6DA3-11d1-A2A3-00AA00C14882\" \n            xmlns:dt=\"uuid:C2F41010-65B3-11d1-A29F-00AA00C14882\"\n            xmlns:rs=\"urn:schemas-microsoft-com:rowset\" \n            xmlns:z=\"#RowsetSchema\"`,\n    soap: `xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" \n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n            xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"`\n};\n\n// Subscribe to stream of list item change events\nlistItemUpdateStream$.subscribe((listItemUpdate: IListItemUpdate) => {\n    if (!listItemUpdate) {\n        return;\n    }\n    activeEntities[ listItemUpdate.listItem.id ] = listItemUpdate.listItem;\n});\n\nlet mockId = 10000;\nfunction getMockId() {\n    return mockId++;\n}\n\nlet listItemsByIdMap: { [ key: string ]: ListItem<any>[] } = {};\n\nlet listServicesMap: { [ key: string ]: ListService<any> } = {};\n\n\nfunction getListItemsByListId(listId: string): ListItem<any>[] {\n    let store = <any>listItemsByIdMap[ listId.toLowerCase() ] || [];\n    return isArray(store) ? store : store.entities;\n}\nfunction getListServiceByListId<T extends ListService<any>>(listId: string): T {\n    return <any>listServicesMap[ listId.toLowerCase() ];\n}\n\nmodelBehaviorSubject.subscribe((listService: ListService<any>) => {\n    if (listService) {\n        let listId = listService.getListId().toLowerCase();\n        listServicesMap[ listId ] = listService;\n\n        let store = listService.getStore();\n        if (store) {\n            store.subscribe((listItems) => {\n                listItemsByIdMap[ listId ] = listItems;\n            });\n        }\n    }\n});\n\nexport {initializeMockBackend, generateMockResponse};\n\nfunction generateMockResponse(mockConnection: MockConnection) {\n    let requestXML = new DOMParser().parseFromString(<string>mockConnection.request.text(), 'text/xml');\n    let soapEnvelope = requestXML\n        .getElementsByTagNameNS('http://schemas.xmlsoap.org/soap/envelope/', 'Body');\n    let mainNode = <Element>soapEnvelope[ 0 ].childNodes[ 0 ]; // ex <GetUserProfileByName ...\n    let operation = mainNode.nodeName; // ex: 'GetUserProfileByName'\n    let responseXML: Element | string;\n\n    if (mockConnection.request.url.includes('Lists.asmx')) {\n        switch (operation) {\n            case 'GetListItems':\n                responseXML = getNamedListItems(mainNode);\n                // responseXML = getListItems(mainNode);\n                break;\n            // case 'GetList':\n            case 'GetListItemChangesSinceToken':\n                throw new Error(`Need to evaluate if we should use \"GetListItemChangesSinceToken\" and if so how to properly mock.`);\n            case 'UpdateListItems':\n                responseXML = updateListItem(mainNode);\n                break;\n            default:\n                responseXML = mockServicesXML[ operation ];\n            // responseXML = apCachedXML.operations[operation];\n        }\n    } else {\n        /** Listen for each of the standard services being called and try to return a cached \n         * XML response for the\n         * operation */\n        each(webServices, function (service) {\n            /** Lists has many special cases so don't create generic backend for it */\n            if (service !== 'Lists' && mockConnection.request.url.includes('bin/' + service + '.asmx')) {\n                if (!mockServicesXML[ operation ]) {\n                    throw new Error(`No mock XML found for the ${operation} operation.  You need to add the data in the mock services xml folder.`);\n                }\n                responseXML = mockServicesXML[ operation ];\n                // responseXML = apCachedXML.operations[operation];\n            }\n        });\n    }\n\n    // Set artificial delay for response\n    setTimeout(() => {\n        let responseObject = new Response({\n            body: responseXML,\n            status: 200,\n            url: mockConnection.request.url,\n            headers: new Headers({}),\n            statusText: 'Yippie',\n            type: 0,\n            merge: () => undefined\n        });\n\n        mockConnection.mockRespond(responseObject);\n    }, 0);\n\n\n}\n\nfunction getNamedListItems(request: Element): string {\n    let listId = getListId(request);\n    if (mockListsXML[ listId ]) {\n        return mockListsXML[ listId ];\n    } else {\n        throw new Error('No cached file found for list with GUID of ' + listId);\n    }\n}\n\n\nfunction convertUpdateRequestToResponse(request: any, optionalAttributes): string {\n    var fields = jQuery(request).find('Field');\n    var changeObject = {};\n    each(fields, function (field: Element) {\n        var fieldName = jQuery(field).attr('Name');\n        var fieldValue = jQuery(field).text();\n        changeObject[ fieldName ] = unescape(fieldValue);\n    });\n    Object.assign(changeObject, optionalAttributes);\n    return createZRow(changeObject);\n}\n\nfunction createZRow(changeObject: Object): string {\n    var zrow = '<z:row ';\n    each(changeObject, function (fieldValue: string, fieldName: string) {\n        zrow += ` ows_${fieldName}=\"${escape(fieldValue)}\"`;\n    });\n    zrow += ` xmlns:z=\"#RowsetSchema\"/>`;\n    return zrow;\n}\n\nfunction updateListItem(request: Element): string {\n\n    var zrow,\n        overrides,\n        updateMethod = request.getElementsByTagName('Method')[ 0 ];\n\n    let cmd = updateMethod.getAttribute('Cmd');\n\n    switch (cmd) {\n        /** Create list item */\n        case 'New':\n            var model = getListService(request);\n            /** Need to create an id so find set it 1 higher than the id \n             * of the most recent entity */\n            let cachedListItems = getListItemsByListId(model.getListId());\n            let maxId = cachedListItems.reduce((id, listItem) => {\n                return id > listItem.id ? id : listItem.id;\n            }, 0);\n\n            var mockId = maxId > 0 ? maxId + 1 : getMockId();\n\n            // Mock Fields that would be set upon list item creation\n            overrides = {\n                ID: mockId,\n                Modified: encodeValue('DateTime', new Date()),\n                Created: encodeValue('DateTime', new Date()),\n                Author: encodeValue('User', mockUser),\n                Editor: encodeValue('User', mockUser),\n                PermMask: '0x7fffffffffffffff',\n                UniqueId: mockId + ';#{11FF840D-9CE1-4961-B7FD-51B9DF07706B}',\n                FileRef: mockId + ';#sitecollection/site/ListName/' + mockId + '_.000'\n            };\n\n            zrow = convertUpdateRequestToResponse(request, overrides);\n            registerUpdate(request, zrow);\n            break;\n        case 'Update':\n            var listItemStrId = jQuery(request).find(`Field[Name=\"ID\"]`).text();\n            // Retrieve the JS Object that is attempting to update\n            var activeEntity = activeEntities[ listItemStrId ];\n\n            if (!activeEntity) {\n                throw new Error(`An unexpected list item is trying to be updated.`)\n            }\n\n            // Mock fields that would be updated when a list item is update\n            overrides = {\n                Modified: encodeValue('DateTime', new Date()),\n                Editor: encodeValue('User', mockUser),\n                Version: activeEntity.version ? activeEntity.version + 1 : 2\n            };\n\n            var fieldDefinitions = activeEntity.getListService().fields;\n            var valuePairs = generateValuePairs(fieldDefinitions, activeEntity);\n            var encodedValues = {};\n            each(valuePairs, function (pair) {\n                encodedValues[ pair[ 0 ] ] = pair[ 1 ];\n            });\n\n            var opts = Object.assign({}, encodedValues, overrides);\n\n            zrow = convertUpdateRequestToResponse(request, opts);\n            registerUpdate(request, zrow);\n\n            // Cleanup\n            delete activeEntities[ listItemStrId ];\n            break;\n        case 'Delete':\n            /** No z:row element when deleted */\n            zrow = '';\n\n            each(jQuery(request).find('Field'), function (field) {\n                var fieldId = parseInt(jQuery(field).text(), 10);\n                registerDeletion(request, fieldId);\n            });\n            break;\n    }\n\n    var responseEnvelope = listsResponseEnvelope('UpdateListItems');\n\n    var payload = `\n    <Results>\n        <Result ID=\"1,${cmd}\">\n            <ErrorCode>0x00000000</ErrorCode>\n            ${zrow}\n        </Result>\n    </Results>`;\n    var xmlResponse = responseEnvelope.header + payload + responseEnvelope.footer;\n    return xmlResponse;\n}\n\nfunction registerUpdate(request: Element, zrow: Element): void {\n    getChangeTokenCache(request).pendingUpdates.push(zrow);\n}\n\nfunction registerDeletion(request: Element, id: number): void {\n    getChangeTokenCache(request).pendingDeletions.push(id);\n}\n\nfunction getChangeTokenCache(request: Element) {\n    var model = getListService(request);\n    changeQueue[ model.guid ] =\n        changeQueue[ model.guid ] || new ModelChangeQueue(generateChangeToken(request));\n    return changeQueue[ model.guid ];\n}\n\nfunction generateChangeToken(request: Element): string {\n    var listService = getListService(request);\n    return uniqueId(listService ? listService.guid : '');\n}\n\nfunction listsResponseEnvelope(operation: string): { footer: string; header: string; payload: string; } {\n    var response = {\n        footer: `</${operation}Result></${operation}Response></soap:Body></soap:Envelope>`,\n        header: `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n                    <soap:Envelope ${xmlNS.soap}>\n                        <soap:Body>\n                            <${operation}Response xmlns=\"http://schemas.microsoft.com/sharepoint/soap/\">\n                            <${operation}Result>`,\n        payload: ''\n    };\n    return response;\n}\n\nfunction getListService(request: Element): ListService<any> {\n    /** Find the list id */\n    var listGuid = getListId(request);\n    /** Check with cache service to see if a list with the matching guid has registered */\n    return getListServiceByListId(listGuid);\n}\n\nfunction getListId(request: Element): string {\n    return getXMLNodeContents(request, 'listName');\n}\n\nfunction getXMLNodeContents(request: Element, element): string {\n    var changeToken;\n    var changeTokenNode = jQuery(request).find(element);\n    if (changeTokenNode.length) {\n        changeToken = changeTokenNode.text();\n    }\n    return changeToken;\n}\n\n// function getListItems(request: Element) {\n//     var zrows = [];\n//     var rowLimit = jQuery(request).find('rowLimit').text();\n//     // if (rowLimit === '1') {\n//     //     var zrow = getListItemById(request);\n//     //     if (!zrow) {\n//     //         /** A match wasn't found so return a mock */\n//     //         zrow = generateMockListItems(request, 1)[0];\n//     //     }\n//     //     zrows.push(zrow);\n//     // } else {\n//     var listService = getListService(request);\n//     if (listService.lastServerUpdate) {\n//         //Follow-on request\n//         // let cachedListItemMap = cacheService.getCachedEntities(model.getListId());\n//         let entities = getListItemsByListId(listService.getListId());\n//         zrows = entities.map(listItem => {\n//             let zrow = createZRowFromListItem(listItem);\n//             return zrow;\n//         });\n//     } else {\n//         //Initial request\n//         zrows = getZRows(request);\n//     }\n//     // }\n//\n//     var responseEnvelope = listsResponseEnvelope('GetListItems');\n//     var payload = '<listitems ' + xmlNS.listItems + '>' + buildRSDataNode(zrows) + '</listitems>';\n//\n//     return responseEnvelope.header + payload + responseEnvelope.footer;\n// }\n\n// function createZRowFromListItem(listItem): string {\n//     var fieldDefinitions = listItem.getListService().fields;\n//     var valuePairs = generateValuePairs(fieldDefinitions, listItem);\n//     var encodedValues = {};\n//     each(valuePairs, function (pair) {\n//         encodedValues[pair[0]] = pair[1];\n//     });\n//\n//     return createZRow(encodedValues);\n//\n// }\n\n// function getZRows(request: Element): Element {\n//     var responseXML = getNamedListItems('GetListItems', request);\n//\n//     var parsedXML = new DOMParser().parseFromString(responseXML, 'text/xml');\n//     return locateListItemNodes(parsedXML);\n// }\n\n/**\n * @ngdoc function\n * @name getListItemById\n * @description\n * Attempts to retrieve an xml zrow from cached xml.\n * @param {xml} request XML Request.\n * @returns {xml} zrow\n */\n// function getListItemById(request: Element): Element {\n//     var match;\n//     /** Retrieve the list item id */\n//     var id = jQuery(request).find('Query').find('Value[Type=\"Number\"]').text();\n//     var rows = getZRows(request);\n//     //var rows = locateListItemNodes(request);\n//\n//     /** Attempt to find the requested list item in the cached xml */\n//     each(rows, function (row) {\n//         if (jQuery(row).attr('ows_ID') == id) {\n//             match = row;\n//             /** Break loop */\n//             return false;\n//         }\n//     });\n//\n//     /** Returns a single entity */\n//     return match || rows[0];\n// }\n// function getListItemChangesSinceToken(data: string, request: Element): string {\n//     var responseXML, responseEnvelope, changeNodes, payload;\n//     var changeToken = getChangeToken(request);\n//     var newChangeToken = generateChangeToken(request);\n//     if (changeToken) {\n//         /** Follow on request */\n//         responseEnvelope = listsResponseEnvelope('GetListItemChangesSinceToken');\n//         changeNodes = getChangesSinceToken(request, newChangeToken);\n//         payload = `<listitems ${xmlNS.listItems}> ${changeNodes.changes} ${changeNodes.rsdata}</listitems>`;\n//         responseXML = responseEnvelope.header + payload + responseEnvelope.footer;\n//     } else {\n//         var model = getListService(request);\n//         registerChangeToken(request, newChangeToken);\n//         /** Initial request so register this token */\n//         if (apCachedXML.lists[model.title] && apCachedXML.lists[model.title].GetListItemChangesSinceToken) {\n//             /** Use Cached XML */\n//             responseXML = apCachedXML.lists[model.title].GetListItemChangesSinceToken;\n//         } else {\n//             /** Generate mocks if no cached XML is found */\n//             responseEnvelope = listsResponseEnvelope('GetListItemChangesSinceToken');\n//             /** Add mocked items to change queue */\n//             changeQueue[model.guid].pendingUpdates = generateMockListItems(request, 10);\n//             changeNodes = getChangesSinceToken(request, newChangeToken);\n//             payload = `<listitems ${xmlNS.listItems}>${changeNodes.changes} ${changeNodes.rsdata}</listitems>`;\n//             responseXML = responseEnvelope.header + payload + responseEnvelope.footer;\n//         }\n//     }\n//     return responseXML;\n// }\n\n// function buildRSDataNode(zrows: Element[]): string {\n//\n//     var rsdata = `<rs:data ItemCount=\"${zrows.length}\">`;\n//     each(zrows, function (zrow: Element) {\n//         /** Work with zrows that have been parsed to xml as well as those that are still strings */\n//         rsdata += typeof zrow === 'object' ? stringifyXML(zrow) : zrow;\n//     });\n//     rsdata += '</rs:data>';\n//     return rsdata;\n// }\n\n// function getChangesSinceToken(request: Element, token: string): { changes: string; rsdata: string; } {\n//     var response = { changes: '', rsdata: '' };\n//     var listService = getListService(request);\n//     var changesSinceToken = getChangeTokenCache(request);\n//     /** Build XML for any list items that have been added or updated */\n//     response.rsdata = buildRSDataNode(changesSinceToken.pendingUpdates);\n//\n//     /* Build Changes XML node for entities that have been deleted.  There are other valid changes [Restore] but\n//      at this point we're only concerned with mocking deleted items */\n//     response.changes = `<Changes LastChangeToken=\"${token}\">`;\n//     if (changesSinceToken.pendingDeletions.length > 0) {\n//         each(changesSinceToken.pendingDeletions, function (listItemId) {\n//             response.changes += `<Id ChangeType=\"Delete\" UniqueId=\"\">${listItemId}</Id>`;\n//         });\n//     }\n//     response.changes += '</Changes>';\n//\n//     /** Clear out changes for next time */\n//     changesSinceToken.clear(token);\n//     return response;\n// }\n\n\n// function registerChangeToken(request: Element, token: string): void {\n//     var model = getListService(request);\n//     changeQueue[model.guid] = new ModelChangeQueue(token);\n// }\n\n\n// function getChangeToken(request: Element): string {\n//     return getXMLNodeContents(request, 'changeToken');\n// }\n\n\n// function generateMockListItems(request: Element, quantity: number): Element[] {\n//     var listService = getListService(request);\n//     var mockRecords = listService.generateMockData({ quantity: quantity });\n//     var zrows = [];\n//     each(mockRecords, function (mockRecord) {\n//         var changeObject = {};\n//         /** Generate value pairs for each property on the mock object */\n//         var valuePairs = generateValuePairs(listService.fields, mockRecord);\n//         /** Create a key/val property for each valuePiar */\n//         each(valuePairs, function (valuePair) {\n//             changeObject[valuePair[0]] = valuePair[1];\n//         });\n//         zrows.push(createZRow(changeObject));\n//     });\n//     return zrows;\n// }\n\n// function getNamedListItems(operation: string, request: Element): string {\n//     let listId = getListId(request);\n//     if (mockListsXML[listId]) {\n//         return mockListsXML[listId];\n//     } else {\n//         throw new Error('No cached file found for list with GUID of ' + listId);\n//\n//         // console.info('No Cached Data Found For ' + listId);\n//         // /** No cached XML so just use the default operation response */\n//         // responseXML = mockServicesXML[operation];\n//     }\n//     /** Check with cache service to see if a list with the matching guid has registered */\n//     // var listModel = getListService(request);\n//     // if (listModel) {\n//     //     /** Use the list name in the model to see if we have cached XML */\n//     //     responseXML = getCachedResponse(operation, listModel.title);\n//     // }\n//     // if (!responseXML) {\n//     //     console.info('No Cached Data Found For ' + listModel.title);\n//     //     /** No cached XML so just use the default operation response */\n//     //     responseXML = mockServicesXML[operation];\n//     //     // responseXML = getCachedResponse(operation);\n//     // }\n// }\n\n// function getCachedResponse(operation: string, fileName?: string): string {\n//     var response;\n//     fileName = (fileName || operation).replace(' ', ''); //Remove spaces\n\n//     if (apCachedXML.lists[fileName] && apCachedXML.lists[fileName][operation]) {\n//         response = apCachedXML.lists[fileName][operation];\n//     } else if (Object.keys(apCachedXML.lists[fileName]).length > 0) {\n//         /** The exact operation we'd looking for isn't found but there's another there so we'll try that */\n//         response = apCachedXML.lists[fileName][Object.keys(apCachedXML.lists[fileName])[0]];\n//     }\n//     return response;\n// }\n\n// function responder(responseXML) {\n//     return [200, responseXML];\n// }\n"]}