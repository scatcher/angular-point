{"version":3,"file":"mock-http.e2e.js","sourceRoot":"","sources":["../../src/e2e/mock-http.e2e.ts"],"names":[],"mappings":";AAAA,wBAA0B,uBAAuB,CAAC,CAAA;AAClD,qBAAuC,eAAe,CAAC,CAAA;AAEvD,qBAA0C,eAAe,CAAC,CAAA;AAC1D,iCAAmC,oBAAoB,CAAC,CAAA;AAIxD;;;;;GAKG;AACH;IAEI;iCAC6B;IAE7B,IAAI,QAAQ,GAAG,yBAAkB,CAAC,gBAAgB,CAAC;QAC/C,qBAAW;QACX,yBAAkB;QAClB,cAAO,CAAC,WAAI,EAAE;YACV,UAAU,EAAE,UAAC,OAAoB,EAAE,OAA2B;gBAE1D,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC,UAAC,cAA8B;oBACzD,OAAA,uCAAoB,CAAC,cAAc,CAAC;gBAApC,CAAoC,CAAC,CAAC;gBAE1C,MAAM,CAAC,IAAI,WAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAEtC,CAAC,EAAE,IAAI,EAAE,CAAE,qBAAW,EAAE,yBAAkB,CAAE;SAC/C,CAAC;KACL,CAAC,CAAC;IAEH,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAI,CAAC,CAAC;AAE9B,CAAC;AA9BO,gBAAQ,YA8Bf","sourcesContent":["import {MockBackend} from '@angular/http/testing';\nimport {BaseRequestOptions, Http} from '@angular/http';\nimport {MockConnection} from '@angular/http/testing';\nimport {ReflectiveInjector, provide} from '@angular/core';\nimport {generateMockResponse} from './mock-backend.e2e';\n\nexport {mockHttp};\n\n/**\n * Allows us to intercept and return mock responses when working \n * offline.  When online we use the real Http service.\n * @param {Http} http The real Http service.\n * @returns {Http} Http Service\n */\nfunction mockHttp() {\n\n    /** Code that uses mock backend when working offline, this is stripped\n     * out of production build */\n\n    let injector = ReflectiveInjector.resolveAndCreate([\n        MockBackend,\n        BaseRequestOptions,\n        provide(Http, {\n            useFactory: (backend: MockBackend, options: BaseRequestOptions) => {\n\n                backend.connections.subscribe((mockConnection: MockConnection) =>\n                    generateMockResponse(mockConnection));\n\n                return new Http(backend, options);\n\n            }, deps: [ MockBackend, BaseRequestOptions ]\n        })\n    ]);\n\n    return injector.get(Http);\n\n}\n"]}