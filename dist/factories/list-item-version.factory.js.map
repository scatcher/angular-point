{"version":3,"file":"list-item-version.factory.js","sourceRoot":"","sources":["../../src/factories/list-item-version.factory.ts"],"names":[],"mappings":"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","sourcesContent":["import {ListItem, User, FieldDefinition} from '../factories';\nimport {IFieldConfigurationObject, IFieldDefinition} from './field-definition.factory';\nimport {IFieldServiceFactory} from './list-service.factory';\nimport {keys, each, isNumber, toArray} from 'lodash';\n\nexport interface IListItemVersions<T extends ListItem<any>> {\n    [key: number]: IListItemVersion<T>;\n}\n\nexport interface IListItemVersion<T extends ListItem<T>> extends ListItem<T> {\n    modified: Date;\n    version: number;\n    [key: string]: any;\n}\n\nexport interface IFieldVersion {\n    editor: User;\n    modified: Date;\n    value: any;\n    version: number;\n}\n\n/**\n * @ngdoc object\n * @name FieldVersionCollection\n * @param {FieldDefinition} fieldDefinition Field definition of each version of the field added.\n * @description\n * Object that contains the entire version history for a given list item field/property.\n */\nexport class FieldVersionCollection {\n    fieldDefinition: IFieldDefinition;\n    versions: { [key: number]: IFieldVersion } = {};\n\n    constructor(fieldDefinition: IFieldDefinition) {\n        this.fieldDefinition = fieldDefinition;\n    }\n\n    /**\n     * @ngdoc object\n     * @name FieldVersionCollection.addVersion\n     * @methodOf FieldVersionCollection\n     * @param {IUser} editor User who made the change.\n     * @param {Date} modified Date modified.\n     * @param {any} value Value of the field at this version.\n     * @param {number} version The version number.\n     * @description\n     * Used to add a single version to the collection.\n     */\n    addVersion(editor: User, modified: Date, value: any, version: number): void {\n        this.versions[version] = {\n            editor,\n            modified,\n            value,\n            version\n        };\n    }\n\n    get mappedName() {\n        return this.fieldDefinition.mappedName;\n    }\n\n    get length() {\n        return keys(this.versions).length;\n    }\n}\n\nexport class FieldChange {\n    fieldName: string;\n    newerVersion: IListItemVersion<any>;\n    newValue: string;\n    oldValue: string;\n    previousVersion: IListItemVersion<any> | Object;\n    propertyName: string;\n\n    constructor(propertyName: string, fieldDefinition: IFieldConfigurationObject, newerVersion: IListItemVersion<any>, previousVersion: IListItemVersion<any> | Object = {}) {\n\n        this.fieldName = fieldDefinition.displayName;\n        this.newerVersion = newerVersion;\n        /** Need to set property name before calling this.getFormattedValue */\n        this.propertyName = propertyName;\n\n        this.newValue = this.getFormattedValue(newerVersion);\n        this.oldValue = this.getFormattedValue(<IListItemVersion<any>>previousVersion);\n        this.previousVersion = previousVersion;\n    }\n\n    getFormattedValue(version: IListItemVersion<any>): string {\n        var propertyValue = '';\n        if (version.getFormattedValue) {\n            propertyValue = version.getFormattedValue(this.propertyName);\n        }\n        return propertyValue;\n    }\n}\n\n/**\n * @ngdoc object\n * @name FieldChangeSummary\n * @param {ListItem<T>} newerVersion Updated version of list item.\n * @param {ListItem<T>} [previousVersion={}] Previous version of list item.\n * @description\n * Generates a snapshot between 2 versions of a list item and locates diferences.\n */\nexport class FieldChangeSummary<T extends ListItem<any>> {\n    changeCount: number;\n    fieldsChanged: { [key: string]: FieldChange; } = {};\n\n    constructor(newerVersion: IListItemVersion<T> | ListItem<any>, previousVersion: IListItemVersion<T> | Object = {}) {\n        /** Loop through each of the properties on the newer list item */\n        each(newerVersion, (val, propertyName) => {\n            var fieldDefinition = newerVersion.getFieldDefinition(propertyName);\n            /** Only log non-readonly fields that aren't the same */\n            if (fieldDefinition && !fieldDefinition.readOnly &&\n                JSON.stringify(newerVersion[propertyName]) !== JSON.stringify(previousVersion[propertyName])) {\n\n                let fieldChange = new FieldChange(propertyName, fieldDefinition, <IListItemVersion<T>>newerVersion, previousVersion);\n                if (fieldChange.newValue !== fieldChange.oldValue) {\n                    /** This field has changed */\n                    this.fieldsChanged[propertyName] = fieldChange;\n                }\n            }\n        });\n        this.changeCount = keys(this.fieldsChanged).length;\n    }\n\n    get hasMajorChanges(): boolean {\n        return isNumber(this.changeCount) && this.changeCount > 0;\n    }\n}\n\n/**\n * @ngdoc object\n * @name VersionSummary\n * @param {IListItemVersion<T>} newerVersion Updated version of list item.\n * @param {IListItemVersion<T>} [previousVersion={}] Previous version of list item.\n * @description\n * Used specifically to determine difference between 2 distinct versions of a list item using the\n * version history.  Extends FieldChangeSummary.\n */\nexport class VersionSummary<T extends ListItem<any>> extends FieldChangeSummary<T> {\n    listItemVersion: IListItemVersion<any>;\n    version: number;\n\n    constructor(newerVersion: IListItemVersion<T>, previousVersion: IListItemVersion<T> | Object = {}) {\n        super(newerVersion, previousVersion);\n        this.listItemVersion = newerVersion;\n        this.version = newerVersion.version;\n    }\n\n    get editor() {\n        return this.listItemVersion.editor;\n    }\n\n    get modified() {\n        return this.listItemVersion.modified;\n    }\n}\n\n\n/**\n * @ngdoc object\n * @name ChangeSummary\n * @param {IListItemVersions} versions Multiple versions of a list item.\n * @description\n * Used to summarize all changes for a given list item.\n */\nexport class ChangeSummary<T extends ListItem<any>> {\n    /** The number of versions where list item data actually changed */\n    significantVersionCount = 0;\n    private versionSummaryCollection: { [key: number]: VersionSummary<T> } = {};\n\n    constructor(versions: IListItemVersions<T>) {\n        /** First version won't have a previous version */\n        var previousVersion;\n        each(versions, (version: IListItemVersion<T>) => {\n            var versionSummary = new VersionSummary<T>(version, previousVersion);\n            if (versionSummary.hasMajorChanges) {\n                this.significantVersionCount++;\n            }\n            this.versionSummaryCollection[versionSummary.version] = versionSummary;\n            /** Store this version so we can compare to the next version */\n            previousVersion = version;\n        });\n    }\n\n    // use getter in case we need to alter the way we store this in future\n    get changes() {\n        return this.versionSummaryCollection;\n    }\n\n    count(): number {\n        return keys(this.versionSummaryCollection).length;\n    }\n\n    toArray(): VersionSummary<T>[] {\n        return toArray(this.versionSummaryCollection);\n    }\n}\n\nexport class VersionHistoryCollection<T extends ListItem<any>> {\n    [key: number]: IListItemVersion<T>;\n    constructor(fieldVersionCollections: FieldVersionCollection[], factory: IFieldServiceFactory<T>) {\n        /** Iterate through each of the field version collections */\n        for (let fieldVersionCollection of fieldVersionCollections) {\n            this.addFieldCollection(fieldVersionCollection, factory);\n        }\n    }\n\n    addFieldCollection(fieldVersionCollection: FieldVersionCollection, factory: IFieldServiceFactory<T>): void {\n        /** Iterate through each version of this field */\n        each(fieldVersionCollection.versions, (fieldVersion: IFieldVersion, versionNumberAsString: string) => {\n            /** Create a new version object if it doesn't already exist */\n            this[versionNumberAsString] = this[versionNumberAsString] || factory({\n                    editor: fieldVersion.editor,\n                    modified: fieldVersion.modified,\n                    /** Iterating over object properties which converts everything to string so convert back */\n                    version: parseInt(versionNumberAsString, 10)\n                });\n            /** Add field to the version history for this version with computed property name */\n            this[versionNumberAsString][fieldVersionCollection.mappedName] = fieldVersion.value;\n        });\n    }\n\n    count(): number {\n        return keys(this).length;\n    }\n\n    generateChangeSummary(): ChangeSummary<T> {\n        return new ChangeSummary<T>(this);\n    }\n\n    toArray(): IListItemVersion<T>[] {\n        return toArray(this);\n    }\n}\n"]}