{"version":3,"file":"user.factory.js","sourceRoot":"","sources":["../../src/factories/user.factory.ts"],"names":[],"mappings":";AAAA,gCAAyB,6BAA6B,CAAC,CAAA;AAmBvD;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACH;IAQI,cAAY,GAAW;QACnB,IAAA,sCAAiC,EAA5B,UAAE,EAAE,gBAAK,CAAoB;QAElC,IAAI,gBAAgB,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACzC,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YAChC,6DAA6D;YAC7D,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;YACnB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QAC7B,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,qFAAqF;YACrF,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;YACnB,IAAI,CAAC,WAAW,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;YAC7D,IAAI,CAAC,SAAS,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;YAC3D,IAAI,CAAC,KAAK,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;YACvD,IAAI,CAAC,UAAU,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;YAC5D,IAAI,CAAC,KAAK,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;QAC3D,CAAC;IACL,CAAC;IACL,WAAC;AAAD,CAAC,AA1BD,IA0BC;AA1BY,YAAI,OA0BhB,CAAA","sourcesContent":["import {splitIndex} from '../services/utility.service';\n\n/**\n * Represents a reference to a site collection currentPerson.  This is\n * very similar to an ap.ILookup except additional properties\n * can be provided if setup to include them in the request.\n * The site collection currentPerson is created the first time a currentPerson\n * accesses a site collection.  The downside is a currentPerson will have\n * different site collection ID's for each site collection.\n */\nexport interface IUser {\n    email?: string;\n    loginName?: string;\n    lookupId: number;\n    lookupValue: string;\n    sipAddress?: string;\n    title?: string;\n}\n\n/**\n * @ngdoc function\n * @name User\n * @description\n * Allows for easier distinction when debugging if object type is shown as a User.  Turns a delimited \";#\"\n * string into an object shown below depeinding on field settings:\n * <pre>\n * {\n *      lookupId: 1,\n *      lookupValue: 'Joe User'\n * }\n * </pre>\n * or\n * <pre>\n * {\n *      lookupId: 1,\n *      lookupValue: 'Joe User',\n *      loginName: 'joe.user',\n *      email: 'joe@company.com',\n *      sipAddress: 'whatever',\n *      title: 'Sr. Widget Maker'\n * }\n * </pre>\n * @param {string} s Delimited string used to create a User object.\n * @constructor\n */\nexport class User implements IUser {\n    lookupValue: string;\n    lookupId: number;\n    loginName: string;\n    email: string;\n    sipAddress: string;\n    title: string;\n\n    constructor(str: string) {\n        let {id, value} = splitIndex(str);\n\n        let thisUserExpanded = value.split(',#');\n        if (thisUserExpanded.length === 1) {\n            //Standard currentPerson columns only return a id,#value pair\n            this.lookupId = id;\n            this.lookupValue = value;\n        } else {\n            //Allow for case where currentPerson adds additional properties when setting up field\n            this.lookupId = id;\n            this.lookupValue = thisUserExpanded[0].replace(/(,,)/g, ',');\n            this.loginName = thisUserExpanded[1].replace(/(,,)/g, ',');\n            this.email = thisUserExpanded[2].replace(/(,,)/g, ',');\n            this.sipAddress = thisUserExpanded[3].replace(/(,,)/g, ',');\n            this.title = thisUserExpanded[4].replace(/(,,)/g, ',');\n        }\n    }\n}\n"]}