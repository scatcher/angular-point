{"version":3,"file":"soap-envelope.factory.js","sourceRoot":"","sources":["../../src/factories/soap-envelope.factory.ts"],"names":[],"mappings":";AACA,+BAAuB,4BAA4B,CAAC,CAAA;AACpD,uBAA4B,QAAQ,CAAC,CAAA;AASrC,uBAAuB;AACvB;IAAA;QAGI,WAAM,GAAG,4LAAsL,CAAC;QAChM,WAAM,GAAG,8BAA8B,CAAC;QACxC,YAAO,GAAG,EAAE,CAAC;IAwBjB,CAAC;IAvBG,sEAAsE;IACtE,8BAA8B;IAC9B,+DAA+D;IAC/D,mEAAmE;IACnE,qJAAqJ;IACrJ,iHAAiH;IACjH,mCAAY,GAAZ,UAAa,GAAG,EAAE,UAAU;QAA5B,iBAgBC;QAfE,aAAI,CAAC,UAAU,EAAE,UAAC,KAAK,EAAE,KAAa;YACjC,+CAA+C;YAC/C,EAAE,CAAC,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAC5B,KAAI,CAAC,OAAO,IAAI,yBAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;YAEhD,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,gBAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC9C,KAAI,CAAC,OAAO,IAAI,yBAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAEtD,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC;gBACvE,KAAI,CAAC,OAAO,IAAI,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,yBAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;YAErI,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,EAAE,aAAa,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,EAAE,qDAAqD,CAAC,CAAC;YAC/H,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IACL,mBAAC;AAAD,CAAC,AA7BD,IA6BC;AA7BY,oBAAY,eA6BxB,CAAA","sourcesContent":["import {SPServicesOptions} from '../services/spservices.service';\nimport {wrapNode} from '../services/encode.service';\nimport {each, isArray} from 'lodash';\n\nexport interface ISOAPEnvelope {\n    addToPayload(opt: SPServicesOptions, paramArray: {name: string, sendNull: boolean}[]): void;\n    addToPayload(opt: SPServicesOptions, paramArray: [string, string][]): void;\n    addToPayload(opt: SPServicesOptions, paramArray: [string, string][]): void;\n    addToPayload(opt: SPServicesOptions, paramArray: any): void;\n}\n\n// Set up SOAP envelope\nexport class SOAPEnvelope implements ISOAPEnvelope {\n    opheader: string;\n    opfooter: string;\n    header = `<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body>`;\n    footer = `</soap:Body></soap:Envelope>`;\n    payload = '';\n    // Add the option values to the soapEnvelope.payload for the operation\n    //  opt = options for the call\n    //  paramArray = an array of option names to add to the payload\n    //      \"paramName\" if the parameter name and the option name match\n    //      [\"paramName\", \"optionName\"] if the parameter name and the option name are different (this handles early \"wrappings\" with inconsistent naming)\n    //      {name: \"paramName\", sendNull: false} indicates the element is marked as \"add to payload only if non-null\"\n    addToPayload(opt, paramArray) {\n       each(paramArray, (param, index: number) => {\n            // the parameter name and the option name match\n            if (typeof param === 'string') {\n                this.payload += wrapNode(param, opt[param]);\n                // the parameter name and the option name are different\n            } else if (isArray(param) && param.length === 2) {\n                this.payload += wrapNode(param[0], opt[param[1]]);\n                // the element not a string or an array and is marked as \"add to payload only if non-null\"\n            } else if ((typeof param === 'object') && (param.sendNull !== undefined)) {\n                this.payload += ((opt[param.name] === undefined) || (opt[param.name].length === 0)) ? '' : wrapNode(param.name, opt[param.name]);\n                // something isn't right, so report it\n            } else {\n                console.error(opt.operation, 'paramArray[' + index + ']: ' + param, 'Invalid paramArray element passed to addToPayload()');\n            }\n        });\n    }\n}\n"]}