{"version":3,"file":"list-service.factory.js","sourceRoot":"","sources":["../../src/factories/list-service.factory.ts"],"names":[],"mappings":"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","sourcesContent":["import {Query, ListItem} from '../factories';\nimport {AP_CONFIG, IUserPermissionsObject, BasePermissionObject, DefaultFields} from '../constants';\nimport {IQueryOptions} from './query.factory';\nimport {IFieldDefinition, FieldDefinition, IFieldConfigurationObject} from './field-definition.factory';\nimport {DataService} from '../services/dataservice.service';\nimport {registerChange} from '../services/utility.service';\nimport {getDefaultValueForType} from '../services/field.service';\nimport {generateValuePairs, generateViewFieldsXML} from '../services/encode.service';\nimport {processListItems, extendListMetadata} from '../services/decode.service';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\nimport {injector} from '../services/injector.service';\nimport {Injectable} from \"@angular/core\";\nimport {registerListService} from '../services/cache.service';\n\nimport {times, isObject, isDate, isBoolean, isArray, isEmpty, isNumber, isString} from 'lodash';\n\ninterface IOWSMapping {\n    [key: string]: {\n        mappedName: string;\n        objectType: string;\n    };\n}\n\nexport interface IListServiceConfig {\n    customFields: IFieldConfigurationObject[];\n    description?: string;\n    factory: IFieldServiceFactory<any>;\n    guid: string;\n    store?: Observable<any>;\n    title: string;\n}\n\nexport interface IQueriesContainer {\n    getAllListItems?: Query<any>;\n    [key: string]: Query<any>;\n}\n\nexport interface IFieldServiceFactory<T extends ListItem<any>> {\n    (rawListItemObject: Object, ...items: any[]): T;\n}\n\nexport interface IMockDataOptions {\n    permissionLevel?: string;\n    quantity?: number;\n}\n\nexport interface ICreateListItemOptions<T extends ListItem<any>> {\n    buildValuePairs?: boolean;\n    valuePairs?: [string, any][];\n}\n\nexport interface IListFieldMapping {\n    [key: string]: {\n        mappedName: string;\n        objectType: string;\n    };\n}\n\n/**\n * @ngdoc function\n * @name ListService\n * @description\n * ListService Constructor\n * Provides the Following\n * - adds an empty \"data\" array\n * - adds an empty \"queries\" object\n * - adds a deferred obj \"ready\"\n * - builds \"model\" with constructor\n * - adds \"getAllListItems\" function\n * - adds \"addNewItem\" function\n * @param {object} config Object containing optional params.\n * @param {object} [config.factory = apListItemFactory.createGenericFactory()] - Constructor function for\n * individual list items.\n * @param {boolean} [config.fieldDefinitionsExtended=false] Queries using the GetListItemChangesSinceToken\n * operation return the full list definition along with the requested entities.  The first time one of these\n * queries is executed we will try to extend our field definitions defined in the model with the additional\n * information provided from the server.  Examples are options for a Choice field, display name of the field,\n * field description, and any other field information provided for the fields specified in the model.  This\n * flag is set once the first query is complete so we don't process again.\n * @param {object} config.list - Definition of the list in SharePoint.\n * be passed to the list constructor to extend further\n * @param {string} config.title - List name, no spaces.  Offline XML file will need to be\n * named the same (ex: CustomList so xml file would be APConfig.offlineXML + '/CustomList.xml')\n * @param {string} config.getListId() - Unique SharePoint ID (ex: '{3DBEB25A-BEF0-4213-A634-00DAF46E3897}')\n * @param {object[]} config.customFields - Maps SharePoint fields with names we'll use within the\n * application.  Identifies field types and formats accordingly.  Also denotes if a field is read only.\n * @constructor\n *\n * @example\n * <pre>\n * //Taken from a fictitious projectsModel.ts\n *\n * export class ProjectsModel extends ap.ListService {\n *      constructor() {\n *          super({\n *              factory: Project,\n *              list: {\n *                  guid: '{PROJECT LIST GUID}',\n *                  title: 'Projects',\n *                  customFields: [\n *                      {\n *                         staticName: 'Title',\n *                         objectType: 'Text',\n *                         mappedName: 'title',\n *                         readOnly: false\n *                      },\n *                      {\n *                         staticName: 'Customer',\n *                         objectType: 'Lookup',\n *                         mappedName: 'customer',\n *                         readOnly: false\n *                      },\n *                      {\n *                         staticName: 'ProjectDescription',\n *                         objectType: 'Text',\n *                         mappedName: 'projectDescription',\n *                         readOnly: false\n *                      },\n *                      {\n *                         staticName: 'Status',\n *                         objectType: 'Text',\n *                         mappedName: 'status',\n *                         readOnly: false\n *                      },\n *                      {\n *                         staticName: 'TaskManager',\n *                         objectType: 'User',\n *                         mappedName: 'taskManager',\n *                         readOnly: false\n *                      },\n *                      {\n *                         staticName: 'ProjectGroup',\n *                         objectType: 'Lookup',\n *                         mappedName: 'group',\n *                         readOnly: false\n *                      },\n *                      {\n *                         staticName: 'CostEstimate',\n *                         objectType: 'Currency',\n *                         mappedName: 'costEstimate',\n *                         readOnly: false\n *                      },\n *                      {\n *                         staticName: 'Active',\n *                         objectType: 'Boolean',\n *                         mappedName: 'active',\n *                         readOnly: false\n *                      },\n *                      {\n *                         staticName: 'Attachments',\n *                         objectType: 'Attachments',\n *                         mappedName: 'attachments',\n *                         readOnly: true\n *                      }\n *                  ]\n *              }\n *          });\n *\n *          var model = this;\n *\n *          //Any other model setup\n *      }\n *      someExposedModelMethod() {\n *          this.dosomething...\n *      }\n *\n *   }\n * </pre>\n */\n@Injectable()\nexport class ListService<T extends ListItem<any>> {\n    private __store: Observable<ListItem<any>[]>;\n    changeTokenDeletions = new BehaviorSubject<number>(null);\n    customFields: IFieldConfigurationObject[] = [];\n    listDefinitionExtended: Observable<ListService<T>>;\n    environments: { [key: string]: string };\n    factory: IFieldServiceFactory<T>;\n    fieldDefinitionsExtended: boolean = false;\n    fields: IFieldDefinition[] = [];\n    guid: string;\n    isReady = false;\n    lastServerUpdate: Date;\n    mapping: IListFieldMapping;\n    permissions: IUserPermissionsObject;\n    queries: IQueriesContainer = {};\n    title: string;\n    viewFields: string;\n    WebFullUrl; // only appears if extended from list definition\n    webURL: string;\n\n    constructor({guid, customFields = [], factory, title, store}: IListServiceConfig) {\n\n        /** Assign all properties of config to the model */\n        this.guid = guid;\n        this.customFields = customFields;\n        this.factory = factory;\n        this.title = title;\n        this.addStore(store);\n        this.webURL = AP_CONFIG.defaultUrl;\n        this.environments = this.environments || { production: this.guid };\n        /**\n         * @description\n         * 1. Populates the fields array which uses the Field constructor to combine the default\n         * SharePoint fields with those defined in the list definition on the model\n         * 2. Creates the list.viewFields XML string that defines the fields to be requested on a query\n         */\n        this.fields = this.buildFieldDefinitions(this.customFields);\n        this.viewFields = generateViewFieldsXML(this.fields);\n        this.mapping = this.buildOWSMapping(this.fields);\n\n        /** Register cache name with cache service so we can map factory name with list GUID */\n        registerListService(this);\n\n\n        /** Convenience querys that simply returns all list items within a list. */\n        this.registerQuery({\n            name: '__getAllListItems',\n            operation: 'GetListItems'\n        });\n\n        /** Get a single list item from a list, primarily used to quickly identify currentPerson\n         *  permissions on list using the ows_PermMask property.  List items can have unique permissions\n         *  so can't rely on this 100% to correctly resolve list permissions.  In the case where that is\n         *  necessary you will need to use a similar query using GetListItemChangesSinceToken method which\n         *  will take longer but will correctly resolve the list permissions.\n         */\n        this.registerQuery({\n            name: '__sample',\n            operation: 'GetListItems',\n            rowLimit: 1\n        });\n\n    }\n\n    addStore(store: any) {\n        return this.__store = store;\n    }\n\n    getStore(): any {\n        return this.__store;\n    }\n\n    /**\n     * @ngdoc function\n     * @name ListService.addNewItem\n     * @module ListService\n     * @description\n     * Using the definition of a list stored in a model, create a new list item in SharePoint.\n     * @param {object} entity An object that will be converted into key/value pairs based on the field definitions\n     * defined in the model.\n     * @param {object} [options] - Pass additional options to the data service.\n     * @param {boolean} [options.buildValuePairs=true] Automatically generate pairs based on fields defined in model.\n     * @param {object} [options.map=new Map()] Optionally place new item in a specified cache.\n     * @param {Array[]} [options.valuePairs] Precomputed value pairs to use instead of generating them for each\n     * field identified in the model.\n     * @returns {Observable<T>} An observable which when resolved will returned the newly created list item from there server.\n     * This allows us to update the view with a valid new object that contains a unique list item id.\n     *\n     * @example\n     * <pre>\n     * <file name=\"app/project/projectsModel.js\">\n     * projectModel.addNewItem({\n     *        title: 'A Project',\n     *        customer: {lookupValue: 'My Customer', lookupId: 123},\n     *        description: 'This is the project description'\n     *     }).subscribe(function(newEntityFromServer) {\n     *         //The local query cache is automatically updated but\n     *         //any other dependent logic can go here\n     * };\n     * </file>\n     * </pre>\n     */\n    addNewItem<T extends ListItem<any>>(entity: ListItem<T>, {\n        buildValuePairs = true,\n        valuePairs = []\n    }: ICreateListItemOptions<T> = {}): Observable<T> {\n\n        var config = {\n            batchCmd: 'New',\n            buildValuePairs,\n            listName: this.getListId(),\n            operation: 'UpdateListItems',\n            valuePairs,\n            webURL: this.identifyWebURL()\n        };\n\n        if (entity.id) {\n            throw new Error('Cannot add a new list item that already has an ID. ' + JSON.stringify(entity, null, 2));\n        }\n\n        if (config.buildValuePairs === true) {\n            let editableFields: IFieldDefinition[] = this.fields.filter((fieldDefinition) => fieldDefinition.readOnly === false);\n            config.valuePairs = generateValuePairs(editableFields, entity);\n        }\n\n        const dataService: DataService = injector.get(DataService);\n        /** Overload the function then pass anything past the first parameter to the supporting methods */\n        return dataService.serviceWrapper(config)\n            .map((response) => {\n                /** Online this should return an XML object */\n                let listItems = processListItems<T>(response, this.mapping, <any>this);\n                let newListItem: ListItem<T> = listItems[listItems.length - 1];\n\n                /** Optionally broadcast change event */\n                registerChange(this, 'create', newListItem.id);\n\n                /** Return reference to last listItem in cache because it will have the new highest id */\n                return newListItem;\n            })\n        // .catch((err) => {\n        //     throw new Error('Unable to create new list item.  Err:' + err);\n        // });\n\n    }\n\n    buildFieldDefinitions(customFields: IFieldConfigurationObject[]): IFieldDefinition[] {\n        return [...DefaultFields, ...customFields].map((fieldConfig: IFieldConfigurationObject) => {\n            return new FieldDefinition(fieldConfig);\n        });\n    }\n\n    buildOWSMapping(fields: IFieldDefinition[]): { [key: string]: { mappedName: string; objectType: string; } } {\n        return fields.reduce<IOWSMapping>((container: IOWSMapping, fieldDefinition: IFieldDefinition) => {\n            container['ows_' + fieldDefinition.staticName] = {\n                mappedName: fieldDefinition.mappedName,\n                objectType: fieldDefinition.objectType\n            };\n            return container;\n        }, {});\n    }\n\n\n    /**\n     * @ngdoc function\n     * @name ListService.createEmptyItem\n     * @module ListService\n     * @description\n     * Creates an object using the editable fields from the model, all attributes are empty based on the field\n     * type unless an overrides object is passed in.  The overrides object extends the defaults.  A benefit to this\n     * approach is the returned object inherits from the ListItem prototype so we have the ability to call\n     * entity.saveChanges instead of calling the model.addNewItem(entity).\n     *\n     * @param {object} [overrides] - Optionally extend the new empty item with specific values.\n     * @returns {object} Newly created list item.\n     */\n    createEmptyItem(overrides?: Object): T {\n        var newItem = {};\n        for (let fieldDefinition of this.customFields) {\n            /** Create attributes for each non-readonly field definition */\n            if (!fieldDefinition.readOnly) {\n                /** Create an attribute with the expected empty value based on field definition type */\n                newItem[fieldDefinition.mappedName] = getDefaultValueForType(fieldDefinition.objectType);\n            }\n        }\n        /** Extend any values that should override the default empty values */\n        var rawObject = Object.assign({}, newItem, overrides);\n\n        //Ensure we access list service from unsaved object\n        rawObject.getListService = () => this;\n        return this.factory(rawObject);\n    }\n\n    /**\n     * @ngdoc function\n     * @name ListService.executeQuery\n     * @module ListService\n     * @description\n     * The primary method for retrieving data from a query registered on a model.  It returns an observable\n     * which resolves to the local cache after post processing entities with constructors.\n     *\n     * @param {string} [queryName=APConfig.defaultQueryName] A unique key to identify this query\n     * @returns {Observable<T[]>} Observable that when resolves with an Map of list items which inherit from ListItem and\n     * optionally go through a defined constructor on the model.\n     *\n     * @example To call the query or check for changes since the last call.\n     * <pre>\n     * projectModel.executeQuery('MyCustomQuery').subscribe((entities) => {\n     *      //We now have a reference to Map of entities stored in the local cache\n     *      //These inherit from the ListItem prototype as well as the Project prototype on the model\n     *      this.subsetOfProjects = entities;\n     *  });\n     * </pre>\n     */\n    executeQuery<T extends ListItem<any>>(queryName?: string): Observable<T[]> {\n        var model = this;\n        var query = model.getQuery<T>(queryName);\n        if (query) {\n            return query.execute();\n        }\n    }\n\n\n    /**\n     * @ngdoc function\n     * @name ListService.extendListMetadata\n     * @module ListService\n     * @description\n     * Extends the List and Fields with list information returned from the server.  Only runs once and after that\n     * returns the existing Observable.\n     * @returns {Observable<ListService>} Observable that is resolved with the extended listService.\n     */\n    extendListMetadata(): Observable<ListService<T>> {\n        var listService = this;\n\n        /** Only request information if the list hasn't already been extended and is not currently being requested */\n        if (!listService.listDefinitionExtended) {\n            /** All Future Requests get this */\n            // listService.listDefinitionExtended = true;\n\n            const dataService: DataService = injector.get(DataService);\n            let getListAction = dataService.getList({\n                listName: listService.getListId(),\n                webURL: listService.webURL\n            });\n\n            /** We can potentially have 2 separate requests for data so store them in array so we can wait until\n             * all are resolved.\n             */\n            let observableArray = [getListAction];\n\n            /** Add a request for a sample list item to the server requests if we haven't\n             * already resolved currentPerson permissions for the list.\n             */\n            if (!listService.permissions) {\n                /** Permissions not set yet, when the query is resolved with a sample list item\n                 * the query class will use the permMask from the list item to set the temp permissions\n                 * for the list until a time where we can run a GetListItemChangesSinceToken request and\n                 * set the actual permissions.\n                 */\n                observableArray.push(listService.executeQuery('__sample'));\n            }\n\n            listService.listDefinitionExtended = Observable\n                .forkJoin(observableArray)\n                .map((resolvedObservables: [Element, any]) => {\n                    extendListMetadata(listService, resolvedObservables[0]);\n                    return listService;\n                });\n                // .catch(err => reject(err));\n        }\n\n        return listService.listDefinitionExtended;\n    }\n\n    /**\n     * @ngdoc function\n     * @name ListService:extendPermissionsFromListItem\n     * @methodOf ListService\n     * @param {ListItem} listItem List item to use as sample of user's permisssions for list.\n     * @description\n     * If the user permissions haven't been resolved for the list, use the permissions from a\n     * sample list item and assume they're the same for the entire list\n     * @returns {IUserPermissionsObject} Resolved permissions for the list item.\n     */\n    extendPermissionsFromListItem(listItem: ListItem<any>): IUserPermissionsObject {\n        if (!listItem) {\n            throw new Error('A valid list item is required in order to extend list permissions.');\n        }\n        this.permissions = listItem.resolvePermissions();\n        return this.permissions;\n    }\n\n\n    /**\n     * @ngdoc function\n     * @name ListService.generateMockData\n     * @module ListService\n     * @description\n     * Generates 'n' mock records for testing using the field types defined in the model to provide something to visualize.\n     *\n     * @param {object} [options] Object containing optional parameters.\n     * @param {number} [options.quantity=10] The requested number of mock records to return.\n     * @param {string} [options.permissionLevel=FullMask] Sets the mask on the mock records to simulate desired\n     * permission level.\n     * @param {boolean} [options.staticValue=false] By default all mock data is dynamically created but if set,\n     * this will cause static data to be used instead.\n     */\n    // generateMockData<T extends ListItem<any>>(options?: IMockDataOptions): T[] {\n    //     var mockData = [],\n    //         model = this;\n\n    //     var defaults = {\n    //         quantity: 10,\n    //         staticValue: false,\n    //         permissionLevel: 'FullMask'\n    //     };\n\n    //     /** Extend defaults with any provided options */\n    //     var opts: IMockDataOptions = Object.assign({}, defaults, options);\n\n    //     times(opts.quantity, (count) => {\n    //         var mock = {\n    //             id: count + 1\n    //         };\n    //         /** Create an attribute with mock data for each field */\n    //         for (let field of model.fields) {\n    //             mock[field.mappedName] = field.getMockData(opts);\n    //         }\n    //         /** Use the factory on the model to extend the object */\n    //         mockData.push(model.factory(mock));\n    //     });\n    //     return mockData;\n    // }\n\n    /**\n     * @ngdoc function\n     * @name ListService.getAllListItems\n     * @module ListService\n     * @description\n     * Inherited from ListService constructor\n     * Gets all list items in the current list, processes the xml, and caches the data in model.\n     * @returns {Observable<T[]>} Observable returning all list items when resolved.\n     * @example\n     * <pre>\n     * //Taken from a fictitious projectsModel.js\n     * projectModel.getAllListItems().subscribe(function(entities) {\n     *     //Do something with all of the returned entities\n     *     $scope.projects = entities;\n     * };\n     * </pre>\n     */\n    getAllListItems<T extends ListItem<any>>(): Observable<T[]> {\n        var model = this;\n        return model.executeQuery('__getAllListItems');\n    }\n\n    /**\n     * @ngdoc function\n     * @name ListService.getFieldDefinition\n     * @module ListService\n     * @description\n     * Returns the field definition from the definitions defined in the custom fields array within a model.\n     * <pre>\n     * var project = {\n     *    title: 'Project 1',\n     *    location: {\n     *        lookupId: 5,\n     *        lookupValue: 'Some Building'\n     *    }\n     * };\n     *\n     * //To get field metadata\n     * var locationDefinition = projectsModel.getFieldDefinition('location');\n     * </pre>\n     * @param {string} fieldName Internal field name.\n     * @returns {object} Field definition.\n     */\n    getFieldDefinition(fieldName: string): IFieldDefinition {\n        var model = this;\n        return model.fields.find((fieldDefinition) => fieldDefinition.mappedName === fieldName);\n    }\n\n\n    /**\n     * @ngdoc function\n     * @name ListService:getListId\n     * @methodOf ListService\n     * @description\n     * Defaults to list.guid.  For a multi-environment setup, we accept a list.environments object with a property for each named\n     * environment with a corresponding value of the list guid.  The active environment can be selected\n     * by setting AP_CONFIG.environment to the string name of the desired environment.\n     * @returns {string} List ID.\n     */\n    getListId(): string {\n        if (isString(this.environments[AP_CONFIG.environment])) {\n            /**\n             * For a multi-environment setup, we accept a list.environments object with a property for each named\n             * environment with a corresponding value of the list guid.  The active environment can be selected\n             * by setting AP_CONFIG.environment to the string name of the desired environment.\n             */\n            return this.environments[AP_CONFIG.environment];\n        } else {\n            throw new Error('There isn\\'t a valid environment definition for AP_CONFIG.environment=' + AP_CONFIG.environment + '  ' +\n                'Please confirm that the list \"' + this.title + '\" has the necessary environmental configuration.');\n        }\n    }\n\n\n    /**\n     * @ngdoc function\n     * @name ListService.getListItemById\n     * @param {number} listItemId Id of the item being requested.\n     * @param {object} options Used to override DataService defaults.\n     * @description\n     * Inherited from ListService constructor\n     * Attempts to retrieve the requested list item from the server.\n     * @returns {Observable<T>} Observable that resolves with the requested list item if found.  Otherwise it returns undefined.\n     * @example\n     * <pre>\n     * //Taken from a fictitious projectsModel.js\n     * projectModel.getListItemById(12).subscribe(function(listItem) {\n     *     //Do something with the located listItem\n     *     $scope.project = listItem;\n     * };\n     * </pre>\n     */\n    getListItemById<T extends ListItem<any>>(listItemId: number, options?: Object): Observable<T> {\n        var model = this,\n            /** Unique Query Name */\n            queryKey = 'GetListItemById-' + listItemId;\n\n        /** Register a new Query if it doesn't already exist */\n        if (!model.getQuery(queryKey)) {\n            var defaults = {\n                name: queryKey,\n                operation: 'GetListItems',\n                rowLimit: 1,\n                CAMLQuery: '' +\n                '<Query>' +\n                ' <Where>' +\n                '   <Eq>' +\n                '     <FieldRef Name=\"ID\"/>' +\n                '     <Value Type=\"Number\">' + listItemId + '</Value>' +\n                '   </Eq>' +\n                ' </Where>' +\n                '</Query>'\n            };\n            /** Allows us to override defaults */\n            var opts = Object.assign({}, defaults, options);\n            model.registerQuery(opts);\n        }\n\n        return model.executeQuery<T>(queryKey)\n            .map((arr: T[]) => {\n                return arr[0];\n            });\n    }\n\n\n    /**\n     * @ngdoc function\n     * @name ListService.getQuery\n     * @module ListService\n     * @description\n     * Helper function that attempts to locate and return a reference to the requested or catchall query.\n     * @param {string} [queryName=APConfig.defaultQueryName] A unique key to identify this query.\n     * @returns {object} See Query prototype for additional details on what a Query looks like.\n     *\n     * @example\n     * <pre>\n     * var primaryQuery = projectModel.getQuery();\n     * </pre>\n     *\n     * <pre>\n     * var primaryQuery = projectModel.getQuery('primary');\n     * </pre>\n     *\n     * <pre>\n     * var namedQuery = projectModel.getQuery('customQuery');\n     * </pre>\n     */\n    getQuery<T extends ListItem<any>>(queryName: string): Query<T> {\n        var model = this, query;\n        if (isObject(model.queries[queryName])) {\n            /** The named query exists */\n            query = model.queries[queryName];\n        } else if (isObject(model.queries[AP_CONFIG.defaultQueryName]) && !queryName) {\n            /** A named query wasn't specified and the catchall query exists */\n            query = model.queries[AP_CONFIG.defaultQueryName];\n        } else {\n            /** Requested query not found */\n            query = undefined;\n        }\n        return query;\n    }\n\n    /**\n     * @ngdoc function\n     * @name ListService:identifyWebURL\n     * @methodOf ListService\n     * @description\n     * If a list is extended, use the provided webURL, otherwise use list.webURL.  If never set it will default\n     * to AP_CONFIG.defaultUrl.\n     * @returns {string} webURL param.\n     */\n    identifyWebURL(): string {\n        return this.WebFullUrl ? this.WebFullUrl : this.webURL;\n    }\n\n\n    /**\n     * @ngdoc function\n     * @name ListService.isInitialised\n     * @module ListService\n     * @description\n     * Methods which allows us to easily determine if we've successfully made any queries this session.\n     * @returns {boolean} Returns evaluation.\n     */\n    isInitialised(): boolean {\n        var model = this;\n        return isDate(model.lastServerUpdate);\n    }\n\n\n    /**\n     * @ngdoc function\n     * @name ListService.registerQuery\n     * @module ListService\n     * @description\n     * Constructor that allows us create a static query with the option to build dynamic queries as seen in the\n     * third example.  This construct is a passthrough to [SPServices](http: //spservices.codeplex.com/)\n     * @param {object} queryOptions Initialization parameters.\n     * @param {boolean} [queryOptions.force=false] Ignore cached data and force server query.\n     * @param {number} [queryOptions.listItemID] Optionally request for a single list item by id.\n     * @param {boolean} [queryOptions.localStorage=false] Should we store data from this query in local storage to speed up requests in the future.\n     * @param {number} [queryOptions.localStorageExpiration=86400000] Set expiration in milliseconds - Defaults to a day\n     * and if set to 0 doesn't expire.  Can be updated globally using APConfig.localStorageExpiration.\n     * @param {string} [queryOptions.name=primary] The name that we use to identify this query.\n     * @param {string} [queryOptions.operation=GetListItemChangesSinceToken] Optionally use 'GetListItems' to\n     * receive a more efficient response, just don't have the ability to check for changes since the last time\n     * the query was called. Defaults to [GetListItemChangesSinceToken](http://msdn.microsoft.com/en-us/library/lists.lists.getlistitemchangessincetoken%28v=office.12%29.aspx)\n     * but for a smaller payload and faster response you can use [GetListItems](http: //spservices.codeplex.com/wikipage?title=GetListItems&referringTitle=Lists).\n     * @param {string} [queryOptions.query=Ordered ascending by ID] CAML query passed to SharePoint to control\n     * the data SharePoint returns. Josh McCarty has a good quick reference [here](http: //joshmccarty.com/2012/06/a-caml-query-quick-reference).\n     * @param {string} [queryOptions.queryOptions] SharePoint options xml as string.\n     * <pre>\n     * <QueryOptions>\n     *    <IncludeMandatoryColumns>FALSE</IncludeMandatoryColumns>\n     *    <IncludeAttachmentUrls>TRUE</IncludeAttachmentUrls>\n     *    <IncludeAttachmentVersion>FALSE</IncludeAttachmentVersion>\n     *    <ExpandUserField>FALSE</ExpandUserField>\n     * </QueryOptions>\n     * </pre>\n     * @param {string} [queryOptions.rowLimit] The number of list items to return, 0 returns all list items.\n     * @param {boolean} [queryOptions.runOnce] Pertains to GetListItems only, optionally run a single time and return initial value for all future\n     * calls.  Works well with data that isn't expected to change throughout the session but unlike localStorage or sessionStorage\n     * the data doesn't persist between sessions.\n     * @param {boolean} [queryOptions.sessionStorage=false] Use the browsers sessionStorage to cache the list items and uses the\n     * queryOptions.localStorageExpiration param to validate how long the cache is good for.\n     * @param {string} [queryOptions.viewFields] XML as string that specifies fields to return.\n     * @param {string} [queryOptions.webURL] Used to override the default URL if list is located somewhere else.\n     * @returns {object} Query Returns a new query object.\n     *\n     * @example\n     * <h4>Example #1</h4>\n     * <pre>\n     * // Query to retrieve the most recent 25 modifications\n     * model.registerQuery({\n     *    name: 'recentChanges',\n     *    rowLimit: 25,\n     *    query: '' +\n     *        '<Query>' +\n     *        '   <OrderBy>' +\n     *        '       <FieldRef Name=\"Modified\" Ascending=\"FALSE\"/>' +\n     *        '   </OrderBy>' +\n     *            //Prevents any records from being returned if user doesn't\n     *            // have permissions on project\n     *        '   <Where>' +\n     *        '       <IsNotNull>' +\n     *        '           <FieldRef Name=\"Project\"/>' +\n     *        '       </IsNotNull>' +\n     *        '   </Where>' +\n     *        '</Query>'\n     * });\n     * </pre>\n     *\n     * <h4>Example #2</h4>\n     * <pre>\n     * // Could be placed on the projectModel and creates the query but doesn't\n     * // call it.  Uses the session cache to make the initial call faster.\n     * projectModel.registerQuery({\n     *     name: 'primary',\n     *     sessionCache: true,\n     *     //Set an expiration value of 8 hours rather than use the default of 24\n     *     localStorageExpiration: 28800000,\n     *     query: '' +\n     *         '<Query>' +\n     *         '   <OrderBy>' +\n     *         '       <FieldRef Name=\"Title\" Ascending=\"TRUE\"/>' +\n     *         '   </OrderBy>' +\n     *         '</Query>'\n     * });\n     *\n     * //To call the query or check for changes since the last call\n     * projectModel.executeQuery('primary')\n     *   .subscribe((entities) => {\n     *     // We now have a reference to array of entities stored in the local\n     *     // cache.  These inherit from the ListItem prototype as well as the\n     *     // Project prototype on the model\n     *     vm.projects = entities;\n     *   }, (err) => {\n     *       //Handle error\n     *   })\n     * </pre>\n     *\n     * <h4>Example #3</h4>\n     * <pre>\n     * // Advanced functionality that would allow us to dynamically create\n     * // queries for list items with a lookup field associated with a specific\n     * // project id.  Let's assume this is on the projectTasksModel.\n     * model.queryByProjectId(projectId) {\n     *     // Unique query name\n     *     var queryKey = 'pid' + projectId;\n     *\n     *     // Register project query if it doesn't exist\n     *     if (!_.isObject(model.queries[queryKey])) {\n     *         model.registerQuery({\n     *             name: queryKey,\n     *             query: '' +\n     *                 '<Query>' +\n     *                 '   <OrderBy>' +\n     *                 '       <FieldRef Name=\"ID\" Ascending=\"TRUE\"/>' +\n     *                 '   </OrderBy>' +\n     *                 '   <Where>' +\n     *                 '       <And>' +\n     *                              // Prevents any records from being returned\n     *                              //if user doesn't have permissions on project\n     *                 '           <IsNotNull>' +\n     *                 '               <FieldRef Name=\"Project\"/>' +\n     *                 '           </IsNotNull>' +\n     *                              // Return all records for the project matching\n     *                              // param projectId\n     *                 '           <Eq>' +\n     *                 '               <FieldRef Name=\"Project\" LookupId=\"TRUE\"/>' +\n     *                 '               <Value Type=\"Lookup\">' + projectId + '</Value>' +\n     *                 '           </Eq>' +\n     *                 '       </And>' +\n     *                 '   </Where>' +\n     *                 '</Query>'\n     *         });\n     *     }\n     *     //Still using execute query but now we have a custom query\n     *     return model.executeQuery(queryKey);\n     * };\n     * </pre>\n     */\n    registerQuery<T extends ListItem<any>>(queryOptions: IQueryOptions): Query<T> {\n\n        var defaults = {\n            /** If name isn't set, assume this is the only model and designate as primary */\n            name: AP_CONFIG.defaultQueryName\n        };\n\n        queryOptions = Object.assign({}, defaults, queryOptions);\n\n        this.queries[queryOptions.name] = new Query(queryOptions, this, this.viewFields);\n\n        /** Return the newly created query */\n        return this.queries[queryOptions.name];\n    }\n\n\n    /**\n     * @ngdoc function\n     * @name ListService.resolvePermissions\n     * @module ListService\n     * @description\n     * See apModelFactory.resolvePermissions for details on what we expect to have returned.\n     * @returns {Object} Contains properties for each permission level evaluated for current currentPerson.\n     * @example\n     * Lets assume we're checking to see if a currentPerson has edit rights for a given list.\n     * <pre>\n     * var userPermissions = tasksModel.resolvePermissions();\n     * var userCanEdit = userPermissions.EditListItems;\n     * </pre>\n     * Example of what the returned object would look like\n     * for a site admin.\n     * <pre>\n     * perm = {\n     *    \"ViewListItems\": true,\n     *    \"AddListItems\": true,\n     *    \"EditListItems\": true,\n     *    \"DeleteListItems\": true,\n     *    \"ApproveItems\": true,\n     *    \"OpenItems\": true,\n     *    \"ViewVersions\": true,\n     *    \"DeleteVersions\": true,\n     *    \"CancelCheckout\": true,\n     *    \"PersonalViews\": true,\n     *    \"ManageLists\": true,\n     *    \"ViewFormPages\": true,\n     *    \"Open\": true,\n     *    \"ViewPages\": true,\n     *    \"AddAndCustomizePages\": true,\n     *    \"ApplyThemeAndBorder\": true,\n     *    \"ApplyStyleSheets\": true,\n     *    \"ViewUsageData\": true,\n     *    \"CreateSSCSite\": true,\n     *    \"ManageSubwebs\": true,\n     *    \"CreateGroups\": true,\n     *    \"ManagePermissions\": true,\n     *    \"BrowseDirectories\": true,\n     *    \"BrowseUserInfo\": true,\n     *    \"AddDelPrivateWebParts\": true,\n     *    \"UpdatePersonalWebParts\": true,\n     *    \"ManageWeb\": true,\n     *    \"UseRemoteAPIs\": true,\n     *    \"ManageAlerts\": true,\n     *    \"CreateAlerts\": true,\n     *    \"EditMyUserInfo\": true,\n     *    \"EnumeratePermissions\": true,\n     *    \"FullMask\": true\n     * }\n     * </pre>\n     */\n    resolvePermissions(): IUserPermissionsObject {\n        if (this && this.permissions) {\n            /** If request has been made to GetListItemChangesSinceToken we have already stored the\n             * permission for this list.\n             */\n            return this.permissions;\n        } else {\n            console.error('Attempted to resolve permissions of a listService that hasn\\'t been initialized.', this);\n            return new BasePermissionObject();\n        }\n    }\n\n    /**\n     * @ngdoc function\n     * @name ListService.validateEntity\n     * @module ListService\n     * @description\n     * Uses the custom fields defined in an model to ensure each field (required = true) is evaluated\n     * based on field type\n     * @param {object} listItem SharePoint list item.\n     * @returns {boolean} Evaluation of validity.\n     */\n    validateEntity<T extends ListItem<any>>(listItem: T): boolean {\n        var valid = true;\n\n        var checkObject = (fieldValue) => {\n            return isObject(fieldValue) && isNumber(fieldValue.lookupId);\n        };\n\n        for (let fieldDefinition of <IFieldDefinition[]>this.customFields) {\n            var fieldValue = listItem[fieldDefinition.mappedName];\n            /** Only evaluate required fields */\n            if ((fieldDefinition.required || fieldDefinition.Required) && valid) {\n                switch (fieldDefinition.objectType) {\n                    case 'Boolean':\n                        valid = isBoolean(fieldValue);\n                        break;\n                    case 'DateTime':\n                        valid = isDate(fieldValue);\n                        break;\n                    case 'Lookup':\n                    case 'User':\n                        valid = checkObject(fieldValue);\n                        break;\n                    case 'LookupMulti':\n                    case 'UserMulti':\n                        /** Ensure it's a valid array containing objects */\n                        valid = isArray(fieldValue) && fieldValue.length > 0;\n                        if (valid) {\n                            /** Additionally check that each lookup/person contains a lookupId */\n                            for (let fieldObject of fieldValue) {\n                                if (valid) {\n                                    valid = checkObject(fieldObject);\n                                } else {\n                                    /** Short circuit */\n                                    return false;\n                                }\n                            }\n                        }\n                        break;\n                    default:\n                        /** Evaluate everything else as a string */\n                        valid = !isEmpty(fieldValue);\n\n                }\n            }\n            if (!valid) {\n                return false;\n            }\n        }\n        return valid;\n    }\n}\n\nexport interface IXMLList {\n    AllowDeletion?: string;\n    AllowMultiResponses?: string;\n    AnonymousPermMask?: string;\n    Author?: string;\n    BaseType?: string;\n    Created?: string;\n    DefaultViewUrl?: string;\n    Description?: string;\n    Direction?: string;\n    DocTemplateUrl?: string;\n    EmailAlias?: string;\n    EnableAttachments?: string;\n    EnableFolderCreation?: string;\n    EnableMinorVersion?: string;\n    EnableModeration?: string;\n    EnablePeopleSelector?: string;\n    EnableResourceSelector?: string;\n    EnableVersioning?: string;\n    EnforceDataValidation?: string;\n    EventSinkAssembly?: string;\n    EventSinkClass?: string;\n    EventSinkData?: string;\n    ExcludeFromOfflineClient?: string;\n    FeatureId?: string;\n    Flags?: string;\n    HasExternalDataSource?: string;\n    HasRelatedLists?: string;\n    HasUniqueScopes?: string;\n    Hidden?: string;\n    ID?: string;\n    ImageUrl?: string;\n    IrmEnabled?: string;\n    IsApplicationList?: string;\n    ItemCount?: string;\n    LastDeleted?: string;\n    MajorVersionLimit?: string;\n    MajorWithMinorVersionsLimit?: string;\n    MaxItemsPerThrottledOperation?: string;\n    Modified?: string;\n    MultipleDataList?: string;\n    Name?: string;\n    NoThrottleListOperations?: string;\n    Ordered?: string;\n    PreserveEmptyValues?: string;\n    ReadSecurity?: string;\n    RequireCheckout?: string;\n    RootFolder?: string;\n    ScopeId?: string;\n    SendToLocation?: string;\n    ServerTemplate?: string;\n    ShowUser?: string;\n    StrictTypeCoercion?: string;\n    ThrottleListOperations?: string;\n    ThumbnailSize?: string;\n    Title?: string;\n    Version?: string;\n    WebFullUrl?: string;\n    WebId?: string;\n    WebImageHeight?: string;\n    WebImageWidth?: string;\n    WorkFlowId?: string;\n    WriteSecurity?: string;\n}\n"]}