{"version":3,"file":"lookup.factory.js","sourceRoot":"","sources":["../../src/factories/lookup.factory.ts"],"names":[],"mappings":";AAAA,gCAAyB,6BAA6B,CAAC,CAAA;AAcvD;;;;;;;;;;;GAWG;AACH;IAII,gBAAY,GAAW;QACnB,IAAA,sCAAkC,EAA7B,UAAE,EAAE,gBAAK,CAAqB;QACnC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,WAAW,GAAG,KAAK,IAAI,EAAE,CAAC;IACnC,CAAC;IACL,aAAC;AAAD,CAAC,AATD,IASC;AATY,cAAM,SASlB,CAAA","sourcesContent":["import {splitIndex} from '../services/utility.service';\n\n/** Lookup referencing a ListItem of the specified type.  The \"lookupId\"\"\n * will be the same as the referenced <T>.id.  The \"lookupValue\"\" by default\n * should be the <T>.title but it can be changed to another text field\n * in the SharePoint list settings for this list. Only the lookupValue is\n * required and will be sent to the server when saving.  The lookupValue is\n * ignored.\n */\nexport interface ILookup<T> {\n    lookupValue: string;\n    lookupId: number;\n}\n\n/**\n * @ngdoc function\n * @name Lookup\n * @description\n * Allows for easier distinction when debugging if object type is shown as either Lookup or User.  Also allows us\n * to create an async request for the entity being referenced by the lookup\n * @param {string} s String to split into lookupValue and lookupId\n * @param {object} options Contains a reference to the parent list item and the property name.\n * @param {object} options.entity Reference to parent list item.\n * @param {object} options.propertyName Key on list item object.\n * @constructor\n */\nexport class Lookup<T> implements ILookup<T> {\n    lookupId: number;\n    lookupValue: string;\n\n    constructor(str: string) {\n        let {id, value} =  splitIndex(str);\n        this.lookupId = id;\n        this.lookupValue = value || '';\n    }\n}\n"]}