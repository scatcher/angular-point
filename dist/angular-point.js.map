{"version":3,"sources":["app.module.ts","config.ts","constants/apConfig.ts","constants/apDefaultFields.ts","constants/apDefaultListItemQueryOptions.ts","constants/apPermissionObject.ts","constants/apThirdPartyConstants.ts","constants/apWebServiceOperationConstants.ts","constants/apXMLFieldAttributeTypes.ts","constants/apXMLListAttributeTypes.ts","factories/apCamlFactory.ts","factories/apFieldFactory.ts","factories/apIndexedCacheFactory.ts","factories/apListFactory.ts","factories/apListItemFactory.ts","factories/apListItemVersionFactory.ts","factories/apLookupFactory.ts","factories/apModelFactory.ts","factories/apQueryFactory.ts","factories/apUserFactory.ts","interfaces/main.ts","models/apUserModel.ts","services/apCacheService.ts","services/apChangeService.ts","services/apDataService.ts","services/apDecodeService.ts","services/apEncodeService.ts","services/apExceptionHandlerService.ts","services/apExportService.ts","services/apFieldService.ts","services/apFormattedFieldValueService.ts","services/apLogger.ts","services/apSPServices.ts","services/apUtilityService.ts","services/apWebServiceService.ts","services/apXMLToJSONService.ts"],"names":[],"mappings":"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","file":"angular-point.js","sourcesContent":["/// <reference path=\"../typings/ap.d.ts\" />\r\n/// <reference path=\"../typings/main.d.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n    /**\r\n     * @ngdoc overview\r\n     * @module\r\n     * @name angularPoint\r\n     * @description\r\n     * This is the primary angularPoint module and needs to be listed in your app.js dependencies to gain use of AngularPoint\r\n     * functionality in your project.\r\n     * @installModule\r\n     */\r\n    angular.module('angularPoint', [])\r\n    /** Bootstrap everything that needs to be immediately instantiated */\r\n    .run((apListItemFactory: ListItemFactory, apModelFactory: ModelFactory) => {\r\n\r\n    })\r\n}\r\n","/// <reference path=\"app.module.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n    angular.module('angularPoint')\r\n        .config(Config);\r\n\r\n    function Config(apConfig) {\r\n\r\n        /** Add a convenience flag, inverse of offline */\r\n        apConfig.online = !apConfig.offline;\r\n    }\r\n}\r\n","/// <reference path=\"../app.module.ts\" />\r\n\r\n/**\r\n * @ngdoc object\r\n * @name angularPoint.apConfig\r\n * @description\r\n * Basic config for the application (unique for each environment).  Update to change for your environment.\r\n *\r\n * @param {string} appTitle Name of the application in case you need to reference.\r\n * @param {boolean} debug Determines if we should show debug code.\r\n * @param {string} defaultUrl Automatically sets the defaultUrl for web service calls so we don't need to make the\r\n * initial blocking call by SPServices.\r\n * @param {string} [defaultQueryName='primary'] The name that a query is registered with on a model if a name isn't specified.\r\n * @param {string} [firebaseUrl] Necessary if you're using apSyncService.  Look there for more details.\r\n * @param {boolean} [offline] Automatically set based on the URL of the site.  Pulls offline XML when hosted locally.\r\n * @param {string} [offlineXML='dev/'] The location to look for offline xml files.\r\n * @example\r\n * <h4>Default Configuration</h4>\r\n * <pre>\r\n * .constant('apConfig', {\r\n *     appTitle: 'Angular-Point',\r\n *     debugEnabled: true,\r\n *     firebaseURL: \"The optional url of your firebase source\",\r\n *     offline: window.location.href.indexOf('localhost') > -1 ||\r\n *         window.location.href.indexOf('http://0.') > -1 ||\r\n *         window.location.href.indexOf('http://10.') > -1 ||\r\n *         window.location.href.indexOf('http://192.') > -1\r\n * })\r\n * </pre>\r\n *\r\n * <h4>To Override</h4>\r\n * <pre>\r\n * angular.module('MyApp', ['my dependencies'])\r\n *      .config(function ($stateProvider, $urlRouterProvider) {\r\n *          //My routes\r\n *      })\r\n *      .run(function(apConfig) {\r\n *          //To set the default site root\r\n *          apConfig.defaultUrl =\r\n *            '//sharepoint.myserver.com/siteRoot';\r\n *\r\n *          //To set the default location to look for\r\n *          //offline xml files.\r\n *          apConfig.offlineXML = 'myCachedQueries/';\r\n *      });\r\n * </pre>\r\n */\r\nmodule ap {\r\n    'use strict';\r\n\r\n    export interface IAPConfig {\r\n        appTitle: string;\r\n        debug: boolean;\r\n        defaultQueryName: string;\r\n        defaultUrl: string;\r\n        environment?: string;\r\n        firebaseURL?: string;\r\n        localStorageExpiration?: number;\r\n        offline: boolean;\r\n        queryDebounceTime?: number;\r\n        userLoginNamePrefix?: string;\r\n    }\r\n\r\n    export var APConfig: IAPConfig = {\r\n        appTitle: 'Angular-Point',\r\n        debug: false,\r\n        defaultQueryName: 'primary',\r\n        defaultUrl: '',\r\n        environment: 'production',\r\n        firebaseURL: \"The optional url of your firebase source\",\r\n        //expiration in milliseconds - Defaults to a day and if set to 0 doesn't expire\r\n        localStorageExpiration: 86400000,\r\n        //Are we in working offline\r\n        offline: window.location.href.indexOf('localhost') > -1 ||\r\n        window.location.href.indexOf('http://0.') > -1 ||\r\n        window.location.href.indexOf('http://10.') > -1 ||\r\n        window.location.href.indexOf('http://127.') > -1 ||\r\n        window.location.href.indexOf('http://192.') > -1,\r\n        //Any identical query within this amount of time return the same promise\r\n        queryDebounceTime: 100\r\n    };\r\n\r\n    angular\r\n        .module('angularPoint')\r\n        .constant('apConfig', APConfig);\r\n}\r\n","/// <reference path=\"../app.module.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n    export var DefaultFields: IFieldConfigurationObject[] = [\r\n        { staticName: 'ID', objectType: 'Counter', mappedName: 'id', readOnly: true },\r\n        { staticName: 'Modified', objectType: 'DateTime', mappedName: 'modified', readOnly: true },\r\n        { staticName: 'Created', objectType: 'DateTime', mappedName: 'created', readOnly: true },\r\n        { staticName: 'Author', objectType: 'User', mappedName: 'author', readOnly: true },\r\n        { staticName: 'Editor', objectType: 'User', mappedName: 'editor', readOnly: true },\r\n        { staticName: 'PermMask', objectType: 'Mask', mappedName: 'permMask', readOnly: true },\r\n        { staticName: 'UniqueId', objectType: 'String', mappedName: 'uniqueId', readOnly: true },\r\n        { staticName: 'FileRef', objectType: 'Lookup', mappedName: 'fileRef', readOnly: true }\r\n    ];\r\n\r\n    /**\r\n     * @ngdoc object\r\n     * @name angularPoint.apDefaultFields\r\n     * @description\r\n     * Read only fields that should be included in all lists\r\n     */\r\n    angular\r\n        .module('angularPoint')\r\n        .constant('apDefaultFields', DefaultFields);\r\n\r\n}\r\n","/// <reference path=\"../app.module.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n     export var DefaultListItemQueryOptions: string = '' +\r\n        '<QueryOptions>' +\r\n        '   <IncludeMandatoryColumns>FALSE</IncludeMandatoryColumns>' +\r\n        '   <IncludeAttachmentUrls>TRUE</IncludeAttachmentUrls>' +\r\n        '   <IncludeAttachmentVersion>FALSE</IncludeAttachmentVersion>' +\r\n        '   <ExpandUserField>FALSE</ExpandUserField>' +\r\n        '</QueryOptions>';\r\n\r\n     angular\r\n        .module('angularPoint')\r\n        .constant('apDefaultListItemQueryOptions', DefaultListItemQueryOptions);\r\n\r\n}\r\n","/// <reference path=\"../app.module.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n    export interface IUserPermissionsObject {\r\n        AddAndCustomizePages: boolean;\r\n        AddDelPrivateWebParts: boolean;\r\n        AddListItems: boolean;\r\n        ApplyStyleSheets: boolean;\r\n        ApplyThemeAndBorder: boolean;\r\n        ApproveItems: boolean;\r\n        BrowseDirectories: boolean;\r\n        BrowseUserInfo: boolean;\r\n        CancelCheckout: boolean;\r\n        CreateAlerts: boolean;\r\n        CreateGroups: boolean;\r\n        CreateSSCSite: boolean;\r\n        DeleteListItems: boolean;\r\n        DeleteVersions: boolean;\r\n        EditListItems: boolean;\r\n        EditMyUserInfo: boolean;\r\n        EnumeratePermissions: boolean;\r\n        FullMask: boolean;\r\n        ManageAlerts: boolean;\r\n        ManageLists: boolean;\r\n        ManagePermissions: boolean;\r\n        ManageSubwebs: boolean;\r\n        ManageWeb: boolean;\r\n        Open: boolean;\r\n        OpenItems: boolean;\r\n        PersonalViews: boolean;\r\n        UpdatePersonalWebParts: boolean;\r\n        UseRemoteAPIs: boolean;\r\n        ViewFormPages: boolean;\r\n        ViewListItems: boolean;\r\n        ViewPages: boolean;\r\n        ViewUsageData: boolean;\r\n        ViewVersions: boolean;\r\n    }\r\n\r\n    export class BasePermissionObject implements IUserPermissionsObject {\r\n        AddAndCustomizePages = false;\r\n        AddDelPrivateWebParts = false;\r\n        AddListItems = false;\r\n        ApplyStyleSheets = false;\r\n        ApplyThemeAndBorder = false;\r\n        ApproveItems = false;\r\n        BrowseDirectories = false;\r\n        BrowseUserInfo = false;\r\n        CancelCheckout = false;\r\n        CreateAlerts = false;\r\n        CreateGroups = false;\r\n        CreateSSCSite = false;\r\n        DeleteListItems = false;\r\n        DeleteVersions = false;\r\n        EditListItems = false;\r\n        EditMyUserInfo = false;\r\n        EnumeratePermissions = false;\r\n        FullMask = false;\r\n        ManageAlerts = false;\r\n        ManageLists = false;\r\n        ManagePermissions = false;\r\n        ManageSubwebs = false;\r\n        ManageWeb = false;\r\n        Open = false;\r\n        OpenItems = false;\r\n        PersonalViews = false;\r\n        UpdatePersonalWebParts = false;\r\n        UseRemoteAPIs = false;\r\n        ViewFormPages = false;\r\n        ViewListItems = false;\r\n        ViewPages = false;\r\n        ViewUsageData = false;\r\n        ViewVersions = false;\r\n    }\r\n\r\n\r\n    angular\r\n        .module('angularPoint')\r\n        .constant('apBasePermissionObject', BasePermissionObject);\r\n\r\n}\r\n","/// <reference path=\"../app.module.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n    angular.module('angularPoint')\r\n    /** lodash */\r\n        .constant('_', _);\r\n}\r\n","/// <reference path=\"../app.module.ts\" />\r\n\r\n//  apWebServiceOperationConstants.OpName = [WebService, needs_SOAPAction];\r\n//      OpName              The name of the Web Service operation -> These names are unique\r\n//      WebService          The name of the WebService this operation belongs to\r\n//      needs_SOAPAction    Boolean indicating whether the operation needs to have the SOAPAction passed in the setRequestHeaderfunction.\r\n//                          true if the operation does a write, else false\r\n\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n    export interface IWebServiceOperationConstants {\r\n        [key: string]: [string, boolean]\r\n    }\r\n\r\n    export var WebServiceOperationConstants: IWebServiceOperationConstants = {\r\n        GetAlerts: ['Alerts', false],\r\n        DeleteAlerts: ['Alerts', true],\r\n        Mode: ['Authentication', false],\r\n        Login: ['Authentication', false],\r\n        CopyIntoItems: ['Copy', true],\r\n        CopyIntoItemsLocal: ['Copy', true],\r\n        GetItem: ['Copy', false],\r\n        GetForm: ['Forms', false],\r\n        GetFormCollection: ['Forms', false],\r\n        AddAttachment: ['Lists', true],\r\n        AddDiscussionBoardItem: ['Lists', true],\r\n        AddList: ['Lists', true],\r\n        AddListFromFeature: ['Lists', true],\r\n        ApplyContentTypeToList: ['Lists', true],\r\n        CheckInFile: ['Lists', true],\r\n        CheckOutFile: ['Lists', true],\r\n        CreateContentType: ['Webs', true],\r\n        DeleteAttachment: ['Lists', true],\r\n        DeleteContentType: ['Lists', true],\r\n        DeleteContentTypeXmlDocument: ['Lists', true],\r\n        DeleteList: ['Lists', true],\r\n        GetAttachmentCollection: ['Lists', false],\r\n        GetList: ['Lists', false],\r\n        GetListAndView: ['Lists', false],\r\n        GetListCollection: ['Lists', false],\r\n        GetListContentType: ['Lists', false],\r\n        GetListContentTypes: ['Lists', false],\r\n        GetListItemChanges: ['Lists', false],\r\n        GetListItemChangesSinceToken: ['Lists', false],\r\n        GetListItems: ['Lists', false],\r\n        GetVersionCollection: ['Lists', false],\r\n        UndoCheckOut: ['Lists', true],\r\n        UpdateContentType: ['Webs', true],\r\n        UpdateContentTypesXmlDocument: ['Lists', true],\r\n        UpdateContentTypeXmlDocument: ['Lists', true],\r\n        UpdateList: ['Lists', true],\r\n        UpdateListItems: ['Lists', true],\r\n        AddMeeting: ['Meetings', true],\r\n        CreateWorkspace: ['Meetings', true],\r\n        RemoveMeeting: ['Meetings', true],\r\n        SetWorkSpaceTitle: ['Meetings', true],\r\n        ResolvePrincipals: ['People', false],\r\n        SearchPrincipals: ['People', false],\r\n        AddPermission: ['Permissions', true],\r\n        AddPermissionCollection: ['Permissions', true],\r\n        GetPermissionCollection: ['Permissions', true],\r\n        RemovePermission: ['Permissions', true],\r\n        RemovePermissionCollection: ['Permissions', true],\r\n        UpdatePermission: ['Permissions', true],\r\n        GetLinks: ['PublishedLinksService', true],\r\n        GetPortalSearchInfo: ['Search', false],\r\n        GetQuerySuggestions: ['Search', false],\r\n        GetSearchMetadata: ['Search', false],\r\n        Query: ['Search', false],\r\n        QueryEx: ['Search', false],\r\n        Registration: ['Search', false],\r\n        Status: ['Search', false],\r\n        SendClientScriptErrorReport: ['SharePointDiagnostics', true],\r\n        GetAttachments: ['SiteData', false],\r\n        EnumerateFolder: ['SiteData', false],\r\n        SiteDataGetList: ['SiteData', false],\r\n        SiteDataGetListCollection: ['SiteData', false],\r\n        SiteDataGetSite: ['SiteData', false],\r\n        SiteDataGetSiteUrl: ['SiteData', false],\r\n        SiteDataGetWeb: ['SiteData', false],\r\n        CreateWeb: ['Sites', true],\r\n        DeleteWeb: ['Sites', true],\r\n        GetSite: ['Sites', false],\r\n        GetSiteTemplates: ['Sites', false],\r\n        AddComment: ['SocialDataService', true],\r\n        AddTag: ['SocialDataService', true],\r\n        AddTagByKeyword: ['SocialDataService', true],\r\n        CountCommentsOfUser: ['SocialDataService', false],\r\n        CountCommentsOfUserOnUrl: ['SocialDataService', false],\r\n        CountCommentsOnUrl: ['SocialDataService', false],\r\n        CountRatingsOnUrl: ['SocialDataService', false],\r\n        CountTagsOfUser: ['SocialDataService', false],\r\n        DeleteComment: ['SocialDataService', true],\r\n        DeleteRating: ['SocialDataService', true],\r\n        DeleteTag: ['SocialDataService', true],\r\n        DeleteTagByKeyword: ['SocialDataService', true],\r\n        DeleteTags: ['SocialDataService', true],\r\n        GetAllTagTerms: ['SocialDataService', false],\r\n        GetAllTagTermsForUrlFolder: ['SocialDataService', false],\r\n        GetAllTagUrls: ['SocialDataService', false],\r\n        GetAllTagUrlsByKeyword: ['SocialDataService', false],\r\n        GetCommentsOfUser: ['SocialDataService', false],\r\n        GetCommentsOfUserOnUrl: ['SocialDataService', false],\r\n        GetCommentsOnUrl: ['SocialDataService', false],\r\n        GetRatingAverageOnUrl: ['SocialDataService', false],\r\n        GetRatingOfUserOnUrl: ['SocialDataService', false],\r\n        GetRatingOnUrl: ['SocialDataService', false],\r\n        GetRatingsOfUser: ['SocialDataService', false],\r\n        GetRatingsOnUrl: ['SocialDataService', false],\r\n        GetSocialDataForFullReplication: ['SocialDataService', false],\r\n        GetTags: ['SocialDataService', true],\r\n        GetTagsOfUser: ['SocialDataService', true],\r\n        GetTagTerms: ['SocialDataService', true],\r\n        GetTagTermsOfUser: ['SocialDataService', true],\r\n        GetTagTermsOnUrl: ['SocialDataService', true],\r\n        GetTagUrlsOfUser: ['SocialDataService', true],\r\n        GetTagUrlsOfUserByKeyword: ['SocialDataService', true],\r\n        GetTagUrls: ['SocialDataService', true],\r\n        GetTagUrlsByKeyword: ['SocialDataService', true],\r\n        SetRating: ['SocialDataService', true],\r\n        UpdateComment: ['SocialDataService', true],\r\n        SpellCheck: ['SpellCheck', false],\r\n        AddTerms: ['TaxonomyClientService', true],\r\n        GetChildTermsInTerm: ['TaxonomyClientService', false],\r\n        GetChildTermsInTermSet: ['TaxonomyClientService', false],\r\n        GetKeywordTermsByGuids: ['TaxonomyClientService', false],\r\n        GetTermsByLabel: ['TaxonomyClientService', false],\r\n        GetTermSets: ['TaxonomyClientService', false],\r\n        AddGroup: ['usergroup', true],\r\n        AddGroupToRole: ['usergroup', true],\r\n        AddRole: ['usergroup', true],\r\n        AddRoleDef: ['usergroup', true],\r\n        AddUserCollectionToGroup: ['usergroup', true],\r\n        AddUserCollectionToRole: ['usergroup', true],\r\n        AddUserToGroup: ['usergroup', true],\r\n        AddUserToRole: ['usergroup', true],\r\n        GetAllUserCollectionFromWeb: ['usergroup', false],\r\n        GetGroupCollection: ['usergroup', false],\r\n        GetGroupCollectionFromRole: ['usergroup', false],\r\n        GetGroupCollectionFromSite: ['usergroup', false],\r\n        GetGroupCollectionFromUser: ['usergroup', false],\r\n        GetGroupCollectionFromWeb: ['usergroup', false],\r\n        GetGroupInfo: ['usergroup', false],\r\n        GetRoleCollection: ['usergroup', false],\r\n        GetRoleCollectionFromGroup: ['usergroup', false],\r\n        GetRoleCollectionFromUser: ['usergroup', false],\r\n        GetRoleCollectionFromWeb: ['usergroup', false],\r\n        GetRoleInfo: ['usergroup', false],\r\n        GetRolesAndPermissionsForCurrentUser: ['usergroup', false],\r\n        GetRolesAndPermissionsForSite: ['usergroup', false],\r\n        GetUserCollection: ['usergroup', false],\r\n        GetUserCollectionFromGroup: ['usergroup', false],\r\n        GetUserCollectionFromRole: ['usergroup', false],\r\n        GetUserCollectionFromSite: ['usergroup', false],\r\n        GetUserCollectionFromWeb: ['usergroup', false],\r\n        GetUserInfo: ['usergroup', false],\r\n        GetUserLoginFromEmail: ['usergroup', false],\r\n        RemoveGroup: ['usergroup', true],\r\n        RemoveGroupFromRole: ['usergroup', true],\r\n        RemoveRole: ['usergroup', true],\r\n        RemoveUserCollectionFromGroup: ['usergroup', true],\r\n        RemoveUserCollectionFromRole: ['usergroup', true],\r\n        RemoveUserCollectionFromSite: ['usergroup', true],\r\n        RemoveUserFromGroup: ['usergroup', true],\r\n        RemoveUserFromRole: ['usergroup', true],\r\n        RemoveUserFromSite: ['usergroup', true],\r\n        RemoveUserFromWeb: ['usergroup', true],\r\n        UpdateGroupInfo: ['usergroup', true],\r\n        UpdateRoleDefInfo: ['usergroup', true],\r\n        UpdateRoleInfo: ['usergroup', true],\r\n        UpdateUserInfo: ['usergroup', true],\r\n        AddColleague: ['UserProfileService', true],\r\n        AddLink: ['UserProfileService', true],\r\n        AddMembership: ['UserProfileService', true],\r\n        AddPinnedLink: ['UserProfileService', true],\r\n        CreateMemberGroup: ['UserProfileService', true],\r\n        CreateUserProfileByAccountName: ['UserProfileService', true],\r\n        GetCommonColleagues: ['UserProfileService', false],\r\n        GetCommonManager: ['UserProfileService', false],\r\n        GetCommonMemberships: ['UserProfileService', false],\r\n        GetInCommon: ['UserProfileService', false],\r\n        GetPropertyChoiceList: ['UserProfileService', false],\r\n        GetUserColleagues: ['UserProfileService', false],\r\n        GetUserLinks: ['UserProfileService', false],\r\n        GetUserMemberships: ['UserProfileService', false],\r\n        GetUserPinnedLinks: ['UserProfileService', false],\r\n        GetUserProfileByGuid: ['UserProfileService', false],\r\n        GetUserProfileByIndex: ['UserProfileService', false],\r\n        GetUserProfileByName: ['UserProfileService', false],\r\n        GetUserProfileCount: ['UserProfileService', false],\r\n        GetUserProfileSchema: ['UserProfileService', false],\r\n        GetUserPropertyByAccountName: ['UserProfileService', false],\r\n        ModifyUserPropertyByAccountName: ['UserProfileService', true],\r\n        RemoveAllColleagues: ['UserProfileService', true],\r\n        RemoveAllLinks: ['UserProfileService', true],\r\n        RemoveAllMemberships: ['UserProfileService', true],\r\n        RemoveAllPinnedLinks: ['UserProfileService', true],\r\n        RemoveColleague: ['UserProfileService', true],\r\n        RemoveLink: ['UserProfileService', true],\r\n        RemoveMembership: ['UserProfileService', true],\r\n        RemovePinnedLink: ['UserProfileService', true],\r\n        UpdateColleaguePrivacy: ['UserProfileService', true],\r\n        UpdateLink: ['UserProfileService', true],\r\n        UpdateMembershipPrivacy: ['UserProfileService', true],\r\n        UpdatePinnedLink: ['UserProfileService', true],\r\n        DeleteAllVersions: ['Versions', true],\r\n        DeleteVersion: ['Versions', true],\r\n        GetVersions: ['Versions', false],\r\n        RestoreVersion: ['Versions', true],\r\n        AddView: ['Views', true],\r\n        DeleteView: ['Views', true],\r\n        GetView: ['Views', false],\r\n        GetViewHtml: ['Views', false],\r\n        GetViewCollection: ['Views', false],\r\n        UpdateView: ['Views', true],\r\n        UpdateViewHtml: ['Views', true],\r\n        AddWebPart: ['WebPartPages', true],\r\n        AddWebPartToZone: ['WebPartPages', true],\r\n        GetWebPart2: ['WebPartPages', false],\r\n        GetWebPartPage: ['WebPartPages', false],\r\n        GetWebPartProperties: ['WebPartPages', false],\r\n        GetWebPartProperties2: ['WebPartPages', false],\r\n        GetColumns: ['Webs', false],\r\n        GetContentType: ['Webs', false],\r\n        GetContentTypes: ['Webs', false],\r\n        GetCustomizedPageStatus: ['Webs', false],\r\n        GetListTemplates: ['Webs', false],\r\n        GetObjectIdFromUrl: ['Webs', false],\r\n        GetWeb: ['Webs', false],\r\n        GetWebCollection: ['Webs', false],\r\n        GetAllSubWebCollection: ['Webs', false],\r\n        UpdateColumns: ['Webs', true],\r\n        WebUrlFromPageUrl: ['Webs', false],\r\n        AlterToDo: ['Workflow', true],\r\n        ClaimReleaseTask: ['Workflow', true],\r\n        GetTemplatesForItem: ['Workflow', false],\r\n        GetToDosForItem: ['Workflow', false],\r\n        GetWorkflowDataForItem: ['Workflow', false],\r\n        GetWorkflowTaskData: ['Workflow', false],\r\n        StartWorkflow: ['Workflow', true]\r\n    };\r\n\r\n    angular.module('angularPoint')\r\n        .constant('apWebServiceOperationConstants', WebServiceOperationConstants);\r\n\r\n}\r\n","/// <reference path=\"../app.module.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n    export interface IXMLFieldAttributeTypes {\r\n        [key: string]: string;\r\n    }\r\n\r\n    export var XMLFieldAttributeTypes: IXMLFieldAttributeTypes = {\r\n        Decimals: 'Number',\r\n        EnforceUniqueValues: 'Boolean',\r\n        Filterable: 'Boolean',\r\n        FromBaseType: 'Boolean',\r\n        Hidden: 'Boolean',\r\n        Indexed: 'Boolean',\r\n        NumLines: 'Number',\r\n        ReadOnly: 'Boolean',\r\n        Required: 'Boolean',\r\n        Sortable: 'Boolean'\r\n    };\r\n\r\n    /**\r\n     * @ngdoc object\r\n     * @name angularPoint.apXMLListAttributeTypes\r\n     * @description Constant object map which contains many common XML attributes found on a field definition with their\r\n     * corresponding type.\r\n     */\r\n    angular\r\n        .module('angularPoint')\r\n        .constant('apXMLFieldAttributeTypes', XMLFieldAttributeTypes);\r\n\r\n}\r\n","/// <reference path=\"../app.module.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n    export interface IXMLListAttributeTypes {\r\n        [key: string]: string;\r\n    }\r\n\r\n    export var XMLListAttributeTypes: IXMLListAttributeTypes = {\r\n        BaseType: 'Number',\r\n        ServerTemplate: 'Number',\r\n        Created: 'DateTime',\r\n        Modified: 'DateTime',\r\n        LastDeleted: 'DateTime',\r\n        Version: 'Number',\r\n        ThumbnailSize: 'Number',\r\n        WebImageWidth: 'Number',\r\n        WebImageHeight: 'Number',\r\n        Flags: 'Number',\r\n        ItemCount: 'Number',\r\n        ReadSecurity: 'Number',\r\n        WriteSecurity: 'Number',\r\n        Author: 'Number',\r\n        MajorWithMinorVersionsLimit: 'Number',\r\n        HasUniqueScopes: 'Boolean',\r\n        NoThrottleListOperations: 'Boolean',\r\n        HasRelatedLists: 'Boolean',\r\n        AllowDeletion: 'Boolean',\r\n        AllowMultiResponses: 'Boolean',\r\n        EnableAttachments: 'Boolean',\r\n        EnableModeration: 'Boolean',\r\n        EnableVersioning: 'Boolean',\r\n        HasExternalDataSource: 'Boolean',\r\n        Hidden: 'Boolean',\r\n        MultipleDataList: 'Boolean',\r\n        Ordered: 'Boolean',\r\n        ShowUser: 'Boolean',\r\n        EnablePeopleSelector: 'Boolean',\r\n        EnableResourceSelector: 'Boolean',\r\n        EnableMinorVersion: 'Boolean',\r\n        RequireCheckout: 'Boolean',\r\n        ThrottleListOperations: 'Boolean',\r\n        ExcludeFromOfflineClient: 'Boolean',\r\n        EnableFolderCreation: 'Boolean',\r\n        IrmEnabled: 'Boolean',\r\n        IsApplicationList: 'Boolean',\r\n        PreserveEmptyValues: 'Boolean',\r\n        StrictTypeCoercion: 'Boolean',\r\n        EnforceDataValidation: 'Boolean',\r\n        MaxItemsPerThrottledOperation: 'Number'\r\n    };\r\n\r\n    /**\r\n     * @ngdoc object\r\n     * @name angularPoint.apXMLListAttributeTypes\r\n     * @description Constant object map which contains many common XML attributes found on a list definition with their\r\n     * corresponding type.\r\n     */\r\n    angular\r\n        .module('angularPoint')\r\n        .constant('apXMLListAttributeTypes', XMLListAttributeTypes);\r\n\r\n}\r\n","/// <reference path=\"../app.module.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n    export class CamlFactory {\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apCamlFactory:camlContainsQuery\r\n         * @methodOf angularPoint.apCamlFactory\r\n         * @parameter {object[]} fieldDefinitionsArray Array of fields to search for a given search string.\r\n         * @parameter {string} searchString String of text to search records for.\r\n         * @description\r\n         * Returns a combination of selectors using CAML '<Or></Or>' elements\r\n         * @returns {string} Caml select string.\r\n         * @example\r\n         * <pre>\r\n         *\r\n         * var testHTML = {objectType: 'HTML', staticName: 'HTML'};\r\n         * var testJSON = {objectType: 'JSON', staticName: 'JSON'};\r\n         * var testText = {objectType: 'Text', staticName: 'Text'};\r\n         * var testText2 = {objectType: 'Text', staticName: 'Text'};\r\n         *\r\n         * var testCaml = camlContainsQuery([testHTML, testText, testJSON, testText2], 'Test Query');\r\n         * console.log(testCaml);\r\n         *\r\n         * //Returns\r\n         * <Or><Contains><FieldRef Name=\\\"HTML\\\" /><Value Type=\\\"Text\\\"><![CDATA[Test Query]]>\r\n         * </Value></Contains><Or><Contains><FieldRef Name=\\\"Text\\\" /><Value Type=\\\"Text\\\">Test Query</Value>\r\n         * </Contains><Or><Contains><FieldRef Name=\\\"JSON\\\" /><Value Type=\\\"Text\\\"><![CDATA[Test Query]]>\r\n         * </Value></Contains><Contains><FieldRef Name=\\\"Text\\\" /><Value Type=\\\"Text\\\">Test Query</Value>\r\n         * </Contains></Or></Or></Or>\r\n         * </pre>\r\n         */\r\n        camlContainsQuery(fieldDefinitionsArray: IFieldDefinition[], searchString: string): string {\r\n            var selectStatements = [];\r\n\r\n            /** Create a select statement for each field */\r\n            _.each(fieldDefinitionsArray, (fieldDefinition, definitionIndex) => {\r\n                selectStatements.push(this.createCamlContainsSelector(fieldDefinition, searchString));\r\n            });\r\n\r\n            return this.chainCamlSelects(selectStatements, 'And');\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apCamlFactory:chainCamlSelects\r\n         * @methodOf angularPoint.apCamlFactory\r\n         * @description\r\n         * Used to combine multiple caml selectors into a single CAML query string wrapped properly.\r\n         * @param {object[]} selectStatements An array of select statements to wrap in \"<Or>\".\r\n         * @param {string} joinType Valid caml join type ('Or', 'And', ...).\r\n         * @returns {string} CAML query string.\r\n         */\r\n        chainCamlSelects(selectStatements: Object[], joinType: string): string {\r\n            var camlQuery = '',\r\n                camlQueryClosure = '';\r\n            _.each(selectStatements, function(statement, statementIndex) {\r\n                /** Add an or clause if we still have additional fields to process */\r\n                if (statementIndex < selectStatements.length - 1) {\r\n                    camlQuery += '<' + joinType + '>';\r\n                    camlQueryClosure = '</' + joinType + '>' + camlQueryClosure;\r\n                }\r\n                camlQuery += statement;\r\n            });\r\n            return camlQuery + camlQueryClosure;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apCamlFactory:createCamlContainsSelector\r\n         * @methodOf angularPoint.apCamlFactory\r\n         * @description\r\n         * Escapes characters that SharePoint gets upset about based on field type.\r\n         * @example\r\n         * <pre>\r\n         * var testHTML = {objectType: 'HTML', staticName: 'HTML'};\r\n         *\r\n         * var testCaml = createCamlContainsSelector(testHTML, 'Test Query');\r\n         * console.log(testCaml);\r\n         *\r\n         * //Returns\r\n         * <Contains>\r\n         *   <FieldRef Name=\\\"HTML\\\" />\r\n         *   <Value Type=\\\"Text\\\"><![CDATA[Test Query]]></Value>\r\n         * </Contains>\r\n         * </pre>\r\n         */\r\n        createCamlContainsSelector(fieldDefinition: IFieldDefinition, searchString: string): string {\r\n            var camlSelector;\r\n            switch (fieldDefinition.objectType) {\r\n                case 'HTML':\r\n                case 'JSON':\r\n                    camlSelector = '' +\r\n                    '<Contains>' +\r\n                    '<FieldRef Name=\"' + fieldDefinition.staticName + '\" />' +\r\n                    /** Use CDATA wrapper to escape [&, <, > ] */\r\n                    '<Value Type=\"Text\"><![CDATA[' + searchString + ']]></Value>' +\r\n                    '</Contains>';\r\n                    break;\r\n                default:\r\n                    camlSelector = '' +\r\n                    '<Contains>' +\r\n                    '<FieldRef Name=\"' + fieldDefinition.staticName + '\" />' +\r\n                    '<Value Type=\"Text\">' + searchString + '</Value>' +\r\n                    '</Contains>';\r\n            }\r\n            return camlSelector;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * @ngdoc function\r\n     * @name angularPoint.apCamlFactory\r\n     * @description\r\n     * Tools to assist with the creation of CAML queries.\r\n     *\r\n     */\r\n    angular.module('angularPoint')\r\n        .service('apCamlFactory', CamlFactory);\r\n}\r\n","/// <reference path=\"../app.module.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n    var apFieldService: FieldService, apUtilityService: UtilityService, apFormattedFieldValueService: FormattedFieldValueService;\r\n\r\n    export interface IXMLFieldDefinition {\r\n        ID?: string;\r\n        Type?: string;\r\n        ReadOnly?: string;\r\n        Hidden?: string;\r\n        DisplayName?: string;\r\n        Required?: string;\r\n        SourceID?: string;\r\n        ColName?: string;\r\n        StaticName?: string;\r\n        Choices?: string[];\r\n        Description?: string;\r\n        Indexed?: string;\r\n        EnforceUniqueValues?: string;\r\n        RowOrdinal?: string;\r\n        Sortable?: string;\r\n        Filterable?: string;\r\n        RelationshipDeleteBehavior?: string;\r\n        List?: string;\r\n        ShowField?: string;\r\n        ResultType?: string;\r\n        FillInChoice?: string;\r\n        Name?: string;\r\n        NumLines?: string;\r\n        RichText?: string;\r\n        Format?: string;\r\n    }\r\n\r\n    export interface IFieldConfigurationObject {\r\n        choices?: string[];\r\n        description?: string;\r\n        displayName?: string;\r\n        formatter?: (listItem: ListItem<any>, fieldDefinition: IFieldDefinition, options?: Object) => string;\r\n        label?: string;\r\n        //JS property name that we use to store the value for this field.\r\n        mappedName: string;\r\n        objectType: string;\r\n        readOnly?: boolean;\r\n        required?: boolean;\r\n        staticName: string;\r\n    }\r\n\r\n    //An extended field definition combines the user defined field definition with the XML returned by SharePoint\r\n    export interface IFieldDefinition extends IXMLFieldDefinition, IFieldConfigurationObject {\r\n        getDefaultValueForType(): any;\r\n        getFormattedValue(listItem: ListItem<any>, options?: Object): string;\r\n        getMockData(options): any;\r\n    }\r\n\r\n\r\n    /**\r\n     * @ngdoc object\r\n     * @name Field\r\n     * @description\r\n     * Defined in the MODEL.list.fieldDefinitions array.  Each field definition object maps an internal field\r\n     * in a SharePoint list/library to a JavaScript object using the internal SharePoint field name, the field\r\n     * type, and the desired JavaScript property name to add onto the parsed list item object. Ignore shown usage,\r\n     * each field definition is just an object within the fieldDefinitions array.\r\n     * @param {object} obj Field definition.\r\n     * @param {string} obj.staticName The actual SharePoint field name.\r\n     * @param {string} [obj.objectType='Text']\r\n     * <dl>\r\n     *     <dt>Boolean</dt>\r\n     *     <dd>Used to store a TRUE/FALSE value (stored in SharePoint as 0 or 1).</dd>\r\n     *     <dt>Calc</dt>\r\n     *     <dd>\";#\" Delimited String: The first value will be the calculated column value\r\n     *     type, the second will be the value</dd>\r\n     *     <dt>Choice</dt>\r\n     *     <dd>Simple text string but when processing the initial list definition, we\r\n     *     look for a Choices XML element within the field definition and store each\r\n     *     value.  We can then retrieve the valid Choices with one of the following:\r\n     *     ```var fieldDefinition = LISTITEM.getFieldDefinition('CHOICE_FIELD_NAME');```\r\n     *                                      or\r\n     *     ```var fieldDefinition = MODELNAME.getFieldDefinition('CHOICE_FIELD_NAME');```\r\n     *     ```var choices = fieldDefinition.Choices;```\r\n     *     </dd>\r\n     *     <dt>Counter</dt>\r\n     *     <dd>Same as Integer. Generally used only for the internal ID field. Its integer\r\n     *     value is set automatically to be unique with respect to every other item in the\r\n     *     current list. The Counter type is always read-only and cannot be set through a\r\n     *     form post.</dd>\r\n     *     <dt>Currency</dt>\r\n     *     <dd>Floating point number.</dd>\r\n     *     <dt>DateTime</dt>\r\n     *     <dd>Replace dashes with slashes and the \"T\" deliminator with a space if found.  Then\r\n     *     converts into a valid JS date object.</dd>\r\n     *     <dt>Float</dt>\r\n     *     <dd>Floating point number.</dd>\r\n     *     <dt>HTML</dt>\r\n     *     <dd>```_.unescape(STRING)```</dd>\r\n     *     <dt>Integer</dt>\r\n     *     <dd>Parses the string to a base 10 int.</dd>\r\n     *     <dt>JSON</dt>\r\n     *     <dd>Parses JSON if valid and converts into a a JS object.  If not valid, an error is\r\n     *     thrown with additional info on specifically what is invalid.</dd>\r\n     *     <dt>Lookup</dt>\r\n     *     <dd>Passes string to Lookup constructor where it is broken into an object containing\r\n     *     a \"lookupValue\" and \"lookupId\" attribute.  Inherits additional prototype methods from\r\n     *     Lookup.  See [Lookup](#/api/Lookup) for more information.\r\n     *     </dd>\r\n     *     <dt>LookupMulti</dt>\r\n     *     <dd>Converts multiple delimited \";#\" strings into an array of Lookup objects.</dd>\r\n     *     <dt>MultiChoice</dt>\r\n     *     <dd>Converts delimited \";#\" string into an array of strings representing each of the\r\n     *     selected choices.  Similar to the single \"Choice\", the XML Choices are stored in the\r\n     *     field definition after the initial call is returned from SharePoint so we can reference\r\n     *     later.\r\n     *     </dd>\r\n     *     <dt>Number</dt>\r\n     *     <dd>Treats as a float.</dd>\r\n     *     <dt>Text</dt>\r\n     *     <dd>**Default** No processing of the text string from XML.</dd>\r\n     *     <dt>User</dt>\r\n     *     <dd>Similar to Lookup but uses the \"User\" prototype as a constructor to convert into a\r\n     *     User object with \"lookupId\" and \"lookupValue\" attributes.  The lookupId is the site collection\r\n     *     ID for the user and the lookupValue is typically the display name.\r\n     *     See [User](#/api/User) for more information.\r\n     *     </dd>\r\n     *     <dt>UserMulti</dt>\r\n     *     <dd>Parses delimited string to returns an array of User objects.</dd>\r\n     * </dl>\r\n     * @param {string} obj.mappedName The attribute name we'd like to use\r\n     * for this field on the newly created JS object.\r\n     * @param {boolean} [obj.readOnly=false] When saving, we only push fields\r\n     * that are mapped and not read only.\r\n     * @param {boolean} [obj.required=false] Allows us to validate the field to ensure it is valid based\r\n     * on field type.\r\n     * @returns {object} Field\r\n     *\r\n     * @requires angularPoint.apFieldFactory\r\n     * @constructor\r\n     */\r\n    export class FieldDefinition implements IFieldDefinition {\r\n        displayName: string;\r\n        formatter: (listItem: ListItem<any>, fieldDefinition: IFieldDefinition, options?: Object) => string;\r\n        internalName: string;\r\n        label: string;\r\n        mappedName: string;\r\n        objectType = 'Text';\r\n        readOnly = false;\r\n        staticName: string;\r\n        constructor(obj) {\r\n            _.assign(this, obj);\r\n            this.displayName = this.displayName ? this.displayName : apUtilityService.fromCamelCase(this.mappedName);\r\n\r\n            /** Deprecated internal name and replace with staticName but maintain compatibility */\r\n            this.staticName = this.staticName || this.internalName;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name Field:getDefaultValueForType\r\n         * @methodOf Field\r\n         * @description\r\n         * Can return mock data appropriate for the field type, by default it dynamically generates data but\r\n         * the staticValue param will instead return a hard coded type specific value.\r\n         */\r\n        getDefaultValueForType(): any {\r\n            return apFieldService.getDefaultValueForType(this.objectType);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name Field:getFormattedValue\r\n         * @methodOf Field\r\n         * @description\r\n         * By default uses the formatted field service to convert a field value into a formatted string\r\n         * readable by user.  Optionally can override in field definition with formatter property to return\r\n         * custom formatted value. A good example of this would be to stringify a discussion thread.\r\n         * @param {ListItem<any>} listItem List used to generate field value.\r\n         * @param {object} [options] Pass through to apFormattedFieldValueService.getFormattedFieldValue.\r\n         * @returns {string} Formatted field value suitable for outputting to user.\r\n         * @example\r\n         * <pre>\r\n         *  //In model.list.customFields defining a field\r\n         * {\r\n\t\t * \t  mappedName: 'lookup',\r\n\t\t * \t  objectType: 'Lookup',\r\n         *    staticName: 'MyAwesomeLookup',\r\n\t\t * \t  formatter: (listItem: ListItem<any>, fieldDefinition: IFieldDefinition, options?: Object) => {\r\n\t\t * \t  \t return listItem[fieldDefinition.mappedName].lookupValue.toUpperCase();\r\n\t\t * \t  }\r\n\t\t * }\r\n         * </pre>\r\n         */\r\n        getFormattedValue(listItem: ListItem<any>, options?: Object): string {\r\n            //Optionally provide a custom method to convert a field value into a formatted string\r\n            return _.isFunction(this.formatter) ? this.formatter(listItem, this, options) :\r\n                apFormattedFieldValueService\r\n                    .getFormattedFieldValue(listItem[this.mappedName], this.objectType, options);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name Field:getMockData\r\n         * @methodOf Field\r\n         * @param {object} [options] Optional params passed to apFieldService.getMockData.\r\n         * @param {boolean} [options.staticValue=false] Default to dynamically build mock data.\r\n         * @returns {*} mockData\r\n         */\r\n        getMockData(options): any {\r\n            return apFieldService.getMockData(this.objectType, options);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name angularPoint.apFieldFactory\r\n     * @description\r\n     * Contains the Field constructor and prototype definitions.\r\n     * @property {constructor} Field The Field constructor.\r\n     *\r\n     * @requires angularPoint.apFieldService\r\n     * @requires angularPoint.apUtilityService\r\n     *\r\n     */\r\n    export class FieldFactory {\r\n        static $inject = ['apFieldService', 'apUtilityService', 'apFormattedFieldValueService'];\r\n        FieldDefinition = FieldDefinition;\r\n        constructor(_apFieldService_, _apUtilityService_, _apFormattedFieldValueService_) {\r\n            apFieldService = _apFieldService_;\r\n            apUtilityService = _apUtilityService_;\r\n            apFormattedFieldValueService = _apFormattedFieldValueService_;\r\n        }\r\n    }\r\n\r\n\r\n    angular\r\n        .module('angularPoint')\r\n        .service('apFieldFactory', FieldFactory);\r\n\r\n}\r\n","/// <reference path=\"../app.module.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n    interface IUninstantiatedIndexCache<T> {\r\n        [key: string]: T;\r\n    }\r\n\r\n    /**\r\n     * @ngdoc object\r\n     * @name IndexedCache\r\n     * @description\r\n     * Attempts to be very similar to the ES6 Map instance.  Cache constructor that is extended to make it easier to work with\r\n     * via prototype methods.  Located in apIndexedCacheFactory.\r\n     * @param {object} [object] Optionally extend new cache with provided object.\r\n     * @requires angularPoint.apIndexedCacheFactory\r\n     * @constructor\r\n     */\r\n    export class IndexedCache<T extends ListItem<any>> {\r\n        //Object with keys equaling ID and values being the individual list item\r\n        [key: string]: any;\r\n\r\n        /**\r\n        * @ngdoc property\r\n        * @name IndexedCache.size\r\n        * @description\r\n        * Returns the number of key/value pairs in the Map object.  Similar to functionality in ES6 Map instance.\r\n        */\r\n        size: number;\r\n\r\n        constructor(object?: IUninstantiatedIndexCache<T>) {\r\n            if (object) {\r\n                _.assign(this, object);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name IndexedCache.clear\r\n         * @methodOf IndexedCache\r\n         * @description\r\n         * Clears all cached (enumerable) elements from the containing cache object.\r\n         */\r\n        clear(): void {\r\n            _.each(this.keys(), (key: string) => this.delete(key));\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name IndexedCache.delete\r\n         * @methodOf IndexedCache\r\n         * @description\r\n         * Removes any value associated to the key and returns the value that IndexedCache.has(value).\r\n         * @param {number} id ID of listItem to be removed.\r\n         */\r\n        delete(id: number | string): boolean {\r\n            let hasValue = this.has(id);\r\n            if (id && hasValue) {\r\n                delete this[id];\r\n            } else if (!_.isNumber(id) && !_.isString(id)) {\r\n                console.warn('A valid ID was not provided.');\r\n            }\r\n            return hasValue;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name IndexedCache.first\r\n         * @methodOf IndexedCache\r\n         * @description\r\n         * Returns the first listItem in the index (smallest ID).\r\n         * @returns {object} First listItem in cache or undefined if empty.\r\n         */\r\n        first(): T {\r\n            return this.nthEntity(0);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name IndexedCache.get\r\n         * @methodOf IndexedCache\r\n         * @returns {T} Returns the value associated to the key, or undefined if there is none.\r\n         */\r\n        get(id: number): T {\r\n            return this[id];\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name IndexedCache.has\r\n         * @methodOf IndexedCache\r\n         * @description\r\n         * Determines if an entity exists in the cache.\r\n         * @param {number} id The id of the requested list item.\r\n         * @returns {boolean} Returns a Boolean asserting whether a value has been associated to the key cache.\r\n         */\r\n        has(id: number | string): boolean {\r\n            return !!this[id];\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name IndexedCache.keys\r\n         * @methodOf IndexedCache\r\n         * @description\r\n         * Returns the array of enumerable keys (listItem ID's) for the cache.\r\n         * @returns {string[]} Array of listItem id's as strings.\r\n         */\r\n        keys(): string[] {\r\n            return Object.keys(this);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name IndexedCache.last\r\n         * @methodOf IndexedCache\r\n         * @description\r\n         * Returns the last listItem in the index (largest ID).\r\n         * @returns {object} Last listItem in cache.\r\n         */\r\n        last(): T {\r\n            var keys = this.keys();\r\n            return this[keys[keys.length - 1]];\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name IndexedCache.nthEntity\r\n         * @methodOf IndexedCache\r\n         * @description\r\n         * Based on the\r\n         * @param {number} index The index of the item requested.\r\n         * @returns {object} First listItem in cache.\r\n         */\r\n        nthEntity(index: number): T {\r\n            var keys = this.keys();\r\n            return this[keys[index]];\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name IndexedCache.set\r\n         * @methodOf IndexedCache\r\n         * @description\r\n         * Adds a new key to the cache if not already there with a value of the new listItem.\r\n         * @param {number} key Entity to add to the cache.\r\n         * @param {object} listItem Entity to add to the cache.\r\n         */\r\n        set(key: number, listItem: T): IndexedCache<T> {\r\n            if (_.isNumber(key) && _.isObject(listItem)) {\r\n                /** Only add the listItem to the cache if it's not already there */\r\n                if (!this.has(listItem.id)) {\r\n                    this[key] = listItem;\r\n                } else {\r\n                    let cachedObjectDiffersFromListItem = this.get(key) !== listItem;\r\n                    if (cachedObjectDiffersFromListItem) {\r\n                        console.warn('List item already exists in cache and differs from this list item.', listItem, this.get(key), this);\r\n                    }\r\n                }\r\n            } else {\r\n                throw new Error('A valid listItem wasn\\'t provided: ' + JSON.stringify(listItem, null, 2));\r\n            }\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @methodOf IndexedCache\r\n         * @name IndexedCache.toArray\r\n         * @description\r\n         * Turns the cache object into an array of entities.  Uses IndexedCache.values() and is a temp fix to get\r\n         * an array of objects until Map is fully supported.\r\n         * @returns {object[]} Returns the array of entities currently in the cache.\r\n         */\r\n        toArray(): T[] {\r\n            return this.values();\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name IndexedCache.values\r\n         * @methodOf IndexedCache\r\n         * @description\r\n         * Turns the cache object into an array of entities similar to the method on Map.values().  Unlike\r\n         * the method on Map though this does not return the objects in insertion order.\r\n         * @returns {IndexedCache<T>[]} Returns the array of entities currently in the cache.\r\n         */\r\n        values(): T[] {\r\n            return _.toArray<IndexedCache<T>, T>(this);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @methodOf IndexedCache\r\n         * @deprecated\r\n         * @description\r\n         * DEPRECATED AND WILL BE REMOVED!  Use IndexedCache.set instead.\r\n         * Adds a new key to the cache if not already there with a value of the new listItem.\r\n         * @param {object} listItem Entity to add to the cache.\r\n         */\r\n        private addEntity(listItem: T): void {\r\n            console.warn('DEPRECATED METHOD!.  addEntity method deprecited.  Please use the set method in the future to comply with ES6 Map object.');\r\n            this.set(listItem.id, listItem);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name IndexedCache.count\r\n         * @methodOf IndexedCache\r\n         * @description\r\n         * Returns the number of entities in the cache.\r\n         * @returns {number} Number of entities in the cache.\r\n         */\r\n        private count(): number {\r\n            return this.keys().length;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @methodOf IndexedCache\r\n         * @deprecated\r\n         * @description\r\n         * DEPRECATED AND WILL BE REMOVED! Use IndexedCache.delete instead of removeEntityById.\r\n         * Removes a listItem from the cache.\r\n         * @param {number} id ID of listItem to be removed.\r\n         */\r\n        private removeEntityById(id: number): void {\r\n            console.warn('DEPRECATED METHOD! Use IndexedCache.delete() instead of removeEntityById().');\r\n            this.delete(id);\r\n        }\r\n\r\n    }\r\n\r\n    /** Adds a getter to base prototype wich returns  the number of key/values stored in cache. */\r\n    Object.defineProperty(IndexedCache.prototype, \"size\", {\r\n        get: function() {\r\n            return this.count();\r\n        },\r\n        enumerable: false,\r\n        configurable: false\r\n    });\r\n\r\n\r\n    /**\r\n     * @ngdoc object\r\n     * @name angularPoint.apIndexedCacheFactory\r\n     * @description\r\n     * Exposes the EntityFactory prototype and a constructor to instantiate a new Entity Factory in apCacheService.\r\n     */\r\n    export class IndexedCacheFactory {\r\n        IndexedCache = IndexedCache;\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apIndexedCacheFactory:create\r\n         * @methodOf angularPoint.apIndexedCacheFactory\r\n         * @description\r\n         * Instantiates and returns a new Indexed Cache.grunt\r\n         */\r\n        create<T extends ListItem<any>>(overrides?: IUninstantiatedIndexCache<T>): IndexedCache<T> {\r\n            return new IndexedCache<T>(overrides);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    angular.module('angularPoint')\r\n        .service('apIndexedCacheFactory', IndexedCacheFactory);\r\n}\r\n","/// <reference path=\"../app.module.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n    var apConfig: IAPConfig, apDefaultFields, apFieldFactory: FieldFactory;\r\n\r\n    export interface IUninstantiatedList {\r\n        customFields: IFieldConfigurationObject[];\r\n        environments?: { [key: string]: string };\r\n        guid?: string;\r\n        title: string;\r\n        viewFields?: string;\r\n        webURL?: string;\r\n    }\r\n\r\n    export interface IListFieldMapping {\r\n        [key: string]: {\r\n            mappedName: string;\r\n            objectType: string;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * XML List Object gets converted into JSON object with the following properties.\r\n     */\r\n    export interface IXMLList {\r\n        AllowDeletion?: string;\r\n        AllowMultiResponses?: string;\r\n        AnonymousPermMask?: string;\r\n        Author?: string;\r\n        BaseType?: string;\r\n        Created?: string;\r\n        DefaultViewUrl?: string;\r\n        Description?: string;\r\n        Direction?: string;\r\n        DocTemplateUrl?: string;\r\n        EmailAlias?: string;\r\n        EnableAttachments?: string;\r\n        EnableFolderCreation?: string;\r\n        EnableMinorVersion?: string;\r\n        EnableModeration?: string;\r\n        EnablePeopleSelector?: string;\r\n        EnableResourceSelector?: string;\r\n        EnableVersioning?: string;\r\n        EnforceDataValidation?: string;\r\n        EventSinkAssembly?: string;\r\n        EventSinkClass?: string;\r\n        EventSinkData?: string;\r\n        ExcludeFromOfflineClient?: string;\r\n        FeatureId?: string;\r\n        Flags?: string;\r\n        HasExternalDataSource?: string;\r\n        HasRelatedLists?: string;\r\n        HasUniqueScopes?: string;\r\n        Hidden?: string;\r\n        ID?: string;\r\n        ImageUrl?: string;\r\n        IrmEnabled?: string;\r\n        IsApplicationList?: string;\r\n        ItemCount?: string;\r\n        LastDeleted?: string;\r\n        MajorVersionLimit?: string;\r\n        MajorWithMinorVersionsLimit?: string;\r\n        MaxItemsPerThrottledOperation?: string;\r\n        Modified?: string;\r\n        MultipleDataList?: string;\r\n        Name?: string;\r\n        NoThrottleListOperations?: string;\r\n        Ordered?: string;\r\n        PreserveEmptyValues?: string;\r\n        ReadSecurity?: string;\r\n        RequireCheckout?: string;\r\n        RootFolder?: string;\r\n        ScopeId?: string;\r\n        SendToLocation?: string;\r\n        ServerTemplate?: string;\r\n        ShowUser?: string;\r\n        StrictTypeCoercion?: string;\r\n        ThrottleListOperations?: string;\r\n        ThumbnailSize?: string;\r\n        Title?: string;\r\n        Version?: string;\r\n        WebFullUrl?: string;\r\n        WebId?: string;\r\n        WebImageHeight?: string;\r\n        WebImageWidth?: string;\r\n        WorkFlowId?: string;\r\n        WriteSecurity?: string;\r\n    }\r\n\r\n    export interface IList extends IUninstantiatedList, IXMLList {\r\n        customFields: IFieldDefinition[];\r\n        environments: { [key: string]: string };\r\n        fields: IFieldDefinition[];\r\n        getListId(): string;\r\n        guid: string;\r\n        identifyWebURL(): string;\r\n        isReady: boolean;\r\n        mapping?: IListFieldMapping;\r\n        permissions?: IUserPermissionsObject;\r\n        title: string;\r\n        viewFields?: string;\r\n        webURL?: string;\r\n    }\r\n    /**\r\n     * @ngdoc object\r\n     * @name List\r\n     * @description\r\n     * List Object Constructor.  This is handled automatically when creating a new model so there shouldn't be\r\n     * any reason to manually call.\r\n     * @param {object} config Initialization parameters.\r\n     * @param {string} config.guid Unique SharePoint GUID for the list we'll be basing the model on\r\n     * ex:'{4D74831A-42B2-4558-A67F-B0B5ADBC0EAC}'\r\n     * @param {string} config.title Maps to the offline XML file in dev folder (no spaces)\r\n     * ex: 'ProjectsList' so the offline XML file would be located at apConfig.offlineXML + 'ProjectsList.xml'\r\n     * @param {object[]} [config.customFields] Mapping of SharePoint field names to the internal names we'll be using\r\n     * in our application.  Also contains field type, readonly attribute, and any other non-standard settings.\r\n     * <pre>\r\n     * [\r\n     *   {\r\n         *       staticName: \"Title\",\r\n         *       objectType: \"Text\",\r\n         *       mappedName: \"lastName\",\r\n         *       readOnly:false\r\n         *   },\r\n     *   {\r\n         *       staticName: \"FirstName\",\r\n         *       objectType: \"Text\",\r\n         *       mappedName: \"firstName\",\r\n         *       readOnly:false\r\n         *   },\r\n     *   {\r\n         *       staticName: \"Organization\",\r\n         *       objectType: \"Lookup\",\r\n         *       mappedName: \"organization\",\r\n         *       readOnly:false\r\n         *   },\r\n     *   {\r\n         *       staticName: \"Account\",\r\n         *       objectType: \"User\",\r\n         *       mappedName: \"account\",\r\n         *       readOnly:false\r\n         *   },\r\n     *   {\r\n         *       staticName: \"Details\",\r\n         *       objectType: \"Text\",\r\n         *       mappedName: \"details\",\r\n         *       readOnly:false\r\n         *   }\r\n     * ]\r\n     * </pre>\r\n     * @property {string} viewFields XML string defining each of the fields to include in all CRUD requests,\r\n     * generated when the Model.List is instantiated.\r\n     * <pre>\r\n     *     <ViewFields>...</ViewFields>\r\n     * </pre>\r\n     * @property {Field[]} fields Generated when the Model.List is instantiated.  Combines the standard\r\n     * default fields for all lists with the fields identified in the config.customFields and instantiates each\r\n     * with the Field constructor.\r\n     * @requires angularPoint.apListFactory\r\n     * @constructor\r\n     */\r\n    export class List implements IList {\r\n        customFields: IFieldDefinition[] = [];\r\n        environments: { [key: string]: string };\r\n        fields: IFieldDefinition[] = [];\r\n        guid: string;\r\n        isReady = false;\r\n        mapping: IListFieldMapping = {};\r\n        permissions: IUserPermissionsObject;\r\n        title: string;\r\n        viewFields: string;\r\n        WebFullUrl; //Only appears if extended from list definition\r\n        webURL: string;\r\n        constructor(config: IUninstantiatedList) {\r\n            this.webURL = apConfig.defaultUrl;\r\n            _.assign(this, config);\r\n            this.environments = this.environments || { production: this.guid };\r\n            this.extendFieldDefinitions();\r\n        }\r\n\r\n        /**\r\n         * @description\r\n         * 1. Populates the fields array which uses the Field constructor to combine the default\r\n         * SharePoint fields with those defined in the list definition on the model\r\n         * 2. Creates the list.viewFields XML string that defines the fields to be requested on a query\r\n         *\r\n         * @param {object} list Reference to the list within a model.\r\n         */\r\n        extendFieldDefinitions() {\r\n            //Clear out\r\n            this.viewFields = '';\r\n\r\n            /**\r\n            * Constructs the field\r\n            * - adds to viewField\r\n            * - create ows_ mapping\r\n            * @param fieldDefinition\r\n            */\r\n            var buildField = (fieldDefinition) => {\r\n                var field = new apFieldFactory.FieldDefinition(fieldDefinition);\r\n                this.fields.push(field);\r\n                this.viewFields += '<FieldRef Name=\"' + field.staticName + '\"/>';\r\n                this.mapping['ows_' + field.staticName] = {\r\n                    mappedName: field.mappedName,\r\n                    objectType: field.objectType\r\n                };\r\n            };\r\n\r\n            /** Open viewFields */\r\n            this.viewFields += '<ViewFields>';\r\n\r\n            /** Add the default fields */\r\n            _.each(apDefaultFields, (field) => buildField(field));\r\n\r\n            /** Add each of the fields defined in the model */\r\n            _.each(this.customFields, (field) => buildField(field));\r\n\r\n            /** Close viewFields */\r\n            this.viewFields += '</ViewFields>';\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name List:extendPermissionsFromListItem\r\n         * @methodOf List\r\n         * @param {ListItem} listItem List item to use as sample of user's permisssions for list.\r\n         * @description\r\n         * If the user permissions haven't been resolved for the list, use the permissions from a\r\n         * sample list item and assume they're the same for the entire list\r\n         * @returns {IUserPermissionsObject} Resolved permissions for the list item.\r\n         */\r\n        extendPermissionsFromListItem(listItem: ListItem<any>): IUserPermissionsObject {\r\n            if (!listItem) {\r\n                throw new Error('A valid list item is required in order to extend list permissions.');\r\n            }\r\n            this.permissions = listItem.resolvePermissions();\r\n            return this.permissions;\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name List:getListId\r\n         * @methodOf List\r\n         * @description\r\n         * Defaults to list.guid.  For a multi-environment setup, we accept a list.environments object with a property for each named\r\n         * environment with a corresponding value of the list guid.  The active environment can be selected\r\n         * by setting apConfig.environment to the string name of the desired environment.\r\n         * @returns {string} List ID.\r\n         */\r\n        getListId(): string {\r\n            if (_.isString(this.environments[apConfig.environment])) {\r\n                /**\r\n                 * For a multi-environment setup, we accept a list.environments object with a property for each named\r\n                 * environment with a corresponding value of the list guid.  The active environment can be selected\r\n                 * by setting apConfig.environment to the string name of the desired environment.\r\n                 */\r\n                return this.environments[apConfig.environment];\r\n            } else {\r\n                throw new Error('There isn\\'t a valid environment definition for apConfig.environment=' + apConfig.environment + '  ' +\r\n                    'Please confirm that the list \"' + this.title + '\" has the necessary environmental configuration.');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name List:identifyWebURL\r\n         * @methodOf List\r\n         * @description\r\n         * If a list is extended, use the provided webURL, otherwise use list.webURL.  If never set it will default\r\n         * to apConfig.defaultUrl.\r\n         * @returns {string} webURL param.\r\n         */\r\n        identifyWebURL(): string {\r\n            return this.WebFullUrl ? this.WebFullUrl : this.webURL;\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name angularPoint.apListFactory\r\n     * @description\r\n     * Exposes the List prototype and a constructor to instantiate a new List.\r\n     *\r\n     * @property {constructor} List The List constructor.\r\n     *\r\n     * @requires angularPoint.apConfig\r\n     * @requires angularPoint.apDefaultFields\r\n     * @requires angularPoint.apFieldFactory\r\n     */\r\n    export class ListFactory {\r\n        List = List;\r\n        static $inject = ['apConfig', 'apDefaultFields', 'apFieldFactory'];\r\n        constructor(_apConfig_, _apDefaultFields_, _apFieldFactory_) {\r\n\r\n            apConfig = _apConfig_;\r\n            apDefaultFields = _apDefaultFields_;\r\n            apFieldFactory = _apFieldFactory_;\r\n\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apListFactory:create\r\n         * @methodOf angularPoint.apListFactory\r\n         * @param {object} config Options object.\r\n         * @description\r\n         * Instantiates and returns a new List.\r\n         */\r\n        create(config) {\r\n            return new List(config);\r\n        }\r\n    }\r\n\r\n\r\n    angular.module('angularPoint')\r\n        .service('apListFactory', ListFactory);\r\n\r\n\r\n}\r\n","/// <reference path=\"../app.module.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n    let $q: ng.IQService, apCacheService: CacheService, apDataService: DataService, apDecodeService: DecodeService,\r\n        apEncodeService: EncodeService, apUtilityService: UtilityService, apConfig: IAPConfig,\r\n        apListItemVersionFactory: ListItemVersionFactory, apChangeService: ChangeService;\r\n\r\n    // raw list item before passed into constructor function\r\n    export interface IUninstantiatedListItem {\r\n        author: IUser;\r\n        created: Date;\r\n        editor: IUser;\r\n        fileRef: ILookup<any>;\r\n        id: number;\r\n        modified: Date;\r\n        permMask: string;\r\n        uniqueId: string;\r\n        [key: string]: any;\r\n    }\r\n\r\n    // standard uninstantiated list item with helper methods required to instantiate with model factory\r\n    export interface IUninstantiatedExtendedListItem<T extends ListItem<any>> extends IUninstantiatedListItem {\r\n        getCache: () => IndexedCache<T>;\r\n        getQuery: () => IQuery<T>;\r\n    }\r\n\r\n\r\n    /**\r\n     * @ngdoc object\r\n     * @name ListItem\r\n     * @description\r\n     * Base prototype which all list items inherit from.  All methods can be accessed through this prototype so all CRUD\r\n     * functionality can be called directly from a given list item.\r\n     * @constructor\r\n     */\r\n    export class ListItem<T extends ListItem<any>> implements IUninstantiatedExtendedListItem<T> {\r\n        author: IUser;\r\n        created: Date;\r\n        editor: IUser;\r\n        fileRef: ILookup<T>;\r\n        getCache: () => IndexedCache<T>;\r\n        getModel: <M extends Model>() => M;\r\n        getPristine: () => IUninstantiatedListItem;\r\n        getQuery: () => IQuery<T>;\r\n        id: number;\r\n        modified: Date;\r\n        permMask: string;\r\n        uniqueId: string;\r\n        private preDeleteAction: () => boolean;\r\n        private preSaveAction: () => boolean;\r\n        private postSaveAction: () => void;\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ListItem.changes\r\n         * @description\r\n         * Checks a given list item compared to its pristine state and retuns a field change summary\r\n         * with information on any significant changes to non-readonly fields.\r\n         * @returns {FieldChangeSummary<T>} Change summary of all fields that have been modified\r\n         * since last save.\r\n         */\r\n        changes(): FieldChangeSummary<T> {\r\n            //Instantiate a copy of the original list item for comparrison\r\n            let pristineListItem = _.cloneDeep<{ id: number }>(this.getPristine());\r\n            if (!pristineListItem) {\r\n                throw new Error('Could not retrieve a pristine version of this list item.');\r\n            }\r\n            //Remove id so when we instantiate we don't register in cache\r\n            pristineListItem.id = undefined;\r\n            //Need to instantiate using the same factory as the current list item\r\n            let factory: IModelFactory = this.constructor;\r\n            let instantiatedPristineListItem = new factory(pristineListItem);\r\n\r\n            return new apListItemVersionFactory.FieldChangeSummary(this, instantiatedPristineListItem);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ListItem.deleteAttachment\r\n         * @description\r\n         * Delete an attachment from a list item.\r\n         * @param {string} url Requires the URL for the attachment we want to delete.\r\n         * @returns {object} Promise which resolves with the updated attachment collection.\r\n         * @example\r\n         * <pre>\r\n         * $scope.deleteAttachment = function (attachment) {\r\n         *     let confirmation = window.confirm(\"Are you sure you want to delete this file?\");\r\n         *     if (confirmation) {\r\n         *         scope.listItem.deleteAttachment(attachment).then(function () {\r\n         *             alert(\"Attachment successfully deleted\");\r\n         *         });\r\n         *     }\r\n         * };\r\n         * </pre>\r\n         */\r\n        deleteAttachment(url: string): ng.IPromise<any> {\r\n\r\n            return apDataService.serviceWrapper({\r\n                operation: 'DeleteAttachment',\r\n                filterNode: 'Field',\r\n                listItemID: this.id,\r\n                url,\r\n                listName: this.getListId()\r\n            });\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ListItem.deleteItem\r\n         * @description\r\n         * Deletes record directly from the object and removes record from user cache.\r\n         * @returns {object} Promise which really only lets us know the request is complete.\r\n         * @example\r\n         * ```\r\n         * <ul>\r\n         *    <li ng-repeat=\"task in tasks\">\r\n         *        {{task.title}} <a href ng-click=\"task.deleteItem()>delete</a>\r\n         *    </li>\r\n         * </ul>\r\n         * ```\r\n         * List of tasks.  When the delete link is clicked, the list item item is removed from the local cache and\r\n         * the view is updated to no longer show the task.\r\n         */\r\n        deleteItem(): ng.IPromise<any> {\r\n            let listItem = this;\r\n            let model = listItem.getModel();\r\n            let deferred = $q.defer();\r\n\r\n            let config = {\r\n                operation: 'UpdateListItems',\r\n                listName: model.getListId(),\r\n                batchCmd: 'Delete',\r\n                ID: listItem.id,\r\n                valuePairs: undefined,\r\n                webURL: model.list.identifyWebURL()\r\n            };\r\n\r\n            if (_.isFunction(listItem.preDeleteAction) && !listItem.preDeleteAction()) {\r\n                //preDeleteAction exists but returned false so we don't delete\r\n                deferred.reject('Pre-Delete Action Returned False');\r\n            } else {\r\n\r\n                /** Check to see if list item or document because documents need the FileRef as well as id to delete */\r\n                if (listItem.fileRef && listItem.fileRef.lookupValue) {\r\n                    let fileExtension = listItem.fileRef.lookupValue.split('.').pop();\r\n                    if (_.isNaN(fileExtension)) {\r\n                        /** File extension instead of numeric extension so it's a document\r\n                         * @Example\r\n                         * Document: \"Site/library/file.csv\"\r\n                         * List Item: \"Site/List/5_.000\"\r\n                         * */\r\n                        config.valuePairs = [['FileRef', listItem.fileRef.lookupValue]];\r\n\r\n                    }\r\n                }\r\n\r\n                apDataService.serviceWrapper(config)\r\n                    .then((response) => {\r\n                        /** Optionally broadcast change event */\r\n                        apUtilityService.registerChange(model, 'delete', listItem.id);\r\n\r\n                        /** Success */\r\n                        apCacheService.deleteEntity(config.listName, listItem.id);\r\n\r\n                        deferred.resolve(response);\r\n                    })\r\n                    .catch((err) => {\r\n                        //In the event of an error, display toast\r\n                        let msg = 'There was an error deleting list item ' + listItem.id + ' from ' + model.list.title +\r\n                            ' due to the following Error: ' + err;\r\n                        deferred.reject(msg);\r\n                    });\r\n            }\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ListItem.getAttachmentCollection\r\n         * @description\r\n         * Requests all attachments for a given list item.\r\n         * @returns {object} Promise which resolves with all attachments for a list item.\r\n         * @example\r\n         * <pre>\r\n         * //Pull down all attachments for the current list item\r\n         * let fetchAttachments = function (listItem) {\r\n         *     listItem.getAttachmentCollection()\r\n         *         .then(function (attachments) {\r\n         *             scope.attachments = attachments;\r\n         *         });\r\n         * };\r\n         * </pre>\r\n         */\r\n        getAttachmentCollection(): ng.IPromise<string[]> {\r\n            let listItem = this;\r\n            return apDataService.getCollection({\r\n                operation: 'GetAttachmentCollection',\r\n                listName: listItem.getListId(),\r\n                webURL: listItem.getList().webURL,\r\n                ID: listItem.id,\r\n                filterNode: 'Attachment'\r\n            });\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ListItem.getAvailableWorkflows\r\n         * @description\r\n         * Wrapper for apDataService.getAvailableWorkflows.  Simply passes the current item in.\r\n         * @returns {promise} Array of objects defining each of the available workflows.\r\n         */\r\n        getAvailableWorkflows(): ng.IPromise<IWorkflowDefinition[]> {\r\n            let listItem = this;\r\n            return apDataService.getAvailableWorkflows(listItem.fileRef.lookupValue);\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ListItem.getChanges\r\n         * @description\r\n         * Wrapper for model.getListItemById.  Queries server for any changes and extends the existing\r\n         * list item with those changes.\r\n         * @returns {promise} Promise which resolves with the updated list item.\r\n         */\r\n        getChanges(): ng.IPromise<T> {\r\n            let model = this.getModel();\r\n            return model.getListItemById(this.id);\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ListItem.getChangeSummary\r\n         * @description\r\n         * Uses ListItem.getVersionHistory and determines what information changed between each list item\r\n         * version.\r\n         * @param {string[]} [fieldNames] An array/single string of field names on the list item to fetch a version\r\n         * history for.\r\n         * @returns {ng.IPromise<ChangeSummary<T>>} Promise which resolves with an array of list item versions.\r\n         * @example\r\n         * Assuming we have a modal form where we want to display each version of the title and project fields\r\n         * of a given list item.\r\n         * <pre>\r\n         * myGenericListItem.getChangeSummary(['title', 'project'])\r\n         *     .then(function(changeSummary: ChangeSummary) {\r\n         *            // We now have an array of every version of these fields\r\n         *            vm.changeSummary = changeSummary;\r\n         *      };\r\n         * </pre>\r\n         */\r\n        getChangeSummary(fieldNames?: string[]): ng.IPromise<ChangeSummary<T>> {\r\n            return this.getVersionHistory(fieldNames)\r\n                .then((versionHistoryCollection: VersionHistoryCollection<T>) => versionHistoryCollection.generateChangeSummary());\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ListItem.getFieldChoices\r\n         * @param {string} fieldName Internal field name.\r\n         * @description\r\n         * Uses the field definition defined in the model to attempt to find the choices array for a given Lookup or\r\n         * MultiLookup type field.  The default value is fieldDefinition.choices which can optionally be added to a\r\n         * given field definition.  If this isn't found, we check fieldDefinition.Choices which is populated after a\r\n         * GetListItemsSinceToken operation or a Model.extendListMetadata operation.  Finally if that isn't available\r\n         * we return an empty array.\r\n         * @returns {string[]} An array of choices for a Choice or MultiChoice type field.\r\n         */\r\n        getFieldChoices(fieldName: string): string[] {\r\n            let listItem = this;\r\n            let fieldDefinition = listItem.getFieldDefinition(fieldName);\r\n            return fieldDefinition.choices || fieldDefinition.Choices || [];\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ListItem.getFieldDefinition\r\n         * @description\r\n         * Returns the field definition from the definitions defined in the custom fields array within a model.\r\n         * @example\r\n         * <pre>\r\n         * let project = {\r\n         *    title: 'Project 1',\r\n         *    location: {\r\n         *        lookupId: 5,\r\n         *        lookupValue: 'Some Building'\r\n         *    }\r\n         * };\r\n         *\r\n         * //To get field metadata\r\n         * let locationDefinition = project.getFieldDefinition('location');\r\n         * </pre>\r\n         * @param {string} fieldName Internal field name.\r\n         * @returns {object} Field definition.\r\n         */\r\n        getFieldDefinition(fieldName: string): IFieldDefinition {\r\n            let listItem = this;\r\n            return listItem.getModel().getFieldDefinition(fieldName);\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ListItem.getFieldDescription\r\n         * @param {string} fieldName Internal field name.\r\n         * @description\r\n         * Uses the field definition defined in the model to attempt to find the description for a given field.  The default\r\n         * value is fieldDefinition.Description which is populated after a GetListItemsSinceToken operation or a\r\n         * Model.extendListMetadata operation.  If this isn't available we look for an optional attribute of a field\r\n         * fieldDefinition.description.  Finally if that have anything it returns an empty string.\r\n         * @returns {string} The description for a given field object.\r\n         */\r\n        getFieldDescription(fieldName: string): string {\r\n            let listItem = this;\r\n            let fieldDefinition = listItem.getFieldDefinition(fieldName);\r\n            return fieldDefinition.description || fieldDefinition.Description || '';\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ListItem.getFieldLabel\r\n         * @param {string} fieldName Internal field name.\r\n         * @description\r\n         * Uses the field definition defined in the model to attempt to find the label for a given field.  The default\r\n         * value is fieldDefinition.label.  If not available it will then use fieldDefinition.DisplayName which is\r\n         * populated after a GetListItemsSinceToken operation or a Model.extendListMetadata operation.  If this isn't\r\n         * available it will fallback to the the fieldDefinition.DisplayName which is a best guess at converting the\r\n         * caml case version of the mapped name using apUtilityService.fromCamelCase.\r\n         * @returns {string} The label for a given field object.\r\n         */\r\n        getFieldLabel(fieldName: string): string {\r\n            let listItem = this;\r\n            let fieldDefinition = listItem.getFieldDefinition(fieldName);\r\n            return fieldDefinition.label || fieldDefinition.DisplayName || fieldDefinition.displayName;\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ListItem.getFormattedValue\r\n         * @description\r\n         * Given the attribute name on a listItem, we can lookup the field type and from there return a formatted\r\n         * string representation of that value.\r\n         * @param {string} fieldName Attribute name on the object that contains the value to stringify.\r\n         * @param {object} [options] Pass through to apFormattedFieldValueService.getFormattedFieldValue or any\r\n         * custom method specified on the field definition.\r\n         * @returns {string} Formatted string representing the field value.\r\n         */\r\n        getFormattedValue(fieldName: string, options?: Object): string {\r\n            let listItem = this;\r\n            let fieldDefinition = listItem.getFieldDefinition(fieldName);\r\n            if (!fieldDefinition) {\r\n                throw new Error(`A field definition for a field named ${fieldName} wasn't found.`);\r\n            }\r\n            return fieldDefinition.getFormattedValue(this, options);\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ListItem.getList\r\n         * @description\r\n         * Abstraction to allow logic in model to be used instead of defining the list location in more than one place.\r\n         * @returns {object} List for the list item.\r\n         */\r\n        getList(): List {\r\n            let model: Model = this.getModel();\r\n            return model.getList();\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ListItem.getListId\r\n         * @description\r\n         * Allows us to reference the list ID directly from the list item.  This is added to the\r\n         * model.factory prototype in apModelFactory.\r\n         * @returns {string} List ID.\r\n         */\r\n        getListId(): string {\r\n            let model = this.getModel();\r\n            return model.getListId();\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ListItem.getLookupReference\r\n         * @description\r\n         * Allows us to retrieve the listItem being referenced in a given lookup field.\r\n         * @param {string} fieldName Name of the lookup property on the list item that references a listItem.\r\n         * @param {number} [lookupId=listItem.fieldName.lookupId] The listItem.lookupId of the lookup object.  This allows us to also use this logic\r\n         * on a multi-select by iterating over each of the lookups.\r\n         * @example\r\n         * <pre>\r\n         * let project = {\r\n         *    title: 'Project 1',\r\n         *    location: {\r\n         *        lookupId: 5,\r\n         *        lookupValue: 'Some Building'\r\n         *    }\r\n         * };\r\n         *\r\n         * //To get the location listItem\r\n         * let listItem = project.getLookupReference('location');\r\n         * </pre>\r\n         * @returns {object} The listItem the lookup is referencing or undefined if not in the cache.\r\n         */\r\n        getLookupReference<T2 extends ListItem<any>>(fieldName: string, lookupId?: number): T2 {\r\n            let listItem = this;\r\n            let lookupReference;\r\n            if (_.isUndefined(fieldName)) {\r\n                throw new Error('A field name is required.');\r\n            } else if (_.isEmpty(listItem[fieldName])) {\r\n                lookupReference = '';\r\n            } else {\r\n                let model = listItem.getModel();\r\n                let fieldDefinition = model.getFieldDefinition(fieldName);\r\n                /** Ensure the field definition has the List attribute which contains the GUID of the list\r\n                 *  that a lookup is referencing. */\r\n                if (fieldDefinition && fieldDefinition.List) {\r\n                    let targetId = lookupId || listItem[fieldName].lookupId;\r\n                    lookupReference = apCacheService.getCachedEntity(fieldDefinition.List, targetId);\r\n                } else {\r\n                    throw new Error(`This isn't a valid Lookup field or the field definitions need to be extended\r\n                        before we can complete this request.`);\r\n                }\r\n            }\r\n            return lookupReference;\r\n\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ListItem.getVersionHistory\r\n         * @description\r\n         * Takes an array of field names, finds the version history for field, and returns a snapshot of the object at each\r\n         * version.  If no fields are provided, we look at the field definitions in the model and pull all non-readonly\r\n         * fields.  The only way to do this that I've been able to get working is to get the version history for each\r\n         * field independently and then build the history by combining the server responses for each requests into a\r\n         * snapshot of the object.  Each version has the standard modified date but also includes a version property with\r\n         * the version number.\r\n         * @param {string[]} [properties] An array of property names on the list item\r\n         * that we're interested in.\r\n         * @returns {ng.IPromise<VersionHistoryCollection<T>>} Promise which resolves with an object with keys=version\r\n         * and values = ListItemVersion.\r\n         * @example\r\n         * Assuming we have a modal form where we want to display each version of the title and project fields\r\n         * of a given list item.\r\n         * <pre>\r\n         * myGenericListItem.getVersionHistory(['title', 'project'])\r\n         *     .then(function(versionHistory) {\r\n         *            // We now have an array of every version of these fields\r\n         *            vm.versionHistory = versionHistory;\r\n         *      })\r\n         *      .catch(function(err) {\r\n         *          // Do something with the error\r\n         *      });\r\n         * </pre>\r\n         */\r\n        getVersionHistory(properties?: string[]): ng.IPromise<VersionHistoryCollection<T>> {\r\n            let listItem = this;\r\n            let model = listItem.getModel();\r\n            let promiseArray = [];\r\n\r\n            if (properties && !_.isArray(properties)) throw new Error('Properties are required to be formatted as an array of strings.');\r\n\r\n            if (!properties) {\r\n                /** If fields aren't provided, pull the version history for all NON-readonly fields */\r\n                let targetFields = model.list.fields.filter(field => field.readOnly === false);\r\n                properties = _.map<IFieldDefinition, string>(targetFields, 'mappedName');\r\n            }\r\n\r\n            /** Generate promises for each field */\r\n            _.each(properties, (prop) => {\r\n                let promise = createPromise(prop);\r\n                promiseArray.push(promise);\r\n            });\r\n\r\n            /** Pause until all requests are resolved */\r\n            return $q.all(promiseArray)\r\n                .then((fieldVersionCollections: FieldVersionCollection[]) => {\r\n                    let versionHistoryCollection = new apListItemVersionFactory.VersionHistoryCollection<T>(fieldVersionCollections, model.factory);\r\n                    return versionHistoryCollection;\r\n                });\r\n\r\n            /** Constructor that creates a promise for each field */\r\n            function createPromise(prop: string) {\r\n\r\n                let fieldDefinition = listItem.getFieldDefinition(prop);\r\n\r\n                let payload = {\r\n                    operation: 'GetVersionCollection',\r\n                    strlistID: model.getListId(), // correct case\r\n                    strlistItemID: listItem.id, // correct case\r\n                    strFieldName: fieldDefinition.staticName,\r\n                    webURL: undefined\r\n                };\r\n\r\n                /** Manually set site url if defined, prevents SPServices from making a blocking call to fetch it. */\r\n                if (apConfig.defaultUrl) {\r\n                    payload.webURL = apConfig.defaultUrl;\r\n                }\r\n\r\n                return apDataService.getFieldVersionHistory<T>(payload, fieldDefinition);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ListItem.isPristine\r\n         * @description\r\n         * Determines if a list item has changed since it was instantiated.\r\n         * @returns {boolean} The list item is unchanged.\r\n         */\r\n        isPristine() {\r\n            return !this.changes().hasMajorChanges;\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ListItem.prototype.registerPreDeleteAction\r\n         * @param {Function} action Function that accepts no arguments and returns a boolean determining if delete can continue.\r\n         * @returns {Function} Function that can be called to unregister.\r\n         * @description\r\n         * Register a function on the list item prototype that is executed prior to deleting.  Good use case\r\n         * is to perform cleanup prior to deleting or determining if user can delete.  Method returns boolean and if\r\n         * true delete will continue, otherwise delete is prevented. There is no ListItem.registerPostDeleteAction because\r\n         * the list item no longer exists.\r\n         *\r\n         * @example\r\n         * <pre>\r\n         * //In example projectsModel.ts\r\n         *  export class Project extends ap.ListItem<Project>{\r\n         *      title: string;\r\n         *      users: User[];\r\n         *      ...some other expected attributes\r\n         *      constructor(obj) {\r\n         *          super(obj);\r\n         *          _.assign(this, obj);\r\n         *      }\r\n         *  }\r\n         *\r\n         *  let unregister = Project.prototype.registerPreDeleteAction(function() {\r\n         *      //Do some validation here and return true if user can delete\r\n         *      //otherwise return false to prevent delete action\r\n         *  });\r\n         *\r\n         *  //At some point in the future if no longer necessary\r\n         *  unregister();\r\n         *\r\n         * </pre>\r\n         */\r\n        registerPreDeleteAction(action: () => boolean): () => void {\r\n            this.preDeleteAction = action;\r\n            //Return function to unregister\r\n            return () => this.preDeleteAction = undefined;\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ListItem.prototype.registerPreSaveAction\r\n         * @param {Function} action Function that accepts no arguments and returns a boolean determining is save can continue.\r\n         * @returns {Function} Function that can be called to unregister.\r\n         * @description\r\n         * Register a function on the list item prototype that is executed prior to saving.  Good use case\r\n         * is to validate list item or perform cleanup prior to saving.  Method returns boolean and if\r\n         * true save will continue, otherwise save is prevented.\r\n         *\r\n         * @example\r\n         * <pre>\r\n         * //In example projectsModel.ts\r\n         *  export class Project extends ap.ListItem<Project>{\r\n         *      title: string;\r\n         *      users: User[];\r\n         *      ...some other expected attributes\r\n         *      constructor(obj) {\r\n         *          super(obj);\r\n         *          _.assign(this, obj);\r\n         *      }\r\n         *  }\r\n         *\r\n         *  let unregister = Project.prototype.registerPreSaveAction(function() {\r\n         *      //Do some validation here and return true if user can save\r\n         *      //otherwise return false to prevent save action\r\n         *  });\r\n         *\r\n         *  //At some point in the future if no longer necessary\r\n         *  unregister();\r\n         *\r\n         * </pre>\r\n         */\r\n        registerPreSaveAction(action: () => boolean): () => void {\r\n            this.preSaveAction = action;\r\n            //Return function to unregister\r\n            return () => this.preSaveAction = undefined;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ListItem.prototype.registerPostSaveAction\r\n         * @param {Function} action Callback function that accepts no arguments, returns nothing, and is called\r\n         * after a list item has completed saving.\r\n         * @returns {Function} Function that can be called to unregister.\r\n         * @description\r\n         * Register a function on the model prototype that is executed after saving.  Good use case\r\n         * is to perform cleanup after save.\r\n         *\r\n         * @example\r\n         * <pre>\r\n         * //In example projectsModel.ts\r\n         *  export class Project extends ap.ListItem<Project>{\r\n         *      title: string;\r\n         *      users: User[];\r\n         *      ...some other expected attributes\r\n         *      constructor(obj) {\r\n         *          super(obj);\r\n         *          _.assign(this, obj);\r\n         *      }\r\n         *  }\r\n         *\r\n         *  let unregister = Project.prototype.registerPostSaveAction(function() {\r\n         *      //Use this method to perform any cleanup after save event\r\n         *      //for any list item of this type\r\n         *  });\r\n         *\r\n         *  //At some point in the future if no longer necessary\r\n         *  unregister();\r\n         *\r\n         * </pre>\r\n         */\r\n        registerPostSaveAction(action: () => void): () => void {\r\n            this.postSaveAction = action;\r\n            //Return function to unregister\r\n            return () => delete this.postSaveAction;\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ListItem.resolvePermissions\r\n         * @description\r\n         * See apModelService.resolvePermissions for details on what we expect to have returned.\r\n         * @returns {Object} Contains properties for each permission level evaluated for current user.\r\n         * @example\r\n         * Lets assume we're checking to see if a user has edit rights for a given task list item.\r\n         * <pre>\r\n         * let canUserEdit = function(task) {\r\n         *      let userPermissions = task.resolvePermissions();\r\n         *      return userPermissions.EditListItems;\r\n         * };\r\n         * </pre>\r\n         * Example of what the returned object would look like\r\n         * for a site admin.\r\n         * <pre>\r\n         * userPermissions = {\r\n         *    \"ViewListItems\": true,\r\n         *    \"AddListItems\": true,\r\n         *    \"EditListItems\": true,\r\n         *    \"DeleteListItems\": true,\r\n         *    \"ApproveItems\": true,\r\n         *    \"OpenItems\": true,\r\n         *    \"ViewVersions\": true,\r\n         *    \"DeleteVersions\": true,\r\n         *    \"CancelCheckout\": true,\r\n         *    \"PersonalViews\": true,\r\n         *    \"ManageLists\": true,\r\n         *    \"ViewFormPages\": true,\r\n         *    \"Open\": true,\r\n         *    \"ViewPages\": true,\r\n         *    \"AddAndCustomizePages\": true,\r\n         *    \"ApplyThemeAndBorder\": true,\r\n         *    \"ApplyStyleSheets\": true,\r\n         *    \"ViewUsageData\": true,\r\n         *    \"CreateSSCSite\": true,\r\n         *    \"ManageSubwebs\": true,\r\n         *    \"CreateGroups\": true,\r\n         *    \"ManagePermissions\": true,\r\n         *    \"BrowseDirectories\": true,\r\n         *    \"BrowseUserInfo\": true,\r\n         *    \"AddDelPrivateWebParts\": true,\r\n         *    \"UpdatePersonalWebParts\": true,\r\n         *    \"ManageWeb\": true,\r\n         *    \"UseRemoteAPIs\": true,\r\n         *    \"ManageAlerts\": true,\r\n         *    \"CreateAlerts\": true,\r\n         *    \"EditMyUserInfo\": true,\r\n         *    \"EnumeratePermissions\": true,\r\n         *    \"FullMask\": true\r\n         * }\r\n         * </pre>\r\n         */\r\n        resolvePermissions(): IUserPermissionsObject {\r\n            return apUtilityService.resolvePermissions(this.permMask);\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ListItem.saveChanges\r\n         * @description\r\n         * Updates record directly from the object\r\n         * @param {object} [options] Optionally pass params to the data service.\r\n         * @param {boolean} [options.updateAllCaches=false] Search through the cache for each query to ensure listItem is\r\n         * updated everywhere.  This is more process intensive so by default we only update the cached listItem in the\r\n         * cache where this listItem is currently stored.\r\n         * @returns {object} Promise which resolved with the updated list item from the server.\r\n         * @example\r\n         * <pre>\r\n         * // Example of save function on a fictitious\r\n         * // app/modules/tasks/TaskDetailsCtrl.js modal form.\r\n         * $scope.saveChanges = function(task) {\r\n         *      task.saveChanges().then(function() {\r\n         *          // Successfully saved so we can do something\r\n         *          // like close form\r\n         *\r\n         *          }, function() {\r\n         *          // Failure\r\n         *\r\n         *          });\r\n         * }\r\n         * </pre>\r\n         */\r\n        saveChanges({ target = this.getCache ? this.getCache() : new IndexedCache<T>(), valuePairs, buildValuePairs = true } = {}): ng.IPromise<T> {\r\n            let listItem = this;\r\n            let model = listItem.getModel();\r\n            let deferred = $q.defer();\r\n\r\n\r\n            let config = {\r\n                batchCmd: 'Update',\r\n                buildValuePairs,\r\n                ID: listItem.id,\r\n                listName: model.getListId(),\r\n                operation: 'UpdateListItems',\r\n                target,\r\n                valuePairs,\r\n                webURL: model.list.identifyWebURL()\r\n            }\r\n\r\n            if (_.isFunction(listItem.preSaveAction) && !listItem.preSaveAction()) {\r\n                //preSaveAction exists but returned false so we don't save\r\n                deferred.reject('Pre-Save Action Returned False');\r\n            } else {\r\n                //Either no preSaveAction registered or it passed validation\r\n\r\n                /** Redirect if the request is actually creating a new list item.  This can occur if we create\r\n                 * an empty item that is instantiated from the model and then attempt to save instead of using\r\n                 * model.addNewItem */\r\n                if (!listItem.id) {\r\n                    return model.addNewItem(listItem, { target, valuePairs, buildValuePairs });\r\n                }\r\n\r\n                if (buildValuePairs === true) {\r\n                    let editableFields = _.filter(model.list.fields, { readOnly: false });\r\n                    config.valuePairs = apEncodeService.generateValuePairs(editableFields, listItem);\r\n                }\r\n\r\n                let request = apDataService.serviceWrapper(config)\r\n                    .then((response: XMLDocument) => {\r\n                        var indexedCache = apDecodeService.processListItems<T>(model, listItem.getQuery(), response, config);\r\n\r\n                        //Identify updated list item\r\n                        let updatedListItem = indexedCache.get(listItem.id);\r\n\r\n                        /** Optionally broadcast change event */\r\n                        apUtilityService.registerChange(model, 'update', updatedListItem.id);\r\n\r\n                        //Optionally perform any post save cleanup if registered\r\n                        if (_.isFunction(listItem.postSaveAction)) {\r\n                            listItem.postSaveAction();\r\n                        };\r\n\r\n                        //Resolve with the updated list item\r\n                        deferred.resolve(updatedListItem);\r\n                    });\r\n\r\n                    /** Notify change service to expect a request, only useful at this point when working offline */\r\n                    apChangeService.registerListItemUpdate<T>(listItem, config, deferred.promise);\r\n\r\n\r\n            }\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ListItem.saveFields\r\n         * @description\r\n         * Saves a named subset of fields back to SharePoint.  This is an alternative to saving all fields.\r\n         * @param {string[]} fieldArray Array of internal field names that should be saved to SharePoint.\r\n         * @param {object} [options] Optionally pass params to the data service.\r\n         * @returns {object} Promise which resolves with the updated list item from the server.\r\n         * @example\r\n         * <pre>\r\n         * // Example of saveFields function on a fictitious\r\n         * // app/modules/tasks/TaskDetailsCtrl.js modal form.\r\n         * // Similar to saveChanges but instead we only save\r\n         * // specified fields instead of pushing everything.\r\n         * $scope.updateStatus = function(task) {\r\n         *      task.saveFields(['status', 'notes'])\r\n         *          .then(function(updatedListItem) {\r\n         *              // Successfully updated the status and\r\n         *              // notes fields for the given task\r\n         *\r\n         *          })\r\n         *          .catch(function(err) {\r\n         *              // Failure to update the field\r\n         *\r\n         *          });\r\n         * }\r\n         * </pre>\r\n         */\r\n        saveFields(fieldArray: string[], { target = this.getCache ? this.getCache() : new IndexedCache<T>() } = {}): ng.IPromise<T> {\r\n\r\n            let listItem = this;\r\n            let model = listItem.getModel();\r\n            let definitions:IFieldDefinition[] = [];\r\n            let fieldName: string[];\r\n\r\n            if (_.isString(fieldArray)) {\r\n                console.warn('Field names should be an array of strings instead of a single string.  This will be deperecated.');\r\n            }\r\n            /** Allow a string to be passed in to save a single field */\r\n            let fieldNames = _.isString(fieldArray) ? [fieldArray] : fieldArray;\r\n\r\n            /** Find the field definition for each of the requested fields */\r\n            for (let fieldName of fieldNames) {\r\n                let match = _.find(model.list.customFields, { mappedName: fieldName });\r\n                if (match) {\r\n                    definitions.push(match);\r\n                }\r\n            }\r\n\r\n            /** Generate value pairs for specified fields */\r\n            let valuePairs = apEncodeService.generateValuePairs(definitions, listItem);\r\n\r\n            return this.saveChanges({\r\n                buildValuePairs: false,\r\n                target,\r\n                valuePairs\r\n            });\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ListItem.setPristine\r\n         * @param {ListItem} [listItem] Optionally pass list item object back to the list item constructor to\r\n         * run any initialization logic.  Otherwise we just overwrite existing values on the object with a copy from the\r\n         * original object.\r\n         * @description\r\n         * Resets all list item properties back to a pristine state but doesn't update any properties added\r\n         * manually to the list item.\r\n         */\r\n        setPristine(listItem?: ListItem<any>): void {\r\n            if (!this.id || !_.isFunction(this.getPristine)) {\r\n                throw new Error('Unable to find the pristine state for this list item.');\r\n            }\r\n            let pristineState = this.getPristine();\r\n\r\n            if (listItem) {\r\n                listItem.constructor(pristineState);\r\n            } else {\r\n                _.assign(this, pristineState);\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ListItem.startWorkflow\r\n         * @description\r\n         * Given a workflow name or templateId we initiate a given workflow using apDataService.startWorkflow.\r\n         * @param {object} options Params for method and pass through options to apDataService.startWorkflow.\r\n         * @param {string} [options.templateId] Used to directly start the workflow without looking up the templateId.\r\n         * @param {string} [options.workflowName] Use this value to lookup the templateId and then start the workflow.\r\n         * @returns {promise} Resolves with server response.\r\n         */\r\n        startWorkflow(options: IStartWorkflowParams): ng.IPromise<any> {\r\n            let listItem = this,\r\n                deferred = $q.defer();\r\n\r\n            /** Set the relative file reference */\r\n            options.fileRef = listItem.fileRef.lookupValue;\r\n\r\n            if (!options.templateId && !options.workflowName) {\r\n                throw new Error('Either a templateId or workflowName is required to initiate a workflow.');\r\n            } else if (options.templateId) {\r\n                /** The templateId is already provided so we don't need to look for it */\r\n                initiateRequest();\r\n            } else {\r\n                /** We first need to get the template GUID for the workflow */\r\n                listItem.getAvailableWorkflows()\r\n                    .then((workflows) => {\r\n                        let targetWorklow = _.findWhere(workflows, { name: options.workflowName });\r\n                        if (!targetWorklow) {\r\n                            throw new Error(`A workflow with the name ${options.workflowName} wasn't found.  The workflows available are [${_.map(workflows, 'name').toString() }].`);\r\n                        }\r\n                        /** Create an extended set of options to pass any overrides to apDataService */\r\n                        options.templateId = targetWorklow.templateId;\r\n                        initiateRequest();\r\n                    });\r\n            }\r\n\r\n            return deferred.promise;\r\n\r\n            function initiateRequest() {\r\n                apDataService.startWorkflow(options)\r\n                    .then((xmlResponse) => {\r\n                        deferred.resolve(xmlResponse);\r\n                    });\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ListItem.validateEntity\r\n         * @description\r\n         * Helper function that passes the current item to Model.validateEntity\r\n         * @returns {boolean} Evaluation of validity.\r\n         */\r\n        validateEntity(): boolean {\r\n            let listItem = this,\r\n                model = listItem.getModel();\r\n            return model.validateEntity(listItem);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /** In the event that a factory isn't specified, just use a\r\n     * standard constructor to allow it to inherit from ListItem */\r\n    export class StandardListItem {\r\n        constructor(obj?: Object) {\r\n            _.assign(this, obj);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ngdoc object\r\n     * @name apListItemFactory\r\n     * @description\r\n     * Exposes the ListItem prototype and a constructor to instantiate a new ListItem.\r\n     * See [ListItem](#/api/ListItem) for details of the methods available on the prototype.\r\n     *\r\n     * @requires ListItem\r\n     * @requires apCacheService\r\n     * @requires apDataService\r\n     * @requires apUtilityService\r\n     */\r\n\r\n    export class ListItemFactory {\r\n        ListItem = ListItem;\r\n        static $inject = ['$q', 'apCacheService', 'apChangeService', 'apConfig', 'apDataService', 'apDecodeService', 'apEncodeService', 'apUtilityService', 'apListItemVersionFactory'];\r\n\r\n        constructor(_$q_, _apCacheService_, _apChangeService_, _apConfig_, _apDataService_, _apDecodeService_, _apEncodeService_, _apUtilityService_, _apListItemVersionFactory_) {\r\n            $q = _$q_;\r\n            apCacheService = _apCacheService_;\r\n            apChangeService = _apChangeService_;\r\n            apConfig = _apConfig_;\r\n            apDataService = _apDataService_;\r\n            apDecodeService = _apDecodeService_;\r\n            apEncodeService = _apEncodeService_;\r\n            apUtilityService = _apUtilityService_;\r\n            apListItemVersionFactory = _apListItemVersionFactory_;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name apListItemFactory: create\r\n         * @methodOf apListItemFactory\r\n         * @description\r\n         * Instantiates and returns a new ListItem.\r\n         */\r\n        create<T extends ListItem<any>>(): ListItem<T> {\r\n            return new ListItem<T>();\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name apListItemFactory: createGenericFactory\r\n         * @methodOf apListItemFactory\r\n         * @description\r\n         * In the event that a factory isn't specified, just use a\r\n         * standard constructor to allow it to inherit from ListItem\r\n         */\r\n        createGenericFactory() {\r\n            return new StandardListItem();\r\n        }\r\n\r\n    }\r\n\r\n    angular\r\n        .module('angularPoint')\r\n        .service('apListItemFactory', ListItemFactory);\r\n}\r\n","/// <reference path=\"../app.module.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n    export interface IListItemVersions<T extends ListItem<any>> extends ListItem<T> {\r\n        [key: number]: IListItemVersion<T>;\r\n    }\r\n\r\n    export interface IListItemVersion<T extends ListItem<any>> extends ListItem<T> {\r\n        modified: Date;\r\n        version: number;\r\n        [key: string]: any;\r\n    }\r\n\r\n    export interface IFieldVersion {\r\n        editor: IUser;\r\n        modified: Date;\r\n        value: any;\r\n        version: number;\r\n    }\r\n\r\n    /**\r\n     * @ngdoc object\r\n     * @name apListItemVersionFactory.FieldVersionCollection\r\n     * @param {FieldDefinition} fieldDefinition Field definition of each version of the field added.\r\n     * @description\r\n     * Object that contains the entire version history for a given list item field/property.\r\n     */\r\n    export class FieldVersionCollection {\r\n        fieldDefinition: IFieldDefinition;\r\n        versions: { [key: number]: IFieldVersion } = {};\r\n\r\n        constructor(fieldDefinition: IFieldDefinition) {\r\n            this.fieldDefinition = fieldDefinition;\r\n        }\r\n        /**\r\n        * @ngdoc object\r\n        * @name apListItemVersionFactory.FieldVersionCollection.addVersion\r\n        * @methodOf apListItemVersionFactory.FieldVersionCollection\r\n        * @param {IUser} editor User who made the change.\r\n        * @param {Date} modified Date modified.\r\n        * @param {any} value Value of the field at this version.\r\n        * @param {number} version The version number.\r\n        * @description\r\n        * Used to add a single version to the collection.\r\n        */\r\n        addVersion(editor: IUser, modified: Date, value: any, version: number): void {\r\n            this.versions[version] = {\r\n                editor,\r\n                modified,\r\n                value,\r\n                version\r\n            };\r\n        }\r\n\r\n        get mappedName() {\r\n            return this.fieldDefinition.mappedName;\r\n        }\r\n\r\n        get length() {\r\n            return _.keys(this.versions).length;\r\n        }\r\n    }\r\n\r\n    class FieldChange {\r\n        fieldName: string;\r\n        newerVersion: IListItemVersion<any>;\r\n        newValue: string;\r\n        oldValue: string;\r\n        previousVersion: IListItemVersion<any>;\r\n        propertyName: string;\r\n\r\n        constructor(propertyName: string, fieldDefinition: IFieldConfigurationObject, newerVersion: IListItemVersion<any>, previousVersion: IListItemVersion<any> = {}) {\r\n\r\n            this.fieldName = fieldDefinition.displayName;\r\n            this.newerVersion = newerVersion;\r\n            /** Need to set property name before calling this.getFormattedValue */\r\n            this.propertyName = propertyName;\r\n\r\n            this.newValue = this.getFormattedValue(newerVersion);\r\n            this.oldValue = this.getFormattedValue(previousVersion);\r\n            this.previousVersion = previousVersion;\r\n        }\r\n\r\n        getFormattedValue(version: IListItemVersion<any>): string {\r\n            var propertyValue = '';\r\n            if (version.getFormattedValue) {\r\n                propertyValue = version.getFormattedValue(this.propertyName);\r\n            }\r\n            return propertyValue;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ngdoc object\r\n     * @name apListItemVersionFactory.FieldChangeSummary\r\n     * @param {ListItem<T>} newerVersion Updated version of list item.\r\n     * @param {ListItem<T>} [previousVersion={}] Previous version of list item.\r\n     * @description\r\n     * Generates a snapshot between 2 versions of a list item and locates diferences.\r\n     */\r\n    export class FieldChangeSummary<T extends ListItem<any>>{\r\n        changeCount: number;\r\n        fieldsChanged: { [key: string]: FieldChange; } = {};\r\n        constructor(newerVersion: ListItem<T>, previousVersion: ListItem<T> | Object = {}) {\r\n            /** Loop through each of the properties on the newer list item */\r\n            _.each(newerVersion, (val, propertyName) => {\r\n                var fieldDefinition = newerVersion.getFieldDefinition(propertyName);\r\n                /** Only log non-readonly fields that aren't the same */\r\n                if (fieldDefinition && !fieldDefinition.readOnly &&\r\n                    JSON.stringify(newerVersion[propertyName]) !== JSON.stringify(previousVersion[propertyName])) {\r\n\r\n                    let fieldChange = new FieldChange(propertyName, fieldDefinition, newerVersion, previousVersion);\r\n                    if (fieldChange.newValue !== fieldChange.oldValue) {\r\n                        /** This field has changed */\r\n                        this.fieldsChanged[propertyName] = fieldChange;\r\n                    }\r\n                }\r\n            });\r\n            this.changeCount = _.keys(this.fieldsChanged).length;\r\n        }\r\n        get hasMajorChanges(): boolean {\r\n            return _.isNumber(this.changeCount) && this.changeCount > 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ngdoc object\r\n     * @name apListItemVersionFactory.VersionSummary\r\n     * @param {IListItemVersion<T>} newerVersion Updated version of list item.\r\n     * @param {IListItemVersion<T>} [previousVersion={}] Previous version of list item.\r\n     * @description\r\n     * Used specifically to determine difference between 2 distinct versions of a list item using the\r\n     * version history.  Extends FieldChangeSummary.\r\n     */\r\n    export class VersionSummary<T extends ListItem<any>> extends FieldChangeSummary<T> {\r\n        listItemVersion: IListItemVersion<any>;\r\n        version: number;\r\n        constructor(newerVersion: IListItemVersion<T>, previousVersion: IListItemVersion<T> | Object = {}) {\r\n            super(newerVersion, previousVersion);\r\n            this.listItemVersion = newerVersion;\r\n            this.version = newerVersion.version;\r\n        }\r\n\r\n        get editor() {\r\n            return this.listItemVersion.editor;\r\n        }\r\n\r\n        get modified() {\r\n            return this.listItemVersion.modified;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @ngdoc object\r\n     * @name apListItemVersionFactory.ChangeSummary\r\n     * @param {IListItemVersions} versions Multiple versions of a list item.\r\n     * @description\r\n     * Used to summarize all changes for a given list item.\r\n     */\r\n    export class ChangeSummary<T extends ListItem<any>> {\r\n        /** The number of versions where list item data actually changed */\r\n        significantVersionCount = 0;\r\n        private versionSummaryCollection: { [key: number]: VersionSummary<T> } = {};\r\n\r\n        constructor(versions: IListItemVersions<T>) {\r\n            /** First version won't have a previous version */\r\n            var previousVersion;\r\n            _.each(versions, (version: IListItemVersion<T>) => {\r\n                var versionSummary = new VersionSummary<T>(version, previousVersion);\r\n                if (versionSummary.hasMajorChanges) {\r\n                    this.significantVersionCount++;\r\n                }\r\n                this.versionSummaryCollection[versionSummary.version] = versionSummary;\r\n                /** Store this version so we can compare to the next version */\r\n                previousVersion = version;\r\n            });\r\n        }\r\n        //Use getter in case we need to alter the way we store this in future\r\n        get changes() {\r\n            return this.versionSummaryCollection;\r\n        }\r\n        count(): number {\r\n            return _.keys(this.versionSummaryCollection).length;\r\n        }\r\n        toArray(): VersionSummary<T>[] {\r\n            return _.toArray<any>(this.versionSummaryCollection);\r\n        }\r\n    }\r\n\r\n    export class VersionHistoryCollection<T extends ListItem<any>> {\r\n        [key: number]: IListItemVersion<T>;\r\n        // getFactory: () => IModelFactory;\r\n        constructor(fieldVersionCollections: FieldVersionCollection[], factory: IModelFactory) {\r\n            /** Iterate through each of the field version collections */\r\n            _.each(fieldVersionCollections, (fieldVersionCollection) => {\r\n                this.addFieldCollection(fieldVersionCollection, factory);\r\n            });\r\n        }\r\n\r\n        addFieldCollection(fieldVersionCollection: FieldVersionCollection, factory: IModelFactory): void {\r\n            /** Iterate through each version of this field */\r\n            _.each(fieldVersionCollection.versions, (fieldVersion: IFieldVersion, versionNumberAsString: string) => {\r\n                /** Create a new version object if it doesn't already exist */\r\n                this[versionNumberAsString] = this[versionNumberAsString] || new factory<T>({\r\n                    editor: fieldVersion.editor,\r\n                    modified: fieldVersion.modified,\r\n                    /** Iterating over object properties which converts everything to string so convert back */\r\n                    version: parseInt(versionNumberAsString)\r\n                });\r\n                /** Add field to the version history for this version with computed property name */\r\n                this[versionNumberAsString][fieldVersionCollection.mappedName] = fieldVersion.value\r\n            });\r\n        }\r\n\r\n        count(): number {\r\n            return _.keys(this).length;\r\n        }\r\n\r\n        generateChangeSummary(): ChangeSummary<T> {\r\n            return new ChangeSummary<T>(this);\r\n        }\r\n\r\n        toArray(): IListItemVersion<T>[] {\r\n            return _.toArray<IListItemVersion<T>>(this);\r\n        }\r\n    }\r\n\r\n    export class ListItemVersionFactory {\r\n        ChangeSummary = ChangeSummary;\r\n        FieldChangeSummary = FieldChangeSummary;\r\n        FieldVersionCollection = FieldVersionCollection;\r\n        VersionHistoryCollection = VersionHistoryCollection;\r\n        VersionSummary = VersionSummary;\r\n    }\r\n\r\n    /**\r\n    * @ngdoc function\r\n    * @name apListItemVersionFactory\r\n    * @description\r\n    * Factory which handles parsing list item versions and identifying changes.\r\n    *\r\n    */\r\n    angular.module('angularPoint')\r\n        .service('apListItemVersionFactory', ListItemVersionFactory);\r\n\r\n\r\n}\r\n","/// <reference path=\"../app.module.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n    let $q: ng.IQService, apUtilityService: UtilityService;\r\n\r\n    /** Lookup referencing a ListItem of the specified type.  The \"lookupId\"\"\r\n     * will be the same as the referenced <T>.id.  The \"lookupValue\"\" by default\r\n     * should be the <T>.title but it can be changed to another text field\r\n     * in the SharePoint list settings for this list. Only the lookupValue is\r\n     * required and will be sent to the server when saving.  The lookupValue is\r\n     * ignored.  */\r\n    export interface ILookup<T> {\r\n        lookupValue: string;\r\n        lookupId: number;\r\n    }\r\n\r\n    /**\r\n     * @ngdoc function\r\n     * @name Lookup\r\n     * @description\r\n     * Allows for easier distinction when debugging if object type is shown as either Lookup or User.  Also allows us\r\n     * to create an async request for the entity being referenced by the lookup\r\n     * @param {string} s String to split into lookupValue and lookupId\r\n     * @param {object} options Contains a reference to the parent list item and the property name.\r\n     * @param {object} options.entity Reference to parent list item.\r\n     * @param {object} options.propertyName Key on list item object.\r\n     * @constructor\r\n     */\r\n    export class Lookup<T> implements ILookup<T> {\r\n        lookupId: number;\r\n        lookupValue: string;\r\n\r\n        constructor(str: string, options) {\r\n            let thisLookup = new apUtilityService.SplitIndex(str);\r\n            this.lookupId = thisLookup.id;\r\n            this.lookupValue = thisLookup.value || '';\r\n        }\r\n    }\r\n\r\n\r\n    export class LookupFactory {\r\n        static $inject = ['$q', 'apUtilityService'];\r\n        Lookup = Lookup;\r\n\r\n        constructor(_$q_, _apUtilityService_) {\r\n            $q = _$q_;\r\n            apUtilityService = _apUtilityService_;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apLookupFactory:create\r\n         * @methodOf angularPoint.apLookupFactory\r\n         * @description\r\n         * Instantiates and returns a new Lookup field.\r\n         */\r\n        create<T>(str: string, options) {\r\n            return new Lookup<T>(str, options);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ngdoc function\r\n     * @name angularPoint.apLookupFactory\r\n     * @description\r\n     * Tools to assist with the creation of CAML queries.\r\n     */\r\n    angular.module('angularPoint')\r\n        .service('apLookupFactory', LookupFactory);\r\n\r\n\r\n}\r\n","/// <reference path=\"../app.module.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n    let apCacheService: CacheService, apDataService: DataService, apListFactory: ListFactory,\r\n        apQueryFactory: QueryFactory, apUtilityService: UtilityService,\r\n        apFieldService: FieldService, apConfig: IAPConfig, apIndexedCacheFactory: IndexedCacheFactory,\r\n        apDecodeService: DecodeService, apEncodeService: EncodeService, $q: ng.IQService;\r\n\r\n    export interface IUninitializedModel {\r\n        factory: IModelFactory;\r\n        list: IUninstantiatedList;\r\n        [key: string]: any;\r\n    }\r\n\r\n    export interface IQueriesContainer {\r\n        getAllListItems?: IQuery<any>;\r\n        [key: string]: IQuery<any>;\r\n    }\r\n\r\n    export interface IModelFactory {\r\n        new <T extends ListItem<any>>(rawObject: Object): T;\r\n    }\r\n\r\n    interface IMockDataOptions {\r\n        permissionLevel?: string;\r\n        quantity?: number;\r\n    }\r\n\r\n    interface ICreateListItemOptions<T extends ListItem<any>> {\r\n        buildValuePairs?: boolean;\r\n        indexedCache?: IndexedCache<T>;\r\n        getCache?: () => IndexedCache<T>;\r\n        valuePairs?: [string, any][];\r\n    }\r\n    /**\r\n     * @ngdoc function\r\n     * @name Model\r\n     * @description\r\n     * Model Constructor\r\n     * Provides the Following\r\n     * - adds an empty \"data\" array\r\n     * - adds an empty \"queries\" object\r\n     * - adds a deferred obj \"ready\"\r\n     * - builds \"model.list\" with constructor\r\n     * - adds \"getAllListItems\" function\r\n     * - adds \"addNewItem\" function\r\n     * @param {object} config Object containing optional params.\r\n     * @param {object} [config.factory = apListItemFactory.createGenericFactory()] - Constructor function for\r\n     * individual list items.\r\n     * @param {boolean} [config.fieldDefinitionsExtended=false] Queries using the GetListItemChangesSinceToken\r\n     * operation return the full list definition along with the requested entities.  The first time one of these\r\n     * queries is executed we will try to extend our field definitions defined in the model with the additional\r\n     * information provided from the server.  Examples are options for a Choice field, display name of the field,\r\n     * field description, and any other field information provided for the fields specified in the model.  This\r\n     * flag is set once the first query is complete so we don't process again.\r\n     * @param {object} config.list - Definition of the list in SharePoint.\r\n     * be passed to the list constructor to extend further\r\n     * @param {string} config.list.title - List name, no spaces.  Offline XML file will need to be\r\n     * named the same (ex: CustomList so xml file would be apConfig.offlineXML + '/CustomList.xml')\r\n     * @param {string} config.list.getListId() - Unique SharePoint ID (ex: '{3DBEB25A-BEF0-4213-A634-00DAF46E3897}')\r\n     * @param {object[]} config.list.customFields - Maps SharePoint fields with names we'll use within the\r\n     * application.  Identifies field types and formats accordingly.  Also denotes if a field is read only.\r\n     * @constructor\r\n     *\r\n     * @example\r\n     * <pre>\r\n     * //Taken from a fictitious projectsModel.ts\r\n     *\r\n     * export class ProjectsModel extends ap.Model {\r\n     *      constructor() {\r\n     *          super({\r\n     *              factory: Project,\r\n     *              list: {\r\n     *                  guid: '{PROJECT LIST GUID}',\r\n     *                  title: 'Projects',\r\n     *                  customFields: [\r\n     *                      {\r\n     *                         staticName: 'Title',\r\n     *                         objectType: 'Text',\r\n     *                         mappedName: 'title',\r\n     *                         readOnly: false\r\n     *                      },\r\n     *                      {\r\n     *                         staticName: 'Customer',\r\n     *                         objectType: 'Lookup',\r\n     *                         mappedName: 'customer',\r\n     *                         readOnly: false\r\n     *                      },\r\n     *                      {\r\n     *                         staticName: 'ProjectDescription',\r\n     *                         objectType: 'Text',\r\n     *                         mappedName: 'projectDescription',\r\n     *                         readOnly: false\r\n     *                      },\r\n     *                      {\r\n     *                         staticName: 'Status',\r\n     *                         objectType: 'Text',\r\n     *                         mappedName: 'status',\r\n     *                         readOnly: false\r\n     *                      },\r\n     *                      {\r\n     *                         staticName: 'TaskManager',\r\n     *                         objectType: 'User',\r\n     *                         mappedName: 'taskManager',\r\n     *                         readOnly: false\r\n     *                      },\r\n     *                      {\r\n     *                         staticName: 'ProjectGroup',\r\n     *                         objectType: 'Lookup',\r\n     *                         mappedName: 'group',\r\n     *                         readOnly: false\r\n     *                      },\r\n     *                      {\r\n     *                         staticName: 'CostEstimate',\r\n     *                         objectType: 'Currency',\r\n     *                         mappedName: 'costEstimate',\r\n     *                         readOnly: false\r\n     *                      },\r\n     *                      {\r\n     *                         staticName: 'Active',\r\n     *                         objectType: 'Boolean',\r\n     *                         mappedName: 'active',\r\n     *                         readOnly: false\r\n     *                      },\r\n     *                      {\r\n     *                         staticName: 'Attachments',\r\n     *                         objectType: 'Attachments',\r\n     *                         mappedName: 'attachments',\r\n     *                         readOnly: true\r\n     *                      }\r\n     *                  ]\r\n     *              }\r\n     *          });\r\n     *\r\n     *          var model = this;\r\n     *\r\n     *          //Any other model setup\r\n     *      }\r\n     *      someExposedModelMethod() {\r\n     *          this.dosomething...\r\n     *      }\r\n     *\r\n     *   }\r\n     * </pre>\r\n     */\r\n    export class Model {\r\n        data = [];\r\n        deferredListDefinition;\r\n        list: List;\r\n        factory: IModelFactory;\r\n        fieldDefinitionsExtended: boolean = false;\r\n        lastServerUpdate: Date;\r\n        queries: IQueriesContainer = {};\r\n        requestForFieldDefinitions;\r\n        constructor(config: IUninitializedModel) {\r\n\r\n            /** Assign all properties of config to the model */\r\n            _.assign(this, config);\r\n\r\n            /** Allow us to reference the model directly from the list item's factory prototype */\r\n            this.factory.prototype.getModel = () => this;\r\n\r\n            /** Use list constructor to instantiate valid list */\r\n            this.list = new List(this.list);\r\n\r\n            /** Register cache name with cache service so we can map factory name with list GUID */\r\n            apCacheService.registerModel(this);\r\n\r\n            /** Convenience querys that simply returns all list items within a list. */\r\n            this.registerQuery({\r\n                name: '__getAllListItems',\r\n                operation: 'GetListItems'\r\n            });\r\n\r\n            /** Get a single list item from a list, primarily used to quickly identify user\r\n             *  permissions on list using the ows_PermMask property.  List items can have unique permissions\r\n             *  so can't rely on this 100% to correctly resolve list permissions.  In the case where that is\r\n             *  necessary you will need to use a similar query using GetListItemChangesSinceToken method which\r\n             *  will take longer but will correctly resolve the list permissions. */\r\n            this.registerQuery({\r\n                name: '__sample',\r\n                operation: 'GetListItems',\r\n                rowLimit: 1\r\n            });\r\n\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name Model.addNewItem\r\n         * @module Model\r\n         * @description\r\n         * Using the definition of a list stored in a model, create a new list item in SharePoint.\r\n         * @param {object} entity An object that will be converted into key/value pairs based on the field definitions\r\n         * defined in the model.\r\n         * @param {object} [options] - Pass additional options to the data service.\r\n         * @param {boolean} [options.buildValuePairs=true] Automatically generate pairs based on fields defined in model.\r\n         * @param {object} [options.indexedCache=apIndexedCacheFactory.create({})] Optionally place new item in a specified cache.\r\n         * @param {Array[]} [options.valuePairs] Precomputed value pairs to use instead of generating them for each\r\n         * field identified in the model.\r\n         * @returns {ng.IPromise<T>} A promise which when resolved will returned the newly created list item from there server.\r\n         * This allows us to update the view with a valid new object that contains a unique list item id.\r\n         *\r\n         * @example\r\n         * <pre>\r\n         * <file name=\"app/modules/project/projectsModel.js\">\r\n         * projectModel.addNewItem({\r\n         *        title: 'A Project',\r\n         *        customer: {lookupValue: 'My Customer', lookupId: 123},\r\n         *        description: 'This is the project description'\r\n         *     }).then(function(newEntityFromServer) {\r\n         *         //The local query cache is automatically updated but\r\n         *         //any other dependent logic can go here\r\n         * };\r\n         * </file>\r\n         * </pre>\r\n         */\r\n        addNewItem<T extends ListItem<any>>(entity: ListItem<T>, {\r\n            buildValuePairs = true,\r\n            indexedCache = apIndexedCacheFactory.create({}),\r\n            valuePairs = []\r\n        }: ICreateListItemOptions<T> = {}): ng.IPromise<T> {\r\n\r\n            var config = {\r\n                batchCmd: 'New',\r\n                buildValuePairs,\r\n                listName: this.getListId(),\r\n                //Method gets added onto new list item and allows access to parent cache\r\n                getCache: () => indexedCache,\r\n                indexedCache,\r\n                operation: 'UpdateListItems',\r\n                target: indexedCache,\r\n                valuePairs,\r\n                webURL: this.list.identifyWebURL()\r\n            };\r\n\r\n            if (entity.id) {\r\n                throw new Error('Cannot add a new list item that already has an ID. ' + JSON.stringify(entity, null, 2));\r\n            }\r\n\r\n            if (config.buildValuePairs === true) {\r\n                let editableFields: IFieldDefinition[] = _.filter(this.list.fields, { readOnly: false });\r\n                config.valuePairs = apEncodeService.generateValuePairs(editableFields, entity);\r\n            }\r\n\r\n            /** Overload the function then pass anything past the first parameter to the supporting methods */\r\n            return apDataService.serviceWrapper(config)\r\n                .then((response) => {\r\n                    /** Online this should return an XML object */\r\n                    let indexedCache = apDecodeService.processListItems(this, config, response, config);\r\n\r\n                    /** Last listItem in cache is new because it has the highest id */\r\n                    let newListItem = indexedCache.last();\r\n\r\n                    /** Optionally broadcast change event */\r\n                    apUtilityService.registerChange(this, 'create', newListItem.id);\r\n\r\n                    /** Return reference to last listItem in cache because it will have the new highest id */\r\n                    return newListItem;\r\n                })\r\n                .catch((err) => {\r\n                    throw new Error('Unable to create new list item.  Err:' + err);\r\n                    return err;\r\n                })\r\n\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name Model.createEmptyItem\r\n         * @module Model\r\n         * @description\r\n         * Creates an object using the editable fields from the model, all attributes are empty based on the field\r\n         * type unless an overrides object is passed in.  The overrides object extends the defaults.  A benefit to this\r\n         * approach is the returned object inherits from the ListItem prototype so we have the ability to call\r\n         * entity.saveChanges instead of calling the model.addNewItem(entity).\r\n         *\r\n         * @param {object} [overrides] - Optionally extend the new empty item with specific values.\r\n         * @returns {object} Newly created list item.\r\n         */\r\n        createEmptyItem<T extends ListItem<any>>(overrides?: Object): T {\r\n            var model = this;\r\n            var newItem = {};\r\n            _.each(model.list.customFields, (fieldDefinition) => {\r\n                /** Create attributes for each non-readonly field definition */\r\n                if (!fieldDefinition.readOnly) {\r\n                    /** Create an attribute with the expected empty value based on field definition type */\r\n                    newItem[fieldDefinition.mappedName] = apFieldService.getDefaultValueForType(fieldDefinition.objectType);\r\n                }\r\n            });\r\n            /** Extend any values that should override the default empty values */\r\n            var rawObject = _.assign({}, newItem, overrides);\r\n            return new model.factory<T>(rawObject);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name Model.executeQuery\r\n         * @module Model\r\n         * @description\r\n         * The primary method for retrieving data from a query registered on a model.  It returns a promise\r\n         * which resolves to the local cache after post processing entities with constructors.\r\n         *\r\n         * @param {string} [queryName=apConfig.defaultQueryName] A unique key to identify this query\r\n         * @param {object} [options] Pass options to the data service.\r\n         * @returns {object} Promise that when resolves returns an array of list items which inherit from ListItem and\r\n         * optionally go through a defined constructor on the model.\r\n         *\r\n         * @example To call the query or check for changes since the last call.\r\n         * <pre>\r\n         * projectModel.executeQuery('MyCustomQuery').then(function(entities) {\r\n         *      //We now have a reference to array of entities stored in the local cache\r\n         *      //These inherit from the ListItem prototype as well as the Project prototype on the model\r\n         *      $scope.subsetOfProjects = entities;\r\n         *  });\r\n         * </pre>\r\n         */\r\n        executeQuery<T extends ListItem<any>>(queryName?: string, options?: Object): ng.IPromise<IndexedCache<T>> {\r\n            var model = this;\r\n            var query = model.getQuery(queryName);\r\n            if (query) {\r\n                return query.execute(options);\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name Model.extendListMetadata\r\n         * @module Model\r\n         * @description\r\n         * Extends the List and Fields with list information returned from the server.  Only runs once and after that\r\n         * returns the existing promise.\r\n         * @returns {ng.IPromise<Model>} Promise that is resolved with the extended model.\r\n         */\r\n        extendListMetadata(): ng.IPromise<Model> {\r\n            var model = this,\r\n                deferred = $q.defer()\r\n\r\n            /** Only request information if the list hasn't already been extended and is not currently being requested */\r\n            if (!model.deferredListDefinition) {\r\n                /** All Future Requests get this */\r\n                model.deferredListDefinition = deferred.promise;\r\n\r\n                let getListAction = apDataService.getList({\r\n                    listName: model.getListId(),\r\n                    webURL: model.getList().webURL\r\n                });\r\n\r\n                /** We can potentially have 2 seperate requests for data so store them in array so we can wait until\r\n                 * all are resolved. */\r\n                let promiseArray = [getListAction];\r\n\r\n                /** Add a request for a sample list item to the server requests if we haven't\r\n                 * already resolved user permissions for the list. */\r\n                if (!model.getList().permissions) {\r\n                    /** Permissions not set yet, when the query is resolved with a sample list item\r\n                     * the query class will use the permMask from the list item to set the temp permissions\r\n                     * for the list until a time where we can run a GetListItemChangesSinceToken request and\r\n                     * set the actual permissions. */\r\n                    promiseArray.push(model.executeQuery('__sample'));\r\n                }\r\n\r\n                $q.all(promiseArray)\r\n                    .then((resolvedPromises) => {\r\n                        apDecodeService.extendListMetadata(model, resolvedPromises[0]);\r\n                        deferred.resolve(model);\r\n                    });\r\n\r\n            }\r\n            return model.deferredListDefinition;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name Model.generateMockData\r\n         * @module Model\r\n         * @description\r\n         * Generates 'n' mock records for testing using the field types defined in the model to provide something to visualize.\r\n         *\r\n         * @param {object} [options] Object containing optional parameters.\r\n         * @param {number} [options.quantity=10] The requested number of mock records to return.\r\n         * @param {string} [options.permissionLevel=FullMask] Sets the mask on the mock records to simulate desired\r\n         * permission level.\r\n         * @param {boolean} [options.staticValue=false] By default all mock data is dynamically created but if set,\r\n         * this will cause static data to be used instead.\r\n         */\r\n        generateMockData<T extends ListItem<any>>(options?: IMockDataOptions): T[] {\r\n            var mockData = [],\r\n                model = this;\r\n\r\n            var defaults = {\r\n                quantity: 10,\r\n                staticValue: false,\r\n                permissionLevel: 'FullMask'\r\n            };\r\n\r\n            /** Extend defaults with any provided options */\r\n            var opts: IMockDataOptions = _.assign({}, defaults, options);\r\n\r\n            _.times(opts.quantity, (count) => {\r\n                var mock = {\r\n                    id: count + 1\r\n                };\r\n                /** Create an attribute with mock data for each field */\r\n                _.each(model.list.fields, (field: IFieldDefinition) => {\r\n                    mock[field.mappedName] = field.getMockData(opts);\r\n                });\r\n\r\n                /** Use the factory on the model to extend the object */\r\n                mockData.push(new model.factory<T>(mock));\r\n            });\r\n            return mockData;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name Model.getAllListItems\r\n         * @module Model\r\n         * @description\r\n         * Inherited from Model constructor\r\n         * Gets all list items in the current list, processes the xml, and caches the data in model.\r\n         * @returns {object} Promise returning all list items when resolved.\r\n         * @example\r\n         * <pre>\r\n         * //Taken from a fictitious projectsModel.js\r\n         * projectModel.getAllListItems().then(function(entities) {\r\n         *     //Do something with all of the returned entities\r\n         *     $scope.projects = entities;\r\n         * };\r\n         * </pre>\r\n         */\r\n        getAllListItems<T extends ListItem<any>>(): ng.IPromise<IndexedCache<T>> {\r\n            var model = this;\r\n            return model.executeQuery('__getAllListItems');\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name Model.getCache\r\n         * @module Model\r\n         * @description\r\n         * Helper function that return the local cache for a named query if provided, otherwise\r\n         * it returns the cache for the primary query for the model.  Useful if you know the query\r\n         * has already been resolved and there's no need to check SharePoint for changes.\r\n         *\r\n         * @param {string} [queryName=apConfig.defaultQueryName] A unique key to identify this query.\r\n         * @returns {IndexedCache<T>} Returns the contents of the current cache for a named query.\r\n         *\r\n         * @example\r\n         * <pre>\r\n         * var primaryQueryCache = projectModel.getCache();\r\n         * </pre>\r\n         *\r\n         * <pre>\r\n         * var primaryQueryCache = projectModel.getCache('primary');\r\n         * </pre>\r\n         *\r\n         * <pre>\r\n         * var namedQueryCache = projectModel.getCache('customQuery');\r\n         * </pre>\r\n         */\r\n        getCache<T extends ListItem<any>>(queryName?: string): IndexedCache<T> {\r\n            var model = this, query, cache;\r\n            query = model.getQuery(queryName);\r\n            if (query && query.indexedCache) {\r\n                cache = query.indexedCache;\r\n            }\r\n            return cache;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name Model.getCachedEntities\r\n         * @module Model\r\n         * @description\r\n         * Returns all entities registered for this model regardless of query.\r\n         * @returns {IndexedCache<T>} All registered entities for this model.\r\n         */\r\n        getCachedEntities<T extends ListItem<any>>(): IndexedCache<T> {\r\n            var model = this;\r\n            return apCacheService.getCachedEntities<T>(model.getListId());\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name Model.getCachedEntity\r\n         * @module Model\r\n         * @description\r\n         * Attempts to locate a model listItem by id.\r\n         * @param {number} listItemId The ID of the requested listItem.\r\n         * @returns {object} Returns either the requested listItem or undefined if it's not found.\r\n         */\r\n        getCachedEntity<T extends ListItem<any>>(listItemId: number): T {\r\n            var model = this;\r\n            return apCacheService.getCachedEntity<T>(model.getListId(), listItemId);\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name Model.getFieldDefinition\r\n         * @module Model\r\n         * @description\r\n         * Returns the field definition from the definitions defined in the custom fields array within a model.\r\n         * <pre>\r\n         * var project = {\r\n         *    title: 'Project 1',\r\n         *    location: {\r\n         *        lookupId: 5,\r\n         *        lookupValue: 'Some Building'\r\n         *    }\r\n         * };\r\n         *\r\n         * //To get field metadata\r\n         * var locationDefinition = projectsModel.getFieldDefinition('location');\r\n         * </pre>\r\n         * @param {string} fieldName Internal field name.\r\n         * @returns {object} Field definition.\r\n         */\r\n        getFieldDefinition(fieldName: string): IFieldDefinition {\r\n            var model = this;\r\n            return _.find(model.list.fields, { mappedName: fieldName });\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ListItem.getList\r\n         * @description\r\n         * Allows us to reference the list definition directly from the list item.  This is added to the\r\n         * model.factory prototype in apModelFactory.  See the [List](#/api/List) documentation for more info.\r\n         * @returns {object} List for the list item.\r\n         */\r\n        getList(): List {\r\n            return this.list;\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ListItem.getListId\r\n         * @description\r\n         * Allows us to reference the list ID directly from the model.\r\n         * @returns {string} List ID.\r\n         */\r\n        getListId(): string {\r\n            return this.getList().getListId();\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name Model.getListItemById\r\n         * @param {number} listItemId Id of the item being requested.\r\n         * @param {object} options Used to override apDataService defaults.\r\n         * @description\r\n         * Inherited from Model constructor\r\n         * Attempts to retrieve the requested list item from the server.\r\n         * @returns {object} Promise that resolves with the requested list item if found.  Otherwise it returns undefined.\r\n         * @example\r\n         * <pre>\r\n         * //Taken from a fictitious projectsModel.js\r\n         * projectModel.getListItemById(12).then(function(listItem) {\r\n         *     //Do something with the located listItem\r\n         *     $scope.project = listItem;\r\n         * };\r\n         * </pre>\r\n         */\r\n        getListItemById<T extends ListItem<any>>(listItemId: number, options?: Object): ng.IPromise<T> {\r\n            var model = this,\r\n                /** Unique Query Name */\r\n                queryKey = 'GetListItemById-' + listItemId;\r\n\r\n            /** Register a new Query if it doesn't already exist */\r\n            if (!model.getQuery(queryKey)) {\r\n                var defaults = {\r\n                    name: queryKey,\r\n                    operation: 'GetListItems',\r\n                    rowLimit: 1,\r\n                    CAMLQuery: '' +\r\n                    '<Query>' +\r\n                    ' <Where>' +\r\n                    '   <Eq>' +\r\n                    '     <FieldRef Name=\"ID\"/>' +\r\n                    '     <Value Type=\"Number\">' + listItemId + '</Value>' +\r\n                    '   </Eq>' +\r\n                    ' </Where>' +\r\n                    '</Query>'\r\n                };\r\n                /** Allows us to override defaults */\r\n                var opts = _.assign({}, defaults, options);\r\n                model.registerQuery(opts);\r\n            }\r\n\r\n            return model.executeQuery<T>(queryKey)\r\n                .then((indexedCache: IndexedCache<T>) => {\r\n                    /** Should return an indexed cache object with a single listItem so just return the requested listItem */\r\n                    return indexedCache.first();\r\n                });\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name ListItem.getModel\r\n         * @description\r\n         * Allows us to reference the parent model directly from the list item.  This is added to the\r\n         * model.factory prototype in apModelFactory.  See the [List](#/api/List) documentation for more info.\r\n         * @returns {object} Model for the list item.\r\n         */\r\n        getModel(): Model {\r\n            return this;\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name Model.getQuery\r\n         * @module Model\r\n         * @description\r\n         * Helper function that attempts to locate and return a reference to the requested or catchall query.\r\n         * @param {string} [queryName=apConfig.defaultQueryName] A unique key to identify this query.\r\n         * @returns {object} See Query prototype for additional details on what a Query looks like.\r\n         *\r\n         * @example\r\n         * <pre>\r\n         * var primaryQuery = projectModel.getQuery();\r\n         * </pre>\r\n         *\r\n         * <pre>\r\n         * var primaryQuery = projectModel.getQuery('primary');\r\n         * </pre>\r\n         *\r\n         * <pre>\r\n         * var namedQuery = projectModel.getQuery('customQuery');\r\n         * </pre>\r\n         */\r\n        getQuery<T extends ListItem<any>>(queryName: string): IQuery<T> {\r\n            var model = this, query;\r\n            if (_.isObject(model.queries[queryName])) {\r\n                /** The named query exists */\r\n                query = model.queries[queryName];\r\n            } else if (_.isObject(model.queries[apConfig.defaultQueryName]) && !queryName) {\r\n                /** A named query wasn't specified and the catchall query exists */\r\n                query = model.queries[apConfig.defaultQueryName];\r\n            } else {\r\n                /** Requested query not found */\r\n                query = undefined;\r\n            }\r\n            return query;\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name Model.isInitialised\r\n         * @module Model\r\n         * @description\r\n         * Methods which allows us to easily determine if we've successfully made any queries this session.\r\n         * @returns {boolean} Returns evaluation.\r\n         */\r\n        isInitialised(): boolean {\r\n            var model = this;\r\n            return _.isDate(model.lastServerUpdate);\r\n        }\r\n\r\n\r\n        /**\r\n        * @ngdoc function\r\n        * @name Model.registerQuery\r\n        * @module Model\r\n        * @description\r\n        * Constructor that allows us create a static query with the option to build dynamic queries as seen in the\r\n        * third example.  This construct is a passthrough to [SPServices](http: //spservices.codeplex.com/)\r\n        * @param {object} queryOptions Initialization parameters.\r\n        * @param {boolean} [queryOptions.force=false] Ignore cached data and force server query.\r\n        * @param {number} [queryOptions.listItemID] Optionally request for a single list item by id.\r\n        * @param {boolean} [queryOptions.localStorage=false] Should we store data from this query in local storage to speed up requests in the future.\r\n        * @param {number} [queryOptions.localStorageExpiration=86400000] Set expiration in milliseconds - Defaults to a day\r\n        * and if set to 0 doesn't expire.  Can be updated globally using apConfig.localStorageExpiration.\r\n        * @param {string} [queryOptions.name=primary] The name that we use to identify this query.\r\n        * @param {string} [queryOptions.operation=GetListItemChangesSinceToken] Optionally use 'GetListItems' to\r\n        * receive a more efficient response, just don't have the ability to check for changes since the last time\r\n        * the query was called. Defaults to [GetListItemChangesSinceToken](http://msdn.microsoft.com/en-us/library/lists.lists.getlistitemchangessincetoken%28v=office.12%29.aspx)\r\n        * but for a smaller payload and faster response you can use [GetListItems](http: //spservices.codeplex.com/wikipage?title=GetListItems&referringTitle=Lists).\r\n        * @param {string} [queryOptions.query=Ordered ascending by ID] CAML query passed to SharePoint to control\r\n        * the data SharePoint returns. Josh McCarty has a good quick reference [here](http: //joshmccarty.com/2012/06/a-caml-query-quick-reference).\r\n        * @param {string} [queryOptions.queryOptions] SharePoint options xml as string.\r\n        * <pre>\r\n        * <QueryOptions>\r\n        *    <IncludeMandatoryColumns>FALSE</IncludeMandatoryColumns>\r\n        *    <IncludeAttachmentUrls>TRUE</IncludeAttachmentUrls>\r\n        *    <IncludeAttachmentVersion>FALSE</IncludeAttachmentVersion>\r\n        *    <ExpandUserField>FALSE</ExpandUserField>\r\n        * </QueryOptions>\r\n        * </pre>\r\n        * @param {string} [queryOptions.rowLimit] The number of list items to return, 0 returns all list items.\r\n        * @param {boolean} [queryOptions.runOnce] Pertains to GetListItems only, optionally run a single time and return initial value for all future\r\n        * calls.  Works well with data that isn't expected to change throughout the session but unlike localStorage or sessionStorage\r\n        * the data doesn't persist between sessions.\r\n        * @param {boolean} [queryOptions.sessionStorage=false] Use the browsers sessionStorage to cache the list items and uses the\r\n        * queryOptions.localStorageExpiration param to validate how long the cache is good for.\r\n        * @param {string} [queryOptions.viewFields] XML as string that specifies fields to return.\r\n        * @param {string} [queryOptions.webURL] Used to override the default URL if list is located somewhere else.\r\n        * @returns {object} Query Returns a new query object.\r\n        *\r\n        * @example\r\n        * <h4>Example #1</h4>\r\n        * <pre>\r\n        * // Query to retrieve the most recent 25 modifications\r\n        * model.registerQuery({\r\n        *    name: 'recentChanges',\r\n        *    rowLimit: 25,\r\n        *    query: '' +\r\n        *        '<Query>' +\r\n        *        '   <OrderBy>' +\r\n        *        '       <FieldRef Name=\"Modified\" Ascending=\"FALSE\"/>' +\r\n        *        '   </OrderBy>' +\r\n        *            //Prevents any records from being returned if user doesn't\r\n        *            // have permissions on project\r\n        *        '   <Where>' +\r\n        *        '       <IsNotNull>' +\r\n        *        '           <FieldRef Name=\"Project\"/>' +\r\n        *        '       </IsNotNull>' +\r\n        *        '   </Where>' +\r\n        *        '</Query>'\r\n        * });\r\n        * </pre>\r\n        *\r\n        * <h4>Example #2</h4>\r\n        * <pre>\r\n        * // Could be placed on the projectModel and creates the query but doesn't\r\n        * // call it.  Uses the session cache to make the initial call faster.\r\n        * projectModel.registerQuery({\r\n        *     name: 'primary',\r\n        *     sessionCache: true,\r\n        *     //Set an expiration value of 8 hours rather than use the default of 24\r\n        *     localStorageExpiration: 28800000,\r\n        *     query: '' +\r\n        *         '<Query>' +\r\n        *         '   <OrderBy>' +\r\n        *         '       <FieldRef Name=\"Title\" Ascending=\"TRUE\"/>' +\r\n        *         '   </OrderBy>' +\r\n        *         '</Query>'\r\n        * });\r\n        *\r\n        * //To call the query or check for changes since the last call\r\n        * projectModel.executeQuery('primary')\r\n        *   .then((entities) => {\r\n        *     // We now have a reference to array of entities stored in the local\r\n        *     // cache.  These inherit from the ListItem prototype as well as the\r\n        *     // Project prototype on the model\r\n        *     vm.projects = entities;\r\n        *   })\r\n        *   .catch((err) => {\r\n        *       //Handle error\r\n        *   })\r\n        * </pre>\r\n        *\r\n        * <h4>Example #3</h4>\r\n        * <pre>\r\n        * // Advanced functionality that would allow us to dynamically create\r\n        * // queries for list items with a lookup field associated with a specific\r\n        * // project id.  Let's assume this is on the projectTasksModel.\r\n        * model.queryByProjectId(projectId) {\r\n        *     // Unique query name\r\n        *     var queryKey = 'pid' + projectId;\r\n        *\r\n        *     // Register project query if it doesn't exist\r\n        *     if (!_.isObject(model.queries[queryKey])) {\r\n        *         model.registerQuery({\r\n        *             name: queryKey,\r\n        *             query: '' +\r\n        *                 '<Query>' +\r\n        *                 '   <OrderBy>' +\r\n        *                 '       <FieldRef Name=\"ID\" Ascending=\"TRUE\"/>' +\r\n        *                 '   </OrderBy>' +\r\n        *                 '   <Where>' +\r\n        *                 '       <And>' +\r\n        *                              // Prevents any records from being returned\r\n        *                              //if user doesn't have permissions on project\r\n        *                 '           <IsNotNull>' +\r\n        *                 '               <FieldRef Name=\"Project\"/>' +\r\n        *                 '           </IsNotNull>' +\r\n        *                              // Return all records for the project matching\r\n        *                              // param projectId\r\n        *                 '           <Eq>' +\r\n        *                 '               <FieldRef Name=\"Project\" LookupId=\"TRUE\"/>' +\r\n        *                 '               <Value Type=\"Lookup\">' + projectId + '</Value>' +\r\n        *                 '           </Eq>' +\r\n        *                 '       </And>' +\r\n        *                 '   </Where>' +\r\n        *                 '</Query>'\r\n        *         });\r\n        *     }\r\n        *     //Still using execute query but now we have a custom query\r\n        *     return model.executeQuery(queryKey);\r\n        * };\r\n        * </pre>\r\n        */\r\n        registerQuery<T extends ListItem<any>>(queryOptions: IQueryOptions): IQuery<T> {\r\n            var model = this;\r\n\r\n            var defaults = {\r\n                /** If name isn't set, assume this is the only model and designate as primary */\r\n                name: apConfig.defaultQueryName\r\n            };\r\n\r\n            queryOptions = _.assign({}, defaults, queryOptions);\r\n\r\n            model.queries[queryOptions.name] = apQueryFactory.create(queryOptions, model);\r\n\r\n            /** Return the newly created query */\r\n            return model.queries[queryOptions.name];\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name Model.resolvePermissions\r\n         * @module Model\r\n         * @description\r\n         * See apModelFactory.resolvePermissions for details on what we expect to have returned.\r\n         * @returns {Object} Contains properties for each permission level evaluated for current user.\r\n         * @example\r\n         * Lets assume we're checking to see if a user has edit rights for a given list.\r\n         * <pre>\r\n         * var userPermissions = tasksModel.resolvePermissions();\r\n         * var userCanEdit = userPermissions.EditListItems;\r\n         * </pre>\r\n         * Example of what the returned object would look like\r\n         * for a site admin.\r\n         * <pre>\r\n         * perm = {\r\n            *    \"ViewListItems\": true,\r\n            *    \"AddListItems\": true,\r\n            *    \"EditListItems\": true,\r\n            *    \"DeleteListItems\": true,\r\n            *    \"ApproveItems\": true,\r\n            *    \"OpenItems\": true,\r\n            *    \"ViewVersions\": true,\r\n            *    \"DeleteVersions\": true,\r\n            *    \"CancelCheckout\": true,\r\n            *    \"PersonalViews\": true,\r\n            *    \"ManageLists\": true,\r\n            *    \"ViewFormPages\": true,\r\n            *    \"Open\": true,\r\n            *    \"ViewPages\": true,\r\n            *    \"AddAndCustomizePages\": true,\r\n            *    \"ApplyThemeAndBorder\": true,\r\n            *    \"ApplyStyleSheets\": true,\r\n            *    \"ViewUsageData\": true,\r\n            *    \"CreateSSCSite\": true,\r\n            *    \"ManageSubwebs\": true,\r\n            *    \"CreateGroups\": true,\r\n            *    \"ManagePermissions\": true,\r\n            *    \"BrowseDirectories\": true,\r\n            *    \"BrowseUserInfo\": true,\r\n            *    \"AddDelPrivateWebParts\": true,\r\n            *    \"UpdatePersonalWebParts\": true,\r\n            *    \"ManageWeb\": true,\r\n            *    \"UseRemoteAPIs\": true,\r\n            *    \"ManageAlerts\": true,\r\n            *    \"CreateAlerts\": true,\r\n            *    \"EditMyUserInfo\": true,\r\n            *    \"EnumeratePermissions\": true,\r\n            *    \"FullMask\": true\r\n            * }\r\n         * </pre>\r\n         */\r\n        resolvePermissions(): IUserPermissionsObject {\r\n            var model = this,\r\n                list = model.getList();\r\n            if (list && list.permissions) {\r\n                /** If request has been made to GetListItemChangesSinceToken we have already stored the\r\n                 * permission for this list. */\r\n                return list.permissions;\r\n            } else if (model.getCachedEntities().first()) {\r\n                /** Next option is to use the same permission as one of the\r\n                 * already cached list items for this model. */\r\n                return list.extendPermissionsFromListItem(model.getCachedEntities().first())\r\n            } else {\r\n                window.console.error('Attempted to resolve permissions of a model that hasn\\'t been initialized.', model);\r\n                return new ap.BasePermissionObject();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name Model.validateEntity\r\n         * @module Model\r\n         * @description\r\n         * Uses the custom fields defined in an model to ensure each field (required = true) is evaluated\r\n         * based on field type\r\n         * @param {object} listItem SharePoint list item.\r\n         * @returns {boolean} Evaluation of validity.\r\n         */\r\n        validateEntity<T extends ListItem<any>>(listItem: T): boolean {\r\n            var valid = true,\r\n                model = this;\r\n\r\n            var checkObject = (fieldValue) => {\r\n                return _.isObject(fieldValue) && _.isNumber(fieldValue.lookupId);\r\n            };\r\n\r\n            _.each(model.list.customFields, (fieldDefinition: IFieldDefinition) => {\r\n                var fieldValue = listItem[fieldDefinition.mappedName];\r\n                var fieldDescriptor = '\"' + fieldDefinition.objectType + '\" value.';\r\n                /** Only evaluate required fields */\r\n                if ((fieldDefinition.required || fieldDefinition.Required) && valid) {\r\n                    switch (fieldDefinition.objectType) {\r\n                        case 'Boolean':\r\n                            valid = _.isBoolean(fieldValue);\r\n                            break;\r\n                        case 'DateTime':\r\n                            valid = _.isDate(fieldValue);\r\n                            break;\r\n                        case 'Lookup':\r\n                        case 'User':\r\n                            valid = checkObject(fieldValue);\r\n                            break;\r\n                        case 'LookupMulti':\r\n                        case 'UserMulti':\r\n                            /** Ensure it's a valid array containing objects */\r\n                            valid = _.isArray(fieldValue) && fieldValue.length > 0;\r\n                            if (valid) {\r\n                                /** Additionally check that each lookup/person contains a lookupId */\r\n                                _.each(fieldValue, (fieldObject) => {\r\n                                    if (valid) {\r\n                                        valid = checkObject(fieldObject);\r\n                                    } else {\r\n                                        /** Short circuit */\r\n                                        return false;\r\n                                    }\r\n                                });\r\n                            }\r\n                            break;\r\n                        default:\r\n                            /** Evaluate everything else as a string */\r\n                            valid = !_.isEmpty(fieldValue);\r\n\r\n                    }\r\n                }\r\n                if (!valid) {\r\n                    return false;\r\n                }\r\n            });\r\n            return valid;\r\n        }\r\n    }\r\n\r\n    export class ModelFactory {\r\n        static $inject = ['$q', 'apCacheService', 'apConfig', 'apDataService', 'apDecodeService', 'apEncodeService', 'apFieldService', 'apIndexedCacheFactory', 'apListFactory', 'apQueryFactory', 'apUtilityService'];\r\n        Model = Model;\r\n        constructor(_$q_, _apCacheService_, _apConfig_, _apDataService_, _apDecodeService_, _apEncodeService_, _apFieldService_, _apIndexedCacheFactory_, _apListFactory_, _apQueryFactory_, _apUtilityService_) {\r\n\r\n            $q = _$q_;\r\n            apCacheService = _apCacheService_;\r\n            apConfig = _apConfig_;\r\n            apDataService = _apDataService_;\r\n            apDecodeService = _apDecodeService_;\r\n            apEncodeService = _apEncodeService_;\r\n            apFieldService = _apFieldService_;\r\n            apIndexedCacheFactory = _apIndexedCacheFactory_;\r\n            apListFactory = _apListFactory_;\r\n            apQueryFactory = _apQueryFactory_;\r\n            apUtilityService = _apUtilityService_;\r\n        }\r\n\r\n        create(config: IUninitializedModel) {\r\n            return new Model(config);\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    angular\r\n        .module('angularPoint')\r\n        .service('apModelFactory', ModelFactory);\r\n\r\n\r\n}\r\n","/// <reference path=\"../app.module.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n    var $q: ng.IQService, apIndexedCacheFactory: IndexedCacheFactory, apConfig: IAPConfig, apDefaultListItemQueryOptions,\r\n        apDataService: DataService, apDecodeService: DecodeService, apLogger: Logger;\r\n\r\n    export interface IQueryOptions {\r\n        force?: boolean;\r\n        //Only relevant if requesting a single item\r\n        listItemID?: number;\r\n        localStorage?: boolean;\r\n        localStorageExpiration?: number;\r\n        name?: string;\r\n        /** GetListItemChangesSinceToken || GetListItems */\r\n        operation?: string;\r\n        query?: string;\r\n        queryOptions?: string;\r\n        //Returns all items if set to 0\r\n        rowLimit?: number;\r\n        runOnce?: boolean;\r\n        sessionStorage?: boolean;\r\n        viewFields?: string;\r\n        webURL?: string;\r\n    }\r\n\r\n    export interface IExecuteQueryOptions {\r\n        factory?: Function;\r\n        filter?: string;\r\n        mapping?: IListFieldMapping;\r\n        target?: IndexedCache<any>;\r\n        [key: string]: any;\r\n    }\r\n\r\n    export interface IQuery<T extends ListItem<any>> {\r\n        cacheXML?: boolean;\r\n        changeToken?: string;\r\n        execute(options?: Object): ng.IPromise<IndexedCache<T>>;\r\n        force: boolean;\r\n        getCache(): IndexedCache<T>;\r\n        getLocalStorage(): LocalStorageQuery;\r\n        getModel(): Model;\r\n        hydrateFromLocalStorage(localStorageQuery: LocalStorageQuery): void;\r\n        indexedCache: IndexedCache<T>;\r\n        initialized: ng.IDeferred<IndexedCache<T>>\r\n        lastRun: Date;\r\n        listItemID?: number;\r\n        listName: string;\r\n        localStorage: boolean;\r\n        localStorageExpiration: number;\r\n        name: string;\r\n        negotiatingWithServer: boolean;\r\n        // offlineXML?: string;\r\n        operation?: string;\r\n        promise?: ng.IPromise<IndexedCache<T>>;\r\n        query?: string;\r\n        queryOptions?: IQueryOptions;\r\n        rowLimit?: number;\r\n        runOnce: boolean;\r\n        saveToLocalStorage(): void;\r\n        sessionStorage: boolean;\r\n        viewFields: string;\r\n        webURL?: string;\r\n    }\r\n\r\n    export class LocalStorageQuery {\r\n        changeToken: string;\r\n        indexedCache: { [key: number]: Object };\r\n        lastRun: Date;\r\n        constructor(private key: string, stringifiedQuery: string) {\r\n            let parsedQuery = JSON.parse(stringifiedQuery);\r\n            _.assign(this, parsedQuery);\r\n            this.lastRun = new Date(parsedQuery.lastRun);\r\n        }\r\n        hasExpired(localStorageExpiration: number = apConfig.localStorageExpiration): boolean {\r\n            let hasExpired = true;\r\n            if (_.isNaN(localStorage)) {\r\n                throw new Error('Local storage expiration is required to be a numeric value and instead is ' + localStorageExpiration);\r\n            } else if (localStorageExpiration === 0) {\r\n                //No expiration\r\n                hasExpired = false;\r\n            } else {\r\n                //Evaluate if cache has exceeded expiration\r\n                hasExpired = this.lastRun.getMilliseconds() + localStorageExpiration <= new Date().getMilliseconds();\r\n            }\r\n            return hasExpired;\r\n        }\r\n        removeItem() {\r\n            localStorage.removeItem(this.key);\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * @ngdoc function\r\n     * @name Query\r\n     * @description\r\n     * Primary constructor that all queries inherit from. This object is a passthrough to [SPServices](http: //spservices.codeplex.com/).  All\r\n     * options to passed through to [dataService.executeQuery](#/api/dataService.executeQuery).\r\n     * @param {object} queryOptions Initialization parameters.\r\n     * @param {boolean} [queryOptions.force=false] Ignore cached data and force server query.\r\n     * @param {number} [queryOptions.listItemID] Optionally request for a single list item by id.\r\n     * @param {boolean} [queryOptions.localStorage=false] Should we store data from this query in local storage to speed up requests in the future.\r\n     * @param {number} [queryOptions.localStorageExpiration=86400000] Set expiration in milliseconds - Defaults to a day\r\n     * and if set to 0 doesn't expire.  Can be updated globally using apConfig.localStorageExpiration.\r\n     * @param {string} [queryOptions.name=primary] The name that we use to identify this query.\r\n     * @param {string} [queryOptions.operation=GetListItemChangesSinceToken] Optionally use 'GetListItems' to\r\n     * receive a more efficient response, just don't have the ability to check for changes since the last time\r\n     * the query was called. Defaults to [GetListItemChangesSinceToken](http://msdn.microsoft.com/en-us/library/lists.lists.getlistitemchangessincetoken%28v=office.12%29.aspx)\r\n     * but for a smaller payload and faster response you can use [GetListItems](http: //spservices.codeplex.com/wikipage?title=GetListItems&referringTitle=Lists).\r\n     * @param {string} [queryOptions.query=Ordered ascending by ID] CAML query passed to SharePoint to control\r\n     * the data SharePoint returns. Josh McCarty has a good quick reference [here](http: //joshmccarty.com/2012/06/a-caml-query-quick-reference).\r\n     * @param {string} [queryOptions.queryOptions] SharePoint options xml as string.\r\n     * <pre>\r\n     * <QueryOptions>\r\n     *    <IncludeMandatoryColumns>FALSE</IncludeMandatoryColumns>\r\n     *    <IncludeAttachmentUrls>TRUE</IncludeAttachmentUrls>\r\n     *    <IncludeAttachmentVersion>FALSE</IncludeAttachmentVersion>\r\n     *    <ExpandUserField>FALSE</ExpandUserField>\r\n     * </QueryOptions>\r\n     * </pre>\r\n     * @param {string} [queryOptions.rowLimit] The number of list items to return, 0 returns all list items.\r\n     * @param {boolean} [queryOptions.runOnce] Pertains to GetListItems only, optionally run a single time and return initial value for all future\r\n     * calls.  Works well with data that isn't expected to change throughout the session but unlike localStorage or sessionStorage\r\n     * the data doesn't persist between sessions.\r\n     * @param {boolean} [queryOptions.sessionStorage=false] Use the browsers sessionStorage to cache the list items and uses the\r\n     * queryOptions.localStorageExpiration param to validate how long the cache is good for.\r\n     * @param {string} [queryOptions.viewFields] XML as string that specifies fields to return.\r\n     * @param {string} [queryOptions.webURL] Used to override the default URL if list is located somewhere else.\r\n     * @param {object} model Reference to the parent model for the query.  Allows us to reference when out of\r\n     * scope.\r\n     * @example\r\n     * <pre>\r\n     * // Query to retrieve the most recent 25 modifications\r\n     * model.registerQuery({\r\n     *    name: 'recentChanges',\r\n     *    rowLimit: 25,\r\n     *    query: '' +\r\n     *        '<Query>' +\r\n     *        '   <OrderBy>' +\r\n     *        '       <FieldRef Name=\"Modified\" Ascending=\"FALSE\"/>' +\r\n     *        '   </OrderBy>' +\r\n     *            // Prevents any records from being returned if user\r\n     *            // doesn't have permissions on project\r\n     *        '   <Where>' +\r\n     *        '       <IsNotNull>' +\r\n     *        '           <FieldRef Name=\"Project\"/>' +\r\n     *        '       </IsNotNull>' +\r\n     *        '   </Where>' +\r\n     *        '</Query>'\r\n     * });\r\n     * </pre>\r\n     */\r\n    export class Query<T extends ListItem<any>> implements IQuery<T> {\r\n        /** Very memory intensive to enable cacheXML which is disabled by default*/\r\n        cacheXML = false;\r\n        /** Reference to the most recent query when performing GetListItemChangesSinceToken */\r\n        changeToken: string;\r\n        force = false;\r\n        getModel: () => Model;\r\n        /** Key value hash map with key being the id of the entity */\r\n        indexedCache = apIndexedCacheFactory.create<T>();\r\n        /** Promise resolved after first time query is executed */\r\n        initialized = $q.defer();\r\n        /** Date/Time last run */\r\n        lastRun: Date;\r\n        listItemID: number;\r\n        listName: string;\r\n        /** Should we store data from this query in local storage to speed up requests in the future */\r\n        localStorage = false;\r\n        /** Set expiration in milliseconds - Defaults to a day and if set to 0 doesn't expire */\r\n        localStorageExpiration = apConfig.localStorageExpiration;\r\n        name: string;\r\n        /** Flag to prevent us from makeing concurrent requests */\r\n        negotiatingWithServer = false;\r\n        /** Every time we run we want to check to update our cached data with\r\n         * any changes made on the server */\r\n        operation = 'GetListItemChangesSinceToken';\r\n        promise: ng.IPromise<IndexedCache<T>>;\r\n        /** Default query returns list items in ascending ID order */\r\n        query: string = `\r\n        <Query>\r\n           <OrderBy>\r\n               <FieldRef Name=\"ID\" Ascending=\"TRUE\"/>\r\n           </OrderBy>\r\n        </Query>`;\r\n        queryOptions = ap.DefaultListItemQueryOptions;\r\n        rowLimit: number;\r\n        runOnce = false;\r\n        sessionStorage = false;\r\n        viewFields: string;\r\n        webURL: string = apConfig.defaultUrl;\r\n\r\n        /** Has this query been executed at least once. */\r\n        get hasExecuted(): boolean {\r\n            return _.isDate(this.lastRun);\r\n        }\r\n        /** Is this query setup to use browser storage. */\r\n        get usesBrowserStorage(): boolean {\r\n            return this.localStorage || this.sessionStorage;\r\n        }\r\n\r\n        constructor(queryOptions: IQueryOptions, model: Model) {\r\n            let list = model.getList();\r\n            //Use the default viewFields from the model\r\n            this.viewFields = list.viewFields;\r\n            this.listName = model.getListId();\r\n\r\n            //Allow all values on query to be overwritten by queryOptions object\r\n            _.assign(this, queryOptions);\r\n\r\n            /** Allow the model to be referenced at a later time */\r\n            this.getModel = () => model;\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name Query.execute\r\n         * @methodOf Query\r\n         * @description\r\n         * Query SharePoint, pull down all initial records on first call along with list definition if using\r\n         * \"GetListItemChangesSinceToken\".  Note: this is  substantially larger than \"GetListItems\" on first call.\r\n         * Subsequent calls pulls down changes (Assuming operation: \"GetListItemChangesSinceToken\").\r\n         * @returns {ng.IPromise<IndexedCache<T>>} Promise that resolves with the cache for this query.\r\n         */\r\n        execute(): ng.IPromise<IndexedCache<T>> {\r\n            var query = this;\r\n            var model = query.getModel();\r\n            var deferred = $q.defer();\r\n\r\n            /** Return existing promise if request is already underway or has been previously executed in the past\r\n            * 1/10th of a second */\r\n            if (query.negotiatingWithServer || (_.isDate(query.lastRun) && query.lastRun.getTime() + apConfig.queryDebounceTime > new Date().getTime())) {\r\n                return query.promise;\r\n            } else {\r\n                /** Set flag to prevent another call while this query is active */\r\n                query.negotiatingWithServer = true;\r\n\r\n                let localStorageData;\r\n\r\n                if (this.usesBrowserStorage) {\r\n                    localStorageData = this.getLocalStorage();\r\n                }\r\n\r\n                /** Clear out existing cached list items if GetListItems is the selected operation because otherwise\r\n                 * we could potentially have stale data if a list item no longer meets the query parameters but already\r\n                 * exists in the cache from a previous request. Don't clear the cache in the case where runOnce is set.*/\r\n                if(this.operation === 'GetListItems' && !this.runOnce) {\r\n                    query.getCache().clear();\r\n                }\r\n\r\n                /** Flag used to determine if we need to make a request to the server */\r\n                let makeRequest = true;\r\n\r\n                /** See if we already have data in local storage and hydrate if it hasn't expired, which\r\n                * then allows us to only request the changes. */\r\n                if (!query.force && localStorageData) {\r\n                    switch (this.operation) {\r\n                        case 'GetListItemChangesSinceToken':\r\n                            //Only run the first time, after that the token/data are already in sync\r\n                            if (!query.hasExecuted) {\r\n                                query.hydrateFromLocalStorage(localStorageData);\r\n                            }\r\n                            break;\r\n                        case 'GetListItems':\r\n                            query.hydrateFromLocalStorage(localStorageData);\r\n                            //Use cached data if we have data already available\r\n                            makeRequest = this.getCache().size === 0;\r\n                    }\r\n                }\r\n\r\n                /** Optionally handle query.runOnce for GetListItems when initial call has already been made */\r\n                if (this.hasExecuted && this.runOnce) {\r\n                    makeRequest = false;\r\n                }\r\n\r\n                /** Only make server request if necessary. */\r\n                if (makeRequest) {\r\n                    this.makeRequest()\r\n                        .then((results) => {\r\n                            this.postExecutionCleanup(results);\r\n                            deferred.resolve(results);\r\n                        });\r\n                } else {\r\n                    this.postExecutionCleanup(this.getCache());\r\n                    deferred.resolve(this.getCache());\r\n                }\r\n\r\n                /** Save reference on the query **/\r\n                query.promise = deferred.promise;\r\n                return deferred.promise;\r\n            }\r\n        }\r\n        /**\r\n         * @ngdoc function\r\n         * @name Query.getCache\r\n         * @methodOf Query\r\n         * @description\r\n         * Use this to return the cache instead of using the actual property to allow for future refactoring.\r\n         * @returns {IndexedCache<T>} Indexed Cache containing all elements in query.\r\n         */\r\n        getCache(): IndexedCache<T> {\r\n            return this.indexedCache;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name Query.getList\r\n         * @methodOf Query\r\n         * @description\r\n         * Shortcut to retrieve the list definition from the model this query belongs to.\r\n         * @returns {List} List definition for model.\r\n         */\r\n        getList(): List {\r\n            let model = this.getModel();\r\n            return model.getList();\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name Query.getLocalStorage\r\n         * @methodOf Query\r\n         * @description\r\n         * Use this to return query data currenty saved in user's local or session storage.\r\n         * @returns {LocalStorageQuery} Local storage data for this query.\r\n         */\r\n        getLocalStorage(): LocalStorageQuery {\r\n            let parsedQuery, localStorageKey = this.getLocalStorageKey();\r\n            let stringifiedQuery = localStorage.getItem(localStorageKey) || sessionStorage.getItem(localStorageKey);\r\n            if (stringifiedQuery) {\r\n                parsedQuery = new LocalStorageQuery(localStorageKey, stringifiedQuery);\r\n            }\r\n            return parsedQuery;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name Query.hydrateFromLocalStorage\r\n         * @methodOf Query\r\n         * @description\r\n         * If data already exists in browser local storage, we rehydrate JSON using list item constructor and\r\n         * then have the ability to just check the server to see what has changed from the current state.\r\n         */\r\n        hydrateFromLocalStorage(localStorageQuery: LocalStorageQuery): void {\r\n            if (localStorageQuery.hasExpired(this.localStorageExpiration)) {\r\n                //Don't continue and purge if data has exceeded expiration\r\n                localStorageQuery.removeItem();\r\n            } else {\r\n                let listItemProvider = apDecodeService.createListItemProvider<T>(this.getModel(), this, this.getCache());\r\n                let fieldDefinitions = this.getList().fields;\r\n\r\n                //Identify all DateTime JSON fields so we can cast as Date objects\r\n                var dateTimeProperties = _.chain(fieldDefinitions)\r\n                    .filter((fieldDefinition: FieldDefinition) => {\r\n                        return fieldDefinition.objectType === 'DateTime';\r\n                    })\r\n                    .map((fieldDefinition: FieldDefinition) => {\r\n                        return fieldDefinition.mappedName;\r\n                    })\r\n                    .value();\r\n\r\n                //Hydrate each raw list item and add to cache\r\n                _.each(localStorageQuery.indexedCache, (jsonObject: Object) => {\r\n                    let hydratedObject = this.hydrateJSONDates(jsonObject, dateTimeProperties);\r\n                    listItemProvider(hydratedObject);\r\n                });\r\n\r\n                //Set the last run date\r\n                this.lastRun = localStorageQuery.lastRun;\r\n                //Store the change token\r\n                this.changeToken = localStorageQuery.changeToken;\r\n                //Resolve initial query promise in case any other concurrent requests are waiting for the data\r\n                this.initialized.resolve(this.getCache());\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name Query.hydrateJSONDates\r\n         * @methodOf Query\r\n         * @description\r\n         * Objects pulled from local storage have JSON date strings so we need to convert to real dates.\r\n         * @returns {Object} JSON object with date strings converted to Date objects.\r\n         */\r\n        hydrateJSONDates(jsonObject: Object, dateTimeProperties: string[]): Object  {\r\n            _.each(dateTimeProperties, (prop: string) => {\r\n                if (_.isString(jsonObject[prop])) {\r\n                    jsonObject[prop] = new Date(jsonObject[prop]);\r\n                }\r\n            });\r\n            return jsonObject;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name Query.postExecutionCleanup\r\n         * @methodOf Query\r\n         * @description\r\n         * Internal method exposed to allow for testing.  Handle cleanup after query execution is complete.\r\n         */\r\n        postExecutionCleanup(results: ap.IndexedCache<T>) {\r\n            let query = this;\r\n            let model = query.getModel();\r\n            let cache = this.getCache();\r\n\r\n            /** Set flag if this if the first time this query has been run */\r\n            var firstRunQuery = _.isNull(query.lastRun);\r\n\r\n            if (firstRunQuery) {\r\n                /** Promise resolved the first time query is completed */\r\n                query.initialized.resolve(results);\r\n            }\r\n\r\n            /** Set list permissions if not already set */\r\n            var list = model.getList();\r\n            if (!list.permissions && results.first()) {\r\n                /** Query needs to have returned at least 1 item so we can use permMask */\r\n                list.extendPermissionsFromListItem(results.first());\r\n            }\r\n\r\n            /** Remove lock to allow for future requests */\r\n            query.negotiatingWithServer = false;\r\n\r\n            /** Store query completion date/time on model to allow us to identify age of data */\r\n            model.lastServerUpdate = new Date();\r\n\r\n            /** Overwrite local storage value with updated state so we can potentially restore in\r\n             * future sessions. */\r\n            if (query.usesBrowserStorage) {\r\n                query.saveToLocalStorage();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name Query.saveToLocalStorage\r\n         * @methodOf Query\r\n         * @description\r\n         * Save a snapshot of the current state to local/session storage so we can speed up calls\r\n         * for data already residing on the users machine.\r\n         */\r\n        saveToLocalStorage(): void {\r\n            //Don't use storage when running offline\r\n            if (apConfig.offline) return;\r\n\r\n            let model = this.getModel();\r\n            let store = {\r\n                changeToken: this.changeToken,\r\n                indexedCache: this.getCache(),\r\n                lastRun: this.lastRun\r\n            }\r\n            let stringifiedQuery = JSON.stringify(store);\r\n            let storageType = this.localStorage ? 'local' : 'session';\r\n            let localStorageKey = this.getLocalStorageKey();\r\n            //Use try/catch in case we've exceeded browser storage limit (typically 5MB)\r\n            try {\r\n                if (this.localStorage) {\r\n                    localStorage.setItem(localStorageKey, stringifiedQuery);\r\n                } else {\r\n                    sessionStorage.setItem(localStorageKey, stringifiedQuery);\r\n                }\r\n            } catch (e) {\r\n                if (e.code == 22) {\r\n                    // Storage full, maybe notify user or do some clean-up\r\n                }\r\n                apLogger.debug('Looks like we\\'re out of space in ' + storageType + ' storage.', {\r\n                    json: {\r\n                        query: this.name,\r\n                        model: this.getModel().list.title\r\n                    }\r\n                });\r\n                if (this.localStorage) {\r\n                    localStorage.clear();\r\n                } else {\r\n                    sessionStorage.clear();\r\n                }\r\n                //Disable storage for remainder of session to prevent throwing additional errors\r\n                this.localStorage = false;\r\n                this.sessionStorage = false;\r\n            }\r\n        }\r\n\r\n        /** They key we use for local storage */\r\n        private getLocalStorageKey() {\r\n            var model = this.getModel();\r\n            return model.getListId() + '.query.' + this.name;\r\n        }\r\n\r\n        makeRequest(): ng.IPromise<IndexedCache<T>> {\r\n            let query = this;\r\n            let model = this.getModel();\r\n            let cache = this.getCache();\r\n\r\n            return apDataService.serviceWrapper(query)\r\n                .then((responseXML) => {\r\n                    if (query.operation === 'GetListItemChangesSinceToken') {\r\n                        apDataService.processChangeTokenXML<T>(model, query, responseXML, cache);\r\n                    }\r\n\r\n                    /** Convert the XML into JS objects */\r\n                    var entities = apDecodeService.processListItems<T>(model, query, responseXML, {target: cache});\r\n\r\n                    /** Set date time to allow for time based updates */\r\n                    query.lastRun = new Date();\r\n\r\n                    return entities;\r\n                });\r\n\r\n\r\n        }\r\n    }\r\n\r\n\r\n    export class QueryFactory {\r\n        Query = Query;\r\n        static $inject = ['$q', 'apConfig', 'apDataService', 'apDefaultListItemQueryOptions', 'apIndexedCacheFactory', 'apDecodeService', 'apLogger'];\r\n\r\n        constructor(_$q_, _apConfig_, _apDataService_, _apDefaultListItemQueryOptions_, _apIndexedCacheFactory_, _apDecodeService_, _apLogger_) {\r\n\r\n            $q = _$q_;\r\n            apConfig = _apConfig_;\r\n            apDataService = _apDataService_;\r\n            apDefaultListItemQueryOptions = _apDefaultListItemQueryOptions_;\r\n            apIndexedCacheFactory = _apIndexedCacheFactory_;\r\n            apDecodeService = _apDecodeService_;\r\n            apLogger = _apLogger_;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apQueryFactory:create\r\n         * @methodOf angularPoint.apQueryFactory\r\n         * @param {object} config Options object.\r\n         * @param {object} model Reference to the model.\r\n         * @description\r\n         * Instantiates and returns a new Query.\r\n         */\r\n        create<T extends ListItem<any>>(config, model): IQuery<T> {\r\n            return new Query<T>(config, model);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ngdoc object\r\n     * @name angularPoint.apQueryFactory\r\n     * @description\r\n     * Exposes the Query prototype and a constructor to instantiate a new Query.\r\n     *\r\n     * @requires angularPoint.apDataService\r\n     * @requires angularPoint.apConfig\r\n     */\r\n    angular.module('angularPoint')\r\n        .service('apQueryFactory', QueryFactory);\r\n\r\n\r\n}","/// <reference path=\"../app.module.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n    let apUtilityService: UtilityService;\r\n\r\n    /**\r\n     * Represents a reference to a site collection user.  This is\r\n     * very similar to an ap.ILookup except additional properties\r\n     * can be provided if setup to include them in the request.\r\n     * The site collection user is created the first time a user\r\n     * accesses a site collection.  The downside is a user will have\r\n     * different site collection ID's for each site collection.\r\n     */\r\n    export interface IUser {\r\n        email?:string;\r\n        loginName?:string;\r\n        lookupId: number;\r\n        lookupValue: string;\r\n        sipAddress?:string;\r\n        title?:string;\r\n    }\r\n\r\n    /**\r\n     * @ngdoc function\r\n     * @name User\r\n     * @description\r\n     * Allows for easier distinction when debugging if object type is shown as a User.  Turns a delimited \";#\"\r\n     * string into an object shown below depeinding on field settings:\r\n     * <pre>\r\n     * {\r\n         *      lookupId: 1,\r\n         *      lookupValue: 'Joe User'\r\n         * }\r\n     * </pre>\r\n     * or\r\n     * <pre>\r\n     * {\r\n         *      lookupId: 1,\r\n         *      lookupValue: 'Joe User',\r\n         *      loginName: 'joe.user',\r\n         *      email: 'joe@company.com',\r\n         *      sipAddress: 'whatever',\r\n         *      title: 'Sr. Widget Maker'\r\n         * }\r\n     * </pre>\r\n     * @param {string} s Delimited string used to create a User object.\r\n     * @constructor\r\n     */\r\n    class User implements IUser {\r\n        lookupValue: string;\r\n        lookupId: number;\r\n        loginName: string;\r\n        email: string;\r\n        sipAddress: string;\r\n        title: string;\r\n\r\n        constructor(str: string) {\r\n            let thisUser = new apUtilityService.SplitIndex(str);\r\n\r\n            let thisUserExpanded = thisUser.value.split(',#');\r\n            if (thisUserExpanded.length === 1) {\r\n                //Standard user columns only return a id,#value pair\r\n                this.lookupId = thisUser.id;\r\n                this.lookupValue = thisUser.value;\r\n            } else {\r\n                //Allow for case where user adds additional properties when setting up field\r\n                this.lookupId = thisUser.id;\r\n                this.lookupValue = thisUserExpanded[0].replace(/(,,)/g, ',');\r\n                this.loginName = thisUserExpanded[1].replace(/(,,)/g, ',');\r\n                this.email = thisUserExpanded[2].replace(/(,,)/g, ',');\r\n                this.sipAddress = thisUserExpanded[3].replace(/(,,)/g, ',');\r\n                this.title = thisUserExpanded[4].replace(/(,,)/g, ',');\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    export class UserFactory {\r\n        User = User;\r\n        static $inject = ['apUtilityService'];\r\n\r\n        constructor(_apUtilityService_) {\r\n            apUtilityService = _apUtilityService_;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apUserFactory:create\r\n         * @methodOf angularPoint.apUserFactory\r\n         * @description\r\n         * Instantiates and returns a new User field.\r\n         */\r\n        create(s) {\r\n            return new User(s);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ngdoc function\r\n     * @name angularPoint.apUserFactory\r\n     * @description\r\n     * Tools to assist with the creation of CAML queries.\r\n     *\r\n     */\r\n    angular.module('angularPoint')\r\n        .service('apUserFactory', UserFactory);\r\n\r\n\r\n}\r\n","/// <reference path=\"../app.module.ts\" />\r\n/// <reference path=\"../../typings/tsd.d.ts\" />\r\n\r\ndeclare module ap {\r\n\r\n    export interface IXMLGroup {\r\n        Description: string;\r\n        ID: string;\r\n        Name: string;\r\n        OwnerID: string;\r\n        OwnerIsUser: string;\r\n    }\r\n\r\n    export interface IXMLUser {\r\n        Email: string;\r\n        Flags: string;\r\n        ID: string;\r\n        IsDomainGroup: string;\r\n        IsSiteAdmin: string;\r\n        LoginName: string;\r\n        Name: string;\r\n        Notes: string;\r\n        Sid: string;\r\n    }\r\n\r\n    export interface IXMLUserProfile {\r\n        userLoginName: string; //Added to allow us to optionally add a prefix if necessary from apConfig\r\n        UserProfile_GUID: string;\r\n        AccountName: string;\r\n        FirstName: string;\r\n        \"SPS-PhoneticFirstName\": string;\r\n        LastName: string;\r\n        \"SPS-PhoneticLastName\": string;\r\n        PreferredName: string;\r\n        \"SPS-PhoneticDisplayName\": string;\r\n        WorkPhone: string;\r\n        Department: string;\r\n        Title: string;\r\n        \"SPS-JobTitle\": string;\r\n        Manager: string;\r\n        AboutMe: string;\r\n        PersonalSpace: string;\r\n        PictureURL: string;\r\n        UserName: string;\r\n        QuickLinks: string;\r\n        WebSite: string;\r\n        PublicSiteRedirect: string;\r\n        \"SPS-Dotted-line\": string;\r\n        \"SPS-Peers\": string;\r\n        \"SPS-Responsibility\": string;\r\n        \"SPS-SipAddress\": string;\r\n        \"SPS-MySiteUpgrade\": string;\r\n        \"SPS-DontSuggestList\": string;\r\n        \"SPS-ProxyAddresses\": string;\r\n        \"SPS-HireDate\": string;\r\n        \"SPS-DisplayOrder\": string;\r\n        \"SPS-ClaimID\": string;\r\n        \"SPS-ClaimProviderID\": string;\r\n        \"SPS-ClaimProviderType\": string;\r\n        \"SPS-LastColleagueAdded\": string;\r\n        \"SPS-OWAUrl\": string;\r\n        \"SPS-SavedAccountName\": string;\r\n        \"SPS-ResourceAccountName\": string;\r\n        \"SPS-ObjectExists\": string;\r\n        \"SPS-MasterAccountName\": string;\r\n        \"SPS-DistinguishedName\": string;\r\n        \"SPS-SourceObjectDN\": string;\r\n        \"SPS-LastKeywordAdded\": string;\r\n        WorkEmail: string;\r\n        CellPhone: string;\r\n        Fax: string;\r\n        HomePhone: string;\r\n        Office: string;\r\n        \"SPS-Location\": string;\r\n        \"SPS-TimeZone\": string;\r\n        Assistant: string;\r\n        \"SPS-PastProjects\": string;\r\n        \"SPS-Skills\": string;\r\n        \"SPS-School\": string;\r\n        \"SPS-Birthday\": string;\r\n        \"SPS-StatusNotes\": string;\r\n        \"SPS-Interests\": string;\r\n        \"SPS-EmailOptin\": string;\r\n    }\r\n\r\n    export interface IListItemCrudOptions<T extends ListItem<any>> {\r\n        target: IndexedCache<T>;\r\n    }\r\n\r\n    export interface IWorkflowDefinition {\r\n        instantiationUrl: string;\r\n        name: string;\r\n        templateId: string;\r\n    }\r\n\r\n    export interface IStartWorkflowParams {\r\n        fileRef?: string;\r\n        item: string;\r\n        templateId: string;\r\n        workflowName?: string;\r\n        workflowParameters?: string;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\ninterface IToast {\r\n    toastId: number;\r\n    scope: ng.IScope;\r\n    iconClass: string;\r\n}\r\n\r\ndeclare module ngTable {\r\n    export interface INGTableParamsObject {\r\n        count?: number;\r\n        filter?: Object;\r\n        page?: number;\r\n        sorting?: Object;\r\n    }\r\n\r\n    interface INGTableParamsReference {\r\n        count(): number;\r\n        filter(): Object;\r\n        orderBy(): string[]\r\n        page(): number;\r\n        sorting(): Object;\r\n        total(): number;\r\n        total(number): void;\r\n    }\r\n\r\n    export interface INGTableSettings {\r\n        total?: number;\r\n        counts?: number[];\r\n        defaultSort?: string; //options: ['asc', 'desc']\r\n        groupBy?: string | Function;\r\n        filterDelay?: number;\r\n        /** Return eiter a data array or promise that resolves with a data array */\r\n        getData(params: INGTableParamsReference): void;\r\n    }\r\n\r\n    export interface INGTableParams {\r\n        new (parameters: INGTableParamsObject, settings: INGTableSettings): INGTable;\r\n    }\r\n\r\n    export interface INGTable {\r\n        reload(): void;\r\n    }\r\n}\r\n\r\n// extend lodash with functionality in apUtilityService\r\ndeclare module _ {\r\n    interface LoDashStatic {\r\n        isDefined(val): boolean;\r\n        isGuid(val): boolean;\r\n    }\r\n}","/// <reference path=\"../app.module.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n    /** Local references to cached promises */\r\n    var _getGroupCollection, _getUserProfile;\r\n\r\n    export interface IUserModel {\r\n        checkIfMember(groupName: string, force?: boolean): angular.IPromise<IXMLGroup>;\r\n        getGroupCollection(force?: boolean): angular.IPromise<IXMLGroup[]>;\r\n        getUserProfile(force?: boolean): ng.IPromise<IXMLUserProfile>;\r\n    }\r\n\r\n    export class UserModel {\r\n        static $inject = ['$q', 'apDataService'];\r\n        constructor(private $q: ng.IQService, private apDataService: DataService) {\r\n\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apUserModel:checkIfMember\r\n         * @methodOf angularPoint.apUserModel\r\n         * @description\r\n         * Checks to see if current user is a member of the specified group.\r\n         * @param {string} groupName Name of the group.\r\n         * @param {boolean} [force=false] Ignore any cached value.\r\n         * @returns {object} Returns the group definition if the user is a member. {ID:string, Name:string, Description:string, OwnerId:string, OwnerIsUser:string}\r\n         * @example\r\n         * <pre>{ID: \"190\", Name: \"Blog Contributors\", Description: \"We are bloggers...\", OwnerID: \"126\", OwnerIsUser: \"False\"}</pre>\r\n         */\r\n        checkIfMember(groupName: string, force: boolean = false): angular.IPromise<IXMLGroup> {\r\n            //Allow function to be called before group collection is ready\r\n            var deferred = this.$q.defer();\r\n\r\n            //Initially ensure groups are ready, any future calls will receive the return\r\n            this.getGroupCollection(force).then((groupCollection) => {\r\n                var groupDefinition = _.find(groupCollection, { Name: groupName });\r\n                deferred.resolve(groupDefinition);\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apUserModel:getGroupCollection\r\n         * @methodOf angularPoint.apUserModel\r\n         * @description\r\n         * Returns the group definitions for the current user and caches results.\r\n         * @param {boolean} [force=false] Ignore any cached value.\r\n         * @returns {IGroupDefinition[]} Promise which resolves with the array of groups the user belongs to.\r\n         */\r\n        getGroupCollection(force: boolean = false): angular.IPromise<IXMLGroup[]> {\r\n            if (!_getGroupCollection || force) {\r\n                /** Create a new deferred object if not already defined */\r\n                var deferred = this.$q.defer();\r\n                this.getUserProfile(force).then((userProfile) => {\r\n                    this.apDataService.getGroupCollectionFromUser(userProfile.userLoginName)\r\n                        .then((groupCollection) => {\r\n                        deferred.resolve(groupCollection);\r\n                    });\r\n                });\r\n                _getGroupCollection = deferred.promise;\r\n            }\r\n            return _getGroupCollection;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apUserModel:getUserProfile\r\n         * @methodOf angularPoint.apUserModel\r\n         * @description\r\n         * Returns the user profile for the current user and caches results.\r\n         * Pull user profile info and parse into a profile object\r\n         * http://spservices.codeplex.com/wikipage?title=GetUserProfileByName\r\n         * @param {boolean} [force=false] Ignore any cached value.\r\n         * @returns {object} Promise which resolves with the requested user profile.\r\n         */\r\n        getUserProfile(force: boolean = false): ng.IPromise<IXMLUserProfile> {\r\n            if (!_getUserProfile || force) {\r\n                /** Create a new deferred object if not already defined */\r\n                _getUserProfile = this.apDataService.getUserProfileByName();\r\n            }\r\n            return _getUserProfile;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name angularPoint.apUserModel\r\n     * @description\r\n     * Simple service that allows us to request and cache both the current user and their group memberships.\r\n     *\r\n     * @requires apDataService\r\n     *\r\n     */\r\n    angular.module('angularPoint')\r\n        .service('apUserModel', UserModel);\r\n\r\n}\r\n","/// <reference path=\"../app.module.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n    interface ICacheService {\r\n        deleteEntity(listId: string, entityId: number): void;\r\n        getCachedEntities<T extends ListItem<any>>(listId: string): IndexedCache<T>;\r\n        getCachedEntity<T extends ListItem<any>>(listId: string, entityId: number): T;\r\n        getEntity<T extends ListItem<any>>(listId: string, entityId: number): ng.IPromise<T>;\r\n        getListId(keyString: string): string;\r\n        getListIdFromListName(name: string): string;\r\n        getModel(listId: string): Model;\r\n        getModelCache(listId: string): ModelCache;\r\n        registerEntity<T extends ListItem<any>>(entity: T, targetCache?: IndexedCache<T>): T;\r\n        registerModel(model: Model): void;\r\n        removeEntityById(listId: string, entityId: number): void;\r\n    }\r\n\r\n    let service: CacheService, $q: ng.IQService, $log: ng.ILogService, apIndexedCacheFactory: IndexedCacheFactory;\r\n\r\n    /**\r\n     * @description Stores list names when a new model is registered along with the GUID to allow us to\r\n     *     retrieve the GUID in future\r\n     * @example\r\n     * <pre>\r\n     *     listNameToIdMap = {\r\n         *          list1Name: {\r\n         *              model: list1Model,\r\n         *              listId: list1GUID\r\n         *          },\r\n         *          list2Name: {\r\n         *              model: list2Model,\r\n         *              listId: list2GUID\r\n         *          }\r\n         *          ...\r\n         *     }\r\n     * </pre>\r\n     */\r\n    let listNameToIdMap = {},\r\n\r\n        /**\r\n         * @description Stores list GUID when a new model is registered with a reference to the model for\r\n         *     future reference.\r\n         * @example\r\n         * <pre>\r\n         *     listsMappedByListId = {\r\n         *          list1GUID: {\r\n         *              model: list1Model\r\n         *          },\r\n         *          list2GUID: {\r\n         *              model: list2Model\r\n         *          }\r\n         *          ...\r\n         *     }\r\n         * </pre>\r\n         */\r\n        listsMappedByListId = {},\r\n        /**\r\n         * @description The Main cache object which stores ModelCache objects.  Keys being the model GUID and\r\n         *     value being an a ModelCache object\r\n         * @example\r\n         * <pre>\r\n         *     entityCache = {\r\n         *          list1GUID: {\r\n         *              item1ID: { //EnityCache for entity 1\r\n         *                  associationQueue: [],\r\n         *                  updateCount: 3,\r\n         *                  listId: list1GUID,\r\n         *                  entityId: item1ID,\r\n         *                  entityLocations: [],\r\n         *                  entity: {} //This is where the actual entity is referenced\r\n         *              }\r\n         *              item2ID: { //EnityCache for entity 2\r\n         *                  ...\r\n         *              }\r\n         *          },\r\n         *          list2GUID: {\r\n         *              item1ID: ...\r\n         *          }\r\n         *          ...\r\n         *     }\r\n         * </pre>\r\n         */\r\n        entityCache = {};\r\n\r\n\r\n    /**\r\n     * @name EntityCache\r\n     * @description\r\n     * Cache constructor that maintains a queue of all requests for a list item, counter for the number of times\r\n     * the cache has been updated, timestamp of last update, and add/update/remove functionality.\r\n     * @constructor apCacheService\r\n     * @param {string} listId GUID for list the list item belongs to.\r\n     * @param {number} entityId The entity.id.\r\n     */\r\n    class EntityContainer {\r\n        associationQueue = [];\r\n        entity;\r\n        entityLocations = [];\r\n        listId;\r\n        updateCount = 0;\r\n\r\n        constructor(listId: string, private entityId: number) {\r\n            this.listId = service.getListId(listId);\r\n        }\r\n\r\n        /**\r\n         * @name EntityContainer.getEntity\r\n         * @description\r\n         * Promise which returns the requested entity once it has been registered in the cache.\r\n         */\r\n        getEntity() {\r\n            let deferred = $q.defer();\r\n            if (this.entity) {\r\n                /** Entity already exists so resolve immediately */\r\n                deferred.resolve(this.entity);\r\n            } else {\r\n                this.associationQueue.push(deferred);\r\n            }\r\n            return deferred.promise;\r\n        }\r\n\r\n        removeEntity() {\r\n            service.removeEntityById(this.listId, this.entityId);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @name ModelCache\r\n     * @description\r\n     * Cache of Entity Containers for each registered entity retrieved by the model.\r\n     * @constructor\r\n     */\r\n    class ModelCache {\r\n        [key: string]: EntityContainer\r\n    }\r\n\r\n    export class CacheService implements ICacheService {\r\n        entityCache = entityCache;\r\n        static $inject = ['$q', '$log', 'apIndexedCacheFactory'];\r\n\r\n        constructor(_$q_, _$log_, _apIndexedCacheFactory_) {\r\n\r\n            $q = _$q_;\r\n            $log = _$log_;\r\n            apIndexedCacheFactory = _apIndexedCacheFactory_;\r\n\r\n            service = this;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apCacheService:deleteEntity\r\n         * @methodOf angularPoint.apCacheService\r\n         * @description\r\n         * Deletes all references to an entity.\r\n         * @param {string} listId GUID for list the list item belongs to.\r\n         * @param {number} entityId The entity.id.\r\n         */\r\n        deleteEntity(listId: string, entityId: number): void {\r\n            let entityTypeKey = this.getListId(listId);\r\n            this.removeEntityById(entityTypeKey, entityId);\r\n            let model = this.getModel(entityTypeKey);\r\n            _.each(model.queries, (query: IQuery<any>) => {\r\n                let cache = query.getCache();\r\n                if (cache.has(entityId)) {\r\n                    cache.delete(entityId);\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apCacheService:getCachedEntities\r\n         * @methodOf angularPoint.apCacheService\r\n         * @description\r\n         * Returns all entities for a given model as an indexed cache with keys being the entity id's.\r\n         * @param {string} listId GUID for list the list item belongs to.\r\n         * @returns {object} Indexed cache containing all entities for a model.\r\n         */\r\n        getCachedEntities<T extends ListItem<any>>(listId: string): IndexedCache<T> {\r\n            let modelCache = this.getModelCache(listId),\r\n                allEntities = apIndexedCacheFactory.create<T>();\r\n\r\n            _.each(modelCache, (entityContainer: EntityContainer) => {\r\n                if (entityContainer.entity && entityContainer.entity.id) {\r\n                    allEntities.set(entityContainer.entity.id, entityContainer.entity);\r\n                }\r\n            });\r\n            return allEntities;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apCacheService:getCachedEntity\r\n         * @methodOf angularPoint.apCacheService\r\n         * @description\r\n         * Synchronise call to return a cached entity;\r\n         * @param {string} listId GUID for list the list item belongs to.\r\n         * @param {number} entityId The entity.id.\r\n         * @returns {object} entity || undefined\r\n         */\r\n        getCachedEntity<T extends ListItem<any>>(listId: string, entityId: number): T {\r\n            return this.getEntityContainer(listId, entityId).entity;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apCacheService:getEntity\r\n         * @methodOf angularPoint.apCacheService\r\n         * @description\r\n         * Returns a deferred object that resolves with the requested entity immediately if already present or at\r\n         *     some point in the future assuming the entity is eventually registered.\r\n         * @param {string} listId GUID for list the list item belongs to.\r\n         * @param {number} entityId The entity.id.\r\n         * @returns {promise} entity\r\n         */\r\n        getEntity<T extends ListItem<any>>(listId: string, entityId: number): ng.IPromise<T> {\r\n            let entityContainer = this.getEntityContainer(listId, entityId);\r\n            return entityContainer.getEntity();\r\n        }\r\n\r\n        private getEntityContainer(listId: string, entityId: number): EntityContainer {\r\n            let entityTypeKey = this.getListId(listId);\r\n            let modelCache = this.getModelCache(entityTypeKey);\r\n            /** Create the object structure if it doesn't already exist */\r\n            modelCache[entityId] = modelCache[entityId] || new EntityContainer(entityTypeKey, entityId);\r\n            return modelCache[entityId];\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apCacheService:getListId\r\n         * @methodOf angularPoint.apCacheService\r\n         * @description\r\n         * Allows us to use either the List Name or the list GUID and returns the lowercase GUID\r\n         * @param {string} keyString List GUID or name.\r\n         * @returns {string} Lowercase list GUID.\r\n         */\r\n        getListId(keyString: string): string {\r\n            if (_.isGuid(keyString)) {\r\n                /** GUID */\r\n                return keyString.toLowerCase();\r\n            } else {\r\n                /** List Title */\r\n                return this.getListIdFromListName(keyString);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apCacheService:getListIdFromListName\r\n         * @methodOf angularPoint.apCacheService\r\n         * @description\r\n         * Allows us to lookup an entity cache using the name of the list instead of the GUID.\r\n         * @param {string} name The name of the list.\r\n         * @returns {string} GUID for the list.\r\n         */\r\n        getListIdFromListName(name: string): string {\r\n            let guid;\r\n            if (listNameToIdMap[name] && listNameToIdMap[name].listId) {\r\n                guid = listNameToIdMap[name].listId;\r\n            }\r\n            return guid;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apCacheService:getModel\r\n         * @methodOf angularPoint.apCacheService\r\n         * @description\r\n         * Allows us to retrieve a reference to a given model by either the list title or list GUID.\r\n         * @param {string} listId List title or list GUID.\r\n         * @returns {object} A reference to the requested model.\r\n         */\r\n        getModel(listId: string): Model {\r\n            let model,\r\n                entityTypeKey = this.getListId(listId);\r\n\r\n            if (listsMappedByListId[entityTypeKey]) {\r\n                model = listsMappedByListId[entityTypeKey].model;\r\n            }\r\n            return model;\r\n        }\r\n\r\n        /** Locates the stored cache for a model */\r\n        getModelCache(listId: string): ModelCache {\r\n            let entityTypeKey = this.getListId(listId);\r\n            entityCache[entityTypeKey] = entityCache[entityTypeKey] || new ModelCache();\r\n            return entityCache[entityTypeKey];\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apCacheService:registerEntity\r\n         * @methodOf angularPoint.apCacheService\r\n         * @description\r\n         * Registers an entity in the cache and fulfills any pending deferred requests for the entity. If the\r\n         * entity already exists in the cache, we extend the existing object with the updated entity and return a\r\n         * reference to this updated object so the there is only a single instance of this entity withing the cache.\r\n         * @param {object} entity Pass in a newly created entity to add to the cache.\r\n         * @param {object} [targetCache] Optionally pass in a secondary cache to add a reference to this entity.\r\n         */\r\n        registerEntity<T extends ListItem<any>>(entity: T, targetCache?: IndexedCache<T>): T {\r\n            let model = entity.getModel();\r\n            let entityContainer = this.getEntityContainer(model.getListId(), entity.id);\r\n            /** Maintain a single object in cache for this entity */\r\n            if (!_.isObject(entityContainer.entity)) {\r\n                /** Entity isn't currently in the cache */\r\n                entityContainer.entity = entity;\r\n            } else {\r\n                /** Already exists so update to maintain any other references being used for this entity. */\r\n                    //TODO Look at performance hit from extending and see if it would be acceptable just to replace\r\n                _.assign(entityContainer.entity, entity);\r\n            }\r\n\r\n            /** Counter to keep track of the number of updates for this entity */\r\n            entityContainer.updateCount++;\r\n\r\n            if (_.isObject(targetCache) && !_.isArray(targetCache) && !targetCache[entity.id]) {\r\n                /** Entity hasn't been added to the target cache yet */\r\n                targetCache[entity.id] = entityContainer.entity;\r\n            }\r\n\r\n            /** Resolve any requests for this entity */\r\n            _.each(entityContainer.associationQueue, (deferredRequest) => {\r\n                deferredRequest.resolve(entityContainer.entity);\r\n                /** Remove request from queue */\r\n                entityContainer.associationQueue.shift();\r\n            });\r\n\r\n            return entityContainer.entity;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apCacheService:registerModel\r\n         * @methodOf angularPoint.apCacheService\r\n         * @description\r\n         * Creates a new ModelCache for the provide model where all list items will be stored with the key equaling\r\n         * the entity id's and value being a EntityContainer.  The entity is stored at EntityContainer.entity.\r\n         * @param {object} model Model to create the cache for.\r\n         */\r\n        registerModel(model: Model): void {\r\n            if (model.list && model.getListId() && model.list.title) {\r\n                let listId = model.getListId().toLowerCase();\r\n                /** Store a reference to the model by list title */\r\n                listNameToIdMap[model.list.title] = {\r\n                    model: model,\r\n                    listId: listId\r\n                };\r\n\r\n                /** Store a reference to the model by list guid */\r\n                listsMappedByListId[listId] = {\r\n                    model: model\r\n                };\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apCacheService:removeEntityById\r\n         * @methodOf angularPoint.apCacheService\r\n         * @description\r\n         * Removes the entity from the local entity cache.\r\n         * @param {string} listId GUID for list the list item belongs to.\r\n         * @param {number} entityId The entity.id.\r\n         */\r\n        removeEntityById(listId: string, entityId: number): void {\r\n            let modelCache = this.getModelCache(listId);\r\n            if (modelCache[entityId]) {\r\n                delete modelCache[entityId];\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name angularPoint.apCacheService\r\n     * @description\r\n     * Stores a reference for all list items based on list GUID and list item id.  Allows us to then register promises\r\n     *     that resolve once a requested list item is registered in the future.\r\n     */\r\n    angular.module('angularPoint')\r\n        .service('apCacheService', CacheService);\r\n\r\n}\r\n","/// <reference path=\"../app.module.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n    interface IUpdateOptions<T extends ListItem<any>>{\r\n        batchCmd: string;\r\n        buildValuePairs:boolean;\r\n        ID: number;\r\n        listName: string;\r\n        operation: string;\r\n        target: IndexedCache<T>;\r\n        valuePairs: string[][];\r\n        webURL: string;\r\n    }\r\n\r\n    export interface IChangeServiceCallback{\r\n        (entity: ListItem<any>, options: IUpdateOptions<any>, promise: ng.IPromise<any>): void\r\n    }\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name apChangeService\r\n     * @description\r\n     * Primarily used for apMockBackend so we can know what to expect before an attempt to update a list\r\n     * item is intercepted.\r\n     */\r\n    export class ChangeService {\r\n        callbackQueue: IChangeServiceCallback[] = [];\r\n        registerListItemUpdate<T extends ListItem<any>>(entity: ListItem<T>, options: IUpdateOptions<T>, promise: ng.IPromise<ListItem<T>>) {\r\n            _.each(this.callbackQueue, (callback) => {\r\n                callback(entity, options, promise);\r\n            });\r\n        }\r\n        subscribeToUpdates(callback: IChangeServiceCallback ) {\r\n            this.callbackQueue.push(callback);\r\n        }\r\n    }\r\n\r\n    angular\r\n        .module('angularPoint')\r\n        .service('apChangeService', ChangeService);\r\n\r\n}\r\n","/// <reference path=\"../app.module.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n    let apDefaultListItemQueryOptions = DefaultListItemQueryOptions;\r\n    let apWebServiceOperationConstants = WebServiceOperationConstants;\r\n\r\n    let service: DataService, $q: ng.IQService, $timeout: ng.ITimeoutService, $http: ng.IHttpService, apConfig: IAPConfig,\r\n        apUtilityService: UtilityService, apCacheService: CacheService, apDecodeService: DecodeService,\r\n        apEncodeService: EncodeService, apFieldService: FieldService, apIndexedCacheFactory: IndexedCacheFactory,\r\n        SPServices, apBasePermissionObject: BasePermissionObject,\r\n        apXMLToJSONService: XMLToJSONService, apChangeService: ChangeService, apLogger: Logger;\r\n\r\n    export interface IDataService {\r\n        createItemUrlFromFileRef(fileRefString: string): string;\r\n        generateWebServiceUrl(service: string, webURL?: string): ng.IPromise<string>;\r\n        getAvailableWorkflows(fileRefString: string): ng.IPromise<IWorkflowDefinition[]>;\r\n        getCollection(options: { operation: string; userLoginName?: string; groupName?: string; listName?: string; filterNode: string; }): ng.IPromise<Object[]>;\r\n        getCurrentSite(): ng.IPromise<string>;\r\n        getFieldVersionHistory<T extends ListItem<any>>(options: IGetFieldVersionHistoryOptions, fieldDefinition: IFieldDefinition): ng.IPromise<FieldVersionCollection>\r\n        getGroupCollectionFromUser(login?: string): ng.IPromise<IXMLGroup[]>;\r\n        getList(options: { listName: string; webURL?: string }): ng.IPromise<Object>;\r\n        getListFields(options: { listName: string; webURL?: string }): ng.IPromise<IXMLFieldDefinition[]>;\r\n        getUserProfileByName(login?: string): ng.IPromise<IXMLUserProfile>;\r\n        processChangeTokenXML<T extends ListItem<any>>(model: Model, query: IQuery<T>, responseXML: XMLDocument, opts): void;\r\n        processDeletionsSinceToken(responseXML: XMLDocument, indexedCache: IndexedCache<any>): void;\r\n        requestData(opts): ng.IPromise<XMLDocument>;\r\n        retrieveChangeToken(responseXML: XMLDocument): string;\r\n        retrieveListPermissions(responseXML: XMLDocument): IUserPermissionsObject\r\n        serviceWrapper(options): ng.IPromise<any>;\r\n        startWorkflow(options: { item: string; templateId: string; workflowParameters?: string; fileRef?: string; }): ng.IPromise<any>;\r\n        validateCollectionPayload(opts): boolean;\r\n    }\r\n\r\n    export class DataService implements IDataService {\r\n        queryForCurrentSite: ng.IPromise<string>;\r\n        static $inject = ['$http', '$q', '$timeout', 'apCacheService', 'apChangeService', 'apConfig', 'apDecodeService',\r\n            'apDefaultListItemQueryOptions', 'apEncodeService', 'apFieldService', 'apIndexedCacheFactory',\r\n            'apUtilityService', 'apWebServiceOperationConstants', 'apXMLToJSONService', 'SPServices',\r\n            'apBasePermissionObject', 'apLogger'];\r\n\r\n        constructor(_$http_, _$q_, _$timeout_, _apCacheService_, _apChangeService_, _apConfig_, _apDecodeService_,\r\n            _apDefaultListItemQueryOptions_, _apEncodeService_, _apFieldService_, _apIndexedCacheFactory_,\r\n            _apUtilityService_, _apWebServiceOperationConstants_, _apXMLToJSONService_, _SPServices_,\r\n            _apBasePermissionObject_, _apLogger_) {\r\n            service = this;\r\n\r\n            $http = _$http_;\r\n            $q = _$q_;\r\n            $timeout = _$timeout_;\r\n            apCacheService = _apCacheService_;\r\n            apChangeService = _apChangeService_;\r\n            apConfig = _apConfig_;\r\n            apDecodeService = _apDecodeService_;\r\n            apDefaultListItemQueryOptions = _apDefaultListItemQueryOptions_;\r\n            apEncodeService = _apEncodeService_;\r\n            apFieldService = _apFieldService_;\r\n            apIndexedCacheFactory = _apIndexedCacheFactory_;\r\n            apUtilityService = _apUtilityService_;\r\n            apWebServiceOperationConstants = _apWebServiceOperationConstants_;\r\n            apXMLToJSONService = _apXMLToJSONService_;\r\n            SPServices = _SPServices_;\r\n            apBasePermissionObject = _apBasePermissionObject_;\r\n            apLogger = _apLogger_;\r\n        }\r\n\r\n        createItemUrlFromFileRef(fileRefString: string): string {\r\n            return window.location.protocol + '//' + window.location.hostname + '/' + fileRefString;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name DataService.generateWebServiceUrl\r\n         * @description\r\n         * Builds the appropriate SharePoint resource URL.  If a URL isn't provided and it hasn't already been cached\r\n         * we make a call to the server to find the root URL.  All future requests will then use this cached value.\r\n         * @param {string} service The name of the service the SOAP operation is using.\r\n         * @param {string} [webURL] Optionally provide the URL so we don't need to make a call to the server.\r\n         * @returns {promise} Resolves with the url for the service.\r\n         */\r\n        generateWebServiceUrl(service: string, webURL?: string): ng.IPromise<string> {\r\n            let ajaxURL = \"_vti_bin/\" + service + \".asmx\",\r\n                deferred = $q.defer();\r\n\r\n            if (webURL) {\r\n                ajaxURL = webURL.charAt(webURL.length - 1) === '/' ?\r\n                    webURL + ajaxURL : webURL + '/' + ajaxURL;\r\n                deferred.resolve(ajaxURL);\r\n            } else {\r\n                this.getCurrentSite().then((thisSite) => {\r\n                    ajaxURL = thisSite + ((thisSite.charAt(thisSite.length - 1) === '/') ? ajaxURL : ('/' + ajaxURL));\r\n                    deferred.resolve(ajaxURL);\r\n                });\r\n            }\r\n            return deferred.promise;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name DataService.getAvailableWorkflows\r\n         * @description\r\n         * Given a list item or document, return an array of all available workflows.  This is used in combination with\r\n         * DataService.startWorkflow because it requires the template GUID for the target workflow.\r\n         * @example\r\n         * <pre>\r\n         * DataService.getAvailableWorkflows(listItem.fileRef.lookupValue)\r\n         *     .then(function(templateArray) {\r\n         *          ....templateArray = [{\r\n         *              \"name\": \"WidgetApproval\",\r\n         *              \"instantiationUrl\": \"https: //sharepoint.mycompany.com/_layouts/IniWrkflIP.aspx?List=fc17890e-8c0…311-cea9-40d1-a183-6edde9333815}&Web={ec744d8e-ae0a-45dd-bcd1-8a63b9b399bd}\",\r\n         *              \"templateId\": \"59062311-cea9-40d1-a183-6edde9333815\"\r\n         *          }]\r\n         *     });\r\n         * </pre>\r\n         * @param {string} fileRefString Relative or static url referencing the item.\r\n         * @returns {object} Resolves with an array of objects defining each of the available workflows for the item.\r\n         */\r\n        getAvailableWorkflows(fileRefString: string): ng.IPromise<IWorkflowDefinition[]> {\r\n            /** Build the full url for the fileRef if not already provided.  FileRef for an item defaults to a relative url */\r\n            let itemUrl = fileRefString.indexOf(': //') > -1 ? fileRefString : this.createItemUrlFromFileRef(fileRefString);\r\n\r\n            return this.serviceWrapper({\r\n                operation: 'GetTemplatesForItem',\r\n                item: itemUrl\r\n            })\r\n                .then(function(responseXML) {\r\n                    let workflowTemplates = [];\r\n                    let xmlTemplates = apXMLToJSONService.filterNodes(responseXML, 'WorkflowTemplate');\r\n                    _.each(xmlTemplates, function(xmlTemplate: JQuery) {\r\n                        let template = {\r\n                            name: $(xmlTemplate).attr('Name'),\r\n                            instantiationUrl: $(xmlTemplate).attr('InstantiationUrl'),\r\n                            templateId: '{' + $(xmlTemplate).find('WorkflowTemplateIdSet').attr('TemplateId') + '}'\r\n                        };\r\n                        workflowTemplates.push(template);\r\n                    });\r\n                    return workflowTemplates;\r\n                });\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name DataService.getCollection\r\n         * @description\r\n         * Used to handle any of the Get[filterNode]Collection calls to SharePoint\r\n         *\r\n         * @param {Object} options - object used to extend payload and needs to include all SPServices required attributes\r\n         * @param {string} options.operation Can be any of the below or any other requests for collections:\r\n         *  - GetAttachmentCollection @requires options.listName & options.ID\r\n         *  - GetGroupCollectionFromSite\r\n         *  - GetGroupCollectionFromUser @requires options.userLoginName\r\n         *  - GetListCollection\r\n         *  - GetUserCollectionFromGroup @requires options.groupName\r\n         *  - GetUserCollectionFromSite\r\n         *  - GetViewCollection @requires options.listName\r\n         * @param {string} options.filterNode Value to iterate over in returned XML\r\n         *         if not provided it's extracted from the name of the operation\r\n         *         ex: Get[User]CollectionFromSite, \"User\" is used as the filterNode\r\n         * @param {string} [options.groupName] Valid for 'GetUserCollectionFromGroup'\r\n         * @param {string} [options.listName] Valid for 'GetViewCollection' or 'GetAttachmentCollection'\r\n         * @param {string} [options.userLoginName] Valid for 'GetGroupCollectionFromUser'\r\n         * @returns {Promise<object[]>} Promise which when resolved will contain an array of objects representing the\r\n         * requested collection.\r\n         *\r\n         * @example\r\n         * <pre>\r\n         * DataService.getCollection({\r\n         *        operation: \"GetGroupCollectionFromUser\",\r\n         *        userLoginName: $scope.state.selectedUser.LoginName\r\n         *        }).then(function (response) {\r\n         *            postProcessFunction(response);\r\n         *       });\r\n         * </pre>\r\n         */\r\n        getCollection(options: IGetCollectionOptions): ng.IPromise<Object[]> {\r\n            let defaults = {\r\n                postProcess: processXML\r\n            };\r\n            let opts: IGetCollectionOptions = _.assign({}, defaults, options);\r\n\r\n            /** Determine the XML node to iterate over if filterNode isn't provided */\r\n            let filterNode = opts.filterNode || opts.operation.split('Get')[1].split('Collection')[0];\r\n\r\n            let deferred = $q.defer();\r\n\r\n            /** Convert the xml returned from the server into an array of js objects */\r\n            function processXML(responseXML: XMLDocument) {\r\n                let convertedItems: Object[] = [];\r\n                let filteredNodes = apXMLToJSONService.filterNodes(responseXML, filterNode);\r\n                /** Get attachments only returns the links associated with a list item */\r\n                if (opts.operation === 'GetAttachmentCollection') {\r\n                    /** Unlike other call, get attachments only returns strings instead of an object with attributes */\r\n                    _.each(filteredNodes, (node: JQuery) => convertedItems.push($(node).text()));\r\n                } else {\r\n                    convertedItems = apXMLToJSONService.parse(filteredNodes, { includeAllAttrs: true, removeOws: false });\r\n                }\r\n                return convertedItems;\r\n            }\r\n\r\n            let validPayload = this.validateCollectionPayload(opts);\r\n            if (validPayload) {\r\n                this.serviceWrapper(opts)\r\n                    .then((response) => {\r\n                        deferred.resolve(response);\r\n                    })\r\n                    .catch((err) => deferred.reject(err));\r\n            } else {\r\n                deferred.reject(`Invalid payload for ${opts.operation} request.`);\r\n            }\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name DataService.getCurrentSite\r\n         * @description\r\n         * Requests and caches the root url for the current site.  It caches the response so any future calls receive\r\n         * the cached promise.\r\n         * @returns {promise} Resolves with the current site root url.\r\n         */\r\n        getCurrentSite(): ng.IPromise<string> {\r\n            let deferred = $q.defer();\r\n            //let self = this.getCurrentSite;\r\n            if (!this.queryForCurrentSite) {\r\n                /** We only want to run this once so cache the promise the first time and just reference it in the future */\r\n                this.queryForCurrentSite = deferred.promise;\r\n\r\n                let soapData = SPServices.SOAPEnvelope.header +\r\n                    \"<WebUrlFromPageUrl xmlns='\" + SPServices.SCHEMASharePoint + \"/soap/' ><pageUrl>\" +\r\n                    ((location.href.indexOf(\"?\") > 0) ? location.href.substr(0, location.href.indexOf(\"?\")) : location.href) +\r\n                    \"</pageUrl></WebUrlFromPageUrl>\" +\r\n                    SPServices.SOAPEnvelope.footer;\r\n\r\n                $http({\r\n                    method: 'POST',\r\n                    url: '/_vti_bin/Webs.asmx',\r\n                    data: soapData,\r\n                    responseType: \"document\",\r\n                    headers: {\r\n                        \"Content-Type\": \"text/xml;charset='utf-8'\"\r\n                    }\r\n                })\r\n                    .then((response) => {\r\n                        /** Success */\r\n                        let errorMsg = apDecodeService.checkResponseForErrors(response.data);\r\n                        if (errorMsg) {\r\n                            this.errorHandler('Failed to get current site.  ' + errorMsg, deferred, soapData);\r\n                        }\r\n                        apConfig.defaultUrl = $(response.data).find(\"WebUrlFromPageUrlResult\").text();\r\n                        deferred.resolve(apConfig.defaultUrl)\r\n                    })\r\n                    .catch((err) => {\r\n                        /** Error */\r\n                        this.errorHandler('Failed to get current site.  ' + err, deferred, soapData);\r\n                    });\r\n            }\r\n            return this.queryForCurrentSite;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name DataService.getFieldVersionHistory\r\n         * @description\r\n         * Returns the version history for a field in a list item.\r\n         * @param {object} options Configuration object passed to SPServices.\r\n         * <pre>\r\n         * let options = {\r\n         *        operation: 'GetVersionCollection',\r\n         *        webURL: apConfig.defaultUrl,\r\n         *        strlistID: model.getListId(),\r\n         *        strlistItemID: listItem.id,\r\n         *        strFieldName: fieldDefinition.staticName\r\n         *    };\r\n         * </pre>\r\n         * @param {object} fieldDefinition Field definition object from the model.\r\n         * @returns {object[]} Promise which resolves with an array of list item changes for the specified field.\r\n         */\r\n        getFieldVersionHistory<T extends ListItem<any>>(options: IGetFieldVersionHistoryOptions, fieldDefinition: IFieldDefinition): ng.IPromise<FieldVersionCollection> {\r\n            let defaults = {\r\n                operation: 'GetVersionCollection'\r\n            };\r\n            let opts = _.assign({}, defaults, options);\r\n\r\n            return this.serviceWrapper(opts)\r\n                .then((response) => {\r\n                    /** Parse XML response */\r\n                    let fieldVersionCollection = apDecodeService.parseFieldVersions(response, fieldDefinition);\r\n                    /** Resolve with an array of all field versions */\r\n                    return fieldVersionCollection;\r\n                })\r\n                .catch((err) => {\r\n                    /** Failure */\r\n                    return `Failed to fetch version history. Error: ${err}`;\r\n                });\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name DataService.getGroupCollectionFromUser\r\n         * @description\r\n         * Fetches an array of group names the user is a member of.  If no user is provided we use the current user.\r\n         * @param {string} [login=CurrentUser] Optional param of another user's login to return the profile for.\r\n         * @returns {string[]} Promise which resolves with the array of groups the user belongs to.\r\n         */\r\n        getGroupCollectionFromUser(login?: string): ng.IPromise<IXMLGroup[]> {\r\n            /** Create a new deferred object if not already defined */\r\n            let deferred = $q.defer();\r\n            let getGroupCollection = (userLoginName) => {\r\n                this.serviceWrapper({\r\n                    operation: 'GetGroupCollectionFromUser',\r\n                    userLoginName: userLoginName,\r\n                    filterNode: 'Group'\r\n                }).then((groupCollection: IXMLGroup[]) => deferred.resolve(groupCollection));\r\n            };\r\n\r\n            if (!login) {\r\n                /** No login name provided so lookup profile for current user */\r\n                this.getUserProfileByName()\r\n                    .then((userProfile) => getGroupCollection(userProfile.userLoginName));\r\n            } else {\r\n                getGroupCollection(login);\r\n            }\r\n            return deferred.promise;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name DataService.getList\r\n         * @description\r\n         * Returns all list details including field and list config.\r\n         * @param {object} options Configuration parameters.\r\n         * @param {string} options.listName GUID of the list.\r\n         * @param {string} [options.webURL] URL to the site containing the list if differnt from primary data site in apConfig.\r\n         * @returns {object} Promise which resolves with an object defining field and list config.\r\n         */\r\n        getList(options: { listName: string, webURL?: string }): ng.IPromise<Object> {\r\n            let defaults = {\r\n                operation: 'GetList'\r\n            };\r\n\r\n            let opts: { operation: string; listName: string; webURL?: string} = _.assign({}, defaults, options);\r\n            return this.serviceWrapper(opts);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name DataService.getListFields\r\n         * @description\r\n         * Returns field definitions for a specified list.\r\n         * @param {object} options Configuration parameters.\r\n         * @param {string} options.listName GUID of the list.\r\n         * @param {string} [options.webURL] URL to the site containing the list if differnt from primary data site in apConfig.\r\n         * @returns {Promise} Promise which resolves with an array of field definitions for the list.\r\n         */\r\n        getListFields(options: { listName: string; webURL?: string }): ng.IPromise<IXMLFieldDefinition[]> {\r\n            return this.getList(options)\r\n                .then((responseXML) => {\r\n                    let filteredNodes = apXMLToJSONService.filterNodes(responseXML, 'Field');\r\n                    let fields = apXMLToJSONService.parse(filteredNodes, { includeAllAttrs: true, removeOws: false });\r\n                    return fields;\r\n                });\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name DataService.getUserProfile\r\n         * @description\r\n         * Returns the profile for an optional user, but defaults the the current user if one isn't provided.\r\n         * Pull user profile info and parse into a profile object\r\n         * http: //spservices.codeplex.com/wikipage?title=GetUserProfileByName\r\n         * @param {string} [login=CurrentUser] Optional param of another user's login to return the profile for.\r\n         * @returns {object} Promise which resolves with the requested user profile.\r\n         */\r\n        getUserProfileByName(login?: string): ng.IPromise<IXMLUserProfile> {\r\n            let payload = {\r\n                accountName: undefined,\r\n                operation: 'GetUserProfileByName'\r\n            };\r\n            if (login) {\r\n                payload.accountName = login;\r\n            }\r\n\r\n            return this.serviceWrapper(payload)\r\n                .then((responseXML) => {\r\n                    let userProfile = {\r\n                        AccountName: undefined,\r\n                        userLoginName: undefined\r\n                    };\r\n                    //Not formatted like a normal SP response so need to manually parse\r\n                    let filteredNodes = apXMLToJSONService.filterNodes(responseXML, 'PropertyData');\r\n                    _.each(filteredNodes, (node: JQuery) => {\r\n                        let nodeName = apXMLToJSONService.filterNodes(node, 'Name');\r\n                        let nodeValue = apXMLToJSONService.filterNodes(node, 'Value');\r\n                        if (nodeName.length > 0 && nodeValue.length > 0) {\r\n                            userProfile[nodeName.text().trim()] = nodeValue.text().trim();\r\n                        }\r\n                    });\r\n\r\n                    /** Optionally specify a necessary prefix that should appear before the user login */\r\n                    userProfile.userLoginName = apConfig.userLoginNamePrefix ?\r\n                        (apConfig.userLoginNamePrefix + userProfile.AccountName) : userProfile.AccountName;\r\n                    return userProfile;\r\n                });\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name DataService.processChangeTokenXML\r\n         * @description\r\n         * The initial call to GetListItemChangesSinceToken also includes the field definitions for the\r\n         * list so extend the existing field definitions and list defined in the model.  After that, store\r\n         * the change token and make any changes to the user's permissions for the list.\r\n         * @param {Model} model List model.\r\n         * @param {IQuery} query Valid query object.\r\n         * @param {XMLDocument} responseXML XML response from the server.\r\n         * @param {IndexedCache<T>} cache Cache to process in order to handle deletions.\r\n         */\r\n        processChangeTokenXML<T extends ListItem<any>>(model: Model, query: IQuery<T>, responseXML: XMLDocument, cache: IndexedCache<T>): void {\r\n            if (!model.deferredListDefinition) {\r\n                //Extend our local list definition and field definitions with XML\r\n                apDecodeService.extendListMetadata(model, responseXML);\r\n\r\n                /**If loaded from local or session cache the list/field definitions won't be extended so ensure we check before\r\n                 * resolving promise verifying list has been extended.  One of the attributes we'd expect to see on all List/Libraries\r\n                 * is \"BaseType\" */\r\n                if (model.getList().BaseType) {\r\n                    //List successfully extended\r\n                    /** Replace the null placeholder with this resolved promise so we don't have to process in the future and also\r\n                    * don't have to query again if we run Model.extendListMetadata. */\r\n                    model.deferredListDefinition = $q.when(model);\r\n                }\r\n            }\r\n\r\n            /** Store token for future web service calls to return changes */\r\n            let changeToken = this.retrieveChangeToken(responseXML);\r\n            if (changeToken) {\r\n                /** Don't update change token if request fails to return a valid response */\r\n                query.changeToken = changeToken;\r\n            }\r\n\r\n            /** Update the user permissions for this list */\r\n            let permissions = this.retrieveListPermissions(responseXML);\r\n            if (permissions) {\r\n                model.list.permissions = permissions;\r\n            }\r\n\r\n            /** Change token query includes deleted items as well so we need to process them separately */\r\n            this.processDeletionsSinceToken(responseXML, cache);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name DataService.processDeletionsSinceToken\r\n         * @description\r\n         * GetListItemChangesSinceToken returns items that have been added as well as deleted so we need\r\n         * to remove the deleted items from the local cache.\r\n         * @param {XMLDocument} responseXML XML response from the server.\r\n         * @param {Object} cache Cached object of key value pairs.\r\n         */\r\n        processDeletionsSinceToken(responseXML: XMLDocument, cache: IndexedCache<any>): void {\r\n            /** Remove any locally cached entities that were deleted from the server */\r\n            let filteredNodes = apXMLToJSONService.filterNodes(responseXML, 'Id');\r\n            _.each(filteredNodes, (node: JQuery) => {\r\n                /** Check for the type of change */\r\n                let changeType = $(node).attr('ChangeType');\r\n\r\n                if (changeType === 'Delete') {\r\n                    let listItemId = parseInt($(node).text(), 10);\r\n                    /** Remove from local data array */\r\n                    cache.delete(listItemId);\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name DataService.requestData\r\n         * @description\r\n         * The primary function that handles all communication with the server.  This is very low level and isn't\r\n         * intended to be called directly.\r\n         * @param {object} opts Payload object containing the details of the request.\r\n         * @returns {promise} Promise that resolves with the server response.\r\n         */\r\n        requestData(opts): ng.IPromise<XMLDocument> {\r\n            let deferred = $q.defer();\r\n            let soapData = SPServices.generateXMLComponents(opts);\r\n            let service = apWebServiceOperationConstants[opts.operation][0];\r\n\r\n            this.generateWebServiceUrl(service, opts.webURL)\r\n                .then((url) => {\r\n                    $http.post(url, soapData.msg, {\r\n                        responseType: \"document\",\r\n                        headers: {\r\n                            \"Content-Type\": \"text/xml;charset='utf-8'\",\r\n                            SOAPAction: () => soapData.SOAPAction ? soapData.SOAPAction : null\r\n                        },\r\n                        transformResponse: (data, headersGetter) => {\r\n                            if (_.isString(data)) {\r\n                                data = $.parseXML(data);\r\n                            }\r\n                            return data;\r\n                        }\r\n                    })\r\n                        .then((response) => {\r\n                            // Success Code\r\n                            // Errors can still be resolved without throwing an error so check the XML\r\n                            let errorMsg = apDecodeService.checkResponseForErrors(response.data);\r\n                            if (errorMsg) {\r\n                                // Actuall error but returned with success resonse....thank you SharePoint\r\n                                this.errorHandler(errorMsg, deferred, soapData, response);\r\n                            } else {\r\n                                /** Real success */\r\n                                deferred.resolve(response.data);\r\n                            }\r\n                        })\r\n                        .catch((err) => {\r\n                            // Failure\r\n                            this.errorHandler(err, deferred, soapData);\r\n                        });\r\n                });\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name DataService.retrieveChangeToken\r\n         * @description\r\n         * Returns the change token from the xml response of a GetListItemChangesSinceToken query\r\n         * Note: this attribute is only found when using 'GetListItemChangesSinceToken'\r\n         * @param {XMLDocument} responseXML XML response from the server.\r\n         */\r\n        retrieveChangeToken(responseXML: XMLDocument): string {\r\n            return $(responseXML).find('Changes').attr('LastChangeToken');\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name DataService.retrieveListPermissions\r\n         * @description\r\n         * Returns the text representation of the users permission mask\r\n         * Note: this attribute is only found when using 'GetListItemChangesSinceToken'\r\n         * @param {XMLDocument} responseXML XML response from the server.\r\n         */\r\n        retrieveListPermissions(responseXML: XMLDocument): IUserPermissionsObject {\r\n            //Permissions will be a string of Permission names delimited by commas\r\n            //Example: \"ViewListItems, AddListItems, EditListItems, DeleteListItems, ....\"\r\n            let listPermissions: string = $(responseXML).find('listitems').attr('EffectivePermMask');\r\n            let permissionObject;\r\n            if (_.isString(listPermissions)) {\r\n                let permissionNameArray = listPermissions.split(',');\r\n                permissionObject = new ap.BasePermissionObject();\r\n                //Set each of the identified permission levels to true\r\n                _.each(permissionNameArray, (permission: string) => {\r\n                    //Remove extra spaces\r\n                    let permissionName = permission.trim();\r\n                    //Find the permission level on the permission object that is currently set to false\r\n                    //and set to true\r\n                    permissionObject[permissionName] = true;\r\n\r\n                    if (permissionName === 'FullMask') {\r\n                        //User has full rights so set all to true\r\n                        _.each(permissionObject, (propertyValue, propertyName) => {\r\n                            permissionObject[propertyName] = true;\r\n                        })\r\n                    }\r\n                });\r\n            }\r\n\r\n            return permissionObject;\r\n\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name DataService.serviceWrapper\r\n         * @description\r\n         * Generic wrapper for any SPServices web service call.  The big benefit to this function is it allows us\r\n         * to continue to use the $q promise model throughout the application instead of using the promise\r\n         * implementation used in SPServices so we have a more consistent experience.\r\n         * Check http: //spservices.codeplex.com/documentation for details on expected parameters for each operation.\r\n         *\r\n         * @param {object} options Payload params that is directly passed to SPServices.\r\n         * @param {string} [options.filterNode] XML filter string used to find the elements to iterate over.\r\n         * This is typically 'z: row' for list items.\r\n         * @param {Function} [options.postProcess] Method to process responseXML prior to returning.\r\n         * @param {string} [options.webURL] XML filter string used to find the elements to iterate over.\r\n         * @returns {object} Returns a promise which when resolved either returns clean objects parsed by the value\r\n         * in options.filterNode or the raw XML response if a options.filterNode\r\n         *\r\n         *      If options.filterNode is provided, returns XML parsed by node name\r\n         *      Otherwise returns the server response\r\n         */\r\n        serviceWrapper(options: IServiceWrapperOptions): ng.IPromise<any> {\r\n            let defaults = {\r\n                postProcess: processXML,\r\n                webURL: apConfig.defaultUrl\r\n            };\r\n            let opts: IServiceWrapperOptions = _.assign({}, defaults, options);\r\n\r\n            /** Convert the xml returned from the server into an array of js objects */\r\n            function processXML(responseXML: Object) {\r\n                if (opts.filterNode) {\r\n                    let filteredNodes = apXMLToJSONService.filterNodes(responseXML, opts.filterNode);\r\n                    return apXMLToJSONService.parse(filteredNodes, { includeAllAttrs: true, removeOws: false });\r\n                } else {\r\n                    return responseXML;\r\n                }\r\n            }\r\n\r\n            return this.requestData(opts)\r\n                .then((responseXML) => {\r\n                    /** Success */\r\n                    return opts.postProcess(responseXML);\r\n                })\r\n                .catch((err: Error) => {\r\n                    /** Failure */\r\n                    return err + '  Failed to complete the requested ' + opts.operation + ' operation.';\r\n                });\r\n\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name DataService.startWorkflow\r\n         * @description\r\n         * Initiate a workflow for a given list item or document.  You can view additional info at\r\n         * [StartWorkflow](http: //spservices.codeplex.com/wikipage?title=StartWorkflow&referringTitle=Workflow).\r\n         * @param {object} options Configuration options.\r\n         * @param {string} options.item Full fileRef for the given list item/document.\r\n         * @param {string} options.templateId The workflow template GUID.  You can use dataService.getAvailableWorkflows\r\n         * to locate to appropriate one.\r\n         * @param {string} [options.workflowParameters='<root />'] Optionally provide paramaters to the workflow.\r\n         * @param {string} [options.fileRef] Optionally pass in the relative fileRef of an listItem and then we can\r\n         * convert it to options.item.\r\n         * @returns {object} Deferred object that resolves once complete.\r\n         * @example\r\n         * <pre>\r\n         * DataService.startWorkflow({\r\n         *     item: \"https: //server/site/Lists/item\" + idData + \"_.000\",\r\n         *     templateId: \"{c29c1291-a25c-47d7-9345-8fb1de2a1fa3}\",\r\n         *     workflowParameters: \"<Data><monthName>\" + txtBox.value + \"</monthName></Data>\",\r\n         *   ...}).then(function() {\r\n         *       //Success\r\n         *   }, function(err) {\r\n         *       //Error\r\n         *   })\r\n         * </pre>\r\n         */\r\n        startWorkflow(options: { item: string; templateId: string; workflowParameters?: string; fileRef?: string; }): ng.IPromise<any> {\r\n            let defaults = {\r\n                operation: 'StartWorkflow',\r\n                item: '',\r\n                fileRef: '',\r\n                templateId: '',\r\n                workflowParameters: '<root />'\r\n            };\r\n            let opts: { item: string; fileRef: string; } = _.assign({}, defaults, options);\r\n\r\n            /** We have the relative file reference but we need to create the fully qualified reference */\r\n            if (!opts.item && opts.fileRef) {\r\n                opts.item = this.createItemUrlFromFileRef(opts.fileRef);\r\n            }\r\n\r\n            return this.serviceWrapper(opts);\r\n        }\r\n\r\n        /**\r\n         * @description\r\n         * Simply verifies that all components of the payload are present.\r\n         * @param {object} opts Payload config.\r\n         * @returns {boolean} Collection is valid.\r\n         */\r\n        validateCollectionPayload(opts): boolean {\r\n            let validPayload = true;\r\n            let verifyParams = (params) => {\r\n                _.each(params, (param) => {\r\n                    if (!opts[param]) {\r\n                        console.warn('options' + param + ' is required to complete this operation');\r\n                        validPayload = false;\r\n                    }\r\n                });\r\n            };\r\n\r\n            //Verify all required params are included\r\n            switch (opts.operation) {\r\n                case 'GetGroupCollectionFromUser':\r\n                    verifyParams(['userLoginName']);\r\n                    break;\r\n                case 'GetUserCollectionFromGroup':\r\n                    verifyParams(['groupName']);\r\n                    break;\r\n                case 'GetViewCollection':\r\n                    verifyParams(['listName']);\r\n                    break;\r\n                case 'GetAttachmentCollection':\r\n                    verifyParams(['listName', 'ID']);\r\n                    break;\r\n            }\r\n            return validPayload;\r\n        }\r\n\r\n        private errorHandler(errorMsg: string, deferred: ng.IDeferred<any>, soapData: Object, response?: Object) {\r\n            //Log error to any server side logging list\r\n            apLogger.error(errorMsg, {\r\n                json: {\r\n                    request: JSON.stringify(soapData, null, 2),\r\n                    response: JSON.stringify(response, null, 2)\r\n                }\r\n            });\r\n\r\n            deferred.reject(errorMsg);\r\n        }\r\n\r\n    }\r\n\r\n    interface IGetCollectionOptions {\r\n        filterNode: string;\r\n        ID?: number;\r\n        groupName?: string;\r\n        listName?: string;\r\n        operation: string;\r\n        userLoginName?: string;\r\n        webURL?: string;\r\n    }\r\n\r\n    interface IServiceWrapperOptions {\r\n        filterNode?: string;\r\n        listItemID?: number;\r\n        operation: string;\r\n        postProcess?: (responseXML: Object) => any;\r\n        webURL?: string;\r\n        [key: string]: any;\r\n    }\r\n\r\n    interface IUpdateListitemOptions {\r\n        buildValuePairs?: boolean;\r\n        valuePairs?: [string, any][];\r\n    }\r\n\r\n    interface IGetFieldVersionHistoryOptions {\r\n        operation?: string;\r\n        strFieldName?: string;\r\n        strlistID: string;  // correct case\r\n        strlistItemID: number; // correct case\r\n        webURL?: string;\r\n    }\r\n\r\n    angular\r\n        .module('angularPoint')\r\n        .service('apDataService', DataService);\r\n\r\n}\r\n","/// <reference path=\"../app.module.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name angularPoint.apDecodeService\r\n     * @description\r\n     * Processes the XML received from SharePoint and converts it into JavaScript objects based on predefined field types.\r\n     *\r\n     * @requires angularPoint.apUtilityService\r\n     * @requires angularPoint.apConfig\r\n     * @requires angularPoint.apCacheService\r\n     */\r\n    export class DecodeService {\r\n        static $inject = ['apCacheService', 'apLookupFactory', 'apUserFactory', 'apFieldService',\r\n            'apXMLListAttributeTypes', 'apXMLFieldAttributeTypes', 'apXMLToJSONService'];\r\n\r\n        constructor(private apCacheService: CacheService, private apLookupFactory: LookupFactory,\r\n            private apUserFactory: UserFactory, private apFieldService: FieldService, private apXMLListAttributeTypes: XMLListAttributeTypes,\r\n            private apXMLFieldAttributeTypes: XMLFieldAttributeTypes, private apXMLToJSONService: XMLToJSONService) {\r\n\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apDecodeService:checkResponseForErrors\r\n         * @methodOf angularPoint.apDecodeService\r\n         * @description\r\n         * Errors don't always throw correctly from SPServices so this function checks to see if part\r\n         * of the XHR response contains an \"errorstring\" element.\r\n         * @param {object} responseXML XHR response from the server.\r\n         * @returns {string} Returns an error string if present.\r\n         */\r\n        checkResponseForErrors(responseXML: XMLDocument): string {\r\n            let error;\r\n            /** Look for <errorstring></errorstring> or <ErrorText></ErrorText> for details on any errors */\r\n            let errorElements = ['ErrorText', 'errorstring'];\r\n            _.each(errorElements, (element) => {\r\n                $(responseXML).find(element).each(function() {\r\n                    error = $(this).text();\r\n                    /** Break early if found */\r\n                    return false;\r\n                });\r\n            });\r\n            return error;\r\n        }\r\n\r\n        /** Converts UTC date to a localized date\r\n         * Taken from: http://stackoverflow.com/questions/6525538/convert-utc-date-time-to-local-date-time-using-javascript\r\n         * */\r\n        convertUTCDateToLocalDate(date: Date): Date {\r\n            let newDate = new Date(date.getTime() + date.getTimezoneOffset() * 60 * 1000);\r\n\r\n            let offset = date.getTimezoneOffset() / 60;\r\n            let hours = date.getHours();\r\n\r\n            newDate.setHours(hours - offset);\r\n\r\n            return newDate;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apDecodeService:createListItemProvider\r\n         * @methodOf angularPoint.apDecodeService\r\n         * @description\r\n         * The initial constructor for a list item that references the array where the entity exists and the\r\n         * query used to fetch the entity.  From there it extends the entity using the factory defined in the\r\n         * model for the list item.\r\n         * @param {object} model Reference to the model for the list item.\r\n         * @param {object} query Reference to the query object used to retrieve the entity.\r\n         * @param {object} indexedCache Location where we'll be pushing the new entity.\r\n         * @returns {Function} Returns a function that takes the new list item while keeping model, query,\r\n         * and container in scope for future reference.\r\n         */\r\n        createListItemProvider<T extends ListItem<any>>(model: Model, query: IQuery<T>, indexedCache: IndexedCache<T>): (rawObject: Object) => T {\r\n            return (rawObject: IUninstantiatedExtendedListItem<T>) => {\r\n                let listItem: T;\r\n\r\n                if (indexedCache.has(rawObject.id)) {\r\n                    //Object already exists in cache so we just need to update properties\r\n                    listItem = indexedCache.get(rawObject.id);\r\n\r\n                    //Call constructor on original list item to perform any initialization logic again\r\n                    listItem.constructor(rawObject);\r\n\r\n                } else {\r\n                    //Creating a new List Item\r\n\r\n                    /** Create Reference to the indexed cache */\r\n                    rawObject.getCache = () => indexedCache;\r\n\r\n                    /** Allow us to reference the originating query that generated this object */\r\n                    rawObject.getQuery = () => query;\r\n\r\n                    listItem = new model.factory<T>(rawObject);\r\n\r\n                    /** Register in global application listItem cache */\r\n                    this.apCacheService.registerEntity<T>(listItem, indexedCache);\r\n                }\r\n\r\n                //Store the value instead of just a reference to the original object\r\n                let pristineValue = _.cloneDeep(rawObject);\r\n\r\n                /**\r\n                * @ngdoc function\r\n                * @name ListItem.getPristine\r\n                * @description\r\n                * Allow us to reference the uninstantiated version of this list item.  Reference set\r\n                * via angularPoint.apDecodeService:createListItemProvider.\r\n                */\r\n                listItem.getPristine = () => pristineValue;\r\n\r\n                return indexedCache.get(rawObject.id);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apDecodeService:extendFieldDefinitionsFromXML\r\n         * @methodOf angularPoint.apDecodeService\r\n         * @description\r\n         * Takes the XML response from a web service call and extends any field definitions in the model\r\n         * with additional field metadata.  Important to note that all properties will coming from the XML start\r\n         * with a capital letter.\r\n         * @param {object[]} fieldDefinitions Field definitions from the model.\r\n         * @param {object} responseXML XML response from the server.\r\n         */\r\n        extendFieldDefinitionsFromXML(fieldDefinitions: IFieldDefinition[], responseXML: XMLDocument): IFieldDefinition[] {\r\n            let fieldMap = {};\r\n\r\n            /** Map all custom fields with keys of the staticName and values = field definition */\r\n            _.each(fieldDefinitions, (field) => {\r\n                if (field.staticName) {\r\n                    fieldMap[field.staticName] = field;\r\n                }\r\n            });\r\n\r\n            /** Iterate over each of the field nodes */\r\n            let filteredNodes = this.apXMLToJSONService.filterNodes(responseXML, 'Field');\r\n\r\n            _.each(filteredNodes, (xmlField: Element) => {\r\n                let staticName = $(xmlField).attr('StaticName');\r\n                let fieldDefinition = fieldMap[staticName];\r\n\r\n                /** If we've defined this field then we should extend it */\r\n                if (fieldDefinition) {\r\n\r\n                    this.extendObjectWithXMLAttributes(xmlField, fieldDefinition, this.apXMLFieldAttributeTypes);\r\n\r\n                    /** Additional processing for Choice fields to include the default value and choices */\r\n                    if (fieldDefinition.objectType === 'Choice' || fieldDefinition.objectType === 'MultiChoice') {\r\n                        fieldDefinition.Choices = [];\r\n                        /** Convert XML Choices object to an array of choices */\r\n                        let xmlChoices = $(xmlField).find('CHOICE');\r\n                        _.each(xmlChoices, (xmlChoice) => {\r\n                            fieldDefinition.Choices.push($(xmlChoice).text());\r\n                        });\r\n                        fieldDefinition.Default = $(xmlField).find('Default').text();\r\n                    }\r\n                }\r\n            });\r\n\r\n            return fieldDefinitions;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apDecodeService:extendListDefinitionFromXML\r\n         * @methodOf angularPoint.apDecodeService\r\n         * @description\r\n         * Takes the XML response from a web service call and extends the list definition in the model\r\n         * with additional field metadata.  Important to note that all properties will coming from the XML start\r\n         * with a capital letter.\r\n         * @param {object} list model.list\r\n         * @param {object} responseXML XML response from the server.\r\n         * @returns {object} Extended list object.\r\n         */\r\n        extendListDefinitionFromXML(list: List, responseXML: XMLDocument): List {\r\n            let service = this;\r\n            $(responseXML).find(\"List\").each(function() {\r\n                service.extendObjectWithXMLAttributes(this, list, service.apXMLListAttributeTypes);\r\n            });\r\n            return list;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apDecodeService:extendListMetadata\r\n         * @methodOf angularPoint.apDecodeService\r\n         * @description\r\n         * Convenience method that extends the list definition and the field definitions from an xml list response\r\n         * from the server.  Can be used specifically with GetListItemsSinceToken and GetList operations.\r\n         * @param {object} model Model for a given list.\r\n         * @param {object} responseXML XML response from the server.\r\n         */\r\n        extendListMetadata(model: Model, responseXML: XMLDocument): void {\r\n            this.extendListDefinitionFromXML(model.list, responseXML);\r\n            this.extendFieldDefinitionsFromXML(model.list.fields, responseXML);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apDecodeService:extendObjectWithXMLAttributes\r\n         * @methodOf angularPoint.apDecodeService\r\n         * @description\r\n         * Takes an XML element and copies all attributes over to a given JS object with corresponding values.  If\r\n         * no JS Object is provided, it extends an empty object and returns it.  If an attributeTypes object is provided\r\n         * we parse each of the defined field so they are typed correctly instead of being a simple string.\r\n         * Note: Properties are not necessarily CAMLCase.\r\n         * @param {object} xmlObject An XML element.\r\n         * @param {object} [jsObject={}] An optional JS Object to extend XML attributes to.\r\n         * @param {object} [attributeTypes={}] Key/Val object with keys being the name of the field and val being the\r\n         * type of field.\r\n         * @returns {object} JS Object\r\n         */\r\n        extendObjectWithXMLAttributes(xmlObject: Element, jsObject?: Object, attributeTypes?: Object): Object {\r\n            let objectToExtend = jsObject || {};\r\n            let attributeMap = attributeTypes || {};\r\n            let xmlAttributes = xmlObject.attributes;\r\n\r\n            _.each(xmlAttributes, (attr, attrNum) => {\r\n                let attrName = xmlAttributes[attrNum].name;\r\n                objectToExtend[attrName] = $(xmlObject).attr(attrName);\r\n                if (attributeMap[attrName]) {\r\n                    objectToExtend[attrName] = this.parseStringValue(objectToExtend[attrName], attributeMap[attrName]);\r\n                }\r\n            });\r\n            return objectToExtend;\r\n        }\r\n\r\n\r\n        jsAttachments(str): string[] | number | string {\r\n            /* Depending on CAMLQueryOptions Config an attachment can be formatted in 1 of the below 3 ways:\r\n             1. {number} The number of attachments for a given list item.\r\n             CAMLQueryOptions\r\n             <IncludeAttachmentUrls>FALSE</IncludeAttachmentUrls>\r\n             <IncludeAttachmentVersion>FALSE</IncludeAttachmentVersion>\r\n\r\n             Example\r\n             ows_Attachments=\"2\"\r\n\r\n             2. {string}\r\n             CAMLQueryOptions\r\n             <IncludeAttachmentUrls>TRUE</IncludeAttachmentUrls>\r\n             <IncludeAttachmentVersion>FALSE</IncludeAttachmentVersion>\r\n\r\n             Format\r\n             ;#[ListUrl]/Attachments/[ListItemId]/[FileName];#\r\n\r\n             Example:\r\n             ows_Attachments=\";#https://SharePointSite.com/Lists/Widgets/Attachments/4/DocumentName.xlsx;#\"\r\n\r\n             //Todo Check to see if there is any value in this option\r\n             3. {string} NOTE: We don't currently handle this format.\r\n             CAMLQueryOptions\r\n             <IncludeAttachmentUrls>TRUE</IncludeAttachmentUrls>\r\n             <IncludeAttachmentVersion>TRUE</IncludeAttachmentVersion>\r\n\r\n             Format\r\n             ;#[ListUrl]/Attachments/[ListItemId]/[FileName];#[AttachmentGUID],[Version Number];#\r\n\r\n             Example:\r\n             ows_Attachments=\";#https://SharePointSite.com/Lists/Widgets/Attachments/4/DocumentName.xlsx;#{4378D394-8601-480D-ABD0-0A0505E726FB},1;#\"\r\n             */\r\n            if (!isNaN(str)) {\r\n                /** Value is a number current stored as a string */\r\n                let int = parseInt(str);\r\n                if (int > 0) {\r\n                    return int;\r\n                } else {\r\n                    return '';\r\n                }\r\n            } else {\r\n                /** Split into an array of attachment URLs */\r\n                return this.jsChoiceMulti(str);\r\n            }\r\n        }\r\n\r\n        jsBoolean(str: string): boolean {\r\n            /** SharePoint uses different string representations for booleans in different places so account for each */\r\n            return str === '1' || str === 'True' || str === 'TRUE';\r\n        }\r\n\r\n        jsCalc(str: string): any {\r\n            if (str.length === 0) {\r\n                return null;\r\n            } else {\r\n                let thisCalc = str.split(';#');\r\n                // The first value will be the calculated column value type, the second will be the value\r\n                return this.parseStringValue(thisCalc[1], thisCalc[0]);\r\n            }\r\n        }\r\n\r\n        jsChoiceMulti(str: string): string[] {\r\n            if (str.length === 0) {\r\n                return [];\r\n            } else {\r\n                let thisChoiceMultiObject = [];\r\n                let thisChoiceMulti = str.split(';#');\r\n                for (let i = 0; i < thisChoiceMulti.length; i++) {\r\n                    if (thisChoiceMulti[i].length !== 0) {\r\n                        thisChoiceMultiObject.push(thisChoiceMulti[i]);\r\n                    }\r\n                }\r\n                return thisChoiceMultiObject;\r\n            }\r\n        }\r\n\r\n        jsDate(str: string): Date {\r\n            if (!str) {\r\n                return null;\r\n            } else {\r\n                /** Replace dashes with slashes and the \"T\" deliminator with a space if found */\r\n                let dt = str.split(\"T\")[0] !== str ? str.split(\"T\") : str.split(\" \");\r\n                let d = dt[0].split(\"-\");\r\n                let t = dt[1].split(\":\");\r\n                let t3 = t[2].split(\"Z\");\r\n                return new Date(d[0], (d[1] - 1), d[2], t[0], t[1], t3[0]);\r\n            }\r\n        }\r\n\r\n        jsFloat(str: string): number {\r\n            if (!str) {\r\n                return str;\r\n            } else {\r\n                return parseFloat(str);\r\n            }\r\n        }\r\n\r\n        jsInt(str: string): number {\r\n            if (!str) {\r\n                return str;\r\n            } else {\r\n                return parseInt(str, 10);\r\n            }\r\n        }\r\n\r\n        jsLookup(str: string, options?: Object): ILookup<any> {\r\n            if (str.length === 0) {\r\n                return null;\r\n            } else {\r\n                //Send to constructor\r\n                return this.apLookupFactory.create(str, options);\r\n            }\r\n        }\r\n\r\n        jsLookupMulti(str: string, options?: Object): ILookup<any>[] {\r\n            if (str.length === 0) {\r\n                return [];\r\n            } else {\r\n                let thisLookupMultiObject = [];\r\n                let thisLookupMulti = str.split(';#');\r\n                for (let i = 0; i < thisLookupMulti.length; i = i + 2) {\r\n                    /** Ensure a lookup id is present before attempting to push a new lookup */\r\n                    if (thisLookupMulti[i]) {\r\n                        let thisLookup = this.jsLookup(thisLookupMulti[i] + ';#' + thisLookupMulti[i + 1], options);\r\n                        thisLookupMultiObject.push(thisLookup);\r\n                    }\r\n                }\r\n                return thisLookupMultiObject;\r\n            }\r\n        }\r\n\r\n        jsObject(str: string): Object {\r\n            if (!str) {\r\n                return str;\r\n            } else {\r\n                /** Ensure JSON is valid and if not throw error with additional detail */\r\n                let json = null;\r\n                try {\r\n                    json = JSON.parse(str);\r\n                }\r\n                catch (err) {\r\n                    console.error('Invalid JSON: ', str);\r\n                }\r\n                return json;\r\n            }\r\n        }\r\n\r\n        jsString(str: string): string {\r\n            return str;\r\n        }\r\n\r\n        jsUser(str: string): IUser {\r\n            if (str.length === 0) {\r\n                return null;\r\n            }\r\n            //Send to constructor\r\n            return this.apUserFactory.create(str);\r\n        }\r\n\r\n        jsUserMulti(str: string): IUser[] {\r\n            if (str.length === 0) {\r\n                return [];\r\n            } else {\r\n                let thisUserMultiObject = [];\r\n                let thisUserMulti = str.split(';#');\r\n                for (let i = 0; i < thisUserMulti.length; i = i + 2) {\r\n                    let thisUser = this.jsUser(thisUserMulti[i] + ';#' + thisUserMulti[i + 1]);\r\n                    thisUserMultiObject.push(thisUser);\r\n                }\r\n                return thisUserMultiObject;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apDecodeService:parseFieldVersions\r\n         * @methodOf angularPoint.apDecodeService\r\n         * @description\r\n         * Takes an XML response from SharePoint webservice and returns an array of field versions.\r\n         *\r\n         * @param {xml} responseXML Returned XML from web service call.\r\n         * @param {object} fieldDefinition Field definition from the model.\r\n         *\r\n         * @returns {FieldVersionCollection} FieldVersionCollection object with all versions included.\r\n         */\r\n        parseFieldVersions(responseXML: XMLDocument, fieldDefinition: IFieldDefinition): FieldVersionCollection {\r\n            // let versions = {};\r\n            let xmlVersions = $(responseXML).find('Version');\r\n            let versionCount = xmlVersions.length;\r\n\r\n            let fieldVersionCollection = new ap.FieldVersionCollection(fieldDefinition);\r\n\r\n            _.each(xmlVersions, (xmlVersion, index) => {\r\n\r\n                /** Bug in SOAP Web Service returns time in UTC time for version history\r\n                 *  Details: https://spservices.codeplex.com/discussions/391879\r\n                 */\r\n                let utcDate = this.parseStringValue($(xmlVersion).attr('Modified'), 'DateTime');\r\n\r\n                /** Parse the xml and create a representation of the version as a js object */\r\n                let editor = this.parseStringValue($(xmlVersion).attr('Editor'), 'User');\r\n                /** Turn the SharePoint formatted date into a valid date object */\r\n                let modified = this.convertUTCDateToLocalDate(utcDate);\r\n                /** Properly format field based on definition from model */\r\n                let value = this.parseStringValue($(xmlVersion).attr(fieldDefinition.staticName), fieldDefinition.objectType);\r\n                let version = versionCount - index;\r\n\r\n                /** Add each distict version to the version collection */\r\n                fieldVersionCollection.addVersion(editor, modified, value, version);\r\n\r\n            });\r\n\r\n            return fieldVersionCollection;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apDecodeService:parseStringValue\r\n         * @methodOf angularPoint.apDecodeService\r\n         * @description\r\n         * Converts a SharePoint string representation of a field into the correctly formatted JavaScript version\r\n         * based on object type.  A majority of this code is directly taken from Marc Anderson's incredible\r\n         * [SPServices](http://spservices.codeplex.com/) project but it needed some minor tweaking to work here.\r\n         * @param {string} str SharePoint string representing the value.\r\n         * @param {string} [objectType='Text'] The type based on field definition.  See\r\n         * See [List.customFields](#/api/List.FieldDefinition) for additional info on how to define a field type.\r\n         * @param {object} [options] Options to pass to the object constructor.\r\n         * @param {object} [options.entity] Reference to the parent list item which can be used by child constructors.\r\n         * @param {object} [options.propertyName] Name of property on the list item.\r\n         * @returns {*} The newly instantiated JavaScript value based on field type.\r\n         */\r\n        parseStringValue(str: string, objectType?: string, options?: { entity: Object; propertyName: string; }): any {\r\n\r\n            let unescapedValue = _.unescape(str);\r\n\r\n            let colValue;\r\n\r\n            switch (objectType) {\r\n                case 'Attachments':\r\n                    colValue = this.jsAttachments(unescapedValue);\r\n                    break;\r\n                case 'Boolean':\r\n                    colValue = this.jsBoolean(unescapedValue);\r\n                    break;\r\n                case 'Calculated': // Formatted like type;#value so we break it apart and then pass back in to format correctly\r\n                    colValue = this.jsCalc(unescapedValue);\r\n                    break;\r\n                case 'datetime': // For calculated columns, stored as datetime;#value\r\n                case 'DateTime':\r\n                    // Dates have dashes instead of slashes: ows_Created='2009-08-25 14:24:48'\r\n                    colValue = this.jsDate(unescapedValue);\r\n                    break;\r\n                case 'Lookup':\r\n                    colValue = this.jsLookup(unescapedValue, options);\r\n                    break;\r\n                case 'User':\r\n                    colValue = this.jsUser(unescapedValue);\r\n                    break;\r\n                case 'LookupMulti':\r\n                    colValue = this.jsLookupMulti(unescapedValue, options);\r\n                    break;\r\n                case 'UserMulti':\r\n                    colValue = this.jsUserMulti(unescapedValue);\r\n                    break;\r\n                case 'Integer':\r\n                case 'Counter': // Only really used for the ID field\r\n                    colValue = this.jsInt(unescapedValue);\r\n                    break;\r\n                case 'Number':\r\n                case 'Currency':\r\n                case 'float': // For calculated columns, stored as float;#value\r\n                case 'Float':\r\n                    colValue = this.jsFloat(unescapedValue);\r\n                    break;\r\n                case 'MultiChoice':\r\n                    colValue = this.jsChoiceMulti(unescapedValue);\r\n                    break;\r\n                case 'JSON': // Not a true SharePoint field type but acts as a decorator for Note\r\n                    colValue = this.jsObject(unescapedValue);\r\n                    break;\r\n                case 'Choice':\r\n                case 'HTML':\r\n                case 'Note':\r\n                default:\r\n                    // All other objectTypes will be simple strings\r\n                    colValue = this.jsString(unescapedValue);\r\n                    break;\r\n            }\r\n            return colValue;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apDecodeService:parseXMLEntity\r\n         * @methodOf angularPoint.apDecodeService\r\n         * @description\r\n         * Convert an XML list item into a JS object using the fields defined in the model for the given list item.\r\n         * @param {object} xmlEntity XML Object.\r\n         * @param {object} options Configuration options.\r\n         * @param {string} options.mapping Mapping of fields we'd like to extend on our JS object.\r\n         * @param {boolean} [options.includeAllAttrs=false] If true, return all attributes, regardless whether\r\n         * @param {boolean} [options.removeOws=true] Specifically for GetListItems, if true, the leading ows_ will be removed.\r\n         * @returns {object} New entity using the factory on the model.\r\n         */\r\n        parseXmlEntity<T extends ListItem<any>>(xmlEntity: Element, { mapping, includeAllAttrs = false, removeOws = true }: IParseXmlEntityOptions) {\r\n            let entity = {};\r\n            let rowAttrs = xmlEntity.attributes;\r\n\r\n            /** Bring back all mapped columns, even those with no value */\r\n            _.each(mapping, (fieldDefinition) => {\r\n                entity[fieldDefinition.mappedName] = this.apFieldService.getDefaultValueForType(fieldDefinition.objectType);\r\n            });\r\n\r\n            /** Parse through the element's attributes */\r\n            _.each(rowAttrs, (attr) => {\r\n                let thisAttrName = attr.name;\r\n                let thisMapping = mapping[thisAttrName];\r\n                let thisObjectName = typeof thisMapping !== 'undefined' ? thisMapping.mappedName : removeOws ? thisAttrName.split('ows_')[1] : thisAttrName;\r\n                let thisObjectType = typeof thisMapping !== 'undefined' ? thisMapping.objectType : undefined;\r\n                if (includeAllAttrs || thisMapping !== undefined) {\r\n                    entity[thisObjectName] = this.parseStringValue(attr.value, thisObjectType, {\r\n                        entity: entity,\r\n                        propertyName: thisObjectName\r\n                    });\r\n                }\r\n\r\n            });\r\n            return entity;\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apDecodeService:processListItems\r\n         * @methodOf angularPoint.apDecodeService\r\n         * @description\r\n         * Post processing of data after returning list items from server.  Returns a promise that resolves with\r\n         * the processed entities.  Promise allows us to batch conversions of large lists to prevent ui slowdowns.\r\n         * @param {object} model Reference to allow updating of model.\r\n         * @param {object} query Reference to the query responsible for requesting entities.\r\n         * @param {xml} responseXML Resolved promise from SPServices web service call.\r\n         * @param {object} [options] Optional configuration object.\r\n         * @param {boolean} [options.includeAllAttrs=false] If true, return all attributes, regardless whether\r\n         * they are mapped.\r\n         * @param {string} [options.filter='z:row'] XML filter string used to find the elements to iterate over.\r\n         * @param {Array} [options.mapping=model.list.mapping] Field definitions, typically stored on the model.\r\n         * @param {Array} [options.target=model.getCache()] Optionally pass in an Indexed Cache instead of using the defaul cache.\r\n         * @returns {Object} Inedexed Cache.\r\n         */\r\n        processListItems<T extends ListItem<any>>(model: Model, query: IQuery<T>, responseXML: XMLDocument, {\r\n            includeAllAttrs = false,\r\n            filter = 'z:row',\r\n            mapping = model.list.mapping,\r\n            target = model.getCache<T>()\r\n        } = {}): IndexedCache<T> {\r\n\r\n            /** Map returned XML to JS objects based on mapping from model */\r\n            let filteredNodes = this.apXMLToJSONService.filterNodes(responseXML, filter);\r\n\r\n            /** Prepare constructor for XML entities with references to the query and cached container */\r\n            let listItemProvider = this.createListItemProvider<T>(model, query, target);\r\n\r\n            /** Convert XML entities into JS objects */\r\n            let parsedEntities = this.xmlToJson(filteredNodes, { mapping, includeAllAttrs });\r\n\r\n            /** Instantiate each list list item with factory on model and add to cache */\r\n            _.each(parsedEntities, (rawListItemObject: IUninstantiatedListItem) => {\r\n                listItemProvider(rawListItemObject);\r\n            });\r\n\r\n            return target;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apDecodeService:xmlToJson\r\n         * @methodOf angularPoint.apDecodeService\r\n         * @description\r\n         * Converts an XML node set to Javascript object array. This is a modified version of the SPServices\r\n         * \"SPXmlToJson\" function.\r\n         * @param {array} xmlEntities [\"z:rows\"] XML rows that need to be parsed.\r\n         * @param {object} options Options object.\r\n         * @param {IListFieldMapping} options.mapping [columnName: \"mappedName\", objectType: \"objectType\"]\r\n         * @param {boolean} [options.includeAllAttrs=false] If true, return all attributes, regardless whether\r\n         * they are mapped.\r\n         * @param {boolean} [options.removeOws=true] Specifically for GetListItems, if true, the leading ows_ will\r\n         * be stripped off the field name.\r\n         * @returns {object[]} An array of JavaScript objects.\r\n         */\r\n        xmlToJson<T extends ListItem<any>>(xmlEntities: JQuery, {\r\n            mapping,\r\n            includeAllAttrs = false,\r\n            removeOws = true\r\n        }: IXMLToJsonOptions<T>): Object[] {\r\n            let parseOptions = { mapping, includeAllAttrs, removeOws }\r\n            return _.map(xmlEntities, (xmlEntity) => {\r\n                return this.parseXmlEntity(xmlEntity, parseOptions);\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**********************PRIVATE*********************/\r\n\r\n\r\n\r\n    interface IXMLToJsonOptions<T extends ListItem<any>> extends IExecuteQueryOptions {\r\n        includeAllAttrs?: boolean;\r\n        listItemProvider?: Function;\r\n        mapping: IListFieldMapping;\r\n        removeOws?: boolean;\r\n        target?: IndexedCache<T>;\r\n    }\r\n\r\n    interface IParseXmlEntityOptions{\r\n        mapping: IListFieldMapping;\r\n        includeAllAttrs?: boolean;\r\n        removeOws?: boolean;\r\n    }\r\n\r\n    interface IProcessListItemsOptions<T extends ListItem<any>>{\r\n        includeAllAttrs?: boolean;\r\n        filter?: string;\r\n        mapping: IListFieldMapping;\r\n        target?: IndexedCache<T>\r\n    }\r\n\r\n\r\n    angular.module('angularPoint')\r\n        .service('apDecodeService', DecodeService)\r\n\r\n}\r\n","/// <reference path=\"../app.module.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n\r\n    export class EncodeService {\r\n        savedTimeZone;\r\n        static $inject = ['apUtilityService', 'SPServices'];\r\n\r\n        constructor(private apUtilityService: UtilityService, private SPServices) {\r\n\r\n        }\r\n\r\n        /**\r\n         * Converts an array of selected values into a SharePoint MultiChoice string\r\n         * @param {string[]} arr\r\n         * @returns {string}\r\n         */\r\n        choiceMultiToString(choices: string[]): string {\r\n            var str = '';\r\n            var delim = ';#';\r\n\r\n            if (choices.length > 0) {\r\n                /** String is required to begin with deliminator */\r\n                str += delim;\r\n                \r\n                /** Append each item in the supplied array followed by deliminator */\r\n                for (let choice of choices) {\r\n                    str += choice + delim;\r\n                }\r\n\r\n            }\r\n            return str;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apEncodeService:createValuePair\r\n         * @methodOf angularPoint.apEncodeService\r\n         * @description\r\n         * Uses a field definition from a model to properly format a value for submission to SharePoint.  Typically\r\n         * used prior to saving a list item, we iterate over each of the non-readonly properties defined in the model\r\n         * for a list item and convert those value into value pairs that we can then hand off to SPServices.\r\n         * @param {object} fieldDefinition The field definition, typically defined in the model.\r\n         * <pre>\r\n         * {\r\n             *  staticName: \"Title\",\r\n             *  objectType: \"Text\",\r\n             *  mappedName: \"lastName\",\r\n             *  readOnly:false\r\n             * }\r\n         * </pre>\r\n         * @param {*} value Current field value.\r\n         * @returns {Array} [fieldName, fieldValue]\r\n         */\r\n        createValuePair(fieldDefinition: IFieldDefinition, value: any): [string, string] {\r\n            var encodedValue = this.encodeValue(fieldDefinition.objectType, value);\r\n            return [fieldDefinition.staticName, encodedValue];\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apEncodeService:encodeValue\r\n         * @methodOf angularPoint.apEncodeService\r\n         * @param {string} fieldType One of the valid field types.\r\n         * @param {*} value Value to be encoded.\r\n         * @returns {string} Encoded value ready to be sent to the server.\r\n         */\r\n        encodeValue(fieldType: string, value: any): string {\r\n            var str: string = '';\r\n            /** Only process if note empty, undefined, or null.  Allow false. */\r\n            if (value !== '' && !_.isUndefined(value) && !_.isNull(value)) {\r\n                switch (fieldType) {\r\n                    case 'Lookup':\r\n                    case 'User':\r\n                        if (value.lookupId) {\r\n                            /** Only include lookupValue if defined */\r\n                            str = value.lookupId + ';#' + (value.lookupValue || '');\r\n                        }\r\n                        break;\r\n                    case 'LookupMulti':\r\n                    case 'UserMulti':\r\n                        str = this.stringifySharePointMultiSelect(value, 'lookupId');\r\n                        break;\r\n                    case 'MultiChoice':\r\n                        str = this.choiceMultiToString(value);\r\n                        break;\r\n                    case 'Boolean':\r\n                        str = value ? \"1\" : \"0\";\r\n                        break;\r\n                    case 'DateTime':\r\n                        //A string date in ISO8601 format, e.g., '2013-05-08T01:20:29Z-05:00'\r\n                        str = this.stringifySharePointDate(value);\r\n                        break;\r\n                    case 'JSON':\r\n                        str = JSON.stringify(value);\r\n                        break;\r\n                    case 'HTML':\r\n                    case 'Note':\r\n                    default:\r\n                        str = value;\r\n                }\r\n            }\r\n            if (_.isString(str)) {\r\n                /** Ensure we encode before sending to server (replace \", <, >)*/\r\n                str = this.SPServices.encodeXml(str);\r\n            }\r\n            return str;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apEncodeService:generateValuePairs\r\n         * @methodOf angularPoint.apEncodeService\r\n         * @description\r\n         * Typically used to iterate over the non-readonly field definitions stored in a model and convert a\r\n         * given list item entity into value pairs that we can pass to SPServices for saving.\r\n         * @param {Array} fieldDefinitions Definitions from the model.\r\n         * @param {object} listItem list item that we'll attempt to iterate over to find the properties that we need to\r\n         * save it to SharePoint.\r\n         * @returns {[string, string][]} Value pairs of all non-readonly fields.\r\n         * @example\r\n         * [[fieldName1, fieldValue1], [fieldName2, fieldValue2], ...]\r\n         */\r\n        generateValuePairs(fieldDefinitions: IFieldDefinition[], listItem: ListItem<any>): [string, string][] {\r\n            var pairs = [];\r\n            _.each(fieldDefinitions, (field) => {\r\n                /** Check to see if item contains data for this field */\r\n                if (_.has(listItem, field.mappedName)) {\r\n                    pairs.push(this.createValuePair(field, listItem[field.mappedName]));\r\n                }\r\n            });\r\n            return pairs;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apEncodeService:stringifySharePointDate\r\n         * @methodOf angularPoint.apEncodeService\r\n         * @description\r\n         * Converts a JavaScript date into a modified ISO8601 date string using the TimeZone\r\n         * offset for the current user.\r\n         * @example\r\n         * <pre>'2014-05-08T08:12:18Z-07:00'</pre>\r\n         * @param {Date} date Valid JS date.\r\n         * @returns {string} ISO8601 date string.\r\n         */\r\n        stringifySharePointDate(date: Date | string): string {\r\n            var jsDate: Date;\r\n            if (!_.isDate(date) && _.isString(date) && date.split('-').length === 3) {\r\n                /** Date string formatted YYYY-MM-DD */\r\n                var dateComponents = date.split('-');\r\n                jsDate = new Date(parseInt(dateComponents[0]), parseInt(dateComponents[1]) - 1, parseInt(dateComponents[2]), 0, 0, 0);\r\n            } else if (!_.isDate(date)) {\r\n                throw new Error('Invalid Date Provided: ' + date.toString());\r\n            } else {\r\n                jsDate = date;\r\n            }\r\n\r\n            var dateString = '';\r\n            dateString += jsDate.getFullYear();\r\n            dateString += '-';\r\n            dateString += this.apUtilityService.doubleDigit(jsDate.getMonth() + 1);\r\n            dateString += '-';\r\n            dateString += this.apUtilityService.doubleDigit(jsDate.getDate());\r\n            dateString += 'T';\r\n            dateString += this.apUtilityService.doubleDigit(jsDate.getHours());\r\n            dateString += ':';\r\n            dateString += this.apUtilityService.doubleDigit(jsDate.getMinutes());\r\n            dateString += ':';\r\n            dateString += this.apUtilityService.doubleDigit(jsDate.getSeconds());\r\n            dateString += 'Z-';\r\n\r\n            if (!this.savedTimeZone) {\r\n                //Get difference between UTC time and local time in minutes and convert to hours\r\n                //Store so we only need to do this once\r\n                this.savedTimeZone = new Date().getTimezoneOffset() / 60;\r\n            }\r\n            dateString += this.apUtilityService.doubleDigit(this.savedTimeZone);\r\n            dateString += ':00';\r\n            return dateString;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apEncodeService:stringifySharePointMultiSelect\r\n         * @methodOf angularPoint.apEncodeService\r\n         * @description\r\n         * Turns an array of, typically {lookupId: someId, lookupValue: someValue}, objects into a string\r\n         * of delimited id's that can be passed to SharePoint for a multi select lookup or multi user selection\r\n         * field.  SharePoint doesn't need the lookup values so we only need to pass the ID's back.\r\n         *\r\n         * @param {object[]} multiSelectValue Array of {lookupId: #, lookupValue: 'Some Value'} objects.\r\n         * @param {string} [idProperty='lookupId'] Property name where we'll find the ID value on each of the objects.\r\n         * @param {string} [valueProperty='lookupValue'] Property name where we'll find the value for this object.\r\n         * @returns {string} Need to format string of id's in following format [ID0];#;#[ID1];#;#[ID1]\r\n         */\r\n        stringifySharePointMultiSelect(multiSelectValue: ILookup<any>[], idProperty = 'lookupId', valueProperty = 'lookupValue'): string {\r\n            var stringifiedValues = '';\r\n            var idProp = idProperty || 'lookupId';\r\n            var valProp = valueProperty || 'lookupValue';\r\n            _.each(multiSelectValue, function (lookupObject, iteration) {\r\n                /** Need to format string of id's in following format [ID0];#[VAL0];#[ID1];#[VAL1] */\r\n                stringifiedValues += lookupObject[idProp] + ';#' + (lookupObject[valProp] || '');\r\n                /** Append delim after all but last because we don't want trailing ';#' at end of string */\r\n                if (iteration < (multiSelectValue.length - 1)) {\r\n                    stringifiedValues += ';#';\r\n                }\r\n            });\r\n            return stringifiedValues;\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name angularPoint.apEncodeService\r\n     * @description\r\n     * Processes JavaScript objects and converts them to a format SharePoint expects.\r\n     *\r\n     * @requires angularPoint.apUtilityService\r\n     */\r\n    angular.module('angularPoint')\r\n        .service('apEncodeService', EncodeService);\r\n}\r\n","/// <reference path=\"../app.module.ts\" />\r\n\r\nmodule ap {\r\n\r\n    function exceptionLoggingService($log, $injector) {\r\n        function error(exception: Error, cause: string) {\r\n\r\n            /** Need to inject otherwise get circular dependency when using dependency injection */\r\n            var apLogger: ILogger = $injector.get('apLogger');\r\n            // now try to log the error to the server side.\r\n            apLogger.exception(exception, cause);\r\n\r\n            // preserve the default behaviour which will log the error\r\n            // to the console, and allow the application to continue running.\r\n            $log.error.apply($log, arguments);\r\n\r\n        }\r\n\r\n        return error;\r\n    }\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name angularPoint.$exceptionHandler\r\n     * @description\r\n     * Replaces the default angular implementation and handles logging errors to the apLogger service.\r\n     * @requires angularPoint.apLogger\r\n     */    \r\n    angular\r\n        .module('angularPoint')\r\n\t\t.factory('$exceptionHandler', exceptionLoggingService);\r\n\r\n}\r\n","/// <reference path=\"../app.module.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n\r\n    export class ExportService {\r\n        static $inject = ['apUtilityService', 'apFormattedFieldValueService'];\r\n\r\n        constructor(private apUtilityService, private apFormattedFieldValueService) {\r\n\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apExportService:generateCSV\r\n         * @methodOf angularPoint.apExportService\r\n         * @description\r\n         * Converts an array of objects into a parsed array of arrays based on a field config object.\r\n         * @param {object[]} entities Array of objects to convert.\r\n         * @param {object|string[]} fields Array of objects defining the fields to parse.  Can also pass in strings representing the name of the field which will then be parsed based on field type.\r\n         * FieldDefinition:\r\n         * {string} object.field Property name on the object that we want to parse.\r\n         * {string} [object.label=object.field capitalized] Column Label\r\n         * {function} [object.getVal] Custom function that overrides the default method of parsing based on field type.\r\n         * @param {object} [options] Optional config settings.\r\n         * @param {string} [options.delim='; '] Delimiter used to separate fields that potentially contain multiple values that will be concatenated into a string.\r\n         * @returns {array[]} Return array of arrays, with the first array being the column names and every subsequent array representing a row in the csv dataset.\r\n         * @example\r\n         * <pre>\r\n         * var customDelimiter = ' | ';\r\n         * var saveCSV = function() {\r\n             *    var parsedCSV = apExportService.generateCSV(entities, [\r\n             *     //Field definition\r\n             *     { label: 'ID', field: 'id' },\r\n             *     //Field as simple string\r\n             *     'title',\r\n             *     'project',\r\n             *     { label: 'Project:ID', field: 'project.lookupId' },\r\n             *     { label: 'Type', field: 'eventType' },\r\n             *     { label: 'Start Date', field: 'startDate' },\r\n             *     { label: 'End Date', field: 'endDate' },\r\n             *     'location',\r\n             *     'description',\r\n             *     //Field definition with custom parse logic\r\n             *     { label: 'Comments', field: 'comments', stringify: function (comments) {\r\n             *       var str = '';\r\n             *       _.each(comments, function (comment, i) {\r\n             *         if (i > 0) {\r\n             *           str += '\\n';\r\n             *         }\r\n             *         str += comment.text + '\\n';\r\n             *       });\r\n             *       return str;\r\n             *     }}\r\n             *   ]);\r\n             *\r\n             *   //Save to user's machine\r\n             *   apExportService.saveCSV(parsedCSV, 'MyFile', {delim: customDelimiter});\r\n             * }\r\n         * </pre>\r\n         *\r\n         */\r\n        generateCSV(entities: ListItem<any>[], fields: [string[]|Object[]], options?: {delim:string}): string[][] {\r\n            var defaults = {\r\n                    dateFormat: 'json', //Format as JSON date rather than a formal date string\r\n                    delim: '; ',\r\n                    includeTitleRow: true\r\n                },\r\n                opts = _.assign({}, defaults, options),\r\n                entitiesArray = [\r\n                    []\r\n                ];\r\n\r\n            /** Process each of the entities in the data source */\r\n            _.each(entities, (entity, entityIndex) => {\r\n                var entityArray = [];\r\n                /** Process each of the specified fields */\r\n                _.each(fields, (f) => {\r\n\r\n                    /** Handle both string and object definition */\r\n                    var fieldDefinition = _.isString(f) ? {field: f} : f;\r\n\r\n                    /** Split the field name from the property if provided */\r\n                    var fieldComponents = fieldDefinition.field.split('.');\r\n                    var propertyName = fieldComponents[0];\r\n\r\n                    /** First array has the field names */\r\n                    if (entityIndex === 0 && opts.includeTitleRow) {\r\n                        /** Take a best guess if a column label isn't specified by capitalizing and inserting spaces between camel humps*/\r\n                        var label = fieldDefinition.label ?\r\n                            fieldDefinition.label : this.apUtilityService.fromCamelCase(propertyName);\r\n                        entitiesArray[0].push(label);\r\n                    }\r\n\r\n                    var val = '';\r\n\r\n                    if (_.isFunction(fieldDefinition.stringify)) {\r\n                        /** Allows us to override standard field logic for special cases */\r\n                        val = fieldDefinition.stringify(entity[fieldDefinition.field]);\r\n                    } else if (fieldComponents.length > 1) {\r\n                        /** Allow user to specify dot separated property path */\r\n                        if (_.has(entity, fieldDefinition.field)) {\r\n                            val = _.get(entity, fieldDefinition.field).toString();\r\n                        }\r\n                    } else {\r\n                        /** Get the value based on field type defined in the model for the entity*/\r\n                        var modelDefinition = entity.getFieldDefinition(propertyName);\r\n                        val = this.apFormattedFieldValueService.getFormattedFieldValue(\r\n                            entity[fieldDefinition.field],\r\n                            modelDefinition.objectType,\r\n                            opts\r\n                        )\r\n                    }\r\n                    /** Add string to column */\r\n                    entityArray.push(val);\r\n                });\r\n                /** Add row */\r\n                entitiesArray.push(entityArray);\r\n            });\r\n            return entitiesArray;\r\n        }\r\n\r\n        /**\r\n         * @description Replaces commonly-used Windows 1252 encoded chars that do not exist in ASCII or\r\n         *  ISO-8859-1 with ISO-8859-1 cognates.\r\n         * @param {string} text Text to be validated and cleaned.\r\n         * @returns {string}\r\n         */\r\n        replaceWordChars(text: string): string {\r\n            var s = text;\r\n            // smart single quotes and apostrophe\r\n            s = s.replace(/[\\u2018|\\u2019|\\u201A]/g, \"\\'\");\r\n            // smart double quotes\r\n            s = s.replace(/[\\u201C|\\u201D|\\u201E]/g, \"\\\"\");\r\n            // ellipsis\r\n            s = s.replace(/\\u2026/g, \"...\");\r\n            // dashes\r\n            s = s.replace(/[\\u2013|\\u2014]/g, \"-\");\r\n            // circumflex\r\n            s = s.replace(/\\u02C6/g, \"^\");\r\n            // open angle bracket\r\n            s = s.replace(/\\u2039/g, \"<\");\r\n            // close angle bracket\r\n            s = s.replace(/\\u203A/g, \">\");\r\n            // spaces\r\n            s = s.replace(/[\\u02DC|\\u00A0]/g, \" \");\r\n            return s;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apExportService:saveCSV\r\n         * @methodOf angularPoint.apExportService\r\n         * @description\r\n         * Converts an array of arrays into a valid CSV file that is then downloaded to the users machine\r\n         * @requires angularPoint.apExportService:saveFile\r\n         * @param {array[]} data Array of arrays that we'd like to dump to a CSV file and save to the local machine.\r\n         * @param {string} [filename=debug.csv] Optionally name the file.\r\n         * @example\r\n         * <pre>\r\n         * //Lets assume we want to looks at an object that is too big to be easily viewed in the console.\r\n         * apExportService.saveCSV(objectToSave, 'MyFile');\r\n         * //This would download a file named MyFile.csv\r\n         * </pre>\r\n         *\r\n         */\r\n        saveCSV(data: string[][], filename = 'debug.csv'): void {\r\n            var csvString = '';\r\n            _.each(data, function (row) {\r\n                _.each(row, function (column, columnIndex) {\r\n                    var result = column === null ? '' : this.replaceWordChars(column);\r\n                    if (columnIndex > 0) {\r\n                        csvString += ',';\r\n                    }\r\n                    /** Escape single quotes with doubles in within the string */\r\n                    result = result.replace(/\"/g, '\"\"');\r\n\r\n                    /** Surround string with quotes so we can have line breaks */\r\n                    csvString += '\"' + result + '\"';\r\n                });\r\n                csvString += '\\n';\r\n            });\r\n            this.saveFile(csvString, 'csv;charset=utf-8;', filename);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apExportService:saveFile\r\n         * @methodOf angularPoint.apExportService\r\n         * @description\r\n         * Used to convert a JS object or XML document into a file that is then downloaded on the users\r\n         * local machine.  Original work located:\r\n         * [here](http://bgrins.github.io/devtools-snippets/#console-save).\r\n         * @param {object} data JS object that we'd like to dump to a JSON file and save to the local machine.\r\n         * @param {string} fileType Can be either 'xml' or 'json'.\r\n         * @param {string} [filename=debug.json] Optionally name the file.\r\n         * @example\r\n         * <pre>\r\n         * //Lets assume we want to looks at an object that is too big to be easily viewed in the console.\r\n         * apExportService.saveJSON(objectToSave, 'myobject.json');\r\n         * </pre>\r\n         *\r\n         */\r\n        saveFile(data, fileType: string, filename = 'debug.json') {\r\n            if (!data) {\r\n                console.error('apExportService.save' + fileType.toUpperCase() + ': No data');\r\n                return;\r\n            }\r\n\r\n            /** If passed in fileType=\"csv;charset=utf-8;\" we just want to use \"csv\" */\r\n            var fileExtension = fileType.split(';')[0];\r\n\r\n            if (!filename) {\r\n                filename = 'debug.' + fileExtension;\r\n            }\r\n\r\n            if (fileType === 'json' && typeof data === 'object') {\r\n                data = JSON.stringify(data, undefined, 4);\r\n            }\r\n\r\n            var blob = new Blob([data], {type: 'text/' + fileType}),\r\n                e = document.createEvent('MouseEvents'),\r\n                a = document.createElement('a');\r\n\r\n            a.download = filename;\r\n            a.href = window.URL.createObjectURL(blob);\r\n            a.dataset.downloadurl = ['text/' + fileType, a.download, a.href].join(':');\r\n            e.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\r\n            a.dispatchEvent(e);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apExportService:saveJSON\r\n         * @methodOf angularPoint.apExportService\r\n         * @description\r\n         * Simple convenience function that uses angularPoint.apExportService:saveFile to download json to the local machine.\r\n         * @requires angularPoint.apExportService:saveFile\r\n         * @param {object} data JS object that we'd like to dump to a JSON file and save to the local machine.\r\n         * @param {string} [filename=debug.json] Optionally name the file.\r\n         * @example\r\n         * <pre>\r\n         * //Lets assume we want to looks at an object that is too big to be easily viewed in the console.\r\n         * apExportService.saveJSON(objectToSave, 'myobject.json');\r\n         * </pre>\r\n         *\r\n         */\r\n        saveJSON(data: Object, filename = 'debug.json') {\r\n            this.saveFile(data, 'json', filename);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apExportService:saveXML\r\n         * @methodOf angularPoint.apExportService\r\n         * @description\r\n         * Simple convenience function that uses angularPoint.apExportService:saveFile to download xml to the local machine.\r\n         * @requires angularPoint.apExportService:saveFile\r\n         * @param {object} data XML object that we'd like to dump to a XML file and save to the local machine.\r\n         * @param {string} [filename=debug.xml] Optionally name the file.\r\n         * @example\r\n         * <pre>\r\n         * //Lets assume we want to looks at an object that is too big to be easily viewed in the console.\r\n         * apExportService.saveXML(objectToSave, 'myobject.xml');\r\n         * </pre>\r\n         *\r\n         */\r\n        saveXML(data: XMLDocument, filename = 'debug.xml') {\r\n            this.saveFile(data, 'xml', filename);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name angularPoint.apExportService\r\n     * @description\r\n     * Tools to assist with development.\r\n     * @requires angularPoint.apUtilityService\r\n     */\r\n    angular.module('angularPoint')\r\n        .service('apExportService', ExportService);\r\n\r\n}\r\n","/// <reference path=\"../app.module.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n    var service: FieldService, uniqueCount = 0;\r\n\r\n\r\n    interface IFieldType {\r\n        defaultValue: string;\r\n        dynamicMock: Function;\r\n        staticMock: any;\r\n    }\r\n\r\n    export class FieldService {\r\n        fieldTypes;\r\n        constructor() {\r\n            service = this;\r\n            this.fieldTypes = getFieldTypes()\r\n        }\r\n\r\n        \r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apFieldService:getDefaultValueForType\r\n         * @methodOf angularPoint.apFieldService\r\n         * @description\r\n         * Returns the empty value expected for a field type\r\n         * @param {string} fieldType Type of field.\r\n         * @returns {*} Default value based on field type.\r\n         */\r\n        getDefaultValueForType(fieldType: string): any {\r\n            var fieldDefinition = service.getDefinition(fieldType),\r\n                defaultValue;\r\n\r\n            if (fieldDefinition) {\r\n                defaultValue = fieldDefinition.defaultValue;\r\n            }\r\n            return defaultValue;\r\n        }\r\n\r\n        /**\r\n         * Returns an object defining a specific field type\r\n         * @param {string} fieldType\r\n         * @returns {object} fieldTypeDefinition\r\n         */\r\n        getDefinition(fieldType) {\r\n            return service.fieldTypes[fieldType] ? service.fieldTypes[fieldType] : service.fieldTypes['Text'];\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apFieldService:getMockData\r\n         * @methodOf angularPoint.apFieldService\r\n         * @description\r\n         * Can return mock data appropriate for the field type, by default it dynamically generates data but\r\n         * the staticValue param will instead return a hard coded type specific value\r\n         *\r\n         * @requires ChanceJS to produce dynamic data.\r\n         * https://github.com/victorquinn/chancejs\r\n         * @param {string} fieldType Field type from the field definition.\r\n         * @param {object} [options] Optional params.\r\n         * @param {boolean} [options.staticValue=false] Default to dynamically build mock data.\r\n         * @returns {*} mockData\r\n         */\r\n        getMockData(fieldType, options) {\r\n            var mock;\r\n            var fieldDefinition = service.getDefinition(fieldType);\r\n            if (fieldDefinition) {\r\n                if (_.isFunction(window.Chance) && options && !options.staticValue) {\r\n                    /** Return dynamic data if ChanceJS is available and flag isn't set requiring static data */\r\n                    mock = fieldDefinition.dynamicMock(options);\r\n                } else {\r\n                    /** Return static data if the flag is set or ChanceJS isn't available */\r\n                    mock = fieldDefinition.staticMock;\r\n                }\r\n            }\r\n            return mock;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apFieldService:mockPermMask\r\n         * @methodOf angularPoint.apFieldService\r\n         * @description\r\n         * Defaults to a full mask but allows simulation of each of main permission levels\r\n         * @param {object} [options] Options container.\r\n         * @param {string} [options.permissionLevel=FullMask] Optional mask.\r\n         * @returns {string} Values for mask.\r\n         */\r\n        mockPermMask(options?: { permissionLevel: string }) {\r\n            var mask = 'FullMask';\r\n            if (options && options.permissionLevel) {\r\n                mask = options.permissionLevel;\r\n            }\r\n            return service.resolveValueForEffectivePermMask(mask);\r\n        }\r\n        \r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apFieldService:resolveValueForEffectivePermMask\r\n         * @methodOf angularPoint.apFieldService\r\n         * @description\r\n         * Takes the name of a permission mask and returns a permission value which can then be used\r\n         * to generate a permission object using modelService.resolvePermissions(outputfromthis)\r\n         * @param {string} perMask Options:\r\n         *  - AddListItems\r\n         *  - EditListItems\r\n         *  - DeleteListItems\r\n         *  - ApproveItems\r\n         *  - FullMask\r\n         *  - ViewListItems\r\n         * @returns {string} value\r\n         */\r\n        resolveValueForEffectivePermMask(perMask) {\r\n            var permissionValue;\r\n            switch (perMask) {\r\n                case 'AddListItems':\r\n                    permissionValue = 0x0000000000000002;\r\n                    break;\r\n                case 'EditListItems':\r\n                    permissionValue = 0x0000000000000004;\r\n                    break;\r\n                case 'DeleteListItems':\r\n                    permissionValue = 0x0000000000000008;\r\n                    break;\r\n                case 'ApproveItems':\r\n                    permissionValue = 0x0000000000000010;\r\n                    break;\r\n                case 'FullMask':\r\n                    permissionValue = 0x7FFFFFFFFFFFFFFF;\r\n                    break;\r\n                case 'ViewListItems':\r\n                default:\r\n                    permissionValue = 0x0000000000000001;\r\n                    break;\r\n            }\r\n            return permissionValue;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function getFieldTypes() {\r\n        return {\r\n            Text: {\r\n                defaultValue: '',\r\n                staticMock: 'Test String',\r\n                dynamicMock: randomString\r\n            },\r\n            Note: {\r\n                defaultValue: '',\r\n                staticMock: 'This is a sentence.',\r\n                dynamicMock: randomParagraph\r\n            },\r\n            Boolean: {\r\n                defaultValue: null,\r\n                staticMock: true,\r\n                dynamicMock: randomBoolean\r\n            },\r\n            Calculated: {\r\n                defaultValue: null,\r\n                staticMock: 'float;#123.45',\r\n                dynamicMock: randomCalc\r\n            },\r\n            Choice: {\r\n                defaultValue: '',\r\n                staticMock: 'My Choice',\r\n                dynamicMock: randomString\r\n            },\r\n            Counter: {\r\n                defaultValue: null,\r\n                staticMock: getUniqueCounter(),\r\n                dynamicMock: getUniqueCounter\r\n            },\r\n            Currency: {\r\n                defaultValue: null,\r\n                staticMock: 120.50,\r\n                dynamicMock: randomCurrency\r\n            },\r\n            DateTime: {\r\n                defaultValue: null,\r\n                staticMock: new Date(2014, 5, 4, 11, 33, 25),\r\n                dynamicMock: randomDate\r\n            },\r\n            Integer: {\r\n                defaultValue: null,\r\n                staticMock: 14,\r\n                dynamicMock: randomInteger\r\n            },\r\n            JSON: {\r\n                defaultValue: '',\r\n                staticMock: [\r\n                    { id: 1, title: 'test' },\r\n                    { id: 2 }\r\n                ],\r\n                dynamicMock: randomString\r\n            },\r\n            Lookup: {\r\n                defaultValue: '',\r\n                staticMock: { lookupId: 49, lookupValue: 'Static Lookup' },\r\n                dynamicMock: randomLookup\r\n            },\r\n            LookupMulti: {\r\n                defaultValue: [],\r\n                staticMock: [\r\n                    { lookupId: 50, lookupValue: 'Static Multi 1' },\r\n                    { lookupId: 51, lookupValue: 'Static Multi 2' }\r\n                ],\r\n                dynamicMock: randomLookupMulti\r\n            },\r\n            Mask: {\r\n                defaultValue: service.mockPermMask(),\r\n                staticMock: service.mockPermMask(),\r\n                dynamicMock: service.mockPermMask\r\n            },\r\n            MultiChoice: {\r\n                defaultValue: [],\r\n                staticMock: ['A Good Choice', 'A Bad Choice'],\r\n                dynamicMock: randomStringArray\r\n            },\r\n            User: {\r\n                defaultValue: '',\r\n                staticMock: { lookupId: 52, lookupValue: 'Static User' },\r\n                dynamicMock: randomUser\r\n            },\r\n            UserMulti: {\r\n                defaultValue: [],\r\n                staticMock: [\r\n                    { lookupId: 53, lookupValue: 'Static User 1' },\r\n                    { lookupId: 54, lookupValue: 'Static User 2' }\r\n                ],\r\n                dynamicMock: randomUserMulti\r\n            }\r\n        }\r\n    }\r\n\r\n    function getUniqueCounter() {\r\n        uniqueCount++;\r\n        return uniqueCount;\r\n    }\r\n\r\n    function randomBoolean() {\r\n        return chance.bool();\r\n    }\r\n\r\n    function randomCalc() {\r\n        return 'float;#' + chance.floating({ min: 0, max: 10000 });\r\n    }\r\n\r\n    function randomString() {\r\n        return chance.word() + ' ' + chance.word();\r\n    }\r\n\r\n    function randomStringArray() {\r\n        var randomArr = [];\r\n        /** Create a random (1-4) number of strings and add to array */\r\n        _.times(_.random(1, 4), function() {\r\n            randomArr.push(randomString());\r\n        });\r\n        return randomArr;\r\n    }\r\n\r\n    function randomParagraph() {\r\n        return chance.paragraph();\r\n    }\r\n\r\n    function randomCurrency() {\r\n        return parseInt(_.random(10000000, true) * 100) / 100;\r\n    }\r\n\r\n    function randomDate() {\r\n        return chance.date();\r\n    }\r\n\r\n    function randomInteger() {\r\n        return chance.integer();\r\n    }\r\n\r\n\r\n    function randomLookup() {\r\n        return {\r\n            lookupId: getUniqueCounter(),\r\n            lookupValue: chance.word()\r\n        };\r\n    }\r\n\r\n    function randomUser() {\r\n        return {\r\n            lookupId: getUniqueCounter(),\r\n            lookupValue: chance.name()\r\n        };\r\n    }\r\n\r\n    function randomLookupMulti() {\r\n        var mockData = [];\r\n        _.each(_.random(10), function() {\r\n            mockData.push(randomLookup());\r\n        });\r\n        return mockData;\r\n    }\r\n\r\n    function randomUserMulti() {\r\n        var mockData = [];\r\n        _.each(_.random(10), function() {\r\n            mockData.push(randomUser());\r\n        });\r\n        return mockData;\r\n    }\r\n    \r\n    \r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name angularPoint.apFieldService\r\n     * @description\r\n     * Handles the mapping of the various types of fields used within a SharePoint list\r\n     */\r\n    angular.module('angularPoint')\r\n        .service('apFieldService', FieldService);\r\n\r\n}\r\n","/// <reference path=\"../app.module.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n    var service: FormattedFieldValueService, $filter: ng.IFilterService;\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name angularPoint.apFormattedFieldValueService\r\n     * @description\r\n     * Returns the formatted string value for a field based on field type.\r\n     */\r\n    export class FormattedFieldValueService {\r\n        static $inject = ['$filter'];\r\n        constructor(_$filter_) {\r\n            service = this;\r\n            $filter = _$filter_;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apFormattedFieldValueService:getFormattedFieldValue\r\n         * @methodOf angularPoint.apFormattedFieldValueService\r\n         * @param {object|array|string|integer|boolean} prop Target that we'd like to stringify.\r\n         * @param {string} [propertyType='String'] Assumes by default that it's already a string.  Most of the normal field\r\n         * types identified in the model field definitions are supported.\r\n         *\r\n         * - Lookup\r\n         * - User\r\n         * - Boolean\r\n         * - DateTime\r\n         * - Integer\r\n         * - Number\r\n         * - Counter\r\n         * - MultiChoice\r\n         * - UserMulti\r\n         * - LookupMulti\r\n         * @param {object} options Optional config.\r\n         * @param {string} [options.delim=', '] Optional delimiter to split concatenated strings.\r\n         * @param {string} [options.dateFormat='short'] Either 'json' which converts a date into ISO8601 date string\r\n         * or a mask for the angular date filter.\r\n         * @example\r\n         * <pre>\r\n         *  var project = {\r\n         *    title: 'Super Project',\r\n         *   members: [\r\n         *     { lookupId: 12, lookupValue: 'Joe' },\r\n         *     { lookupId: 19, lookupValue: 'Beth' }\r\n         *   ]\r\n         * };\r\n         *\r\n         * var membersAsString = apFormattedFieldValueService:getFormattedFieldValue({\r\n         *    project.members,\r\n         *    'UserMulti',\r\n         *    { delim: ' | '} //Custom Delimiter\r\n         * });\r\n         *\r\n         * // membersAsString = 'Joe | Beth';\r\n         *\r\n         * </pre>\r\n         * @returns {string} Stringified property on the object based on the field type.\r\n         */\r\n        getFormattedFieldValue(prop: any, propertyType: string = 'String', options: { delim?: string; dateFormat?: string } = {}): string {\r\n\r\n            var str: string = '';\r\n            /** Only process if prop is defined */\r\n            if (prop) {\r\n                switch (propertyType) {\r\n                    case 'Boolean':\r\n                        str = service.stringifyBoolean(prop);\r\n                        break;\r\n                    case 'Calculated': // Can be DateTime, Float, or String\r\n                        str = service.stringifyCalc(prop);\r\n                        break;\r\n                    case 'Lookup':\r\n                    case 'User':\r\n                        str = service.stringifyLookup(prop);\r\n                        break;\r\n                    case 'DateTime':\r\n                        str = service.stringifyDate(prop, options.dateFormat);\r\n                        break;\r\n                    case 'Integer':\r\n                    case 'Number':\r\n                    case 'Float':\r\n                    case 'Counter':\r\n                        str = service.stringifyNumber(prop);\r\n                        break;\r\n                    case 'Currency':\r\n                        str = service.stringifyCurrency(prop);\r\n                        break;\r\n                    case 'MultiChoice':\r\n                        str = service.stringifyMultiChoice(prop, options.delim);\r\n                        break;\r\n                    case 'UserMulti':\r\n                    case 'LookupMulti':\r\n                        str = service.stringifyMultiLookup(prop, options.delim);\r\n                        break;\r\n                    default:\r\n                        str = prop;\r\n                }\r\n            }\r\n            return str;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apFormattedFieldValueService:stringifyBoolean\r\n         * @methodOf angularPoint.apFormattedFieldValueService\r\n         * @param {boolean} prop Boolean to stringify.\r\n         * @description\r\n         * Returns the stringified boolean if it is set.\r\n         * @returns {string} Stringified boolean.\r\n         */\r\n        stringifyBoolean(prop: boolean): string {\r\n            var str = '';\r\n            if (_.isBoolean(prop)) {\r\n                str = prop.toString();\r\n            }\r\n            return str;\r\n        }\r\n\r\n        stringifyCalc(prop: any): string {\r\n            if (prop.length === 0) {\r\n                return '';\r\n            } else if (_.isNumber(prop)) {\r\n                return service.getFormattedFieldValue(prop, 'Number');\r\n            } else if (_.isDate(prop)) {\r\n                return service.getFormattedFieldValue(prop, 'DateTime');\r\n            } else {\r\n                return service.getFormattedFieldValue(prop, 'Text');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apFormattedFieldValueService:stringifyCurrency\r\n         * @methodOf angularPoint.apFormattedFieldValueService\r\n         * @description\r\n         * Converts a numeric value into a formatted currency string.\r\n         * @param {number} prop Property on object to parse.\r\n         * @returns {string} Stringified currency.\r\n         */\r\n        stringifyCurrency(prop: number): string {\r\n            return $filter('currency')(prop, '$');\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apFormattedFieldValueService:stringifyDate\r\n         * @methodOf angularPoint.apFormattedFieldValueService\r\n         * @param {date} prop Date object.\r\n         * @param {string} dateFormat Either 'json' which converts a date into ISO8601 date string or a mask for\r\n         * the angular date filter.\r\n         * @description\r\n         * Returns JSON date.\r\n         * @returns {string} JSON date.\r\n         */\r\n        stringifyDate(prop: Date, dateFormat: string = 'short'): string {\r\n            var str = '';\r\n            if (_.isDate(prop)) {\r\n                str = dateFormat === 'json' ? prop.toJSON() : $filter('date')(prop, dateFormat);\r\n            }\r\n            return str;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apFormattedFieldValueService:stringifyLookup\r\n         * @methodOf angularPoint.apFormattedFieldValueService\r\n         * @param {obj} prop Property on object to parse.\r\n         * @description\r\n         * Returns the property.lookupValue if present.\r\n         * @returns {string} Property.lookupValue.\r\n         */\r\n        stringifyLookup(prop: ILookup<any>): string {\r\n            var str = '';\r\n            if (prop && prop.lookupValue) {\r\n                str = prop.lookupValue;\r\n            }\r\n            return str;\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apFormattedFieldValueService:stringifyMultiChoice\r\n         * @methodOf angularPoint.apFormattedFieldValueService\r\n         * @param {string[]} prop Array of selected choices.\r\n         * @param {string} [delim='; '] Custom delimiter used between the concatenated values.\r\n         * @description\r\n         * Converts an array of strings into a single concatenated string.\r\n         * @returns {string} Concatenated string representation.\r\n         */\r\n        stringifyMultiChoice(prop: string[], delim = '; '): string {\r\n            var str = '';\r\n            _.each(prop, function(choice, i) {\r\n                if (i > 0) {\r\n                    str += delim;\r\n                }\r\n                str += choice;\r\n            });\r\n            return str;\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apFormattedFieldValueService:stringifyMultiLookup\r\n         * @methodOf angularPoint.apFormattedFieldValueService\r\n         * @param {object[]} prop Array of lookup objects.\r\n         * @param {string} [delim='; '] Custom delimiter used between the concatenated values.\r\n         * @description\r\n         * Converts an array of selected lookup values into a single concatenated string.\r\n         * @returns {string} Concatenated string representation.\r\n         */\r\n        stringifyMultiLookup(prop: ILookup<any>[], delim = '; '): string {\r\n            var str = '';\r\n            _.each(prop, function(val, valIndex) {\r\n\r\n                /** Add artificial delim */\r\n                if (valIndex > 0) {\r\n                    str += delim;\r\n                }\r\n\r\n                str += service.stringifyLookup(val);\r\n            });\r\n            return str;\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apFormattedFieldValueService:stringifyNumber\r\n         * @methodOf angularPoint.apFormattedFieldValueService\r\n         * @param {number} prop Property on object to parse.\r\n         * @description\r\n         * Converts a number to a string representation.\r\n         * @returns {string} Stringified number.\r\n         */\r\n        stringifyNumber(prop: number): string {\r\n            var str = '';\r\n            if (_.isNumber(prop)) {\r\n                str = prop.toString();\r\n            }\r\n            return str;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    angular\r\n        .module('angularPoint')\r\n        .service('apFormattedFieldValueService', FormattedFieldValueService);\r\n\r\n\r\n}\r\n","/// <reference path=\"../app.module.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n    var deferred: ng.IDeferred<Function>,\r\n        registerCallback: ng.IPromise<Function>;\r\n\r\n    export interface ILogEvent {\r\n        cause?: string;\r\n        event?: string;\r\n        json?: Object;\r\n        message?: string;\r\n        stackTrace?: string[];\r\n        type?: string;\r\n        // initial URL and URL after and routing has settled\r\n        url?: string;\r\n    }\r\n\r\n    export interface ILogger {\r\n        debug(message: string, optionsOverride?: ILogEvent): ng.IPromise<ListItem<any>>;\r\n        error(message: string, optionsOverride?: ILogEvent): ng.IPromise<ListItem<any>>;\r\n        exception(exception, cause?, optionsOverride?: ILogEvent): void;\r\n        info(message: string, optionsOverride?: ILogEvent): ng.IPromise<ListItem<any>>;\r\n        log(message: string, optionsOverride?: ILogEvent): ng.IPromise<ListItem<any>>;\r\n        registerEvent(event: ILogEvent): ng.IPromise<ListItem<any>>;\r\n        subscribe(callback: Function): void;\r\n        warn(message: string, optionsOverride?: ILogEvent): ng.IPromise<ListItem<any>>;\r\n    }\r\n\r\n    export class Logger implements ILogger {\r\n        static $inject = ['$q', '$window', '$log', '$timeout'];\r\n\r\n        constructor($q, private $window, private $log, private $timeout) {\r\n            /** Create a deferred object we can use to delay functionality until log model is registered */\r\n            deferred = $q.defer();\r\n            registerCallback = deferred.promise;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apLogger.debug\r\n         * @methodOf angularPoint.apLogger\r\n         * @param {string} message Message to log.\r\n         * @param {ILogger} [optionsOverride] Override any log options.\r\n         */\r\n        debug(message: string, optionsOverride?: ILogEvent): ng.IPromise<ListItem<any>> {\r\n            let opts = _.assign({\r\n                message: message,\r\n                type: 'debug'\r\n            }, optionsOverride);\r\n\r\n            return this.notify(opts);\r\n        };\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apLogger.error\r\n         * @methodOf angularPoint.apLogger\r\n         * @param {string} message Message to log.\r\n         * @param {ILogger} [optionsOverride] Override any log options.\r\n         */\r\n        error(message: string, optionsOverride?: ILogEvent): ng.IPromise<ListItem<any>> {\r\n            let opts = _.assign({\r\n                message: message,\r\n                type: 'error'\r\n            }, optionsOverride);\r\n\r\n            return this.notify(opts);\r\n        };\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apLogger.exception\r\n         * @methodOf angularPoint.apLogger\r\n         * @param {Error} exception Error which caused event.\r\n         * @param {string} [cause] Angular sometimes provides cause.\r\n         * @param {ILogger} optionsOverride Override any log options.\r\n         */\r\n        exception(exception: Error, cause?, optionsOverride?: ILogEvent): void {\r\n            try {\r\n                // generate a stack trace\r\n                /* global ErrorStackParser:true */\r\n                var stackTrace = ErrorStackParser.parse(exception);\r\n\r\n                this.error(exception.message, _.assign({}, {\r\n                    event: 'exception',\r\n                    stackTrace: stackTrace,\r\n                    cause: (cause || '')\r\n                }, optionsOverride));\r\n\r\n            } catch (loggingError) {\r\n                this.$log.warn('Error server-side logging failed');\r\n                this.$log.log(loggingError);\r\n            }\r\n\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apLogger.info\r\n         * @methodOf angularPoint.apLogger\r\n         * @param {string} message Message to log.\r\n         * @param {ILogger} [optionsOverride] Override any log options.\r\n         */\r\n        info(message: string, optionsOverride?: ILogEvent): ng.IPromise<ListItem<any>> {\r\n            let opts = _.assign({\r\n                message: message,\r\n                type: 'info'\r\n            }, optionsOverride);\r\n\r\n            return this.notify(opts);\r\n        };\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apLogger.log\r\n         * @methodOf angularPoint.apLogger\r\n         * @param {string} message Message to log.\r\n         * @param {ILogger} [optionsOverride] Override any log options.\r\n         */\r\n        log(message: string, optionsOverride?: ILogEvent): ng.IPromise<ListItem<any>> {\r\n            let opts = _.assign({\r\n                message: message,\r\n                type: 'log'\r\n            }, optionsOverride);\r\n\r\n            return this.notify(opts);\r\n        };\r\n\r\n        registerEvent(logEvent: ILogEvent): ng.IPromise<ListItem<any>> {\r\n            return registerCallback.then((callback: Function) => {\r\n                if (_.isFunction(callback)) {\r\n                    return callback(logEvent);\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apLogger.subscribe\r\n         * @methodOf angularPoint.apLogger\r\n         * @param {Function} callback Callend when event occurs.\r\n         * @description Callback fired when log event occurs\r\n         */\r\n        subscribe(callback: Function): void {\r\n            deferred.resolve(callback);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apLogger.warn\r\n         * @methodOf angularPoint.apLogger\r\n         * @param {string} message Message to log.\r\n         * @param {ILogger} [optionsOverride] Override any log options.\r\n         */\r\n        warn(message: string, optionsOverride?: ILogEvent): ng.IPromise<ListItem<any>> {\r\n            let opts = _.assign({\r\n                message: message,\r\n                type: 'warn'\r\n            }, optionsOverride);\r\n\r\n            return this.notify(opts);\r\n        };\r\n\r\n        private notify(options: ILogEvent) {\r\n            // url before navigation\r\n            let url = '1: ' + this.$window.location.href + '\\n';\r\n            return this.$timeout(() => {\r\n                /** Allow navigation to settle before capturing 2nd url */\r\n                url += '2: ' + this.$window.location.href;\r\n                return this.registerEvent(_.assign({}, {url}, options));\r\n            }, 100);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name angularPoint.apLogger\r\n     * @description\r\n     * Common definitions used in the application.\r\n     *\r\n     * HOW TO USE\r\n     * 1. Create a logging model for logs to be stored\r\n     * 2. Ensure everyone has write access to the list\r\n     * 3. Add the model as one of the dependencies in your .run so it'll be instantiated immediately\r\n     * 4. Subscribe to change events from on the model\r\n     *\r\n     *\r\n     * @example\r\n     * <pre>\r\n     * export class Log extends ap.ListItem{\r\n     *     cause: string;\r\n     *     event: string;\r\n     *     formattedStackTrace: string;\r\n     *     json: Object;\r\n     *     message: string;\r\n     *     stackTrace: string[];\r\n     *     type: string;\r\n     *     url: string;\r\n     *     constructor(obj){\r\n     *         _.assign(this, obj);\r\n     *     }\r\n     *     //override the default save and cleanup before actually saving\r\n     *     saveChanges() {\r\n     *          // stringify stacktrace prior to saving so we can display in email notifications\r\n     *          if(this.stackTrace && !this.formattedStackTrace) {\r\n     *          this.formattedStackTrace = this.stackTrace.map(function(sf) {\r\n     *               return sf.toString();\r\n     *           }).join('\\n');\r\n     *         }\r\n     *         return super.saveChanges();\r\n     *     }\r\n     * }\r\n     * var logCounter = 0;\r\n     * var maxLogsPerSesssion = 5;\r\n     * export class LogsModel extends ap.Model{\r\n     *     constructor(apLogger: ap.Logger) {\r\n     *         model = this;\r\n     *         super({\r\n     *             factory: Log,\r\n     *             list: {\r\n     *                 title: 'Logs',\r\n     *                 guid: '{LOG LIST GUID...CHANGE ME}',\r\n     *                 customFields: [\r\n     *                     {staticName: 'Message', objectType: 'Note', mappedName: 'message', readOnly: false},\r\n     *                     {staticName: 'Title', objectType: 'Text', mappedName: 'url', readOnly: false},\r\n     *                     {staticName: 'LogType', objectType: 'Text', mappedName: 'type', readOnly: false},\r\n     *                     {staticName: 'StackTrace', objectType: 'JSON', mappedName: 'stackTrace', readOnly: false},\r\n     *                     {staticName: 'Cause', objectType: 'Text', mappedName: 'cause', readOnly: false},\r\n     *                     {staticName: 'JSON', objectType: 'JSON', mappedName: 'json', readOnly: false},\r\n     *                     {staticName: 'Event', objectType: 'Text', mappedName: 'event', readOnly: false},\r\n     *                     {\r\n     *                         staticName: 'FormattedStackTrace',\r\n     *                         objectType: 'Note',\r\n     *                         mappedName: 'formattedStackTrace',\r\n     *                         readOnly: false,\r\n     *                         description: 'Trace formatted to be readable in email notification.'\r\n     *                     }\r\n     *                 ]\r\n     *             }\r\n     *         });\r\n     *         // Register this model as the list where all logs will be stored\r\n     *         apLogger.subscribe(function (event: ap.ILogEvent) {\r\n     *             // Ensure we keep logging under control, prevents spamming server if loop occurs\r\n     *             if(logCounter < maxLogsPerSesssion) {\r\n     *                 var newLog = model.createEmptyItem(event);\r\n     *                 console.log(newLog);\r\n     *                 newLog.saveChanges();\r\n     *                 logCounter++;\r\n     *             }\r\n     *         });\r\n     *     }\r\n     * }\r\n     *\r\n     * </pre>\r\n     *\r\n     */\r\n    angular\r\n        .module('angularPoint')\r\n        .service('apLogger', Logger);\r\n\r\n}\r\n","/// <reference path=\"../app.module.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n    // Set up SOAP envelope\r\n    class SOAPEnvelope {\r\n        opheader: string;\r\n        opfooter: string;\r\n        header = \"<soap:Envelope xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' \" +\r\n        \"xmlns:xsd='http://www.w3.org/2001/XMLSchema' \" +\r\n        \"xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/'><soap:Body>\";\r\n        footer = \"</soap:Body></soap:Envelope>\";\r\n        payload = \"\";\r\n    }\r\n\r\n    //Definition file taken from SPServices project on GitHub, look at way to use as depency and link to it\r\n    interface SPServicesOptions {\r\n        /** If true, we'll cache the XML results with jQuery's .data() function */\r\n        cacheXML?: boolean;\r\n        /** The Web Service operation */\r\n        operation: string;\r\n        /** URL of the target Web */\r\n        webURL?: string;\r\n        /** true to make the view the default view for the list */\r\n        makeViewDefault?: boolean;\r\n\r\n        // For operations requiring CAML, these options will override any abstractions\r\n\r\n        /** View name in CAML format. */\r\n        viewName?: string;\r\n        /** Query in CAML format */\r\n        CAMLQuery?: string;\r\n        /** View fields in CAML format */\r\n        CAMLViewFields?: string;\r\n        /** Row limit as a string representation of an integer */\r\n        CAMLRowLimit?: number;\r\n        /** Query options in CAML format */\r\n        CAMLQueryOptions?: string;\r\n\r\n        // Abstractions for CAML syntax\r\n\r\n        /** Method Cmd for UpdateListItems */\r\n        batchCmd?: string;\r\n        /** Fieldname / Fieldvalue pairs for UpdateListItems */\r\n        valuePairs?: [string, string][];\r\n\r\n        // As of v0.7.1, removed all options which were assigned an empty string (\"\")\r\n\r\n        /** Array of destination URLs for copy operations */\r\n        DestinationUrls?: Array<any>;\r\n        /** An SPWebServiceBehavior indicating whether the client supports Windows SharePoint Services 2.0 or Windows SharePoint Services 3.0: {Version2 | Version3 } */\r\n        behavior?: string;\r\n        /** A Storage value indicating how the Web Part is stored: {None | Personal | Shared} */\r\n        storage?: string;\r\n        /** objectType for operations which require it */\r\n        objectType?: string;\r\n        /** true to delete a meeting;false to remove its association with a Meeting Workspace site */\r\n        cancelMeeting?: boolean;\r\n        /** true if the calendar is set to a format other than Gregorian;otherwise, false. */\r\n        nonGregorian?: boolean;\r\n        /** Specifies if the action is a claim or a release. Specifies true for a claim and false for a release. */\r\n        fClaim?: boolean;\r\n        /** The recurrence ID for the meeting that needs its association removed. This parameter can be set to 0 for single-instance meetings. */\r\n        recurrenceId?: number;\r\n        /** An integer that is used to determine the ordering of updates in case they arrive out of sequence. Updates with a lower-than-current sequence are discarded. If the sequence is equal to the current sequence, the latest update are applied. */\r\n        sequence?: number;\r\n        /** SocialDataService maximumItemsToReturn */\r\n        maximumItemsToReturn?: number;\r\n        /** SocialDataService startIndex */\r\n        startIndex?: number;\r\n        /** SocialDataService isHighPriority */\r\n        isHighPriority?: boolean;\r\n        /** SocialDataService isPrivate */\r\n        isPrivate?: boolean;\r\n        /** SocialDataService rating */\r\n        rating?: number;\r\n        /** Unless otherwise specified, the maximum number of principals that can be returned from a provider is 10. */\r\n        maxResults?: number;\r\n        /** Specifies user scope and other information? [None | User | DistributionList | SecurityGroup | SharePointGroup | All] */\r\n        principalType?: string;\r\n\r\n        /** Allow the user to force async */\r\n        async?: boolean;\r\n        /** Function to call on completion */\r\n        completefunc?: (xData: JQueryXHR, status: string) => void;\r\n    }\r\n\r\n\r\n    //TODO Cleanup and convert to TS\r\n    function Service(apWebServiceOperationConstants: IWebServiceOperationConstants, apWebServiceService: WebServiceService) {\r\n\r\n        /*\r\n         * SPServices - Work with SharePoint's Web Services using jQuery\r\n         * Version 2014.02a\r\n         * @requires jQuery v1.8 or greater - jQuery 1.10.x recommended\r\n         *\r\n         * Copyright (c) 2009-2013 Sympraxis Consulting LLC\r\n         * Examples and docs at:\r\n         * http://spservices.codeplex.com\r\n         * Licensed under the MIT license:\r\n         * http://www.opensource.org/licenses/mit-license.php\r\n         */\r\n        /*\r\n         * @description Work with SharePoint's Web Services using jQuery\r\n         * @type jQuery\r\n         * @name SPServices\r\n         * @category Plugins/SPServices\r\n         * @author Sympraxis Consulting LLC/marc.anderson@sympraxisconsulting.com\r\n         */\r\n        /* jshint undef: true */\r\n        /* global L_Menu_BaseUrl, _spUserId, _spPageContextInfo, GipAddSelectedItems, GipRemoveSelectedItems, GipGetGroupData */\r\n\r\n        // Global variables\r\n        var SCHEMASharePoint = \"http://schemas.microsoft.com/sharepoint\";\r\n        var i = 0; // Generic loop counter\r\n        var encodeOptionList = [\"listName\", \"description\"]; // Used to encode options which may contain special characters\r\n\r\n        // Defaults added as a function in our library means that the caller can override the defaults\r\n        // for their session by calling this function.  Each operation requires a different set of options;\r\n        // we allow for all in a standardized way.\r\n        var defaults = {\r\n\r\n            operation: \"\", // The Web Service operation\r\n            webURL: \"\", // URL of the target Web\r\n            makeViewDefault: false, // true to make the view the default view for the list\r\n\r\n            // For operations requiring CAML, these options will override any abstractions\r\n            CAMLViewName: \"\", // View name in CAML format.\r\n            CAMLQuery: \"\", // Query in CAML format\r\n            CAMLViewFields: \"\", // View fields in CAML format\r\n            CAMLRowLimit: 0, // Row limit as a string representation of an integer\r\n            CAMLQueryOptions: \"<QueryOptions></QueryOptions>\", // Query options in CAML format\r\n\r\n            // Abstractions for CAML syntax\r\n            batchCmd: \"Update\", // Method Cmd for UpdateListItems\r\n            valuePairs: [], // Fieldname / Fieldvalue pairs for UpdateListItems\r\n\r\n            // As of v0.7.1, removed all options which were assigned an empty string (\"\")\r\n            DestinationUrls: [], // Array of destination URLs for copy operations\r\n            behavior: \"Version3\", // An SPWebServiceBehavior indicating whether the client supports Windows SharePoint Services 2.0 or Windows SharePoint Services 3.0: {Version2 | Version3 }\r\n            storage: \"Shared\", // A Storage value indicating how the Web Part is stored: {None | Personal | Shared}\r\n            objectType: \"List\", // objectType for operations which require it\r\n            cancelMeeting: true, // true to delete a meeting;false to remove its association with a Meeting Workspace site\r\n            nonGregorian: false, // true if the calendar is set to a format other than Gregorian;otherwise, false.\r\n            fClaim: false, // Specifies if the action is a claim or a release. Specifies true for a claim and false for a release.\r\n            recurrenceId: 0, // The recurrence ID for the meeting that needs its association removed. This parameter can be set to 0 for single-instance meetings.\r\n            sequence: 0, // An integer that is used to determine the ordering of updates in case they arrive out of sequence. Updates with a lower-than-current sequence are discarded. If the sequence is equal to the current sequence, the latest update are applied.\r\n            maximumItemsToReturn: 0, // SocialDataService maximumItemsToReturn\r\n            startIndex: 0, // SocialDataService startIndex\r\n            isHighPriority: false, // SocialDataService isHighPriority\r\n            isPrivate: false, // SocialDataService isPrivate\r\n            rating: 1, // SocialDataService rating\r\n            maxResults: 10, // Unless otherwise specified, the maximum number of principals that can be returned from a provider is 10.\r\n            principalType: \"User\", // Specifies user scope and other information: [None | User | DistributionList | SecurityGroup | SharePointGroup | All]\r\n\r\n            async: true, // Allow the user to force async\r\n            completefunc: null // Function to call on completion\r\n\r\n        }; // End SPServices.defaults\r\n\r\n\r\n\r\n\r\n\r\n        // Main function, which calls SharePoint's Web Services directly.\r\n        var SPServices = {\r\n            defaults: defaults,\r\n            encodeXml: encodeXml,\r\n            generateXMLComponents: generateXMLComponents,\r\n            SCHEMASharePoint: SCHEMASharePoint,\r\n            SOAPEnvelope: new SOAPEnvelope()\r\n        };\r\n\r\n        function generateXMLComponents(options: SPServicesOptions) {\r\n\r\n            /** Key/Value mapping of SharePoint properties to SPServices properties */\r\n            var mapping = [\r\n                ['query', 'CAMLQuery'],\r\n                ['viewFields', 'CAMLViewFields'],\r\n                ['rowLimit', 'CAMLRowLimit'],\r\n                ['queryOptions', 'CAMLQueryOptions'],\r\n                ['listItemID', 'ID']\r\n            ];\r\n\r\n            /** Ensure the SharePoint properties are available prior to extending with defaults */\r\n            _.each(mapping, function(map) {\r\n                if (options[map[0]] && !options[map[1]]) {\r\n                    /** Ensure SPServices properties are added in the event the true property name is used */\r\n                    options[map[1]] = options[map[0]];\r\n                }\r\n            });\r\n\r\n            var soapEnvelope = new SOAPEnvelope();\r\n            var SOAPAction;\r\n\r\n            // If there are no options passed in, use the defaults.  Extend replaces each default with the passed option.\r\n            var opt: SPServicesOptions = _.assign({}, defaults, options);\r\n\r\n            // Encode options which may contain special character, esp. ampersand\r\n            _.each(encodeOptionList, function(optionName) {\r\n                if (_.isString(opt[optionName])) {\r\n                    opt[optionName] = encodeXml(opt[optionName]);\r\n                }\r\n            });\r\n\r\n            var service = apWebServiceOperationConstants[opt.operation][0];\r\n\r\n            // Put together operation header and SOAPAction for the SOAP call based on which Web Service we're calling\r\n            soapEnvelope.opheader = `<${opt.operation} xmlns=\"${apWebServiceService.xmlns(service) }\" >`;\r\n            SOAPAction = apWebServiceService.action(service);\r\n\r\n            // Add the operation to the SOAPAction and opfooter\r\n            SOAPAction += opt.operation;\r\n            soapEnvelope.opfooter = `</${opt.operation}>`;\r\n\r\n            // Each operation requires a different set of values.  This switch statement sets them up in the soapEnvelope.payload.\r\n            switch (opt.operation) {\r\n                // ALERT OPERATIONS\r\n                case \"GetAlerts\":\r\n                    break;\r\n                case \"DeleteAlerts\":\r\n                    soapEnvelope.payload += \"<IDs>\";\r\n                    for (i = 0; i < opt.IDs.length; i++) {\r\n                        soapEnvelope.payload += wrapNode(\"string\", opt.IDs[i]);\r\n                    }\r\n                    soapEnvelope.payload += \"</IDs>\";\r\n                    break;\r\n\r\n                // AUTHENTICATION OPERATIONS\r\n                case \"Mode\":\r\n                    break;\r\n                case \"Login\":\r\n                    addToPayload(opt, [\"username\", \"password\"]);\r\n                    break;\r\n\r\n                // COPY OPERATIONS\r\n                case \"CopyIntoItems\":\r\n                    addToPayload(opt, [\"SourceUrl\"]);\r\n                    soapEnvelope.payload += \"<DestinationUrls>\";\r\n                    for (i = 0; i < opt.DestinationUrls.length; i++) {\r\n                        soapEnvelope.payload += wrapNode(\"string\", opt.DestinationUrls[i]);\r\n                    }\r\n                    soapEnvelope.payload += \"</DestinationUrls>\";\r\n                    addToPayload(opt, [\"Fields\", \"Stream\", \"Results\"]);\r\n                    break;\r\n                case \"CopyIntoItemsLocal\":\r\n                    addToPayload(opt, [\"SourceUrl\"]);\r\n                    soapEnvelope.payload += \"<DestinationUrls>\";\r\n                    for (i = 0; i < opt.DestinationUrls.length; i++) {\r\n                        soapEnvelope.payload += wrapNode(\"string\", opt.DestinationUrls[i]);\r\n                    }\r\n                    soapEnvelope.payload += \"</DestinationUrls>\";\r\n                    break;\r\n                case \"GetItem\":\r\n                    addToPayload(opt, [\"Url\", \"Fields\", \"Stream\"]);\r\n                    break;\r\n\r\n                // FORM OPERATIONS\r\n                case \"GetForm\":\r\n                    addToPayload(opt, [\"listName\", \"formUrl\"]);\r\n                    break;\r\n                case \"GetFormCollection\":\r\n                    addToPayload(opt, [\"listName\"]);\r\n                    break;\r\n\r\n                // LIST OPERATIONS\r\n                case \"AddAttachment\":\r\n                    addToPayload(opt, [\"listName\", \"listItemID\", \"fileName\", \"attachment\"]);\r\n                    break;\r\n                case \"AddDiscussionBoardItem\":\r\n                    addToPayload(opt, [\"listName\", \"message\"]);\r\n                    break;\r\n                case \"AddList\":\r\n                    addToPayload(opt, [\"listName\", \"description\", \"templateID\"]);\r\n                    break;\r\n                case \"AddListFromFeature\":\r\n                    addToPayload(opt, [\"listName\", \"description\", \"featureID\", \"templateID\"]);\r\n                    break;\r\n                case \"ApplyContentTypeToList\":\r\n                    addToPayload(opt, [\"webUrl\", \"contentTypeId\", \"listName\"]);\r\n                    break;\r\n                case \"CheckInFile\":\r\n                    addToPayload(opt, [\"pageUrl\", \"comment\", \"CheckinType\"]);\r\n                    break;\r\n                case \"CheckOutFile\":\r\n                    addToPayload(opt, [\"pageUrl\", \"checkoutToLocal\", \"lastmodified\"]);\r\n                    break;\r\n                case \"CreateContentType\":\r\n                    addToPayload(opt, [\"listName\", \"displayName\", \"parentType\", \"fields\", \"contentTypeProperties\", \"addToView\"]);\r\n                    break;\r\n                case \"DeleteAttachment\":\r\n                    addToPayload(opt, [\"listName\", \"listItemID\", \"url\"]);\r\n                    break;\r\n                case \"DeleteContentType\":\r\n                    addToPayload(opt, [\"listName\", \"contentTypeId\"]);\r\n                    break;\r\n                case \"DeleteContentTypeXmlDocument\":\r\n                    addToPayload(opt, [\"listName\", \"contentTypeId\", \"documentUri\"]);\r\n                    break;\r\n                case \"DeleteList\":\r\n                    addToPayload(opt, [\"listName\"]);\r\n                    break;\r\n                case \"GetAttachmentCollection\":\r\n                    addToPayload(opt, [\"listName\", [\"listItemID\", \"ID\"]]);\r\n                    break;\r\n                case \"GetList\":\r\n                    addToPayload(opt, [\"listName\"]);\r\n                    break;\r\n                case \"GetListAndView\":\r\n                    addToPayload(opt, [\"listName\", \"viewName\"]);\r\n                    break;\r\n                case \"GetListCollection\":\r\n                    break;\r\n                case \"GetListContentType\":\r\n                    addToPayload(opt, [\"listName\", \"contentTypeId\"]);\r\n                    break;\r\n                case \"GetListContentTypes\":\r\n                    addToPayload(opt, [\"listName\"]);\r\n                    break;\r\n                case \"GetListItems\":\r\n                    addToPayload(opt,\r\n                        [\"listName\", \"viewName\",\r\n                            [\"query\", \"CAMLQuery\"],\r\n                            [\"viewFields\", \"CAMLViewFields\"],\r\n                            [\"rowLimit\", \"CAMLRowLimit\"],\r\n                            [\"queryOptions\", \"CAMLQueryOptions\"]\r\n                        ]);\r\n                    break;\r\n                case \"GetListItemChanges\":\r\n                    addToPayload(opt, [\"listName\", \"viewFields\", \"since\", \"contains\"]);\r\n                    break;\r\n                case \"GetListItemChangesSinceToken\":\r\n                    addToPayload(opt,\r\n                        [\"listName\", \"viewName\",\r\n                            [\"query\", \"CAMLQuery\"],\r\n                            [\"viewFields\", \"CAMLViewFields\"],\r\n                            [\"rowLimit\", \"CAMLRowLimit\"],\r\n                            [\"queryOptions\", \"CAMLQueryOptions\"],\r\n                            {\r\n                                name: \"changeToken\",\r\n                                sendNull: false\r\n                            },\r\n                            {\r\n                                name: \"contains\",\r\n                                sendNull: false\r\n                            }\r\n                        ]);\r\n                    break;\r\n                case \"GetVersionCollection\":\r\n                    addToPayload(opt, [\"strlistID\", \"strlistItemID\", \"strFieldName\"]); // correct case\r\n                    break;\r\n                case \"UndoCheckOut\":\r\n                    addToPayload(opt, [\"pageUrl\"]);\r\n                    break;\r\n                case \"UpdateContentType\":\r\n                    addToPayload(opt, [\"listName\", \"contentTypeId\", \"contentTypeProperties\", \"newFields\", \"updateFields\", \"deleteFields\", \"addToView\"]);\r\n                    break;\r\n                case \"UpdateContentTypesXmlDocument\":\r\n                    addToPayload(opt, [\"listName\", \"newDocument\"]);\r\n                    break;\r\n                case \"UpdateContentTypeXmlDocument\":\r\n                    addToPayload(opt, [\"listName\", \"contentTypeId\", \"newDocument\"]);\r\n                    break;\r\n                case \"UpdateList\":\r\n                    addToPayload(opt, [\"listName\", \"listProperties\", \"newFields\", \"updateFields\", \"deleteFields\", \"listVersion\"]);\r\n                    break;\r\n                case \"UpdateListItems\":\r\n                    addToPayload(opt, [\"listName\"]);\r\n                    if (typeof opt.updates !== \"undefined\" && opt.updates.length > 0) {\r\n                        addToPayload(opt, [\"updates\"]);\r\n                    } else {\r\n                        soapEnvelope.payload += `<updates><Batch OnError=\"Continue\"><Method ID=\"1\" Cmd=\"${opt.batchCmd}\">`;\r\n                        _.each(opt.valuePairs, (valuePair: [string, string]) => {\r\n                            soapEnvelope.payload += `<Field Name=\"${ valuePair[0] }\">${ escapeColumnValue(valuePair[1]) }</Field>`;\r\n                        })\r\n                        if (opt.batchCmd !== \"New\") {\r\n                            soapEnvelope.payload += `<Field Name=\"ID\">${opt.ID}</Field>`;\r\n                        }\r\n                        soapEnvelope.payload += \"</Method></Batch></updates>\";\r\n                    }\r\n                    break;\r\n\r\n                // MEETINGS OPERATIONS\r\n                case \"AddMeeting\":\r\n                    addToPayload(opt, [\"organizerEmail\", \"uid\", \"sequence\", \"utcDateStamp\", \"title\", \"location\", \"utcDateStart\", \"utcDateEnd\", \"nonGregorian\"]);\r\n                    break;\r\n                case \"CreateWorkspace\":\r\n                    addToPayload(opt, [\"title\", \"templateName\", \"lcid\", \"timeZoneInformation\"]);\r\n                    break;\r\n                case \"RemoveMeeting\":\r\n                    addToPayload(opt, [\"recurrenceId\", \"uid\", \"sequence\", \"utcDateStamp\", \"cancelMeeting\"]);\r\n                    break;\r\n                case \"SetWorkspaceTitle\":\r\n                    addToPayload(opt, [\"title\"]);\r\n                    break;\r\n\r\n                // PEOPLE OPERATIONS\r\n                case \"ResolvePrincipals\":\r\n                    addToPayload(opt, [\"principalKeys\", \"principalType\", \"addToUserInfoList\"]);\r\n                    break;\r\n                case \"SearchPrincipals\":\r\n                    addToPayload(opt, [\"searchText\", \"maxResults\", \"principalType\"]);\r\n                    break;\r\n\r\n                // PERMISSION OPERATIONS\r\n                case \"AddPermission\":\r\n                    addToPayload(opt, [\"objectName\", \"objectType\", \"permissionIdentifier\", \"permissionType\", \"permissionMask\"]);\r\n                    break;\r\n                case \"AddPermissionCollection\":\r\n                    addToPayload(opt, [\"objectName\", \"objectType\", \"permissionsInfoXml\"]);\r\n                    break;\r\n                case \"GetPermissionCollection\":\r\n                    addToPayload(opt, [\"objectName\", \"objectType\"]);\r\n                    break;\r\n                case \"RemovePermission\":\r\n                    addToPayload(opt, [\"objectName\", \"objectType\", \"permissionIdentifier\", \"permissionType\"]);\r\n                    break;\r\n                case \"RemovePermissionCollection\":\r\n                    addToPayload(opt, [\"objectName\", \"objectType\", \"memberIdsXml\"]);\r\n                    break;\r\n                case \"UpdatePermission\":\r\n                    addToPayload(opt, [\"objectName\", \"objectType\", \"permissionIdentifier\", \"permissionType\", \"permissionMask\"]);\r\n                    break;\r\n\r\n                // PUBLISHEDLINKSSERVICE OPERATIONS\r\n                case \"GetLinks\":\r\n                    break;\r\n\r\n                // SEARCH OPERATIONS\r\n                case \"GetPortalSearchInfo\":\r\n                    soapEnvelope.opheader = \"<\" + opt.operation + \" xmlns='http://microsoft.com/webservices/OfficeServer/QueryService'>\";\r\n                    SOAPAction = \"http://microsoft.com/webservices/OfficeServer/QueryService/\" + opt.operation;\r\n                    break;\r\n                case \"GetQuerySuggestions\":\r\n                    soapEnvelope.opheader = \"<\" + opt.operation + \" xmlns='http://microsoft.com/webservices/OfficeServer/QueryService'>\";\r\n                    SOAPAction = \"http://microsoft.com/webservices/OfficeServer/QueryService/\" + opt.operation;\r\n                    soapEnvelope.payload += wrapNode(\"queryXml\", encodeXml(opt.queryXml));\r\n                    break;\r\n                case \"GetSearchMetadata\":\r\n                    soapEnvelope.opheader = \"<\" + opt.operation + \" xmlns='http://microsoft.com/webservices/OfficeServer/QueryService'>\";\r\n                    SOAPAction = \"http://microsoft.com/webservices/OfficeServer/QueryService/\" + opt.operation;\r\n                    break;\r\n                case \"Query\":\r\n                    soapEnvelope.payload += wrapNode(\"queryXml\", encodeXml(opt.queryXml));\r\n                    break;\r\n                case \"QueryEx\":\r\n                    soapEnvelope.opheader = \"<\" + opt.operation + \" xmlns='http://microsoft.com/webservices/OfficeServer/QueryService'>\";\r\n                    SOAPAction = \"http://microsoft.com/webservices/OfficeServer/QueryService/\" + opt.operation;\r\n                    soapEnvelope.payload += wrapNode(\"queryXml\", encodeXml(opt.queryXml));\r\n                    break;\r\n                case \"Registration\":\r\n                    soapEnvelope.payload += wrapNode(\"registrationXml\", encodeXml(opt.registrationXml));\r\n                    break;\r\n                case \"Status\":\r\n                    break;\r\n\r\n                // SHAREPOINTDIAGNOSTICS OPERATIONS\r\n                case \"SendClientScriptErrorReport\":\r\n                    addToPayload(opt, [\"message\", \"file\", \"line\", \"client\", \"stack\", \"team\", \"originalFile\"]);\r\n                    break;\r\n\r\n                // SITEDATA OPERATIONS\r\n                case \"EnumerateFolder\":\r\n                    addToPayload(opt, [\"strFolderUrl\"]);\r\n                    break;\r\n                case \"GetAttachments\":\r\n                    addToPayload(opt, [\"strListName\", \"strItemId\"]);\r\n                    break;\r\n                case \"SiteDataGetList\":\r\n                    addToPayload(opt, [\"strListName\"]);\r\n                    // Because this operation has a name which duplicates the Lists WS, need to handle\r\n                    soapEnvelope = siteDataFixSOAPEnvelope(soapEnvelope, opt.operation);\r\n                    break;\r\n                case \"SiteDataGetListCollection\":\r\n                    // Because this operation has a name which duplicates the Lists WS, need to handle\r\n                    soapEnvelope = siteDataFixSOAPEnvelope(soapEnvelope, opt.operation);\r\n                    break;\r\n                case \"SiteDataGetSite\":\r\n                    // Because this operation has a name which duplicates the Lists WS, need to handle\r\n                    soapEnvelope = siteDataFixSOAPEnvelope(soapEnvelope, opt.operation);\r\n                    break;\r\n                case \"SiteDataGetSiteUrl\":\r\n                    addToPayload(opt, [\"Url\"]);\r\n                    // Because this operation has a name which duplicates the Lists WS, need to handle\r\n                    soapEnvelope = siteDataFixSOAPEnvelope(soapEnvelope, opt.operation);\r\n                    break;\r\n                case \"SiteDataGetWeb\":\r\n                    // Because this operation has a name which duplicates the Lists WS, need to handle\r\n                    soapEnvelope = siteDataFixSOAPEnvelope(soapEnvelope, opt.operation);\r\n                    break;\r\n\r\n                // SITES OPERATIONS\r\n                case \"CreateWeb\":\r\n                    addToPayload(opt, [\"url\", \"title\", \"description\", \"templateName\", \"language\", \"languageSpecified\",\r\n                        \"locale\", \"localeSpecified\", \"collationLocale\", \"collationLocaleSpecified\", \"uniquePermissions\",\r\n                        \"uniquePermissionsSpecified\", \"anonymous\", \"anonymousSpecified\", \"presence\", \"presenceSpecified\"\r\n                    ]);\r\n                    break;\r\n                case \"DeleteWeb\":\r\n                    addToPayload(opt, [\"url\"]);\r\n                    break;\r\n                case \"GetSite\":\r\n                    addToPayload(opt, [\"SiteUrl\"]);\r\n                    break;\r\n                case \"GetSiteTemplates\":\r\n                    addToPayload(opt, [\"LCID\", \"TemplateList\"]);\r\n                    break;\r\n\r\n                // SOCIALDATASERVICE OPERATIONS\r\n                case \"AddComment\":\r\n                    addToPayload(opt, [\"url\", \"comment\", \"isHighPriority\", \"title\"]);\r\n                    break;\r\n                case \"AddTag\":\r\n                    addToPayload(opt, [\"url\", \"termID\", \"title\", \"isPrivate\"]);\r\n                    break;\r\n                case \"AddTagByKeyword\":\r\n                    addToPayload(opt, [\"url\", \"keyword\", \"title\", \"isPrivate\"]);\r\n                    break;\r\n                case \"CountCommentsOfUser\":\r\n                    addToPayload(opt, [\"userAccountName\"]);\r\n                    break;\r\n                case \"CountCommentsOfUserOnUrl\":\r\n                    addToPayload(opt, [\"userAccountName\", \"url\"]);\r\n                    break;\r\n                case \"CountCommentsOnUrl\":\r\n                    addToPayload(opt, [\"url\"]);\r\n                    break;\r\n                case \"CountRatingsOnUrl\":\r\n                    addToPayload(opt, [\"url\"]);\r\n                    break;\r\n                case \"CountTagsOfUser\":\r\n                    addToPayload(opt, [\"userAccountName\"]);\r\n                    break;\r\n                case \"DeleteComment\":\r\n                    addToPayload(opt, [\"url\", \"lastModifiedTime\"]);\r\n                    break;\r\n                case \"DeleteRating\":\r\n                    addToPayload(opt, [\"url\"]);\r\n                    break;\r\n                case \"DeleteTag\":\r\n                    addToPayload(opt, [\"url\", \"termID\"]);\r\n                    break;\r\n                case \"DeleteTagByKeyword\":\r\n                    addToPayload(opt, [\"url\", \"keyword\"]);\r\n                    break;\r\n                case \"DeleteTags\":\r\n                    addToPayload(opt, [\"url\"]);\r\n                    break;\r\n                case \"GetAllTagTerms\":\r\n                    addToPayload(opt, [\"maximumItemsToReturn\"]);\r\n                    break;\r\n                case \"GetAllTagTermsForUrlFolder\":\r\n                    addToPayload(opt, [\"urlFolder\", \"maximumItemsToReturn\"]);\r\n                    break;\r\n                case \"GetAllTagUrls\":\r\n                    addToPayload(opt, [\"termID\"]);\r\n                    break;\r\n                case \"GetAllTagUrlsByKeyword\":\r\n                    addToPayload(opt, [\"keyword\"]);\r\n                    break;\r\n                case \"GetCommentsOfUser\":\r\n                    addToPayload(opt, [\"userAccountName\", \"maximumItemsToReturn\", \"startIndex\"]);\r\n                    break;\r\n                case \"GetCommentsOfUserOnUrl\":\r\n                    addToPayload(opt, [\"userAccountName\", \"url\"]);\r\n                    break;\r\n                case \"GetCommentsOnUrl\":\r\n                    addToPayload(opt, [\"url\", \"maximumItemsToReturn\", \"startIndex\"]);\r\n                    if (typeof opt.excludeItemsTime !== \"undefined\" && opt.excludeItemsTime.length > 0) {\r\n                        soapEnvelope.payload += wrapNode(\"excludeItemsTime\", opt.excludeItemsTime);\r\n                    }\r\n                    break;\r\n                case \"GetRatingAverageOnUrl\":\r\n                    addToPayload(opt, [\"url\"]);\r\n                    break;\r\n                case \"GetRatingOfUserOnUrl\":\r\n                    addToPayload(opt, [\"userAccountName\", \"url\"]);\r\n                    break;\r\n                case \"GetRatingOnUrl\":\r\n                    addToPayload(opt, [\"url\"]);\r\n                    break;\r\n                case \"GetRatingsOfUser\":\r\n                    addToPayload(opt, [\"userAccountName\"]);\r\n                    break;\r\n                case \"GetRatingsOnUrl\":\r\n                    addToPayload(opt, [\"url\"]);\r\n                    break;\r\n                case \"GetSocialDataForFullReplication\":\r\n                    addToPayload(opt, [\"userAccountName\"]);\r\n                    break;\r\n                case \"GetTags\":\r\n                    addToPayload(opt, [\"url\"]);\r\n                    break;\r\n                case \"GetTagsOfUser\":\r\n                    addToPayload(opt, [\"userAccountName\", \"maximumItemsToReturn\", \"startIndex\"]);\r\n                    break;\r\n                case \"GetTagTerms\":\r\n                    addToPayload(opt, [\"maximumItemsToReturn\"]);\r\n                    break;\r\n                case \"GetTagTermsOfUser\":\r\n                    addToPayload(opt, [\"userAccountName\", \"maximumItemsToReturn\"]);\r\n                    break;\r\n                case \"GetTagTermsOnUrl\":\r\n                    addToPayload(opt, [\"url\", \"maximumItemsToReturn\"]);\r\n                    break;\r\n                case \"GetTagUrls\":\r\n                    addToPayload(opt, [\"termID\"]);\r\n                    break;\r\n                case \"GetTagUrlsByKeyword\":\r\n                    addToPayload(opt, [\"keyword\"]);\r\n                    break;\r\n                case \"GetTagUrlsOfUser\":\r\n                    addToPayload(opt, [\"termID\", \"userAccountName\"]);\r\n                    break;\r\n                case \"GetTagUrlsOfUserByKeyword\":\r\n                    addToPayload(opt, [\"keyword\", \"userAccountName\"]);\r\n                    break;\r\n                case \"SetRating\":\r\n                    addToPayload(opt, [\"url\", \"rating\", \"title\", \"analysisDataEntry\"]);\r\n                    break;\r\n                case \"UpdateComment\":\r\n                    addToPayload(opt, [\"url\", \"lastModifiedTime\", \"comment\", \"isHighPriority\"]);\r\n                    break;\r\n\r\n                // SPELLCHECK OPERATIONS\r\n                case \"SpellCheck\":\r\n                    addToPayload(opt, [\"chunksToSpell\", \"declaredLanguage\", \"useLad\"]);\r\n                    break;\r\n\r\n                // TAXONOMY OPERATIONS\r\n                case \"AddTerms\":\r\n                    addToPayload(opt, [\"sharedServiceId\", \"termSetId\", \"lcid\", \"newTerms\"]);\r\n                    break;\r\n                case \"GetChildTermsInTerm\":\r\n                    addToPayload(opt, [\"sspId\", \"lcid\", \"termId\", \"termSetId\"]);\r\n                    break;\r\n                case \"GetChildTermsInTermSet\":\r\n                    addToPayload(opt, [\"sspId\", \"lcid\", \"termSetId\"]);\r\n                    break;\r\n                case \"GetKeywordTermsByGuids\":\r\n                    addToPayload(opt, [\"termIds\", \"lcid\"]);\r\n                    break;\r\n                case \"GetTermsByLabel\":\r\n                    addToPayload(opt, [\"label\", \"lcid\", \"matchOption\", \"resultCollectionSize\", \"termIds\", \"addIfNotFound\"]);\r\n                    break;\r\n                case \"GetTermSets\":\r\n                    addToPayload(opt, [\"sharedServiceId\", \"termSetId\", \"lcid\", \"clientTimeStamps\", \"clientVersions\"]);\r\n                    break;\r\n\r\n                // USERS AND GROUPS OPERATIONS\r\n                case \"AddGroup\":\r\n                    addToPayload(opt, [\"groupName\", \"ownerIdentifier\", \"ownerType\", \"defaultUserLoginName\", \"description\"]);\r\n                    break;\r\n                case \"AddGroupToRole\":\r\n                    addToPayload(opt, [\"groupName\", \"roleName\"]);\r\n                    break;\r\n                case \"AddRole\":\r\n                    addToPayload(opt, [\"roleName\", \"description\", \"permissionMask\"]);\r\n                    break;\r\n                case \"AddRoleDef\":\r\n                    addToPayload(opt, [\"roleName\", \"description\", \"permissionMask\"]);\r\n                    break;\r\n                case \"AddUserCollectionToGroup\":\r\n                    addToPayload(opt, [\"groupName\", \"usersInfoXml\"]);\r\n                    break;\r\n                case \"AddUserCollectionToRole\":\r\n                    addToPayload(opt, [\"roleName\", \"usersInfoXml\"]);\r\n                    break;\r\n                case \"AddUserToGroup\":\r\n                    addToPayload(opt, [\"groupName\", \"userName\", \"userLoginName\", \"userEmail\", \"userNotes\"]);\r\n                    break;\r\n                case \"AddUserToRole\":\r\n                    addToPayload(opt, [\"roleName\", \"userName\", \"userLoginName\", \"userEmail\", \"userNotes\"]);\r\n                    break;\r\n                case \"GetAllUserCollectionFromWeb\":\r\n                    break;\r\n                case \"GetGroupCollection\":\r\n                    addToPayload(opt, [\"groupNamesXml\"]);\r\n                    break;\r\n                case \"GetGroupCollectionFromRole\":\r\n                    addToPayload(opt, [\"roleName\"]);\r\n                    break;\r\n                case \"GetGroupCollectionFromSite\":\r\n                    break;\r\n                case \"GetGroupCollectionFromUser\":\r\n                    addToPayload(opt, [\"userLoginName\"]);\r\n                    break;\r\n                case \"GetGroupCollectionFromWeb\":\r\n                    break;\r\n                case \"GetGroupInfo\":\r\n                    addToPayload(opt, [\"groupName\"]);\r\n                    break;\r\n                case \"GetRoleCollection\":\r\n                    addToPayload(opt, [\"roleNamesXml\"]);\r\n                    break;\r\n                case \"GetRoleCollectionFromGroup\":\r\n                    addToPayload(opt, [\"groupName\"]);\r\n                    break;\r\n                case \"GetRoleCollectionFromUser\":\r\n                    addToPayload(opt, [\"userLoginName\"]);\r\n                    break;\r\n                case \"GetRoleCollectionFromWeb\":\r\n                    break;\r\n                case \"GetRoleInfo\":\r\n                    addToPayload(opt, [\"roleName\"]);\r\n                    break;\r\n                case \"GetRolesAndPermissionsForCurrentUser\":\r\n                    break;\r\n                case \"GetRolesAndPermissionsForSite\":\r\n                    break;\r\n                case \"GetUserCollection\":\r\n                    addToPayload(opt, [\"userLoginNamesXml\"]);\r\n                    break;\r\n                case \"GetUserCollectionFromGroup\":\r\n                    addToPayload(opt, [\"groupName\"]);\r\n                    break;\r\n                case \"GetUserCollectionFromRole\":\r\n                    addToPayload(opt, [\"roleName\"]);\r\n                    break;\r\n                case \"GetUserCollectionFromSite\":\r\n                    break;\r\n                case \"GetUserCollectionFromWeb\":\r\n                    break;\r\n                case \"GetUserInfo\":\r\n                    addToPayload(opt, [\"userLoginName\"]);\r\n                    break;\r\n                case \"GetUserLoginFromEmail\":\r\n                    addToPayload(opt, [\"emailXml\"]);\r\n                    break;\r\n                case \"RemoveGroup\":\r\n                    addToPayload(opt, [\"groupName\"]);\r\n                    break;\r\n                case \"RemoveGroupFromRole\":\r\n                    addToPayload(opt, [\"roleName\", \"groupName\"]);\r\n                    break;\r\n                case \"RemoveRole\":\r\n                    addToPayload(opt, [\"roleName\"]);\r\n                    break;\r\n                case \"RemoveUserCollectionFromGroup\":\r\n                    addToPayload(opt, [\"groupName\", \"userLoginNamesXml\"]);\r\n                    break;\r\n                case \"RemoveUserCollectionFromRole\":\r\n                    addToPayload(opt, [\"roleName\", \"userLoginNamesXml\"]);\r\n                    break;\r\n                case \"RemoveUserCollectionFromSite\":\r\n                    addToPayload(opt, [\"userLoginNamesXml\"]);\r\n                    break;\r\n                case \"RemoveUserFromGroup\":\r\n                    addToPayload(opt, [\"groupName\", \"userLoginName\"]);\r\n                    break;\r\n                case \"RemoveUserFromRole\":\r\n                    addToPayload(opt, [\"roleName\", \"userLoginName\"]);\r\n                    break;\r\n                case \"RemoveUserFromSite\":\r\n                    addToPayload(opt, [\"userLoginName\"]);\r\n                    break;\r\n                case \"RemoveUserFromWeb\":\r\n                    addToPayload(opt, [\"userLoginName\"]);\r\n                    break;\r\n                case \"UpdateGroupInfo\":\r\n                    addToPayload(opt, [\"oldGroupName\", \"groupName\", \"ownerIdentifier\", \"ownerType\", \"description\"]);\r\n                    break;\r\n                case \"UpdateRoleDefInfo\":\r\n                    addToPayload(opt, [\"oldRoleName\", \"roleName\", \"description\", \"permissionMask\"]);\r\n                    break;\r\n                case \"UpdateRoleInfo\":\r\n                    addToPayload(opt, [\"oldRoleName\", \"roleName\", \"description\", \"permissionMask\"]);\r\n                    break;\r\n                case \"UpdateUserInfo\":\r\n                    addToPayload(opt, [\"userLoginName\", \"userName\", \"userEmail\", \"userNotes\"]);\r\n                    break;\r\n\r\n                // USERPROFILESERVICE OPERATIONS\r\n                case \"AddColleague\":\r\n                    addToPayload(opt, [\"accountName\", \"colleagueAccountName\", \"group\", \"privacy\", \"isInWorkGroup\"]);\r\n                    break;\r\n                case \"AddLink\":\r\n                    addToPayload(opt, [\"accountName\", \"name\", \"url\", \"group\", \"privacy\"]);\r\n                    break;\r\n                case \"AddMembership\":\r\n                    addToPayload(opt, [\"accountName\", \"membershipInfo\", \"group\", \"privacy\"]);\r\n                    break;\r\n                case \"AddPinnedLink\":\r\n                    addToPayload(opt, [\"accountName\", \"name\", \"url\"]);\r\n                    break;\r\n                case \"CreateMemberGroup\":\r\n                    addToPayload(opt, [\"membershipInfo\"]);\r\n                    break;\r\n                case \"CreateUserProfileByAccountName\":\r\n                    addToPayload(opt, [\"accountName\"]);\r\n                    break;\r\n                case \"GetCommonColleagues\":\r\n                    addToPayload(opt, [\"accountName\"]);\r\n                    break;\r\n                case \"GetCommonManager\":\r\n                    addToPayload(opt, [\"accountName\"]);\r\n                    break;\r\n                case \"GetCommonMemberships\":\r\n                    addToPayload(opt, [\"accountName\"]);\r\n                    break;\r\n                case \"GetInCommon\":\r\n                    addToPayload(opt, [\"accountName\"]);\r\n                    break;\r\n                case \"GetPropertyChoiceList\":\r\n                    addToPayload(opt, [\"propertyName\"]);\r\n                    break;\r\n                case \"GetUserColleagues\":\r\n                    addToPayload(opt, [\"accountName\"]);\r\n                    break;\r\n                case \"GetUserLinks\":\r\n                    addToPayload(opt, [\"accountName\"]);\r\n                    break;\r\n                case \"GetUserMemberships\":\r\n                    addToPayload(opt, [\"accountName\"]);\r\n                    break;\r\n                case \"GetUserPinnedLinks\":\r\n                    addToPayload(opt, [\"accountName\"]);\r\n                    break;\r\n                case \"GetUserProfileByGuid\":\r\n                    addToPayload(opt, [\"guid\"]);\r\n                    break;\r\n                case \"GetUserProfileByIndex\":\r\n                    addToPayload(opt, [\"index\"]);\r\n                    break;\r\n                case \"GetUserProfileByName\":\r\n                    // Note that this operation is inconsistent with the others, using AccountName rather than accountName\r\n                    if (typeof opt.accountName !== \"undefined\" && opt.accountName.length > 0) {\r\n                        addToPayload(opt, [\r\n                            [\"AccountName\", \"accountName\"]\r\n                        ]);\r\n                    } else {\r\n                        addToPayload(opt, [\"AccountName\"]);\r\n                    }\r\n                    break;\r\n                case \"GetUserProfileCount\":\r\n                    break;\r\n                case \"GetUserProfileSchema\":\r\n                    break;\r\n                case \"GetUserPropertyByAccountName\":\r\n                    addToPayload(opt, [\"accountName\", \"propertyName\"]);\r\n                    break;\r\n                case \"ModifyUserPropertyByAccountName\":\r\n                    addToPayload(opt, [\"accountName\", \"newData\"]);\r\n                    break;\r\n                case \"RemoveAllColleagues\":\r\n                    addToPayload(opt, [\"accountName\"]);\r\n                    break;\r\n                case \"RemoveAllLinks\":\r\n                    addToPayload(opt, [\"accountName\"]);\r\n                    break;\r\n                case \"RemoveAllMemberships\":\r\n                    addToPayload(opt, [\"accountName\"]);\r\n                    break;\r\n                case \"RemoveAllPinnedLinks\":\r\n                    addToPayload(opt, [\"accountName\"]);\r\n                    break;\r\n                case \"RemoveColleague\":\r\n                    addToPayload(opt, [\"accountName\", \"colleagueAccountName\"]);\r\n                    break;\r\n                case \"RemoveLink\":\r\n                    addToPayload(opt, [\"accountName\", \"id\"]);\r\n                    break;\r\n                case \"RemoveMembership\":\r\n                    addToPayload(opt, [\"accountName\", \"sourceInternal\", \"sourceReference\"]);\r\n                    break;\r\n                case \"RemovePinnedLink\":\r\n                    addToPayload(opt, [\"accountName\", \"id\"]);\r\n                    break;\r\n                case \"UpdateColleaguePrivacy\":\r\n                    addToPayload(opt, [\"accountName\", \"colleagueAccountName\", \"newPrivacy\"]);\r\n                    break;\r\n                case \"UpdateLink\":\r\n                    addToPayload(opt, [\"accountName\", \"data\"]);\r\n                    break;\r\n                case \"UpdateMembershipPrivacy\":\r\n                    addToPayload(opt, [\"accountName\", \"sourceInternal\", \"sourceReference\", \"newPrivacy\"]);\r\n                    break;\r\n                case \"UpdatePinnedLink \":\r\n                    addToPayload(opt, [\"accountName\", \"data\"]);\r\n                    break;\r\n\r\n                // VERSIONS OPERATIONS\r\n                case \"DeleteAllVersions\":\r\n                    addToPayload(opt, [\"fileName\"]);\r\n                    break;\r\n                case \"DeleteVersion\":\r\n                    addToPayload(opt, [\"fileName\", \"fileVersion\"]);\r\n                    break;\r\n                case \"GetVersions\":\r\n                    addToPayload(opt, [\"fileName\"]);\r\n                    break;\r\n                case \"RestoreVersion\":\r\n                    addToPayload(opt, [\"fileName\", \"fileVersion\"]);\r\n                    break;\r\n\r\n                // VIEW OPERATIONS\r\n                case \"AddView\":\r\n                    addToPayload(opt, [\"listName\", \"viewName\", \"viewFields\", \"query\", \"rowLimit\", \"rowLimit\", \"type\", \"makeViewDefault\"]);\r\n                    break;\r\n                case \"DeleteView\":\r\n                    addToPayload(opt, [\"listName\", \"viewName\"]);\r\n                    break;\r\n                case \"GetView\":\r\n                    addToPayload(opt, [\"listName\", \"viewName\"]);\r\n                    break;\r\n                case \"GetViewCollection\":\r\n                    addToPayload(opt, [\"listName\"]);\r\n                    break;\r\n                case \"GetViewHtml\":\r\n                    addToPayload(opt, [\"listName\", \"viewName\"]);\r\n                    break;\r\n                case \"UpdateView\":\r\n                    addToPayload(opt, [\"listName\", \"viewName\", \"viewProperties\", \"query\", \"viewFields\", \"aggregations\", \"formats\", \"rowLimit\"]);\r\n                    break;\r\n                case \"UpdateViewHtml\":\r\n                    addToPayload(opt, [\"listName\", \"viewName\", \"viewProperties\", \"toolbar\", \"viewHeader\", \"viewBody\", \"viewFooter\", \"viewEmpty\", \"rowLimitExceeded\",\r\n                        \"query\", \"viewFields\", \"aggregations\", \"formats\", \"rowLimit\"\r\n                    ]);\r\n                    break;\r\n\r\n                // WEBPARTPAGES OPERATIONS\r\n                case \"AddWebPart\":\r\n                    addToPayload(opt, [\"pageUrl\", \"webPartXml\", \"storage\"]);\r\n                    break;\r\n                case \"AddWebPartToZone\":\r\n                    addToPayload(opt, [\"pageUrl\", \"webPartXml\", \"storage\", \"zoneId\", \"zoneIndex\"]);\r\n                    break;\r\n                case \"GetWebPart2\":\r\n                    addToPayload(opt, [\"pageUrl\", \"storageKey\", \"storage\", \"behavior\"]);\r\n                    break;\r\n                case \"GetWebPartPage\":\r\n                    addToPayload(opt, [\"documentName\", \"behavior\"]);\r\n                    break;\r\n                case \"GetWebPartProperties\":\r\n                    addToPayload(opt, [\"pageUrl\", \"storage\"]);\r\n                    break;\r\n                case \"GetWebPartProperties2\":\r\n                    addToPayload(opt, [\"pageUrl\", \"storage\", \"behavior\"]);\r\n                    break;\r\n\r\n                // WEBS OPERATIONS\r\n                case \"Webs.CreateContentType\":\r\n                    addToPayload(opt, [\"displayName\", \"parentType\", \"newFields\", \"contentTypeProperties\"]);\r\n                    break;\r\n                case \"GetColumns\":\r\n                    addToPayload(opt, [\"webUrl\"]);\r\n                    break;\r\n                case \"GetContentType\":\r\n                    addToPayload(opt, [\"contentTypeId\"]);\r\n                    break;\r\n                case \"GetContentTypes\":\r\n                    break;\r\n                case \"GetCustomizedPageStatus\":\r\n                    addToPayload(opt, [\"fileUrl\"]);\r\n                    break;\r\n                case \"GetListTemplates\":\r\n                    break;\r\n                case \"GetObjectIdFromUrl\":\r\n                    addToPayload(opt, [\"objectUrl\"]);\r\n                    break;\r\n                case \"GetWeb\":\r\n                    addToPayload(opt, [\r\n                        [\"webUrl\", \"webURL\"]\r\n                    ]);\r\n                    break;\r\n                case \"GetWebCollection\":\r\n                    break;\r\n                case \"GetAllSubWebCollection\":\r\n                    break;\r\n                case \"UpdateColumns\":\r\n                    addToPayload(opt, [\"newFields\", \"updateFields\", \"deleteFields\"]);\r\n                    break;\r\n                case \"Webs.UpdateContentType\":\r\n                    addToPayload(opt, [\"contentTypeId\", \"contentTypeProperties\", \"newFields\", \"updateFields\", \"deleteFields\"]);\r\n                    break;\r\n                case \"WebUrlFromPageUrl\":\r\n                    addToPayload(opt, [\r\n                        [\"pageUrl\", \"pageURL\"]\r\n                    ]);\r\n                    break;\r\n\r\n                // WORKFLOW OPERATIONS\r\n                case \"AlterToDo\":\r\n                    addToPayload(opt, [\"item\", \"todoId\", \"todoListId\", \"taskData\"]);\r\n                    break;\r\n                case \"ClaimReleaseTask\":\r\n                    addToPayload(opt, [\"item\", \"taskId\", \"listId\", \"fClaim\"]);\r\n                    break;\r\n                case \"GetTemplatesForItem\":\r\n                    addToPayload(opt, [\"item\"]);\r\n                    break;\r\n                case \"GetToDosForItem\":\r\n                    addToPayload(opt, [\"item\"]);\r\n                    break;\r\n                case \"GetWorkflowDataForItem\":\r\n                    addToPayload(opt, [\"item\"]);\r\n                    break;\r\n                case \"GetWorkflowTaskData\":\r\n                    addToPayload(opt, [\"item\", \"listId\", \"taskId\"]);\r\n                    break;\r\n                case \"StartWorkflow\":\r\n                    addToPayload(opt, [\"item\", \"templateId\", \"workflowParameters\"]);\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            // Glue together the pieces of the SOAP message\r\n            var msg = soapEnvelope.header + soapEnvelope.opheader + soapEnvelope.payload + soapEnvelope.opfooter + soapEnvelope.footer;\r\n            var soapAction = apWebServiceOperationConstants[opt.operation][1] ? SOAPAction : false;\r\n\r\n            return {\r\n                msg: msg,\r\n                SOAPEnvelope: soapEnvelope,\r\n                SOAPAction: soapAction\r\n            };\r\n\r\n            // Add the option values to the soapEnvelope.payload for the operation\r\n            //  opt = options for the call\r\n            //  paramArray = an array of option names to add to the payload\r\n            //      \"paramName\" if the parameter name and the option name match\r\n            //      [\"paramName\", \"optionName\"] if the parameter name and the option name are different (this handles early \"wrappings\" with inconsistent naming)\r\n            //      {name: \"paramName\", sendNull: false} indicates the element is marked as \"add to payload only if non-null\"\r\n            function addToPayload(opt, paramArray) {\r\n\r\n                var i;\r\n\r\n                for (i = 0; i < paramArray.length; i++) {\r\n                    // the parameter name and the option name match\r\n                    if (typeof paramArray[i] === \"string\") {\r\n                        soapEnvelope.payload += wrapNode(paramArray[i], opt[paramArray[i]]);\r\n                        // the parameter name and the option name are different\r\n                    } else if (_.isArray(paramArray[i]) && paramArray[i].length === 2) {\r\n                        soapEnvelope.payload += wrapNode(paramArray[i][0], opt[paramArray[i][1]]);\r\n                        // the element not a string or an array and is marked as \"add to payload only if non-null\"\r\n                    } else if ((typeof paramArray[i] === \"object\") && (paramArray[i].sendNull !== undefined)) {\r\n                        soapEnvelope.payload += ((opt[paramArray[i].name] === undefined) || (opt[paramArray[i].name].length === 0)) ? \"\" : wrapNode(paramArray[i].name, opt[paramArray[i].name]);\r\n                        // something isn't right, so report it\r\n                    } else {\r\n                        console.error(opt.operation, \"paramArray[\" + i + \"]: \" + paramArray[i], \"Invalid paramArray element passed to addToPayload()\");\r\n                    }\r\n                }\r\n            } // End of function addToPayload\r\n\r\n            // The SiteData operations have the same names as other Web Service operations. To make them easy to call and unique, I'm using\r\n            // the SiteData prefix on their names. This function replaces that name with the right name in the soapEnvelope.\r\n            function siteDataFixSOAPEnvelope(SOAPEnvelope, siteDataOperation) {\r\n                var siteDataOp = siteDataOperation.substring(8);\r\n                SOAPEnvelope.opheader = SOAPEnvelope.opheader.replace(siteDataOperation, siteDataOp);\r\n                SOAPEnvelope.opfooter = SOAPEnvelope.opfooter.replace(siteDataOperation, siteDataOp);\r\n                return SOAPEnvelope;\r\n            } // End of function siteDataFixSOAPEnvelope\r\n\r\n\r\n        }; // End SPServices.generateXMLComponents\r\n\r\n\r\n        ////// PRIVATE FUNCTIONS ////////\r\n        // Wrap an XML node (n) around a value (v)\r\n        function wrapNode(n, v) {\r\n            var thisValue = typeof v !== \"undefined\" ? v : \"\";\r\n            return \"<\" + n + \">\" + thisValue + \"</\" + n + \">\";\r\n        }\r\n\r\n        // Get the filename from the full URL\r\n        function fileName(s) {\r\n            return s.substring(s.lastIndexOf(\"/\") + 1, s.length);\r\n        }\r\n\r\n        /* Taken from http://dracoblue.net/dev/encodedecode-special-xml-characters-in-javascript/155/ */\r\n        var xml_special_to_escaped_one_map = {\r\n            '&': '&amp;',\r\n            '\"': '&quot;',\r\n            '<': '&lt;',\r\n            '>': '&gt;'\r\n        };\r\n\r\n        function encodeXml(string) {\r\n            return string.replace(/([\\&\"<>])/g, function(str, item) {\r\n                return xml_special_to_escaped_one_map[item];\r\n            });\r\n        }\r\n\r\n        /* Taken from http://dracoblue.net/dev/encodedecode-special-xml-characters-in-javascript/155/ */\r\n        // Escape column values\r\n        function escapeColumnValue(s) {\r\n            if (typeof s === \"string\") {\r\n                return s.replace(/&(?![a-zA-Z]{1,8};)/g, \"&amp;\");\r\n            } else {\r\n                return s;\r\n            }\r\n        }\r\n\r\n        // James Padolsey's Regex Selector for jQuery http://james.padolsey.com/javascript/regex-selector-for-jquery/\r\n        $.expr[':'].regex = function(elem, index, match) {\r\n            var matchParams = match[3].split(','),\r\n                validLabels = /^(data|css):/,\r\n                attr = {\r\n                    method: matchParams[0].match(validLabels) ?\r\n                        matchParams[0].split(':')[0] : 'attr',\r\n                    property: matchParams.shift().replace(validLabels, '')\r\n                },\r\n                regexFlags = 'ig',\r\n                regex = new RegExp(matchParams.join('').replace(/^\\s+|\\s+$/g, ''), regexFlags);\r\n            return regex.test(jQuery(elem)[attr.method](attr.property));\r\n        };\r\n\r\n        return SPServices;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name angularPoint.SPServices\r\n     * @description\r\n     * This is just a trimmed down version of Marc Anderson's awesome [SPServices](http://spservices.codeplex.com/) library.\r\n     * We're primarily looking for the ability to create the SOAP envelope and let AngularJS's $http service handle all\r\n     * communication with the server.\r\n     *\r\n     * */\r\n    angular.module('angularPoint')\r\n        .factory('SPServices', Service);\r\n}\r\n","/// <reference path=\"../app.module.ts\" />\r\n\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n    // Split values like 1;#value into id and value\r\n    class SplitIndex {\r\n        id: number;\r\n        value: string;\r\n\r\n        constructor(str) {\r\n            var spl = str.split(';#');\r\n            this.id = parseInt(spl[0], 10);\r\n            this.value = spl[1];\r\n        }\r\n    }\r\n\r\n    var service: UtilityService, $q, apConfig, $timeout;\r\n\r\n    export class UtilityService {\r\n        SplitIndex = SplitIndex;\r\n        static $inject = ['$q', '$timeout', 'apConfig'];\r\n\r\n        constructor(_$q_, _$timeout_, _apConfig_) {\r\n            service = this;\r\n            $q = _$q_;\r\n            $timeout = _$timeout_;\r\n            apConfig = _apConfig_;\r\n\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apUtilityService:batchProcess\r\n         * @methodOf angularPoint.apUtilityService\r\n         * @description\r\n         * We REALLY don't want to lock the user's browser (blocking the UI thread) while iterating over an array of\r\n         * entities and performing some process on them.  This function cuts the process into as many 50ms chunks as are\r\n         * necessary. Based on example found in the following article:\r\n         * [Timed array processing in JavaScript](http://www.nczonline.net/blog/2009/08/11/timed-array-processing-in-javascript/);\r\n         * @param {Object[]} entities The entities that need to be processed.\r\n         * @param {Function} process Reference to the process to be executed for each of the entities.\r\n         * @param {Object} context this\r\n         * @param {Number} [delay=25] Number of milliseconds to delay between batches.\r\n         * @param {Number} [maxItems=entities.length] Maximum number of entities to process before pausing.\r\n         * @returns {Object} Promise\r\n         * @example\r\n         * <pre>\r\n         * function buildProjectSummary = function() {\r\n             *    var deferred = $q.defer();\r\n             *\r\n             *    // Taken from a fictitious projectsModel.js\r\n             *    projectModel.getAllListItems().then(function(entities) {\r\n             *      var summaryObject = {};\r\n             *      var extendProjectSummary = function(project) {\r\n             *          // Do some process intensive stuff here\r\n             *\r\n             *      };\r\n             *\r\n             *      // Now that we have all of our projects we want to iterate\r\n             *      // over each to create our summary object. The problem is\r\n             *      // this could easily cause the page to hang with a sufficient\r\n             *      // number of entities.\r\n             *      apUtilityService.batchProcess(entities, extendProjectSummary, function() {\r\n             *          // Long running process is complete so resolve promise\r\n             *          deferred.resolve(summaryObject);\r\n             *      }, 25, 1000);\r\n             *    };\r\n             *\r\n             *    return deferred.promise;\r\n             * }\r\n         *\r\n         * </pre>\r\n         */\r\n\r\n        batchProcess(entities, process, context, delay, maxItems) {\r\n            var itemCount = entities.length,\r\n                batchCount = 0,\r\n                chunkMax = maxItems || itemCount,\r\n                delay = delay || 25,\r\n                index = 0,\r\n                deferred = $q.defer();\r\n\r\n            function chunkTimer() {\r\n                batchCount++;\r\n                var start = +new Date(),\r\n                    chunkIndex = index;\r\n\r\n                while (index < itemCount && (index - chunkIndex) < chunkMax && (new Date() - start < 100)) {\r\n                    process.call(context, entities[index], index, batchCount);\r\n                    index += 1;\r\n                }\r\n\r\n                if (index < itemCount) {\r\n                    $timeout(chunkTimer, delay);\r\n                }\r\n                else {\r\n                    deferred.resolve(entities);\r\n                }\r\n            }\r\n\r\n            chunkTimer();\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apUtilityService:convertEffectivePermMask\r\n         * @methodOf angularPoint.apUtilityService\r\n         * @description\r\n         * GetListItemsSinceToken operation returns the list element with an EffectivePermMask attribute which is the\r\n         * name of the PermissionMask.  We then need to convert the name into an actual mask so this function contains\r\n         * the known permission names with their masks.  If a provided mask name is found, the cooresponding mask\r\n         * is returned.  Otherwise returns null.  [MSDN Source](http://msdn.microsoft.com/en-us/library/jj575178(v=office.12).aspx)\r\n         * @param {string} permMaskName Permission mask name.\r\n         * @returns {string|null} Return the mask for the name.\r\n         */\r\n        convertEffectivePermMask(permMaskName: string): string {\r\n            var permissionMask = null;\r\n\r\n            var permissions = {\r\n                //General\r\n                EmptyMask: '0x0000000000000000',\r\n                FullMask: '0x7FFFFFFFFFFFFFFF',\r\n\r\n                //List and document permissions\r\n                ViewListItems: '0x0000000000000001',\r\n                AddListItems: '0x0000000000000002',\r\n                EditListItems: '0x0000000000000004',\r\n                DeleteListItems: '0x0000000000000008',\r\n                ApproveItems: '0x0000000000000010',\r\n                OpenItems: '0x0000000000000020',\r\n                ViewVersions: '0x0000000000000040',\r\n                DeleteVersions: '0x0000000000000080',\r\n                CancelCheckout: '0x0000000000000100',\r\n                ManagePersonalViews: '0x0000000000000200',\r\n                ManageLists: '0x0000000000000800',\r\n                ViewFormPages: '0x0000000000001000',\r\n\r\n                //Web level permissions\r\n                Open: '0x0000000000010000',\r\n                ViewPages: '0x0000000000020000',\r\n                AddAndCustomizePages: '0x0000000000040000',\r\n                ApplyThemeAndBorder: '0x0000000000080000',\r\n                ApplyStyleSheets: '0x0000000000100000',\r\n                ViewUsageData: '0x0000000000200000',\r\n                CreateSSCSite: '0x0000000000400000',\r\n                ManageSubwebs: '0x0000000000800000',\r\n                CreateGroups: '0x0000000001000000',\r\n                ManagePermissions: '0x0000000002000000',\r\n                BrowseDirectories: '0x0000000004000000',\r\n                BrowseUserInfo: '0x0000000008000000',\r\n                AddDelPrivateWebParts: '0x0000000010000000',\r\n                UpdatePersonalWebParts: '0x0000000020000000',\r\n                ManageWeb: '0x0000000040000000',\r\n                UseClientIntegration: '0x0000001000000000',\r\n                UseRemoteAPIs: '0x0000002000000000',\r\n                ManageAlerts: '0x0000004000000000',\r\n                CreateAlerts: '0x0000008000000000',\r\n                EditMyUserInfo: '0x0000010000000000',\r\n\r\n                //Special Permissions\r\n                EnumeratePermissions: '0x4000000000000000'\r\n            };\r\n\r\n            if (permissions[permMaskName]) {\r\n                permissionMask = permissions[permMaskName];\r\n            }\r\n            return permissionMask;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apUtilityService:dateWithinRange\r\n         * @methodOf angularPoint.apUtilityService\r\n         * @description\r\n         * Converts dates into yyyymmdd formatted ints and evaluates to determine if the dateToCheck\r\n         * falls within the date range provided\r\n         * @param {Date} startDate Starting date.\r\n         * @param {Date} endDate Ending date.\r\n         * @param {Date} [dateToCheck=new Date()] Defaults to the current date.\r\n         * @returns {boolean} Does the date fall within the range?\r\n         */\r\n        dateWithinRange(startDate: Date, endDate: Date, dateToCheck = new Date()): boolean {\r\n            /** Ensure both a start and end date are provided **/\r\n            if (!startDate || !endDate) {\r\n                return false;\r\n            }\r\n\r\n            /** Create an int representation of each of the dates */\r\n            var startInt = service.yyyymmdd(startDate);\r\n            var endInt = service.yyyymmdd(endDate);\r\n            var dateToCheckInt = service.yyyymmdd(dateToCheck);\r\n\r\n            return startInt <= dateToCheckInt && dateToCheckInt <= endInt;\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apUtilityService:doubleDigit\r\n         * @methodOf angularPoint.apUtilityService\r\n         * @description Add a leading zero if a number/string only contains a single character.  So in the case\r\n         * where the number 9 is passed in the string '09' is returned.\r\n         * @param {(number|string)} val A number or string to evaluate.\r\n         * @returns {string} Two digit string.\r\n         */\r\n        doubleDigit(val: number | string): string {\r\n            if (typeof val === 'number') {\r\n                return val > 9 ? val.toString() : '0' + val;\r\n            } else if(typeof val === 'string') {\r\n                return service.doubleDigit(parseInt(val));\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apUtilityService:fromCamelCase\r\n         * @methodOf angularPoint.apUtilityService\r\n         * @param {string} str String to convert.\r\n         * @description\r\n         * Converts a camel case string into a space delimited string with each word having a capitalized first letter.\r\n         * @returns {string} Humanized string.\r\n         */\r\n        fromCamelCase(str): string {\r\n            // insert a space before all caps\r\n            return str.replace(/([A-Z])/g, ' $1')\r\n            // uppercase the first character\r\n                .replace(/^./, function(str) {\r\n                    return str.toUpperCase();\r\n                });\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apUtilityService:registerChange\r\n         * @methodOf angularPoint.apUtilityService\r\n         * @description\r\n         * If online and sync is being used, notify all online users that a change has been made.\r\n         * //Todo Break this functionality into FireBase module that can be used if desired.\r\n         * @param {object} model event\r\n         */\r\n        registerChange(model, changeType: string, listItemId: number) {\r\n            /** Disabled this functionality until I can spend the necessary time to test */\r\n            if (model.sync && _.isFunction(model.sync.registerChange)) {\r\n                /** Register change after successful update */\r\n                model.sync.registerChange(changeType, listItemId);\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apUtilityService:resolvePermissions\r\n         * @methodOf angularPoint.apUtilityService\r\n         * @param {string} permissionsMask The WSS Rights Mask is an 8-byte, unsigned integer that specifies\r\n         * the rights that can be assigned to a user or site group. This bit mask can have zero or more flags set.\r\n         * @description\r\n         * Converts permMask into something usable to determine permission level for current user.  Typically used\r\n         * directly from a list item.  See ListItem.resolvePermissions.\r\n         *\r\n         * <h3>Additional Info</h3>\r\n         *\r\n         * -   [PermMask in SharePoint DVWPs](http://sympmarc.com/2009/02/03/permmask-in-sharepoint-dvwps/)\r\n         * -   [$().SPServices.SPLookupAddNew and security trimming](http://spservices.codeplex.com/discussions/208708)\r\n         *\r\n         * @returns {object} Object with properties for each permission level identifying if current user has rights (true || false)\r\n         * @example\r\n         * <pre>\r\n         * var perm = apUtilityService.resolvePermissions('0x0000000000000010');\r\n         * </pre>\r\n         * Example of what the returned object would look like\r\n         * for a site admin.\r\n         * <pre>\r\n         * perm = {\r\n             *    \"ViewListItems\":true,\r\n             *    \"AddListItems\":true,\r\n             *    \"EditListItems\":true,\r\n             *    \"DeleteListItems\":true,\r\n             *    \"ApproveItems\":true,\r\n             *    \"OpenItems\":true,\r\n             *    \"ViewVersions\":true,\r\n             *    \"DeleteVersions\":true,\r\n             *    \"CancelCheckout\":true,\r\n             *    \"PersonalViews\":true,\r\n             *    \"ManageLists\":true,\r\n             *    \"ViewFormPages\":true,\r\n             *    \"Open\":true,\r\n             *    \"ViewPages\":true,\r\n             *    \"AddAndCustomizePages\":true,\r\n             *    \"ApplyThemeAndBorder\":true,\r\n             *    \"ApplyStyleSheets\":true,\r\n             *    \"ViewUsageData\":true,\r\n             *    \"CreateSSCSite\":true,\r\n             *    \"ManageSubwebs\":true,\r\n             *    \"CreateGroups\":true,\r\n             *    \"ManagePermissions\":true,\r\n             *    \"BrowseDirectories\":true,\r\n             *    \"BrowseUserInfo\":true,\r\n             *    \"AddDelPrivateWebParts\":true,\r\n             *    \"UpdatePersonalWebParts\":true,\r\n             *    \"ManageWeb\":true,\r\n             *    \"UseRemoteAPIs\":true,\r\n             *    \"ManageAlerts\":true,\r\n             *    \"CreateAlerts\":true,\r\n             *    \"EditMyUserInfo\":true,\r\n             *    \"EnumeratePermissions\":true,\r\n             *    \"FullMask\":true\r\n             * }\r\n         * </pre>\r\n         */\r\n        resolvePermissions(permissionsMask): IUserPermissionsObject {\r\n            var permissionSet = {\r\n                ViewListItems: (1 & permissionsMask) > 0,\r\n                AddListItems: (2 & permissionsMask) > 0,\r\n                EditListItems: (4 & permissionsMask) > 0,\r\n                DeleteListItems: (8 & permissionsMask) > 0,\r\n                ApproveItems: (16 & permissionsMask) > 0,\r\n                OpenItems: (32 & permissionsMask) > 0,\r\n                ViewVersions: (64 & permissionsMask) > 0,\r\n                DeleteVersions: (128 & permissionsMask) > 0,\r\n                CancelCheckout: (256 & permissionsMask) > 0,\r\n                PersonalViews: (512 & permissionsMask) > 0,\r\n\r\n                ManageLists: (2048 & permissionsMask) > 0,\r\n                ViewFormPages: (4096 & permissionsMask) > 0,\r\n\r\n                Open: (65536 & permissionsMask) > 0,\r\n                ViewPages: (131072 & permissionsMask) > 0,\r\n                AddAndCustomizePages: (262144 & permissionsMask) > 0,\r\n                ApplyThemeAndBorder: (524288 & permissionsMask) > 0,\r\n                ApplyStyleSheets: (1048576 & permissionsMask) > 0,\r\n                ViewUsageData: (2097152 & permissionsMask) > 0,\r\n                CreateSSCSite: (4194314 & permissionsMask) > 0,\r\n                ManageSubwebs: (8388608 & permissionsMask) > 0,\r\n                CreateGroups: (16777216 & permissionsMask) > 0,\r\n                ManagePermissions: (33554432 * permissionsMask) > 0,\r\n                BrowseDirectories: (67108864 & permissionsMask) > 0,\r\n                BrowseUserInfo: (134217728 & permissionsMask) > 0,\r\n                AddDelPrivateWebParts: (268435456 & permissionsMask) > 0,\r\n                UpdatePersonalWebParts: (536870912 & permissionsMask) > 0,\r\n                ManageWeb: (1073741824 & permissionsMask) > 0,\r\n                UseRemoteAPIs: (137438953472 & permissionsMask) > 0,\r\n                ManageAlerts: (274877906944 & permissionsMask) > 0,\r\n                CreateAlerts: (549755813888 & permissionsMask) > 0,\r\n                EditMyUserInfo: (1099511627776 & permissionsMask) > 0,\r\n                EnumeratePermissions: (4611686018427387904 & permissionsMask) > 0,\r\n                FullMask: (9223372036854775807 == permissionsMask)\r\n            };\r\n\r\n            /**\r\n             * Full Mask only resolves correctly for the Full Mask level\r\n             * so in that case, set everything to true\r\n             */\r\n            if (permissionSet.FullMask) {\r\n                _.each(permissionSet, function(perm, key) {\r\n                    permissionSet[key] = true;\r\n                });\r\n            }\r\n\r\n            return permissionSet;\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apUtilityService:stringifyXML\r\n         * @methodOf angularPoint.apUtilityService\r\n         * @description Simple utility to convert an XML object into a string and remove unnecessary whitespace.\r\n         * @param {object} xml XML object.\r\n         * @returns {string} Stringified version of the XML object.\r\n         */\r\n        stringifyXML(xml: XMLDocument): string {\r\n            var str;\r\n\r\n            if (_.isObject(xml)) {\r\n                str = service.xmlToString(xml).replace(/\\s+/g, ' ');\r\n            } else if (_.isString(xml)) {\r\n                str = xml;\r\n            }\r\n            return str;\r\n        }\r\n\r\n\r\n        toCamelCase(str): string {\r\n            return str.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function(letter, index) {\r\n                return index == 0 ? letter.toLowerCase() : letter.toUpperCase();\r\n            }).replace(/\\s+/g, '');\r\n        }\r\n\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apUtilityService:yyyymmdd\r\n         * @methodOf angularPoint.apUtilityService\r\n         * @description\r\n         * Convert date into a int formatted as yyyymmdd\r\n         * We don't need the time portion of comparison so an int makes this easier to evaluate\r\n         */\r\n        yyyymmdd(date: Date): number {\r\n            var yyyy = date.getFullYear();\r\n            var mm = date.getMonth() + 1;\r\n            var dd = date.getDate();\r\n            /** Add leading 0's to month and day if necessary */\r\n            return parseInt(yyyy + service.doubleDigit(mm) + service.doubleDigit(dd));\r\n        }\r\n\r\n        xmlToString(xmlData) {\r\n            var xmlString;\r\n            if (typeof XMLSerializer !== 'undefined') {\r\n                /** Modern Browsers */\r\n                xmlString = (new XMLSerializer()).serializeToString(xmlData);\r\n            } else {\r\n                /** Old versions of IE */\r\n                xmlString = xmlData.xml;\r\n            }\r\n            return xmlString;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    /** Extend underscore with a simple helper function */\r\n    _.mixin({\r\n        isDefined: function(value) {\r\n            return !_.isUndefined(value);\r\n        },\r\n        /** Based on functionality in Breeze.js */\r\n        isGuid: function(value) {\r\n            return (typeof value === \"string\") && /[a-fA-F\\d]{8}-(?:[a-fA-F\\d]{4}-){3}[a-fA-F\\d]{12}/\r\n                .test(value);\r\n        }\r\n    });\r\n\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name angularPoint.apUtilityService\r\n     * @description\r\n     * Provides shared utility functionality across the application.\r\n     *\r\n     * @requires angularPoint.apConfig\r\n     */\r\n    angular.module('angularPoint')\r\n        .service('apUtilityService', UtilityService);\r\n\r\n}\r\n","/// <reference path=\"../app.module.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n    var SCHEMASharePoint = \"http://schemas.microsoft.com/sharepoint\";\r\n    var serviceDefinitions = {\r\n        Alerts: {\r\n            action: SCHEMASharePoint + '/soap/2002/1/alerts/',\r\n            xmlns: SCHEMASharePoint + '/soap/2002/1/alerts/'\r\n        },\r\n        Meetings: {\r\n            action: SCHEMASharePoint + '/soap/meetings/',\r\n            xmlns: SCHEMASharePoint + '/soap/meetings/'\r\n        },\r\n        Permissions: {\r\n            action: SCHEMASharePoint + '/soap/directory/',\r\n            xmlns: SCHEMASharePoint + '/soap/directory/'\r\n        },\r\n        PublishedLinksService: {\r\n            action: 'http://microsoft.com/webservices/SharePointPortalServer/PublishedLinksService/',\r\n            xmlns: 'http://microsoft.com/webservices/SharePointPortalServer/PublishedLinksService/'\r\n        },\r\n        Search: {\r\n            action: 'urn:Microsoft.Search/',\r\n            xmlns: 'urn:Microsoft.Search'\r\n        },\r\n        SharePointDiagnostics: {\r\n            action: 'http://schemas.microsoft.com/sharepoint/diagnostics/',\r\n            xmlns: SCHEMASharePoint + '/diagnostics/'\r\n        },\r\n        SocialDataService: {\r\n            action: 'http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/',\r\n            xmlns: 'http://microsoft.com/webservices/SharePointPortalServer/SocialDataService'\r\n        },\r\n        SpellCheck: {\r\n            action: 'http://schemas.microsoft.com/sharepoint/publishing/spelling/SpellCheck',\r\n            xmlns: 'http://schemas.microsoft.com/sharepoint/publishing/spelling/'\r\n        },\r\n        TaxonomyClientService: {\r\n            action: SCHEMASharePoint + '/taxonomy/soap/',\r\n            xmlns: SCHEMASharePoint + '/taxonomy/soap/'\r\n        },\r\n        usergroup: {\r\n            action: SCHEMASharePoint + '/soap/directory/',\r\n            xmlns: SCHEMASharePoint + '/soap/directory/'\r\n        },\r\n        UserProfileService: {\r\n            action: 'http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/',\r\n            xmlns: 'http://microsoft.com/webservices/SharePointPortalServer/UserProfileService'\r\n        },\r\n        WebPartPages: {\r\n            action: 'http://microsoft.com/sharepoint/webpartpages/',\r\n            xmlns: 'http://microsoft.com/sharepoint/webpartpages'\r\n        },\r\n        Workflow: {\r\n            action: SCHEMASharePoint + '/soap/workflow/',\r\n            xmlns: SCHEMASharePoint + '/soap/workflow/'\r\n        }\r\n    };\r\n\r\n    export class WebServiceService{\r\n        action(service) {\r\n            return serviceDefinitions[service] ? serviceDefinitions[service].action : SCHEMASharePoint + '/soap/';\r\n        }\r\n        webServices = [\r\n            'Alerts',\r\n            'Authentication',\r\n            'Copy',\r\n            'Forms',\r\n            'Lists',\r\n            'Meetings',\r\n            'People',\r\n            'Permissions',\r\n            'PublishedLinksService',\r\n            'Search',\r\n            'SharePointDiagnostics',\r\n            'SiteData',\r\n            'Sites',\r\n            'SocialDataService',\r\n            'SpellCheck',\r\n            'TaxonomyClientService',\r\n            'usergroup',\r\n            'UserProfileService',\r\n            'Versions',\r\n            'Views',\r\n            'WebPartPages',\r\n            'Webs',\r\n            'Workflow'\r\n        ];\r\n        xmlns(service) {\r\n            return serviceDefinitions[service] ? serviceDefinitions[service].xmlns : SCHEMASharePoint + '/soap/';\r\n        }\r\n    }\r\n\r\n\r\n//  apWebServiceOperationConstants.OpName = [WebService, needs_SOAPAction];\r\n//      OpName              The name of the Web Service operation -> These names are unique\r\n//      WebService          The name of the WebService this operation belongs to\r\n//      needs_SOAPAction    Boolean indicating whether the operation needs to have the SOAPAction passed in the\r\n// setRequestHeaderfunction. true if the operation does a write, else false\r\n    angular.module('angularPoint')\r\n        .service('apWebServiceService', WebServiceService);\r\n\r\n}\r\n","/// <reference path=\"../app.module.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n    export class XMLToJSONService {\r\n        static $inject = ['$injector'];\r\n\r\n        constructor(private $injector: ng.auto.IInjectorService) {\r\n\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name apXMLToJSONService.filterXMLNodeService\r\n         * @methodOf apXMLToJSONService\r\n         * @param {JQuery|Object} xmlObject Object to parse, can either be a jQuery object or an xml response.\r\n         * @param {string} name Name of node we're looking for.\r\n         * @description\r\n         * This method for finding specific nodes in the returned XML was developed by Steve Workman. See his blog post\r\n         * http://www.steveworkman.com/html5-2/javascript/2011/improving-javascript-xml-node-finding-performance-by-2000/\r\n         * for performance details.\r\n         * @returns {JQuery} Object with jQuery values.\r\n         */\r\n        filterNodes(xmlObject: JQuery | Object, name: string): JQuery {\r\n            //Convert to jQuery object if not already\r\n            var jQueryObject: JQuery = xmlObject instanceof jQuery ? xmlObject : $(xmlObject);\r\n\r\n            return jQueryObject.find('*').filter(function() {\r\n                return this.nodeName === name;\r\n            });\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name apXMLToJSONService.parse\r\n         * @methodOf apXMLToJSONService\r\n         * @param {JQuery|XMLDocument} xmlObject Object to parse, can either be a jQuery object or an xml response.\r\n         * @param {string} name Name of node we're looking for.\r\n         * @description\r\n         * This method for finding specific nodes in the returned XML was developed by Steve Workman. See his blog post\r\n         * http://www.steveworkman.com/html5-2/javascript/2011/improving-javascript-xml-node-finding-performance-by-2000/\r\n         * for performance details.\r\n         * @returns {JQuery} Object with jQuery values.\r\n         */\r\n        parse(xmlNodeSet: JQuery, options?: IParseOptions): Object[]{\r\n            //Need to use injector because apDecode service also relies on this service so we'd otherwise have a circular dependency.\r\n            var apDecodeService = this.$injector.get<DecodeService>('apDecodeService');\r\n            var defaults = {\r\n                includeAllAttrs: false, // If true, return all attributes, regardless whether they are in the mapping\r\n                mapping: {}, // columnName: mappedName: \"mappedName\", objectType: \"objectType\"\r\n                removeOws: true, // Specifically for GetListItems, if true, the leading ows_ will be stripped off the field name\r\n                sparse: false // If true, empty (\"\") values will not be returned\r\n            };\r\n\r\n            var opts: IParseOptions = _.assign({}, defaults, options);\r\n\r\n            var jsonObjectArray = [];\r\n\r\n            _.each(xmlNodeSet, (node: JQuery) => {\r\n                var row = {};\r\n                var rowAttrs = node.attributes;\r\n\r\n                if (!opts.sparse) {\r\n                    // Bring back all mapped columns, even those with no value\r\n                    _.each(opts.mapping, (column) => row[column.mappedName] = '');\r\n                }\r\n\r\n                _.each(rowAttrs, (rowAttribute) => {\r\n                    var attributeName = rowAttribute.name;\r\n                    var columnMapping = opts.mapping[attributeName];\r\n                    var objectName = typeof columnMapping !== \"undefined\" ? columnMapping.mappedName : opts.removeOws ? attributeName.split(\"ows_\")[1] : attributeName;\r\n                    var objectType = typeof columnMapping !== \"undefined\" ? columnMapping.objectType : undefined;\r\n                    if (opts.includeAllAttrs || columnMapping !== undefined) {\r\n                        row[objectName] = apDecodeService.parseStringValue(rowAttribute.value, objectType);\r\n                    }\r\n                });\r\n\r\n                // Push this item into the JSON Object\r\n                jsonObjectArray.push(row);\r\n            });\r\n\r\n            // Return the JSON object\r\n            return jsonObjectArray;\r\n\r\n        }\r\n    }\r\n\r\n    interface IParseOptions {\r\n        includeAllAttrs?: boolean;\r\n        mapping?: Object;\r\n        removeOws?: boolean;\r\n        sparse?: boolean;\r\n    }\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name apXMLToJSONService\r\n     * @description\r\n     * This function converts an XML node set into an array of JS objects.\r\n     * This is essentially Marc Anderson's [SPServices](http://spservices.codeplex.com/) SPXmlTOJson function wrapped in\r\n     * an Angular service to make it more modular and allow for testing.\r\n     *\r\n     */\r\n    angular.module('angularPoint')\r\n        .service('apXMLToJSONService', XMLToJSONService);\r\n\r\n\r\n}\r\n"],"sourceRoot":"/source/"}