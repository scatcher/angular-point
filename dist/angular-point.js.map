{"version":3,"sources":["app.module.ts","config.ts","constants/apConfig.ts","constants/apDefaultFields.ts","constants/apDefaultListItemQueryOptions.ts","constants/apThirdPartyConstants.ts","constants/apWebServiceOperationConstants.ts","constants/apXMLFieldAttributeTypes.ts","constants/apXMLListAttributeTypes.ts","factories/apCamlFactory.ts","factories/apFieldFactory.ts","factories/apIndexedCacheFactory.ts","factories/apListFactory.ts","factories/apListItemFactory.ts","factories/apLookupFactory.ts","factories/apModelFactory.ts","factories/apQueryFactory.ts","factories/apUserFactory.ts","interfaces/main.ts","models/apUserModel.ts","services/apCacheService.ts","services/apChangeService.ts","services/apDataService.ts","services/apDecodeService.ts","services/apEncodeService.ts","services/apExceptionHandlerService.ts","services/apExportService.ts","services/apFieldService.ts","services/apFormattedFieldValueService.ts","services/apLogger.ts","services/apSPServices.ts","services/apUtilityService.ts","services/apWebServiceService.ts","services/apXMLToJSONService.ts"],"names":["ap","ap.Config","ap.CamlFactory","ap.CamlFactory.constructor","ap.CamlFactory.camlContainsQuery","ap.CamlFactory.chainCamlSelects","ap.CamlFactory.createCamlContainsSelector","ap.FieldDefinition","ap.FieldDefinition.constructor","ap.FieldDefinition.getDefinition","ap.FieldDefinition.getDefaultValueForType","ap.FieldDefinition.getMockData","ap.FieldFactory","ap.FieldFactory.constructor","ap.IndexedCache","ap.IndexedCache.constructor","ap.IndexedCache.addEntity","ap.IndexedCache.clear","ap.IndexedCache.count","ap.IndexedCache.first","ap.IndexedCache.keys","ap.IndexedCache.last","ap.IndexedCache.nthEntity","ap.IndexedCache.removeEntity","ap.IndexedCache.toArray","ap.IndexedCacheFactory","ap.IndexedCacheFactory.constructor","ap.IndexedCacheFactory.create","ap.List","ap.List.constructor","ap.List.extendFieldDefinitions","ap.List.getListId","ap.List.identifyWebURL","ap.ListFactory","ap.ListFactory.constructor","ap.ListFactory.create","ap.ListItem","ap.ListItem.constructor","ap.ListItem.deleteAttachment","ap.ListItem.deleteItem","ap.ListItem.getAttachmentCollection","ap.ListItem.getAvailableWorkflows","ap.ListItem.getChanges","ap.ListItem.getFieldChoices","ap.ListItem.getFieldDefinition","ap.ListItem.getFieldDescription","ap.ListItem.getFieldLabel","ap.ListItem.getFieldVersionHistory","ap.ListItem.getFormattedValue","ap.ListItem.getList","ap.ListItem.getListId","ap.ListItem.getLookupReference","ap.ListItem.registerPreDeleteAction","ap.ListItem.registerPreSaveAction","ap.ListItem.registerPostSaveAction","ap.ListItem.resolvePermissions","ap.ListItem.saveChanges","ap.ListItem.saveFields","ap.ListItem.setPristine","ap.ListItem.startWorkflow","ap.ListItem.startWorkflow.initiateRequest","ap.ListItem.validateEntity","ap.StandardListItem","ap.StandardListItem.constructor","ap.ListItemFactory","ap.ListItemFactory.constructor","ap.ListItemFactory.create","ap.ListItemFactory.createGenericFactory","ap.Lookup","ap.Lookup.constructor","ap.LookupFactory","ap.LookupFactory.constructor","ap.LookupFactory.create","ap.Model","ap.Model.constructor","ap.Model.addNewItem","ap.Model.createEmptyItem","ap.Model.executeQuery","ap.Model.extendListMetadata","ap.Model.generateMockData","ap.Model.getAllListItems","ap.Model.getCache","ap.Model.getCachedEntities","ap.Model.getCachedEntity","ap.Model.getFieldDefinition","ap.Model.getList","ap.Model.getListId","ap.Model.getListItemById","ap.Model.getModel","ap.Model.getQuery","ap.Model.isInitialised","ap.Model.registerQuery","ap.Model.resolvePermissions","ap.Model.validateEntity","ap.ModelFactory","ap.ModelFactory.constructor","ap.ModelFactory.create","ap.Query","ap.Query.constructor","ap.Query.execute","ap.Query.getCache","ap.QueryFactory","ap.QueryFactory.constructor","ap.QueryFactory.create","ap.User","ap.User.constructor","ap.UserFactory","ap.UserFactory.constructor","ap.UserFactory.create","ap.UserModel","ap.UserModel.constructor","ap.UserModel.checkIfMember","ap.UserModel.getGroupCollection","ap.UserModel.getUserProfile","ap.EntityContainer","ap.EntityContainer.constructor","ap.EntityContainer.getEntity","ap.EntityContainer.removeEntity","ap.ModelCache","ap.ModelCache.constructor","ap.CacheService","ap.CacheService.constructor","ap.CacheService.deleteEntity","ap.CacheService.getCachedEntities","ap.CacheService.getCachedEntity","ap.CacheService.getEntity","ap.CacheService.getEntityContainer","ap.CacheService.getListId","ap.CacheService.getListIdFromListName","ap.CacheService.getModel","ap.CacheService.getModelCache","ap.CacheService.registerEntity","ap.CacheService.registerModel","ap.CacheService.removeEntity","ap.ChangeService","ap.ChangeService.constructor","ap.ChangeService.registerListItemUpdate","ap.ChangeService.subscribeToUpdates","ap.DataService","ap.DataService.constructor","ap.DataService.createListItem","ap.DataService.createItemUrlFromFileRef","ap.DataService.deleteAttachment","ap.DataService.deleteListItem","ap.DataService.executeQuery","ap.DataService.generateWebServiceUrl","ap.DataService.getAvailableWorkflows","ap.DataService.getCollection","ap.DataService.getCollection.processXML","ap.DataService.getCurrentSite","ap.DataService.getFieldVersionHistory","ap.DataService.getGroupCollectionFromUser","ap.DataService.getList","ap.DataService.getListFields","ap.DataService.getUserProfileByName","ap.DataService.processChangeTokenXML","ap.DataService.processDeletionsSinceToken","ap.DataService.requestData","ap.DataService.retrieveChangeToken","ap.DataService.retrievePermMask","ap.DataService.serviceWrapper","ap.DataService.serviceWrapper.processXML","ap.DataService.startWorkflow","ap.DataService.updateListItem","ap.DataService.validateCollectionPayload","ap.DecodeService","ap.DecodeService.constructor","ap.DecodeService.checkResponseForErrors","ap.DecodeService.convertUTCDateToLocalDate","ap.DecodeService.createListItemProvider","ap.DecodeService.extendFieldDefinitionsFromXML","ap.DecodeService.extendListDefinitionFromXML","ap.DecodeService.extendListMetadata","ap.DecodeService.extendObjectWithXMLAttributes","ap.DecodeService.jsAttachments","ap.DecodeService.jsBoolean","ap.DecodeService.jsCalc","ap.DecodeService.jsChoiceMulti","ap.DecodeService.jsDate","ap.DecodeService.jsFloat","ap.DecodeService.jsInt","ap.DecodeService.jsLookup","ap.DecodeService.jsLookupMulti","ap.DecodeService.jsObject","ap.DecodeService.jsString","ap.DecodeService.jsUser","ap.DecodeService.jsUserMulti","ap.DecodeService.parseFieldVersions","ap.DecodeService.parseStringValue","ap.DecodeService.parseXMLEntity","ap.DecodeService.processListItems","ap.DecodeService.xmlToJson","ap.EncodeService","ap.EncodeService.constructor","ap.EncodeService.choiceMultiToString","ap.EncodeService.createValuePair","ap.EncodeService.encodeValue","ap.EncodeService.generateValuePairs","ap.EncodeService.stringifySharePointDate","ap.EncodeService.stringifySharePointMultiSelect","ap.exceptionLoggingService","ap.exceptionLoggingService.error","ap.ExportService","ap.ExportService.constructor","ap.ExportService.generateCSV","ap.ExportService.replaceWordChars","ap.ExportService.saveCSV","ap.ExportService.saveFile","ap.ExportService.saveJSON","ap.ExportService.saveXML","ap.FieldService","ap.FieldService.constructor","ap.FieldService.getDefaultValueForType","ap.FieldService.getDefinition","ap.FieldService.getMockData","ap.FieldService.mockPermMask","ap.FieldService.resolveValueForEffectivePermMask","ap.getFieldTypes","ap.getUniqueCounter","ap.randomBoolean","ap.randomCalc","ap.randomString","ap.randomStringArray","ap.randomParagraph","ap.randomCurrency","ap.randomDate","ap.randomInteger","ap.randomLookup","ap.randomUser","ap.randomLookupMulti","ap.randomUserMulti","ap.FormattedFieldValueService","ap.FormattedFieldValueService.constructor","ap.FormattedFieldValueService.getFormattedFieldValue","ap.FormattedFieldValueService.stringifyBoolean","ap.FormattedFieldValueService.stringifyCalc","ap.FormattedFieldValueService.stringifyCurrency","ap.FormattedFieldValueService.stringifyDate","ap.FormattedFieldValueService.stringifyLookup","ap.FormattedFieldValueService.stringifyMultiChoice","ap.FormattedFieldValueService.stringifyMultiLookup","ap.FormattedFieldValueService.stringifyNumber","ap.Logger","ap.Logger.constructor","ap.Logger.exception","ap.Logger.notify","ap.Logger.registerEvent","ap.Logger.subscribe","ap.SOAPEnvelope","ap.SOAPEnvelope.constructor","ap.Service","ap.Service.generateXMLComponents","ap.Service.generateXMLComponents.addToPayload","ap.Service.generateXMLComponents.siteDataFixSOAPEnvelope","ap.Service.wrapNode","ap.Service.fileName","ap.Service.encodeXml","ap.Service.escapeColumnValue","ap.SplitIndex","ap.SplitIndex.constructor","ap.UtilityService","ap.UtilityService.constructor","ap.UtilityService.batchProcess","ap.UtilityService.batchProcess.chunkTimer","ap.UtilityService.convertEffectivePermMask","ap.UtilityService.dateWithinRange","ap.UtilityService.doubleDigit","ap.UtilityService.fromCamelCase","ap.UtilityService.registerChange","ap.UtilityService.resolvePermissions","ap.UtilityService.stringifyXML","ap.UtilityService.toCamelCase","ap.UtilityService.yyyymmdd","ap.UtilityService.xmlToString","ap.WebServiceService","ap.WebServiceService.constructor","ap.WebServiceService.action","ap.WebServiceService.xmlns","ap.XMLToJSONService","ap.XMLToJSONService.constructor","ap.XMLToJSONService.filterNodes","ap.XMLToJSONService.parse"],"mappings":"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AAKA,CAACA,aAAaA,CAACA,IAAIA,CAACA,CAACA;YAC9BA,CAACA;YAEDA,KAAKA,CAACA,YAAYA,CAACA,QAAQA,CAACA;iBACvBA,IAAIA,CAACA,UAACA,YAAYA;gBACfA,AACAA,yGADyGA;gBACzGA,QAAQA,CAACA,OAAOA,CAACA,YAAYA,CAACA,KAAKA,EAAEA,CAACA,CAACA;YAC3CA,CAACA,EAAEA,UAACA,GAAGA;gBACHA,QAAQA,CAACA,MAAMA,CAACA,GAAGA,CAACA,CAACA;YACzBA,CAACA,CAACA,CAACA;YAEPA,MAAMA,CAACA,QAAQA,CAACA,OAAOA,CAACA;QAC5BA,CAACA;QAGDd;;;;;;;WAOGA;QACHA,wBAAQA,GAARA;YACIe,MAAMA,CAACA,IAAIA,CAACA;QAChBA,CAACA;QAGDf;;;;;;;;;;;;;;;;;;;;;WAqBGA;QACHA,wBAAQA,GAARA,UAAkCA,SAAiBA;YAC/CgB,IAAIA,KAAKA,GAAGA,IAAIA,EAAEA,KAAKA,CAACA;YACxBA,EAAEA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,KAAKA,CAACA,OAAOA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,CAACA;gBACvCA,AACAA,6BAD6BA;gBAC7BA,KAAKA,GAAGA,KAAKA,CAACA,OAAOA,CAACA,SAASA,CAACA,CAACA;YACrCA,CAACA;YAACA,IAAIA,CAACA,EAAEA,CAACA,CAACA,CAACA,CAACA,QAAQA,CAACA,KAAKA,CAACA,OAAOA,CAACA,QAAQA,CAACA,gBAAgBA,CAACA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA,CAACA;gBAC5EA,AACAA,mEADmEA;gBACnEA,KAAKA,GAAGA,KAAKA,CAACA,OAAOA,CAACA,QAAQA,CAACA,gBAAgBA,CAACA,CAACA;YACrDA,CAACA;YAACA,IAAIA,CAACA,CAACA;gBACJA,AACAA,gCADgCA;gBAChCA,KAAKA,GAAGA,SAASA,CAACA;YACtBA,CAACA;YACDA,MAAMA,CAACA,KAAKA,CAACA;QACjBA,CAACA;QAIDhB;;;;;;;WAOGA;QACHA,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AMA,CAACA,UAAUA,CAACA,CAACA;4BAC7BA,KAAKA,CAACA;wBACVA,KAAKA,QAAQA,CAACA;wBACdA,KAAKA,MAAMA;4BACPA,KAAKA,GAAGA,WAAWA,CAACA,UAAUA,CAACA,CAACA;4BAChCA,KAAKA,CAACA;wBACVA,KAAKA,aAAaA,CAACA;wBACnBA,KAAKA,WAAWA;4BACZA,AACAA,mDADmDA;4BACnDA,KAAKA,GAAGA,CAACA,CAACA,OAAOA,CAACA,UAAUA,CAACA,IAAIA,UAAUA,CAACA,MAAMA,GAAGA,CAACA,CAACA;4BACvDA,EAAEA,CAACA,CAACA,KAAKA,CAACA,CAACA,CAACA;gCACRA,AACAA,qEADqEA;gCACrEA,CAACA,CAACA,IAAIA,CAACA,UAAUA,EAAEA,UAACA,WAAWA;oCAC3BA,EAAEA,CAACA,CAACA,KAAKA,CAACA,CAACA,CAACA;wCACRA,KAAKA,GAAGA,WAAWA,CAACA,WAAWA,CAACA,CAACA;oCACrCA,CAACA;oCAACA,IAAIA,CAACA,CAACA;wCACJA,AACAA,oBADoBA;wCACpBA,MAAMA,CAACA,KAAKA,CAACA;oCACjBA,CAACA;gCACLA,CAACA,CAACA,CAACA;4BACPA,CAACA;4BACDA,KAAKA,CAACA;wBACVA;4BACIA,AACAA,2CAD2CA;4BAC3CA,KAAKA,GAAGA,CAACA,CAACA,CAACA,OAAOA,CAACA,UAAUA,CAACA,CAACA;oBAEvCA,CAACA;oBACDA,EAAEA,CAACA,CAACA,CAACA,KAAKA,IAAIA,IAAIA,CAACA,KAAKA,CAACA,CAACA,CAACA;wBACvBA,IAAIA,SAASA,GAAGA,eAAeA,CAACA,KAAKA,IAAIA,eAAeA,CAACA,UAAUA,CAACA;wBACpEA,MAAMA,CAACA,KAAKA,CAACA,SAASA,GAAGA,iCAAiCA,GAAGA,eAAeA,CAACA,CAACA;oBAClFA,CAACA;gBACLA,CAACA;gBACDA,EAAEA,CAACA,CAACA,CAACA,KAAKA,CAACA,CAACA,CAACA;oBACTA,MAAMA,CAACA,KAAKA,CAACA;gBACjBA,CAACA;YACLA,CAACA,CAACA,CA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A,CAACA,CAACA;gBACnBA,MAAMA,CAACA,IAAIA,CAACA;YAChBA,CAACA;YAACA,IAAIA,CAACA,CAACA;gBACJA,IAAIA,QAAQA,GAAGA,GAAGA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA;gBAC/BA,AACAA,yFADyFA;gBACzFA,MAAMA,CAACA,IAAIA,CAACA,gBAAgBA,CAACA,QAAQA,CAACA,CAACA,CAACA,EAAEA,QAAQA,CAACA,CAACA,CAACA,CAACA,CAACA;YAC3DA,CAACA;QACLA,CAACA;QAEDX,qCAAaA,GAAbA,UAAcA,GAAWA;YACrBY,EAAEA,CAACA,CAACA,GAAGA,CAACA,MAAMA,KAAKA,CAACA,CAACA,CAACA,CAACA;gBACnBA,MAAMA,CAACA,EAAEA,CAACA;YACdA,CAACA;YAACA,IAAIA,CAACA,CAACA;gBACJA,IAAIA,qBAAqBA,GAAGA,EAAEA,CAACA;gBAC/BA,IAAIA,eAAeA,GAAGA,GAAGA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA;gBACtCA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,eAAeA,CAACA,MAAMA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;oBAC9CA,EAAEA,CAACA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA,MAAMA,KAAKA,CAACA,CAACA,CAACA,CAACA;wBAClCA,qBAAqBA,CAACA,IAAIA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA,CAACA;oBACnDA,CAACA;gBACLA,CAACA;gBACDA,MAAMA,CAACA,qBAAqBA,CAACA;YACjCA,CAACA;QACLA,CAACA;QAEDZ,8BAAMA,GAANA,UAAOA,GAAWA;YACda,EAAEA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA;gBACPA,MAAMA,CAACA,IAAIA,CAACA;YAChBA,CAACA;YAACA,IAAIA,CAACA,CAACA;gBACJA,AACAA,gFADgFA;oBAC5EA,EAAEA,GAAGA,GAAGA,CAACA,KAAKA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,KAAKA,GAAGA,GAAGA,GAAGA,CAACA,KAAKA,CAACA,GAAGA,CAACA,GAAGA,GAAGA,CAACA,KAAKA,CAACA,GAAGA,CAACA,CAACA;gBACrEA,IAAIA,CAACA,GAAGA,EAAEA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,GAAGA,CAACA,CAACA;gBACzBA,IAAIA,CAACA,GAAGA,EAAEA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,GAAGA,CAACA,CAACA;gBACzBA,IAAIA,EAAEA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA,KAAKA,CAACA,GAAGA,CAACA,CAACA;gBACzBA,MAAMA,CAACA,IAAIA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA,CAACA,EAAEA,EAAEA,CAACA,CAACA,CAACA,CAACA,CAACA;YAC/DA,CAACA;QACLA,CAACA;QAEDb,+BAAOA,GAAPA,UAAQA,GAAWA;YACfc,EAAEA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA;gBACPA,MAAMA,CAACA,GAAGA,CAACA;YACfA,CAACA;YAACA,IAAIA,CAACA,CAACA;gBACJA,MAAMA,CAACA,UAAUA,CAACA,GAAGA,CAACA,CAACA;YAC3BA,CAACA;QACLA,CAACA;QAEDd,6BAAKA,GAALA,UAAMA,GAAWA;YACbe,EAAEA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA;gBACPA,MAAMA,CAACA,GAAGA,CAACA;YACfA,CAACA;YAACA,IAAIA,CAACA,CAACA;gBACJA,MAAMA,CAACA,QAAQA,CAACA,GAAGA,EAAEA,EAAEA,CAACA,CAACA;YAC7BA,CAACA;QACLA,CAACA;QAEDf,gCAAQA,GAARA,UAASA,GAAWA,EAAEA,OAAgBA;YAClCgB,EAAEA,CAACA,CAACA,GAAGA,CAACA,MAAMA,KAAKA,CAACA,CAACA,CAACA,CAACA;gBACnBA,MAAMA,CAACA,IAAIA,CAACA;YAChBA,CAACA;YAACA,IAAIA,CAACA,CAACA;gBACJA,AACAA,qBADqBA;gBACrBA,MAAMA,CAACA,IAAIA,CAACA,eAAeA,CAACA,MAAMA,CAACA,GAAGA,EAAEA,OAAOA,CAACA,CAACA;YACrDA,CAACA;QACLA,CAACA;QAEDhB,qCAAaA,GAAbA,UAAcA,GAAWA,EAAEA,OAAgBA;YACvCiB,EAAEA,CAACA,CAACA,GAAGA,CAACA,MAAMA,KAAKA,CAACA,CAACA,CAACA,CAACA;gBACnBA,MAAMA,CAACA,EAAEA,CAACA;YACdA,CAACA;YAACA,IAAIA,CAACA,CAACA;gBACJA,IAAIA,qBAAqBA,GAAGA,EAAEA,CAACA;gBAC/BA,IAAIA,eAAeA,GAAGA,GAAGA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA;gBACtCA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,eAAeA,CAACA,MAAMA,EAAEA,CAACA,GAAGA,CAACA,GAAGA,CAACA,EAAEA,CAACA;oBACpDA,AACAA,2EAD2EA;oBAC3EA,EAAEA,CAACA,CAACA,eAAeA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA;wBACrBA,IAAIA,UAAUA,GAAGA,IAAIA,CAACA,QAAQA,CAACA,eAAeA,CAACA,CAACA,CAACA,GAAGA,IAAIA,GAAGA,eAAeA,CAACA,CAACA,GAAGA,CAACA,CAACA,EAAEA,OAAOA,CAACA,CAACA;wBAC5FA,qBAAqBA,CAACA,IAAIA,CAACA,UAAUA,CAACA,CAACA;oBAC3CA,CAACA;gBACLA,CAACA;gBACDA,MAAMA,CAACA,qBAAqBA,CAACA;YACjCA,CAACA;QACLA,CAACA;QAEDjB,gCAAQA,GAARA,UAASA,GAAWA;YAChBkB,EAAEA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA;gBACPA,MAAMA,CAACA,GAAGA,CAACA;YACfA,CAACA;YAACA,IAAIA,CAACA,CAACA;gBACJA,AACA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A,CAACA,MAAMA,EAAEA,eAAeA,CAACA,KAAKA,CAACA,CAACA,QAAQA,EAAEA,CAACA;wBAC9DA,CAACA;oBACLA,CAACA;oBAACA,IAAIA,CAACA,CAACA;wBACJA,AACAA,2EAD2EA;4BACvEA,eAAeA,GAAGA,MAAMA,CAACA,kBAAkBA,CAACA,YAAYA,CAACA,CAACA;wBAC9DA,GAAGA,GAAGA,KAAIA,CAACA,4BAA4BA,CAACA,sBAAsBA,CAC1DA,MAAMA,CAACA,eAAeA,CAACA,KAAKA,CAACA,EAC7BA,eAAeA,CAACA,UAAUA,EAC1BA,IAAIA,CACPA,CAAAA;oBACLA,CAACA;oBACDA,AACAA,2BAD2BA;oBAC3BA,WAAWA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA;gBAC1BA,CAACA,CAACA,CAACA;gBACHA,AACAA,cADcA;gBACdA,aAAaA,CAACA,IAAIA,CAACA,WAAWA,CAACA,CAACA;YACpCA,CAACA,CAACA,CAACA;YACHA,MAAMA,CAACA,aAAaA,CAACA;QACzBA,CAACA;QAEDF;;;;;WAKGA;QACHA,wCAAgBA,GAAhBA,UAAiBA,IAAYA;YACzBG,IAAIA,CAACA,GAAGA,IAAIA,CAACA;YACbA,AACAA,qCADqCA;YACrCA,CAACA,GAAGA,CAACA,CAACA,OAAOA,CAACA,yBAAyBA,EAAEA,IAAIA,CAACA,CAACA;YAC/CA,AACAA,sBADsBA;YACtBA,CAACA,GAAGA,CAACA,CAACA,OAAOA,CAACA,yBAAyBA,EAAEA,IAAIA,CAACA,CAACA;YAC/CA,AACAA,WADWA;YACXA,CAACA,GAAGA,CAACA,CAACA,OAAOA,CAACA,SAASA,EAAEA,KAAKA,CAACA,CAACA;YAChCA,AACAA,SADSA;YACTA,CAACA,GAAGA,CAACA,CAACA,OAAOA,CAACA,kBAAkBA,EAAEA,GAAGA,CAACA,CAACA;YACvCA,AACAA,aADaA;YACbA,CAACA,GAAGA,CAACA,CAACA,OAAOA,CAACA,SAASA,EAAEA,GAAGA,CAACA,CAACA;YAC9BA,AACAA,qBADqBA;YACrBA,CAACA,GAAGA,CAACA,CAA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","file":"angular-point.js","sourcesContent":["/// <reference path=\"../typings/ap.d.ts\" />\n/// <reference path=\"../typings/tsd.d.ts\" />\n\nmodule ap {\n    'use strict';\n\n//TODO: Remove dependency on toastr\n    /** Check to see if dependent modules exist */\n    try {\n        angular.module('toastr');\n    }\n    catch (e) {\n        /** Toastr wasn't found so redirect all toastr requests to $log */\n        angular.module('toastr', [])\n            .factory('toastr', function ($log) {\n                return {\n                    error: $log.error,\n                    info: $log.info,\n                    success: $log.info,\n                    warning: $log.warn\n                };\n            });\n    }\n\n    /**\n     * @ngdoc overview\n     * @module\n     * @name angularPoint\n     * @description\n     * This is the primary angularPoint module and needs to be listed in your app.js dependencies to gain use of AngularPoint\n     * functionality in your project.\n     * @installModule\n     */\n    angular.module('angularPoint', [\n        'toastr'\n    ])\n    /** Bootstrap everything that needs to be immediately instantiated */\n    .run((apListItemFactory: ListItemFactory, apModelFactory: ModelFactory) => {\n        \n    })\n}\n","/// <reference path=\"app.module.ts\" />\n\nmodule ap {\n    'use strict';\n\n    angular.module('angularPoint')\n        .config(Config);\n\n    function Config(apConfig) {\n\n        /** Add a convenience flag, inverse of offline */\n        apConfig.online = !apConfig.offline;\n    }\n}\n","/// <reference path=\"../app.module.ts\" />\n\n/**\n * @ngdoc object\n * @name angularPoint.apConfig\n * @description\n * Basic config for the application (unique for each environment).  Update to change for your environment.\n *\n * @param {string} appTitle Name of the application in case you need to reference.\n * @param {boolean} debug Determines if we should show debug code.\n * @param {string} defaultUrl Automatically sets the defaultUrl for web service calls so we don't need to make the\n * initial blocking call by SPServices.\n * @param {string} [defaultQueryName='primary'] The name that a query is registered with on a model if a name isn't specified.\n * @param {string} [firebaseUrl] Necessary if you're using apSyncService.  Look there for more details.\n * @param {boolean} [offline] Automatically set based on the URL of the site.  Pulls offline XML when hosted locally.\n * @param {string} [offlineXML='dev/'] The location to look for offline xml files.\n * @example\n * <h4>Default Configuration</h4>\n * <pre>\n * .constant('apConfig', {\n *     appTitle: 'Angular-Point',\n *     debugEnabled: true,\n *     firebaseURL: \"The optional url of your firebase source\",\n *     offline: window.location.href.indexOf('localhost') > -1 ||\n *         window.location.href.indexOf('http://0.') > -1 ||\n *         window.location.href.indexOf('http://10.') > -1 ||\n *         window.location.href.indexOf('http://192.') > -1\n * })\n * </pre>\n *\n * <h4>To Override</h4>\n * <pre>\n * angular.module('MyApp', ['my dependencies'])\n *      .config(function ($stateProvider, $urlRouterProvider) {\n *          //My routes\n *      })\n *      .run(function(apConfig) {\n *          //To set the default site root\n *          apConfig.defaultUrl =\n *            '//sharepoint.myserver.com/siteRoot';\n *\n *          //To set the default location to look for\n *          //offline xml files.\n *          apConfig.offlineXML = 'myCachedQueries/';\n *      });\n * </pre>\n */\nmodule ap {\n    'use strict';\n\n    export interface IAPConfig {\n        appTitle: string;\n        debug: boolean;\n        defaultQueryName: string;\n        defaultUrl: string;\n        environment?: string;\n        firebaseURL?: string;\n        offline: boolean;\n        userLoginNamePrefix?: string;\n    }\n\n    export var APConfig: IAPConfig = {\n        appTitle: 'Angular-Point',\n        debug: false,\n        defaultQueryName: 'primary',\n        defaultUrl: '',\n        environment: 'production',\n        firebaseURL: \"The optional url of your firebase source\",\n        offline: window.location.href.indexOf('localhost') > -1 ||\n        window.location.href.indexOf('http://0.') > -1 ||\n        window.location.href.indexOf('http://10.') > -1 ||\n        window.location.href.indexOf('http://127.') > -1 ||\n        window.location.href.indexOf('http://192.') > -1,\n        offlineXML: 'dev/'\n    };\n\n    angular\n        .module('angularPoint')\n        .constant('apConfig', APConfig);\n}\n","/// <reference path=\"../app.module.ts\" />\n\nmodule ap {\n    'use strict';\n\n    export var DefaultFields: IFieldDefinition[] = [\n        { staticName: 'ID', objectType: 'Counter', mappedName: 'id', readOnly: true },\n        { staticName: 'Modified', objectType: 'DateTime', mappedName: 'modified', readOnly: true },\n        { staticName: 'Created', objectType: 'DateTime', mappedName: 'created', readOnly: true },\n        { staticName: 'Author', objectType: 'User', mappedName: 'author', readOnly: true },\n        { staticName: 'Editor', objectType: 'User', mappedName: 'editor', readOnly: true },\n        { staticName: 'PermMask', objectType: 'Mask', mappedName: 'permMask', readOnly: true },\n        { staticName: 'UniqueId', objectType: 'String', mappedName: 'uniqueId', readOnly: true },\n        { staticName: 'FileRef', objectType: 'Lookup', mappedName: 'fileRef', readOnly: true }\n    ];\n\n    /**\n     * @ngdoc object\n     * @name angularPoint.apDefaultFields\n     * @description\n     * Read only fields that should be included in all lists\n     */\n    angular\n        .module('angularPoint')\n        .constant('apDefaultFields', DefaultFields);\n\n}\n","/// <reference path=\"../app.module.ts\" />\n\nmodule ap {\n    'use strict';\n\n     export var DefaultListItemQueryOptions: string = '' +\n        '<QueryOptions>' +\n        '   <IncludeMandatoryColumns>FALSE</IncludeMandatoryColumns>' +\n        '   <IncludeAttachmentUrls>TRUE</IncludeAttachmentUrls>' +\n        '   <IncludeAttachmentVersion>FALSE</IncludeAttachmentVersion>' +\n        '   <ExpandUserField>FALSE</ExpandUserField>' +\n        '</QueryOptions>';\n\n     angular\n        .module('angularPoint')\n        .constant('apDefaultListItemQueryOptions', DefaultListItemQueryOptions);\n\n}\n","/// <reference path=\"../app.module.ts\" />\n\nmodule ap {\n    'use strict';\n\n    angular.module('angularPoint')\n    /** lodash */\n        .constant('_', _);\n}\n","/// <reference path=\"../app.module.ts\" />\n\n//  apWebServiceOperationConstants.OpName = [WebService, needs_SOAPAction];\n//      OpName              The name of the Web Service operation -> These names are unique\n//      WebService          The name of the WebService this operation belongs to\n//      needs_SOAPAction    Boolean indicating whether the operation needs to have the SOAPAction passed in the setRequestHeaderfunction.\n//                          true if the operation does a write, else false\n\n\nmodule ap {\n    'use strict';\n\n    export interface IWebServiceOperationConstants {\n        [key: string]: [string, boolean]\n    }\n\n    export var WebServiceOperationConstants: IWebServiceOperationConstants = {\n        GetAlerts: ['Alerts', false],\n        DeleteAlerts: ['Alerts', true],\n        Mode: ['Authentication', false],\n        Login: ['Authentication', false],\n        CopyIntoItems: ['Copy', true],\n        CopyIntoItemsLocal: ['Copy', true],\n        GetItem: ['Copy', false],\n        GetForm: ['Forms', false],\n        GetFormCollection: ['Forms', false],\n        AddAttachment: ['Lists', true],\n        AddDiscussionBoardItem: ['Lists', true],\n        AddList: ['Lists', true],\n        AddListFromFeature: ['Lists', true],\n        ApplyContentTypeToList: ['Lists', true],\n        CheckInFile: ['Lists', true],\n        CheckOutFile: ['Lists', true],\n        CreateContentType: ['Webs', true],\n        DeleteAttachment: ['Lists', true],\n        DeleteContentType: ['Lists', true],\n        DeleteContentTypeXmlDocument: ['Lists', true],\n        DeleteList: ['Lists', true],\n        GetAttachmentCollection: ['Lists', false],\n        GetList: ['Lists', false],\n        GetListAndView: ['Lists', false],\n        GetListCollection: ['Lists', false],\n        GetListContentType: ['Lists', false],\n        GetListContentTypes: ['Lists', false],\n        GetListItemChanges: ['Lists', false],\n        GetListItemChangesSinceToken: ['Lists', false],\n        GetListItems: ['Lists', false],\n        GetVersionCollection: ['Lists', false],\n        UndoCheckOut: ['Lists', true],\n        UpdateContentType: ['Webs', true],\n        UpdateContentTypesXmlDocument: ['Lists', true],\n        UpdateContentTypeXmlDocument: ['Lists', true],\n        UpdateList: ['Lists', true],\n        UpdateListItems: ['Lists', true],\n        AddMeeting: ['Meetings', true],\n        CreateWorkspace: ['Meetings', true],\n        RemoveMeeting: ['Meetings', true],\n        SetWorkSpaceTitle: ['Meetings', true],\n        ResolvePrincipals: ['People', false],\n        SearchPrincipals: ['People', false],\n        AddPermission: ['Permissions', true],\n        AddPermissionCollection: ['Permissions', true],\n        GetPermissionCollection: ['Permissions', true],\n        RemovePermission: ['Permissions', true],\n        RemovePermissionCollection: ['Permissions', true],\n        UpdatePermission: ['Permissions', true],\n        GetLinks: ['PublishedLinksService', true],\n        GetPortalSearchInfo: ['Search', false],\n        GetQuerySuggestions: ['Search', false],\n        GetSearchMetadata: ['Search', false],\n        Query: ['Search', false],\n        QueryEx: ['Search', false],\n        Registration: ['Search', false],\n        Status: ['Search', false],\n        SendClientScriptErrorReport: ['SharePointDiagnostics', true],\n        GetAttachments: ['SiteData', false],\n        EnumerateFolder: ['SiteData', false],\n        SiteDataGetList: ['SiteData', false],\n        SiteDataGetListCollection: ['SiteData', false],\n        SiteDataGetSite: ['SiteData', false],\n        SiteDataGetSiteUrl: ['SiteData', false],\n        SiteDataGetWeb: ['SiteData', false],\n        CreateWeb: ['Sites', true],\n        DeleteWeb: ['Sites', true],\n        GetSite: ['Sites', false],\n        GetSiteTemplates: ['Sites', false],\n        AddComment: ['SocialDataService', true],\n        AddTag: ['SocialDataService', true],\n        AddTagByKeyword: ['SocialDataService', true],\n        CountCommentsOfUser: ['SocialDataService', false],\n        CountCommentsOfUserOnUrl: ['SocialDataService', false],\n        CountCommentsOnUrl: ['SocialDataService', false],\n        CountRatingsOnUrl: ['SocialDataService', false],\n        CountTagsOfUser: ['SocialDataService', false],\n        DeleteComment: ['SocialDataService', true],\n        DeleteRating: ['SocialDataService', true],\n        DeleteTag: ['SocialDataService', true],\n        DeleteTagByKeyword: ['SocialDataService', true],\n        DeleteTags: ['SocialDataService', true],\n        GetAllTagTerms: ['SocialDataService', false],\n        GetAllTagTermsForUrlFolder: ['SocialDataService', false],\n        GetAllTagUrls: ['SocialDataService', false],\n        GetAllTagUrlsByKeyword: ['SocialDataService', false],\n        GetCommentsOfUser: ['SocialDataService', false],\n        GetCommentsOfUserOnUrl: ['SocialDataService', false],\n        GetCommentsOnUrl: ['SocialDataService', false],\n        GetRatingAverageOnUrl: ['SocialDataService', false],\n        GetRatingOfUserOnUrl: ['SocialDataService', false],\n        GetRatingOnUrl: ['SocialDataService', false],\n        GetRatingsOfUser: ['SocialDataService', false],\n        GetRatingsOnUrl: ['SocialDataService', false],\n        GetSocialDataForFullReplication: ['SocialDataService', false],\n        GetTags: ['SocialDataService', true],\n        GetTagsOfUser: ['SocialDataService', true],\n        GetTagTerms: ['SocialDataService', true],\n        GetTagTermsOfUser: ['SocialDataService', true],\n        GetTagTermsOnUrl: ['SocialDataService', true],\n        GetTagUrlsOfUser: ['SocialDataService', true],\n        GetTagUrlsOfUserByKeyword: ['SocialDataService', true],\n        GetTagUrls: ['SocialDataService', true],\n        GetTagUrlsByKeyword: ['SocialDataService', true],\n        SetRating: ['SocialDataService', true],\n        UpdateComment: ['SocialDataService', true],\n        SpellCheck: ['SpellCheck', false],\n        AddTerms: ['TaxonomyClientService', true],\n        GetChildTermsInTerm: ['TaxonomyClientService', false],\n        GetChildTermsInTermSet: ['TaxonomyClientService', false],\n        GetKeywordTermsByGuids: ['TaxonomyClientService', false],\n        GetTermsByLabel: ['TaxonomyClientService', false],\n        GetTermSets: ['TaxonomyClientService', false],\n        AddGroup: ['usergroup', true],\n        AddGroupToRole: ['usergroup', true],\n        AddRole: ['usergroup', true],\n        AddRoleDef: ['usergroup', true],\n        AddUserCollectionToGroup: ['usergroup', true],\n        AddUserCollectionToRole: ['usergroup', true],\n        AddUserToGroup: ['usergroup', true],\n        AddUserToRole: ['usergroup', true],\n        GetAllUserCollectionFromWeb: ['usergroup', false],\n        GetGroupCollection: ['usergroup', false],\n        GetGroupCollectionFromRole: ['usergroup', false],\n        GetGroupCollectionFromSite: ['usergroup', false],\n        GetGroupCollectionFromUser: ['usergroup', false],\n        GetGroupCollectionFromWeb: ['usergroup', false],\n        GetGroupInfo: ['usergroup', false],\n        GetRoleCollection: ['usergroup', false],\n        GetRoleCollectionFromGroup: ['usergroup', false],\n        GetRoleCollectionFromUser: ['usergroup', false],\n        GetRoleCollectionFromWeb: ['usergroup', false],\n        GetRoleInfo: ['usergroup', false],\n        GetRolesAndPermissionsForCurrentUser: ['usergroup', false],\n        GetRolesAndPermissionsForSite: ['usergroup', false],\n        GetUserCollection: ['usergroup', false],\n        GetUserCollectionFromGroup: ['usergroup', false],\n        GetUserCollectionFromRole: ['usergroup', false],\n        GetUserCollectionFromSite: ['usergroup', false],\n        GetUserCollectionFromWeb: ['usergroup', false],\n        GetUserInfo: ['usergroup', false],\n        GetUserLoginFromEmail: ['usergroup', false],\n        RemoveGroup: ['usergroup', true],\n        RemoveGroupFromRole: ['usergroup', true],\n        RemoveRole: ['usergroup', true],\n        RemoveUserCollectionFromGroup: ['usergroup', true],\n        RemoveUserCollectionFromRole: ['usergroup', true],\n        RemoveUserCollectionFromSite: ['usergroup', true],\n        RemoveUserFromGroup: ['usergroup', true],\n        RemoveUserFromRole: ['usergroup', true],\n        RemoveUserFromSite: ['usergroup', true],\n        RemoveUserFromWeb: ['usergroup', true],\n        UpdateGroupInfo: ['usergroup', true],\n        UpdateRoleDefInfo: ['usergroup', true],\n        UpdateRoleInfo: ['usergroup', true],\n        UpdateUserInfo: ['usergroup', true],\n        AddColleague: ['UserProfileService', true],\n        AddLink: ['UserProfileService', true],\n        AddMembership: ['UserProfileService', true],\n        AddPinnedLink: ['UserProfileService', true],\n        CreateMemberGroup: ['UserProfileService', true],\n        CreateUserProfileByAccountName: ['UserProfileService', true],\n        GetCommonColleagues: ['UserProfileService', false],\n        GetCommonManager: ['UserProfileService', false],\n        GetCommonMemberships: ['UserProfileService', false],\n        GetInCommon: ['UserProfileService', false],\n        GetPropertyChoiceList: ['UserProfileService', false],\n        GetUserColleagues: ['UserProfileService', false],\n        GetUserLinks: ['UserProfileService', false],\n        GetUserMemberships: ['UserProfileService', false],\n        GetUserPinnedLinks: ['UserProfileService', false],\n        GetUserProfileByGuid: ['UserProfileService', false],\n        GetUserProfileByIndex: ['UserProfileService', false],\n        GetUserProfileByName: ['UserProfileService', false],\n        GetUserProfileCount: ['UserProfileService', false],\n        GetUserProfileSchema: ['UserProfileService', false],\n        GetUserPropertyByAccountName: ['UserProfileService', false],\n        ModifyUserPropertyByAccountName: ['UserProfileService', true],\n        RemoveAllColleagues: ['UserProfileService', true],\n        RemoveAllLinks: ['UserProfileService', true],\n        RemoveAllMemberships: ['UserProfileService', true],\n        RemoveAllPinnedLinks: ['UserProfileService', true],\n        RemoveColleague: ['UserProfileService', true],\n        RemoveLink: ['UserProfileService', true],\n        RemoveMembership: ['UserProfileService', true],\n        RemovePinnedLink: ['UserProfileService', true],\n        UpdateColleaguePrivacy: ['UserProfileService', true],\n        UpdateLink: ['UserProfileService', true],\n        UpdateMembershipPrivacy: ['UserProfileService', true],\n        UpdatePinnedLink: ['UserProfileService', true],\n        DeleteAllVersions: ['Versions', true],\n        DeleteVersion: ['Versions', true],\n        GetVersions: ['Versions', false],\n        RestoreVersion: ['Versions', true],\n        AddView: ['Views', true],\n        DeleteView: ['Views', true],\n        GetView: ['Views', false],\n        GetViewHtml: ['Views', false],\n        GetViewCollection: ['Views', false],\n        UpdateView: ['Views', true],\n        UpdateViewHtml: ['Views', true],\n        AddWebPart: ['WebPartPages', true],\n        AddWebPartToZone: ['WebPartPages', true],\n        GetWebPart2: ['WebPartPages', false],\n        GetWebPartPage: ['WebPartPages', false],\n        GetWebPartProperties: ['WebPartPages', false],\n        GetWebPartProperties2: ['WebPartPages', false],\n        GetColumns: ['Webs', false],\n        GetContentType: ['Webs', false],\n        GetContentTypes: ['Webs', false],\n        GetCustomizedPageStatus: ['Webs', false],\n        GetListTemplates: ['Webs', false],\n        GetObjectIdFromUrl: ['Webs', false],\n        GetWeb: ['Webs', false],\n        GetWebCollection: ['Webs', false],\n        GetAllSubWebCollection: ['Webs', false],\n        UpdateColumns: ['Webs', true],\n        WebUrlFromPageUrl: ['Webs', false],\n        AlterToDo: ['Workflow', true],\n        ClaimReleaseTask: ['Workflow', true],\n        GetTemplatesForItem: ['Workflow', false],\n        GetToDosForItem: ['Workflow', false],\n        GetWorkflowDataForItem: ['Workflow', false],\n        GetWorkflowTaskData: ['Workflow', false],\n        StartWorkflow: ['Workflow', true]\n    };\n\n    angular.module('angularPoint')\n        .constant('apWebServiceOperationConstants', WebServiceOperationConstants);\n\n}\n","/// <reference path=\"../app.module.ts\" />\n\nmodule ap {\n    'use strict';\n\n    export interface IXMLFieldAttributeTypes {\n        [key: string]: string;\n    }\n\n    export var XMLFieldAttributeTypes: IXMLFieldAttributeTypes = {\n        Decimals: 'Number',\n        EnforceUniqueValues: 'Boolean',\n        Filterable: 'Boolean',\n        FromBaseType: 'Boolean',\n        Hidden: 'Boolean',\n        Indexed: 'Boolean',\n        NumLines: 'Number',\n        ReadOnly: 'Boolean',\n        Required: 'Boolean',\n        Sortable: 'Boolean'\n    };\n\n    /**\n     * @ngdoc object\n     * @name angularPoint.apXMLListAttributeTypes\n     * @description Constant object map which contains many common XML attributes found on a field definition with their\n     * corresponding type.\n     */\n    angular\n        .module('angularPoint')\n        .constant('apXMLFieldAttributeTypes', XMLFieldAttributeTypes);\n\n}\n","/// <reference path=\"../app.module.ts\" />\n\nmodule ap {\n    'use strict';\n\n    export interface IXMLListAttributeTypes {\n        [key: string]: string;\n    }\n\n    export var XMLListAttributeTypes: IXMLListAttributeTypes = {\n        BaseType: 'Number',\n        ServerTemplate: 'Number',\n        Created: 'DateTime',\n        Modified: 'DateTime',\n        LastDeleted: 'DateTime',\n        Version: 'Number',\n        ThumbnailSize: 'Number',\n        WebImageWidth: 'Number',\n        WebImageHeight: 'Number',\n        Flags: 'Number',\n        ItemCount: 'Number',\n        ReadSecurity: 'Number',\n        WriteSecurity: 'Number',\n        Author: 'Number',\n        MajorWithMinorVersionsLimit: 'Number',\n        HasUniqueScopes: 'Boolean',\n        NoThrottleListOperations: 'Boolean',\n        HasRelatedLists: 'Boolean',\n        AllowDeletion: 'Boolean',\n        AllowMultiResponses: 'Boolean',\n        EnableAttachments: 'Boolean',\n        EnableModeration: 'Boolean',\n        EnableVersioning: 'Boolean',\n        HasExternalDataSource: 'Boolean',\n        Hidden: 'Boolean',\n        MultipleDataList: 'Boolean',\n        Ordered: 'Boolean',\n        ShowUser: 'Boolean',\n        EnablePeopleSelector: 'Boolean',\n        EnableResourceSelector: 'Boolean',\n        EnableMinorVersion: 'Boolean',\n        RequireCheckout: 'Boolean',\n        ThrottleListOperations: 'Boolean',\n        ExcludeFromOfflineClient: 'Boolean',\n        EnableFolderCreation: 'Boolean',\n        IrmEnabled: 'Boolean',\n        IsApplicationList: 'Boolean',\n        PreserveEmptyValues: 'Boolean',\n        StrictTypeCoercion: 'Boolean',\n        EnforceDataValidation: 'Boolean',\n        MaxItemsPerThrottledOperation: 'Number'\n    };\n\n    /**\n     * @ngdoc object\n     * @name angularPoint.apXMLListAttributeTypes\n     * @description Constant object map which contains many common XML attributes found on a list definition with their\n     * corresponding type.\n     */\n    angular\n        .module('angularPoint')\n        .constant('apXMLListAttributeTypes', XMLListAttributeTypes);\n\n}\n","/// <reference path=\"../app.module.ts\" />\n\nmodule ap {\n    'use strict';\n\n    export class CamlFactory {\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apCamlFactory:camlContainsQuery\n         * @methodOf angularPoint.apCamlFactory\n         * @parameter {object[]} fieldDefinitionsArray Array of fields to search for a given search string.\n         * @parameter {string} searchString String of text to search records for.\n         * @description\n         * Returns a combination of selectors using CAML '<Or></Or>' elements\n         * @returns {string} Caml select string.\n         * @example\n         * <pre>\n         *\n         * var testHTML = {objectType: 'HTML', staticName: 'HTML'};\n         * var testJSON = {objectType: 'JSON', staticName: 'JSON'};\n         * var testText = {objectType: 'Text', staticName: 'Text'};\n         * var testText2 = {objectType: 'Text', staticName: 'Text'};\n         *\n         * var testCaml = camlContainsQuery([testHTML, testText, testJSON, testText2], 'Test Query');\n         * console.log(testCaml);\n         *\n         * //Returns\n         * <Or><Contains><FieldRef Name=\\\"HTML\\\" /><Value Type=\\\"Text\\\"><![CDATA[Test Query]]>\n         * </Value></Contains><Or><Contains><FieldRef Name=\\\"Text\\\" /><Value Type=\\\"Text\\\">Test Query</Value>\n         * </Contains><Or><Contains><FieldRef Name=\\\"JSON\\\" /><Value Type=\\\"Text\\\"><![CDATA[Test Query]]>\n         * </Value></Contains><Contains><FieldRef Name=\\\"Text\\\" /><Value Type=\\\"Text\\\">Test Query</Value>\n         * </Contains></Or></Or></Or>\n         * </pre>\n         */\n        camlContainsQuery(fieldDefinitionsArray: IFieldDefinition[], searchString: string): string {\n            var selectStatements = [];\n\n            /** Create a select statement for each field */\n            _.each(fieldDefinitionsArray, (fieldDefinition, definitionIndex) => {\n                selectStatements.push(this.createCamlContainsSelector(fieldDefinition, searchString));\n            });\n\n            return this.chainCamlSelects(selectStatements, 'And');\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apCamlFactory:chainCamlSelects\n         * @methodOf angularPoint.apCamlFactory\n         * @description\n         * Used to combine multiple caml selectors into a single CAML query string wrapped properly.\n         * @param {object[]} selectStatements An array of select statements to wrap in \"<Or>\".\n         * @param {string} joinType Valid caml join type ('Or', 'And', ...).\n         * @returns {string} CAML query string.\n         */\n        chainCamlSelects(selectStatements: Object[], joinType: string): string {\n            var camlQuery = '',\n                camlQueryClosure = '';\n            _.each(selectStatements, function(statement, statementIndex) {\n                /** Add an or clause if we still have additional fields to process */\n                if (statementIndex < selectStatements.length - 1) {\n                    camlQuery += '<' + joinType + '>';\n                    camlQueryClosure = '</' + joinType + '>' + camlQueryClosure;\n                }\n                camlQuery += statement;\n            });\n            return camlQuery + camlQueryClosure;\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apCamlFactory:createCamlContainsSelector\n         * @methodOf angularPoint.apCamlFactory\n         * @description\n         * Escapes characters that SharePoint gets upset about based on field type.\n         * @example\n         * <pre>\n         * var testHTML = {objectType: 'HTML', staticName: 'HTML'};\n         *\n         * var testCaml = createCamlContainsSelector(testHTML, 'Test Query');\n         * console.log(testCaml);\n         *\n         * //Returns\n         * <Contains>\n         *   <FieldRef Name=\\\"HTML\\\" />\n         *   <Value Type=\\\"Text\\\"><![CDATA[Test Query]]></Value>\n         * </Contains>\n         * </pre>\n         */\n        createCamlContainsSelector(fieldDefinition: IFieldDefinition, searchString: string): string {\n            var camlSelector;\n            switch (fieldDefinition.objectType) {\n                case 'HTML':\n                case 'JSON':\n                    camlSelector = '' +\n                    '<Contains>' +\n                    '<FieldRef Name=\"' + fieldDefinition.staticName + '\" />' +\n                    /** Use CDATA wrapper to escape [&, <, > ] */\n                    '<Value Type=\"Text\"><![CDATA[' + searchString + ']]></Value>' +\n                    '</Contains>';\n                    break;\n                default:\n                    camlSelector = '' +\n                    '<Contains>' +\n                    '<FieldRef Name=\"' + fieldDefinition.staticName + '\" />' +\n                    '<Value Type=\"Text\">' + searchString + '</Value>' +\n                    '</Contains>';\n            }\n            return camlSelector;\n        }\n\n\n    }\n\n    /**\n     * @ngdoc function\n     * @name angularPoint.apCamlFactory\n     * @description\n     * Tools to assist with the creation of CAML queries.\n     *\n     */\n    angular.module('angularPoint')\n        .service('apCamlFactory', CamlFactory);\n}\n","/// <reference path=\"../app.module.ts\" />\n\nmodule ap {\n    'use strict';\n\n    var apFieldService: FieldService, apUtilityService: UtilityService;\n\n    export interface IXMLFieldDefinition{\n        ID: string;\n        Type: string;\n        ReadOnly: string;\n        Hidden: string;\n        DisplayName: string;\n        Required: string;\n        SourceID: string;\n        ColName: string;\n        StaticName: string;\n        Choices?: string[];\n        Description?: string;\n        Indexed?: string;\n        EnforceUniqueValues?: string;\n        RowOrdinal?: string;\n        Sortable?: string;\n        Filterable?: string;\n        RelationshipDeleteBehavior?: string;\n        List?: string;\n        ShowField?: string;\n        ResultType?: string;\n        FillInChoice?: string;\n        Name?: string;\n        NumLines?: string;\n        RichText?: string;\n        Format?: string;\n    }\n\n    export interface IFieldDefinition {\n        choices?: string[];\n        description?: string;\n        displayName?: string;\n        getDefaultValueForType?: () => string;\n        getDefinition?: () => string;\n        getMockData?: (options?: Object) => any;\n        label?: string;\n        mappedName: string;\n        objectType: string;\n        readOnly?: boolean;\n        required?: boolean;\n        staticName: string;\n    }\n\n    //An extended field definition combines the user defined field definition with the XML returned by SharePoint\n    export interface IExtendedFieldDefinition extends IXMLFieldDefinition, IFieldDefinition{\n\n    }\n\n\n    /**\n     * @ngdoc object\n     * @name Field\n     * @description\n     * Defined in the MODEL.list.fieldDefinitions array.  Each field definition object maps an internal field\n     * in a SharePoint list/library to a JavaScript object using the internal SharePoint field name, the field\n     * type, and the desired JavaScript property name to add onto the parsed list item object. Ignore shown usage,\n     * each field definition is just an object within the fieldDefinitions array.\n     * @param {object} obj Field definition.\n     * @param {string} obj.staticName The actual SharePoint field name.\n     * @param {string} [obj.objectType='Text']\n     * <dl>\n     *     <dt>Boolean</dt>\n     *     <dd>Used to store a TRUE/FALSE value (stored in SharePoint as 0 or 1).</dd>\n     *     <dt>Calc</dt>\n     *     <dd>\";#\" Delimited String: The first value will be the calculated column value\n     *     type, the second will be the value</dd>\n     *     <dt>Choice</dt>\n     *     <dd>Simple text string but when processing the initial list definition, we\n     *     look for a Choices XML element within the field definition and store each\n     *     value.  We can then retrieve the valid Choices with one of the following:\n     *     ```var fieldDefinition = LISTITEM.getFieldDefinition('CHOICE_FIELD_NAME');```\n     *                                      or\n     *     ```var fieldDefinition = MODELNAME.getFieldDefinition('CHOICE_FIELD_NAME');```\n     *     ```var choices = fieldDefinition.Choices;```\n\n     *     </dd>\n     *     <dt>Counter</dt>\n     *     <dd>Same as Integer. Generally used only for the internal ID field. Its integer\n     *     value is set automatically to be unique with respect to every other item in the\n     *     current list. The Counter type is always read-only and cannot be set through a\n     *     form post.</dd>\n     *     <dt>Currency</dt>\n     *     <dd>Floating point number.</dd>\n     *     <dt>DateTime</dt>\n     *     <dd>Replace dashes with slashes and the \"T\" deliminator with a space if found.  Then\n     *     converts into a valid JS date object.</dd>\n     *     <dt>Float</dt>\n     *     <dd>Floating point number.</dd>\n     *     <dt>HTML</dt>\n     *     <dd>```_.unescape(STRING)```</dd>\n     *     <dt>Integer</dt>\n     *     <dd>Parses the string to a base 10 int.</dd>\n     *     <dt>JSON</dt>\n     *     <dd>Parses JSON if valid and converts into a a JS object.  If not valid, an error is\n     *     thrown with additional info on specifically what is invalid.</dd>\n     *     <dt>Lookup</dt>\n     *     <dd>Passes string to Lookup constructor where it is broken into an object containing\n     *     a \"lookupValue\" and \"lookupId\" attribute.  Inherits additional prototype methods from\n     *     Lookup.  See [Lookup](#/api/Lookup) for more information.\n     *     </dd>\n     *     <dt>LookupMulti</dt>\n     *     <dd>Converts multiple delimited \";#\" strings into an array of Lookup objects.</dd>\n     *     <dt>MultiChoice</dt>\n     *     <dd>Converts delimited \";#\" string into an array of strings representing each of the\n     *     selected choices.  Similar to the single \"Choice\", the XML Choices are stored in the\n     *     field definition after the initial call is returned from SharePoint so we can reference\n     *     later.\n     *     </dd>\n     *     <dt>Number</dt>\n     *     <dd>Treats as a float.</dd>\n     *     <dt>Text</dt>\n     *     <dd>**Default** No processing of the text string from XML.</dd>\n     *     <dt>User</dt>\n     *     <dd>Similar to Lookup but uses the \"User\" prototype as a constructor to convert into a\n     *     User object with \"lookupId\" and \"lookupValue\" attributes.  The lookupId is the site collection\n     *     ID for the user and the lookupValue is typically the display name.\n     *     See [User](#/api/User) for more information.\n     *     </dd>\n     *     <dt>UserMulti</dt>\n     *     <dd>Parses delimited string to returns an array of User objects.</dd>\n     * </dl>\n     * @param {string} obj.mappedName The attribute name we'd like to use\n     * for this field on the newly created JS object.\n     * @param {boolean} [obj.readOnly=false] When saving, we only push fields\n     * that are mapped and not read only.\n     * @param {boolean} [obj.required=false] Allows us to validate the field to ensure it is valid based\n     * on field type.\n     * @returns {object} Field\n     *\n     * @requires angularPoint.apFieldFactory\n     * @constructor\n     */\n    export class FieldDefinition implements IFieldDefinition {\n        displayName;\n        internalName;\n        label;\n        mappedName;\n        objectType;\n        staticName;\n        constructor(obj) {\n            var self = this;\n            var defaults = {\n                readOnly: false,\n                objectType: 'Text'\n            };\n            _.assign(self, defaults, obj);\n            self.displayName = self.displayName ? self.displayName : apUtilityService.fromCamelCase(self.mappedName);\n            /** Deprecated internal name and replace with staticName but maintain compatibility */\n            self.staticName = self.staticName || self.internalName;\n        }\n\n        /**\n         * @ngdoc function\n         * @name Field:getDefaultValueForType\n         * @methodOf Field\n         * @description\n         * Returns an object defining a specific field type\n         * @returns {object} { defaultValue: '...':string, staticMock: '...':string, dynamicMock: ...:Function}\n         */\n        getDefinition() {\n            return apFieldService.getDefinition(this.objectType);\n        }\n\n        /**\n         * @ngdoc function\n         * @name Field:getDefaultValueForType\n         * @methodOf Field\n         * @description\n         * Can return mock data appropriate for the field type, by default it dynamically generates data but\n         * the staticValue param will instead return a hard coded type specific value.\n         */\n        getDefaultValueForType() {\n            return apFieldService.getDefaultValueForType(this.objectType);\n        }\n\n        /**\n         * @ngdoc function\n         * @name Field:getMockData\n         * @methodOf Field\n         * @param {object} [options] Optional params passed to apFieldService.getMockData.\n         * @param {boolean} [options.staticValue=false] Default to dynamically build mock data.\n         * @returns {*} mockData\n         */\n        getMockData(options) {\n            return apFieldService.getMockData(this.objectType, options);\n        }\n    }\n\n    /**\n     * @ngdoc service\n     * @name angularPoint.apFieldFactory\n     * @description\n     * Contains the Field constructor and prototype definitions.\n     * @property {constructor} Field The Field constructor.\n     *\n     * @requires angularPoint.apFieldService\n     * @requires angularPoint.apUtilityService\n     *\n     */\n    export class FieldFactory {\n        FieldDefinition = FieldDefinition;\n        static $inject = ['apFieldService', 'apUtilityService'];\n        constructor(_apFieldService_, _apUtilityService_) {\n            apFieldService = _apFieldService_;\n            apUtilityService = _apUtilityService_;\n        }\n    }\n\n\n    angular\n        .module('angularPoint')\n        .service('apFieldFactory', FieldFactory);\n\n}\n","/// <reference path=\"../app.module.ts\" />\n\nmodule ap {\n    'use strict';\n\n    interface IUninstantiatedIndexCache<T extends ListItem<any>>{\n        [key: number]: T;\n    }\n\n    /**\n     * @ngdoc object\n     * @name IndexedCache\n     * @description\n     * Cache constructor that is extended to make it easier to work with via prototype methods.  Located in\n     * apIndexedCacheFactory.\n     * @param {object} [object] Optionally extend new cache with provided object.\n     * @requires angularPoint.apIndexedCacheFactory\n     * @constructor\n     */\n    export class IndexedCache<T extends ListItem<any>>{\n        //Object with keys equaling ID and values being the individual list item\n        [key: number]: T;\n        constructor(object?: IUninstantiatedIndexCache<T>) {\n            if (object) {\n                _.assign(this, object);\n            }\n        }\n\n        /**\n         * @ngdoc function\n         * @name IndexedCache.addEntity\n         * @methodOf IndexedCache\n         * @description\n         * Adds a new key to the cache if not already there with a value of the new listItem.\n         * @param {object} listItem Entity to add to the cache.\n         */\n        addEntity(listItem: T): void {\n            if (_.isObject(listItem) && !!listItem.id) {\n                /** Only add the listItem to the cache if it's not already there */\n                if (!this[listItem.id]) {\n                    this[listItem.id.toString()] = listItem;\n                }\n            } else {\n                throw new Error('A valid listItem wasn\\'t found: ' + JSON.stringify(listItem));\n            }\n        }\n\n        /**\n         * @ngdoc function\n         * @name IndexedCache.clear\n         * @methodOf IndexedCache\n         * @description\n         * Clears all cached elements from the containing cache object.\n         */\n        clear(): void {\n            _.each(this, (listItem, key) => delete this[key]);\n        }\n\n        /**\n         * @ngdoc function\n         * @name IndexedCache.count\n         * @methodOf IndexedCache\n         * @description\n         * Returns the number of entities in the cache.\n         * @returns {number} Number of entities in the cache.\n         */\n        count(): number {\n            return this.keys().length;\n        }\n\n        /**\n         * @ngdoc function\n         * @name IndexedCache.first\n         * @methodOf IndexedCache\n         * @description\n         * Returns the first listItem in the index (smallest ID).\n         * @returns {object} First listItem in cache.\n         */\n        first(): T {\n            return this.nthEntity(0);\n        }\n\n        /**\n         * @ngdoc function\n         * @name IndexedCache.keys\n         * @methodOf IndexedCache\n         * @description\n         * Returns the array of keys (listItem ID's) for the cache.\n         * @returns {string[]} Array of listItem id's as strings.\n         */\n        keys(): string[] {\n            return _.keys(this);\n        }\n\n        /**\n         * @ngdoc function\n         * @name IndexedCache.last\n         * @methodOf IndexedCache\n         * @description\n         * Returns the last listItem in the index (largest ID).\n         * @returns {object} Last listItem in cache.\n         */\n        last(): T {\n            var keys = this.keys();\n            return this[keys[keys.length - 1]];\n        }\n\n        /**\n         * @ngdoc function\n         * @name IndexedCache.nthEntity\n         * @methodOf IndexedCache\n         * @description\n         * Based on the\n         * @param {number} index The index of the item requested.\n         * @returns {object} First listItem in cache.\n         */\n        nthEntity(index: number): T {\n            var keys = this.keys();\n            return this[keys[index]];\n        }\n\n        /**\n         * @ngdoc function\n         * @name IndexedCache.removeEntity\n         * @methodOf IndexedCache\n         * @description\n         * Removes a listItem from the cache.\n         * @param {object|number} listItem Entity to remove or ID of listItem to be removed.\n         */\n        removeEntity(listItem: T | number): void {\n            if (_.isObject(listItem) && listItem.id && this[listItem.id]) {\n                delete this[listItem.id];\n            } else if (_.isNumber(listItem)) {\n                /** Allow listItem ID to be used instead of then listItem */\n                delete this[listItem];\n            }\n        }\n\n        /**\n         * @ngdoc function\n         * @name IndexedCache.toArray\n         * @methodOf IndexedCache\n         * @description\n         * Turns the cache object into an array of entities.\n         * @returns {object[]} Returns the array of entities currently in the cache.\n         */\n        toArray(): T[] {\n            return _.toArray(this);\n        }\n\n    }\n\n\n    /**\n     * @ngdoc object\n     * @name angularPoint.apIndexedCacheFactory\n     * @description\n     * Exposes the EntityFactory prototype and a constructor to instantiate a new Entity Factory in apCacheService.\n     *\n     */\n    export class IndexedCacheFactory {\n        /**\n         * @ngdoc function\n         * @name angularPoint.apIndexedCacheFactory:create\n         * @methodOf angularPoint.apIndexedCacheFactory\n         * @description\n         * Instantiates and returns a new Indexed Cache.grunt\n         */\n        create<T extends ListItem<any>>(overrides?: IUninstantiatedIndexCache<T>): IndexedCache<T> {\n            return new IndexedCache<T>(overrides);\n        }\n        IndexedCache = IndexedCache;\n\n    }\n\n    angular.module('angularPoint')\n        .service('apIndexedCacheFactory', IndexedCacheFactory);\n}\n","/// <reference path=\"../app.module.ts\" />\n\nmodule ap {\n    'use strict';\n\n    var apConfig: IAPConfig, apDefaultFields, apFieldFactory: FieldFactory;\n\n    export interface IUninstantiatedList {\n        customFields: IFieldDefinition[];\n        environments?: { [key: string]: string };\n        guid?: string;\n        title: string;\n        viewFields?: string;\n        webURL?: string;\n    }\n\n    /**\n     * XML List Object gets converted into JSON object with the following properties.\n     */\n    export interface IXMLList {\n        AllowDeletion?: string;\n        AllowMultiResponses?: string;\n        AnonymousPermMask?: string;\n        Author?: string;\n        BaseType?: string;\n        Created?: string;\n        DefaultViewUrl?: string;\n        Description?: string;\n        Direction?: string;\n        DocTemplateUrl?: string;\n        EmailAlias?: string;\n        EnableAttachments?: string;\n        EnableFolderCreation?: string;\n        EnableMinorVersion?: string;\n        EnableModeration?: string;\n        EnablePeopleSelector?: string;\n        EnableResourceSelector?: string;\n        EnableVersioning?: string;\n        EnforceDataValidation?: string;\n        EventSinkAssembly?: string;\n        EventSinkClass?: string;\n        EventSinkData?: string;\n        ExcludeFromOfflineClient?: string;\n        FeatureId?: string;\n        Flags?: string;\n        HasExternalDataSource?: string;\n        HasRelatedLists?: string;\n        HasUniqueScopes?: string;\n        Hidden?: string;\n        ID?: string;\n        ImageUrl?: string;\n        IrmEnabled?: string;\n        IsApplicationList?: string;\n        ItemCount?: string;\n        LastDeleted?: string;\n        MajorVersionLimit?: string;\n        MajorWithMinorVersionsLimit?: string;\n        MaxItemsPerThrottledOperation?: string;\n        Modified?: string;\n        MultipleDataList?: string;\n        Name?: string;\n        NoThrottleListOperations?: string;\n        Ordered?: string;\n        PreserveEmptyValues?: string;\n        ReadSecurity?: string;\n        RequireCheckout?: string;\n        RootFolder?: string;\n        ScopeId?: string;\n        SendToLocation?: string;\n        ServerTemplate?: string;\n        ShowUser?: string;\n        StrictTypeCoercion?: string;\n        ThrottleListOperations?: string;\n        ThumbnailSize?: string;\n        Title?: string;\n        Version?: string;\n        WebFullUrl?: string;\n        WebId?: string;\n        WebImageHeight?: string;\n        WebImageWidth?: string;\n        WorkFlowId?: string;\n        WriteSecurity?: string;\n    }\n\n    export interface IList extends IUninstantiatedList, IXMLList {\n        customFields: IFieldDefinition[];\n        effectivePermMask?: string;\n        environments: { [key: string]: string };\n        fields: IFieldDefinition[];\n        getListId(): string;\n        guid: string;\n        identifyWebURL(): string;\n        isReady: boolean;\n        mapping?: Object;\n        title: string;\n        viewFields?: string;\n        webURL?: string;\n    }\n    /**\n     * @ngdoc object\n     * @name List\n     * @description\n     * List Object Constructor.  This is handled automatically when creating a new model so there shouldn't be\n     * any reason to manually call.\n     * @param {object} config Initialization parameters.\n     * @param {string} config.guid Unique SharePoint GUID for the list we'll be basing the model on\n     * ex:'{4D74831A-42B2-4558-A67F-B0B5ADBC0EAC}'\n     * @param {string} config.title Maps to the offline XML file in dev folder (no spaces)\n     * ex: 'ProjectsList' so the offline XML file would be located at apConfig.offlineXML + 'ProjectsList.xml'\n     * @param {object[]} [config.customFields] Mapping of SharePoint field names to the internal names we'll be using\n     * in our application.  Also contains field type, readonly attribute, and any other non-standard settings.\n     * <pre>\n     * [\n     *   {\n         *       staticName: \"Title\",\n         *       objectType: \"Text\",\n         *       mappedName: \"lastName\",\n         *       readOnly:false\n         *   },\n     *   {\n         *       staticName: \"FirstName\",\n         *       objectType: \"Text\",\n         *       mappedName: \"firstName\",\n         *       readOnly:false\n         *   },\n     *   {\n         *       staticName: \"Organization\",\n         *       objectType: \"Lookup\",\n         *       mappedName: \"organization\",\n         *       readOnly:false\n         *   },\n     *   {\n         *       staticName: \"Account\",\n         *       objectType: \"User\",\n         *       mappedName: \"account\",\n         *       readOnly:false\n         *   },\n     *   {\n         *       staticName: \"Details\",\n         *       objectType: \"Text\",\n         *       mappedName: \"details\",\n         *       readOnly:false\n         *   }\n     * ]\n     * </pre>\n     * @property {string} viewFields XML string defining each of the fields to include in all CRUD requests,\n     * generated when the Model.List is instantiated.\n     * <pre>\n     *     <ViewFields>...</ViewFields>\n     * </pre>\n     * @property {Field[]} fields Generated when the Model.List is instantiated.  Combines the standard\n     * default fields for all lists with the fields identified in the config.customFields and instantiates each\n     * with the Field constructor.\n     * @requires angularPoint.apListFactory\n     * @constructor\n     */\n    export class List implements IList {\n        customFields = [];\n        effectivePermMask: string;\n        environments: { [key: string]: string };\n        fields = [];\n        guid: string = '';\n        isReady = false;\n        mapping = {};\n        title = '';\n        viewFields = '';\n        WebFullUrl; //Only appears if extended from list definition\n        webURL: string;\n        constructor(config: IUninstantiatedList) {\n            this.webURL = apConfig.defaultUrl;\n            _.assign(this, config);\n            this.environments = this.environments || { production: this.guid };\n            this.extendFieldDefinitions();\n        }\n\n        /**\n         * @description\n         * 1. Populates the fields array which uses the Field constructor to combine the default\n         * SharePoint fields with those defined in the list definition on the model\n         * 2. Creates the list.viewFields XML string that defines the fields to be requested on a query\n         *\n         * @param {object} list Reference to the list within a model.\n         */\n        extendFieldDefinitions() {\n            /**\n             * Constructs the field\n             * - adds to viewField\n             * - create ows_ mapping\n             * @param fieldDefinition\n             */\n            var buildField = (fieldDefinition) => {\n                var field = new apFieldFactory.FieldDefinition(fieldDefinition);\n                this.fields.push(field);\n                this.viewFields += '<FieldRef Name=\"' + field.staticName + '\"/>';\n                this.mapping['ows_' + field.staticName] = {\n                    mappedName: field.mappedName,\n                    objectType: field.objectType\n                };\n            };\n\n            /** Open viewFields */\n            this.viewFields += '<ViewFields>';\n\n            /** Add the default fields */\n            _.each(apDefaultFields, (field) => buildField(field));\n\n            /** Add each of the fields defined in the model */\n            _.each(this.customFields, (field) => buildField(field));\n\n            /** Close viewFields */\n            this.viewFields += '</ViewFields>';\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name List:getListId\n         * @methodOf List\n         * @description\n         * Defaults to list.guid.  For a multi-environment setup, we accept a list.environments object with a property for each named\n         * environment with a corresponding value of the list guid.  The active environment can be selected\n         * by setting apConfig.environment to the string name of the desired environment.\n         * @returns {string} List ID.\n         */\n        getListId(): string {\n            if (_.isString(this.environments[apConfig.environment])) {\n                /**\n                 * For a multi-environment setup, we accept a list.environments object with a property for each named\n                 * environment with a corresponding value of the list guid.  The active environment can be selected\n                 * by setting apConfig.environment to the string name of the desired environment.\n                 */\n                return this.environments[apConfig.environment];\n            } else {\n                throw new Error('There isn\\'t a valid environment definition for apConfig.environment=' + apConfig.environment + '  ' +\n                    'Please confirm that the list \"' + this.title + '\" has the necessary environmental configuration.');\n            }\n        }\n\n        /**\n         * @ngdoc function\n         * @name List:identifyWebURL\n         * @methodOf List\n         * @description\n         * If a list is extended, use the provided webURL, otherwise use list.webURL.  If never set it will default\n         * to apConfig.defaultUrl.\n         * @returns {string} webURL param.\n         */\n        identifyWebURL(): string {\n            return this.WebFullUrl ? this.WebFullUrl : this.webURL;\n        }\n\n\n    }\n\n\n    /**\n     * @ngdoc service\n     * @name angularPoint.apListFactory\n     * @description\n     * Exposes the List prototype and a constructor to instantiate a new List.\n     *\n     * @property {constructor} List The List constructor.\n     *\n     * @requires angularPoint.apConfig\n     * @requires angularPoint.apDefaultFields\n     * @requires angularPoint.apFieldFactory\n     */\n    export class ListFactory {\n        List = List;\n        static $inject = ['apConfig', 'apDefaultFields', 'apFieldFactory'];\n        constructor(_apConfig_, _apDefaultFields_, _apFieldFactory_) {\n\n            apConfig = _apConfig_;\n            apDefaultFields = _apDefaultFields_;\n            apFieldFactory = _apFieldFactory_;\n\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apListFactory:create\n         * @methodOf angularPoint.apListFactory\n         * @param {object} config Options object.\n         * @description\n         * Instantiates and returns a new List.\n         */\n        create(config) {\n            return new List(config);\n        }\n\n\n    }\n\n\n    angular.module('angularPoint')\n        .service('apListFactory', ListFactory);\n\n\n    /********************** PRIVATE *************************/\n\n}\n","/// <reference path=\"../app.module.ts\" />\n\nmodule ap {\n    'use strict';\n\n    var $q: ng.IQService, toastr, apCacheService: CacheService, apDataService: DataService, apDecodeService: DecodeService,\n        apEncodeService: EncodeService, apUtilityService: UtilityService, apFormattedFieldValueService: FormattedFieldValueService,\n        apConfig: IAPConfig;\n\n    export interface IListItem<T extends ListItem<any>> {\n        author?: IUser;\n        created?: Date;\n        editor?: IUser;\n        fileRef?: ILookup;\n        id?: number;\n        modified?: Date;\n        permMask?: string;\n        uniqueId?: string;\n\n        deleteAttachment: (url: string) => ng.IPromise<any>;\n        deleteItem: (options?: IListItemCrudOptions<T>) => ng.IPromise<any>;\n        getAttachmentCollection: () => ng.IPromise<string[]>;\n        getAvailableWorkflows: () => ng.IPromise<IWorkflowDefinition[]>;\n        getCache?: () => IndexedCache<T>;\n        getChanges(): ng.IPromise<T>;\n        getFieldChoices: (fieldName: string) => string[];\n        getFieldDefinition: (fieldName: string) => IFieldDefinition | IExtendedFieldDefinition;\n        getFieldDescription: (fieldName: string) => string;\n        getFieldLabel: (fieldName: string) => string;\n        getFieldVersionHistory: (fieldNames: string[]) => ng.IPromise<IListItemVersion<T>[]>;\n        getFormattedValue: (fieldName: string, options?: Object) => string;\n        getList: () => List;\n        getListId: () => string;\n        getLookupReference: <T2 extends ListItem<any>>(fieldName: string, lookupId?: number) => T2;\n        resolvePermissions: () => IUserPermissionsObject;\n        saveChanges: (options?: IListItemCrudOptions<T>) => ng.IPromise<T>;\n        saveFields: (fieldArray: string[], options?: IListItemCrudOptions<T>) => ng.IPromise<T>;\n        setPristine: () => void;\n        startWorkflow: (options: IStartWorkflowParams) => ng.IPromise<any>;\n        validateEntity: (options?: Object) => boolean;\n\n        //Added by Model Instantiation\n        getModel?: () => Model;\n        getPristine?: () => Object;\n        getQuery?: () => IQuery<T>;\n\n    }\n\n\n    /**\n     * @ngdoc object\n     * @name ListItem\n     * @description\n     * Base prototype which all list items inherit from.  All methods can be accessed through this prototype so all CRUD\n     * functionality can be called directly from a given list item.\n     * @constructor\n     */\n    export class ListItem<T extends ListItem<any>> implements IListItem<T> {\n        author: IUser;\n        created: Date;\n        editor: IUser;\n        fileRef: ILookup;\n        getCache: () => IndexedCache<T>;\n        getModel: () => Model;\n        getPristine: () => Object;\n        getQuery: () => IQuery<T>;\n        id: number;\n        modified: Date;\n        permMask: string;\n        private preDeleteAction: () => boolean;\n        private preSaveAction: () => boolean;\n        private postSaveAction: () => void;\n        uniqueId: string;\n\n        /**\n         * @ngdoc function\n         * @name ListItem.deleteAttachment\n         * @description\n         * Delete an attachment from a list item.\n         * @param {string} url Requires the URL for the attachment we want to delete.\n         * @returns {object} Promise which resolves with the updated attachment collection.\n         * @example\n         * <pre>\n         * $scope.deleteAttachment = function (attachment) {\n             *     var confirmation = window.confirm(\"Are you sure you want to delete this file?\");\n             *     if (confirmation) {\n             *         scope.listItem.deleteAttachment(attachment).then(function () {\n             *             alert(\"Attachment successfully deleted\");\n             *         });\n             *     }\n             * };\n         * </pre>\n         */\n        deleteAttachment(url: string): ng.IPromise<any> {\n            var listItem = this;\n            return apDataService.deleteAttachment({\n                listItemID: listItem.id,\n                url: url,\n                listName: listItem.getModel().list.getListId()\n            });\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name ListItem.deleteItem\n         * @description\n         * Deletes record directly from the object and removes record from user cache.\n         * @param {object} [options] Optionally pass params to the dataService.\n         * @param {boolean} [options.updateAllCaches=false] Iterate over each of the query cache's and ensure the listItem is\n         * removed everywhere.  This is more process intensive so by default we only remove the cached listItem in the\n         * cache where this listItem is currently stored.\n         * @returns {object} Promise which really only lets us know the request is complete.\n         * @example\n         * ```\n         * <ul>\n         *    <li ng-repeat=\"task in tasks\">\n         *        {{task.title}} <a href ng-click=\"task.deleteItem()>delete</a>\n         *    </li>\n         * </ul>\n         * ```\n         * List of tasks.  When the delete link is clicked, the list item item is removed from the local cache and\n         * the view is updated to no longer show the task.\n         */\n        deleteItem(options?: IListItemCrudOptions<T>): ng.IPromise<any> {\n            var listItem = this;\n            var model = listItem.getModel();\n            var deferred = $q.defer();\n\n            if (_.isFunction(listItem.preDeleteAction) && !listItem.preDeleteAction()) {\n                //preDeleteAction exists but returned false so we don't delete\n                deferred.reject('Pre-Delete Action Returned False');\n            } else {\n\n                apDataService.deleteListItem(model, listItem, options)\n                    .then((response) => {\n                        deferred.resolve(response);\n                        /** Optionally broadcast change event */\n                        apUtilityService.registerChange(model, 'delete', listItem.id);\n                    });\n            }\n\n            return deferred.promise;\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name ListItem.getAttachmentCollection\n         * @description\n         * Requests all attachments for a given list item.\n         * @returns {object} Promise which resolves with all attachments for a list item.\n         * @example\n         * <pre>\n         * //Pull down all attachments for the current list item\n         * var fetchAttachments = function (listItem) {\n             *     listItem.getAttachmentCollection()\n             *         .then(function (attachments) {\n             *             scope.attachments = attachments;\n             *         });\n             * };\n         * </pre>\n         */\n        getAttachmentCollection(): ng.IPromise<string[]> {\n            var listItem = this;\n            return apDataService.getCollection({\n                operation: 'GetAttachmentCollection',\n                listName: listItem.getModel().list.getListId(),\n                webURL: listItem.getModel().list.webURL,\n                ID: listItem.id,\n                filterNode: 'Attachment'\n            });\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name ListItem.getAvailableWorkflows\n         * @description\n         * Wrapper for apDataService.getAvailableWorkflows.  Simply passes the current item in.\n         * @returns {promise} Array of objects defining each of the available workflows.\n         */\n        getAvailableWorkflows(): ng.IPromise<IWorkflowDefinition[]> {\n            var listItem = this;\n            return apDataService.getAvailableWorkflows(listItem.fileRef.lookupValue);\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name ListItem.getChanges\n         * @description\n         * Wrapper for model.getListItemById.  Queries server for any changes and extends the existing\n         * list item with those changes.\n         * @returns {promise} Promise which resolves with the updated list item.\n         */\n        getChanges(): ng.IPromise<T> {\n            var model = this.getModel();\n            return model.getListItemById(this.id);\n        }\n\n        /**\n         * @ngdoc function\n         * @name ListItem.getFieldChoices\n         * @param {string} fieldName Internal field name.\n         * @description\n         * Uses the field definition defined in the model to attempt to find the choices array for a given Lookup or\n         * MultiLookup type field.  The default value is fieldDefinition.choices which can optionally be added to a\n         * given field definition.  If this isn't found, we check fieldDefinition.Choices which is populated after a\n         * GetListItemsSinceToken operation or a Model.extendListMetadata operation.  Finally if that isn't available\n         * we return an empty array.\n         * @returns {string[]} An array of choices for a Choice or MultiChoice type field.\n         */\n        getFieldChoices(fieldName: string): string[] {\n            var listItem = this;\n            var fieldDefinition = listItem.getFieldDefinition(fieldName);\n            return fieldDefinition.choices || fieldDefinition.Choices || [];\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name ListItem.getFieldDefinition\n         * @description\n         * Returns the field definition from the definitions defined in the custom fields array within a model.\n         * @example\n         * <pre>\n         * var project = {\n             *    title: 'Project 1',\n             *    location: {\n             *        lookupId: 5,\n             *        lookupValue: 'Some Building'\n             *    }\n             * };\n         *\n         * //To get field metadata\n         * var locationDefinition = project.getFieldDefinition('location');\n         * </pre>\n         * @param {string} fieldName Internal field name.\n         * @returns {object} Field definition.\n         */\n        getFieldDefinition(fieldName: string): IExtendedFieldDefinition {\n            var listItem = this;\n            return listItem.getModel().getFieldDefinition(fieldName);\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name ListItem.getFieldDescription\n         * @param {string} fieldName Internal field name.\n         * @description\n         * Uses the field definition defined in the model to attempt to find the description for a given field.  The default\n         * value is fieldDefinition.Description which is populated after a GetListItemsSinceToken operation or a\n         * Model.extendListMetadata operation.  If this isn't available we look for an optional attribute of a field\n         * fieldDefinition.description.  Finally if that have anything it returns an empty string.\n         * @returns {string} The description for a given field object.\n         */\n        getFieldDescription(fieldName: string): string {\n            var listItem = this;\n            var fieldDefinition = listItem.getFieldDefinition(fieldName);\n            return fieldDefinition.description || fieldDefinition.Description || '';\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name ListItem.getFieldLabel\n         * @param {string} fieldName Internal field name.\n         * @description\n         * Uses the field definition defined in the model to attempt to find the label for a given field.  The default\n         * value is fieldDefinition.label.  If not available it will then use fieldDefinition.DisplayName which is\n         * populated after a GetListItemsSinceToken operation or a Model.extendListMetadata operation.  If this isn't\n         * available it will fallback to the the fieldDefinition.DisplayName which is a best guess at converting the\n         * caml case version of the mapped name using apUtilityService.fromCamelCase.\n         * @returns {string} The label for a given field object.\n         */\n        getFieldLabel(fieldName: string): string {\n            var listItem = this;\n            var fieldDefinition = listItem.getFieldDefinition(fieldName);\n            return fieldDefinition.label || fieldDefinition.DisplayName || fieldDefinition.displayName;\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name ListItem.getFieldVersionHistory\n         * @description\n         * Takes an array of field names, finds the version history for field, and returns a snapshot of the object at each\n         * version.  If no fields are provided, we look at the field definitions in the model and pull all non-readonly\n         * fields.  The only way to do this that I've been able to get working is to get the version history for each\n         * field independently and then build the history by combining the server responses for each requests into a\n         * snapshot of the object.  Each version has the standard modified date but also includes a version property with\n         * the version number.\n         * @param {string[]} [fieldNames] An array of field names that we're interested in.\n         * @returns {ng.IPromise<IListItemVersion<T>>} Promise which resolves with an array of list item versions.\n         * @example\n         * Assuming we have a modal form where we want to display each version of the title and project fields\n         * of a given list item.\n         * <pre>\n         * myGenericListItem.getFieldVersionHistory(['title', 'project'])\n         *     .then(function(versionHistory) {\n         *            // We now have an array of every version of these fields\n         *            $scope.versionHistory = versionHistory;\n         *      };\n         * </pre>\n         */\n        getFieldVersionHistory(fieldNames?: string[]| string): ng.IPromise<IListItemVersion<T>[]> {\n            var deferred = $q.defer();\n            var listItem = this;\n            var model = listItem.getModel();\n            var promiseArray = [];\n\n            /** Constructor that creates a promise for each field */\n            var createPromise = (fieldName) => {\n\n                var fieldDefinition = _.find(model.list.fields, { mappedName: fieldName });\n\n                var payload = {\n                    operation: 'GetVersionCollection',\n                    strlistID: model.list.getListId(),\n                    strlistItemID: listItem.id,\n                    strFieldName: fieldDefinition.staticName,\n                    webURL: undefined\n                };\n\n                /** Manually set site url if defined, prevents SPServices from making a blocking call to fetch it. */\n                if (apConfig.defaultUrl) {\n                    payload.webURL = apConfig.defaultUrl;\n                }\n\n                promiseArray.push(apDataService.getFieldVersionHistory(payload, fieldDefinition));\n            };\n\n            if (!fieldNames) {\n                /** If fields aren't provided, pull the version history for all NON-readonly fields */\n                var targetFields = _.where(model.list.fields, { readOnly: false });\n                fieldNames = [];\n                _.each(targetFields, (field) => {\n                    fieldNames.push(field.mappedName);\n                });\n            } else if (_.isString(fieldNames)) {\n                /** If a single field name is provided, add it to an array so we can process it more easily */\n                fieldNames = [fieldNames];\n            }\n\n            /** Generate promises for each field */\n            _.each(fieldNames, (fieldName) => {\n                createPromise(fieldName);\n            });\n\n            /** Pause until all requests are resolved */\n            $q.all(promiseArray).then((changes) => {\n                var versionHistory = {};\n\n                /** All fields should have the same number of versions */\n                _.each(changes, (fieldVersions) => {\n\n                    _.each(fieldVersions, (fieldVersion) => {\n                        /** Create a new version object if it doesn't already exist */\n                        versionHistory[fieldVersion.modified.toJSON()] =\n                        versionHistory[fieldVersion.modified.toJSON()] || {};\n\n                        /** Add field to the version history for this version */\n                        _.assign(versionHistory[fieldVersion.modified.toJSON()], fieldVersion);\n                    });\n                });\n\n                var versionArray: IListItemVersion<T>[] = [];\n                var versionCounter = 1;\n                \n                /** Add a version prop on each version to identify the numeric sequence */\n                _.each(versionHistory, (ver: IListItemVersion<T>) => {\n                    ver.version = versionCounter;\n                    versionCounter++;\n                    /** Convert JSON date into JS Date */\n                    ver.modified = apDecodeService.jsDate(ver.modified);\n                    versionArray.push(ver);\n                });\n\n                deferred.resolve(versionArray);\n            });\n\n            return deferred.promise;\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name ListItem.getFormattedValue\n         * @description\n         * Given the attribute name on a listItem, we can lookup the field type and from there return a formatted\n         * string representation of that value.\n         * @param {string} fieldName Attribute name on the object that contains the value to stringify.\n         * @param {object} [options] Pass through to apFormattedFieldValueService.getFormattedFieldValue.\n         * @returns {string} Formatted string representing the field value.\n         */\n        getFormattedValue(fieldName: string, options?: Object): string {\n            var listItem = this;\n            var fieldDefinition = listItem.getFieldDefinition(fieldName);\n            if (!fieldDefinition) {\n                throw 'A field definition for a field named ' + fieldName + ' wasn\\'t found.';\n            }\n            return apFormattedFieldValueService\n                .getFormattedFieldValue(listItem[fieldName], fieldDefinition.objectType, options);\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name ListItem.getList\n         * @description\n         * Abstraction to allow logic in model to be used instead of defining the list location in more than one place.\n         * @returns {object} List for the list item.\n         */\n        getList(): List {\n            var model: Model = this.getModel();\n            return model.getList();\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name ListItem.getListId\n         * @description\n         * Allows us to reference the list ID directly from the list item.  This is added to the\n         * model.factory prototype in apModelFactory.\n         * @returns {string} List ID.\n         */\n        getListId(): string {\n            var model = this.getModel();\n            return model.getListId();\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name ListItem.getLookupReference\n         * @description\n         * Allows us to retrieve the listItem being referenced in a given lookup field.\n         * @param {string} fieldName Name of the lookup property on the list item that references a listItem.\n         * @param {number} [lookupId=listItem.fieldName.lookupId] The listItem.lookupId of the lookup object.  This allows us to also use this logic\n         * on a multi-select by iterating over each of the lookups.\n         * @example\n         * <pre>\n         * var project = {\n             *    title: 'Project 1',\n             *    location: {\n             *        lookupId: 5,\n             *        lookupValue: 'Some Building'\n             *    }\n             * };\n         *\n         * //To get the location listItem\n         * var listItem = project.getLookupReference('location');\n         * </pre>\n         * @returns {object} The listItem the lookup is referencing or undefined if not in the cache.\n         */\n        getLookupReference<T2 extends ListItem<any>>(fieldName: string, lookupId?: number): T2 {\n            var listItem = this;\n            var lookupReference;\n            if (_.isUndefined(fieldName)) {\n                throw new Error('A field name is required.');\n            } else if (_.isEmpty(listItem[fieldName])) {\n                lookupReference = '';\n            } else {\n                var model = listItem.getModel();\n                var fieldDefinition = model.getFieldDefinition(fieldName);\n                /** Ensure the field definition has the List attribute which contains the GUID of the list\n                 *  that a lookup is referencing. */\n                if (fieldDefinition && fieldDefinition.List) {\n                    var targetId = lookupId || listItem[fieldName].lookupId;\n                    lookupReference = apCacheService.getCachedEntity(fieldDefinition.List, targetId);\n                } else {\n                    throw new Error('This isn\\'t a valid Lookup field or the field definitions need to be extended ' +\n                        'before we can complete this request.');\n                }\n            }\n            return lookupReference;\n\n        }\n\n        /**\n         * @ngdoc function\n         * @name ListItem.prototype.registerPreDeleteAction\n         * @param {Function} action Function that accepts no arguments and returns a boolean determining if delete can continue.\n         * @returns {Function} Function that can be called to unregister.\n         * @description\n         * Register a function on the list item prototype that is executed prior to deleting.  Good use case\n         * is to perform cleanup prior to deleting or determining if user can delete.  Method returns boolean and if\n         * true delete will continue, otherwise delete is prevented. There is no ListItem.registerPostDeleteAction because\n         * the list item no longer exists.\n         * \n         * @example\n         * <pre>\n         * //In example projectsModel.ts\n         *  export class Project extends ap.ListItem<Project>{\n         *      title: string;\n         *      users: User[];\n         *      ...some other expected attributes\n         *      constructor(obj) {\n         *          super(obj);\n         *          _.assign(this, obj);\n         *      }\n         *  }\n         * \n         *  let unregister = Project.prototype.registerPreDeleteAction(function() {\n         *      //Do some validation here and return true if user can delete\n         *      //otherwise return false to prevent delete action\n         *  });\n         * \n         *  //At some point in the future if no longer necessary\n         *  unregister();\n         * \n         * </pre>\n         */\n        registerPreDeleteAction(action: () => boolean): () => void {\n            this.preDeleteAction = action;\n            //Return function to unregister\n            return () => delete this.preDeleteAction;\n        }\n        \n       \n        /**\n         * @ngdoc function\n         * @name ListItem.prototype.registerPreSaveAction\n         * @param {Function} action Function that accepts no arguments and returns a boolean determining is save can continue.\n         * @returns {Function} Function that can be called to unregister.\n         * @description\n         * Register a function on the list item prototype that is executed prior to saving.  Good use case\n         * is to validate list item or perform cleanup prior to saving.  Method returns boolean and if\n         * true save will continue, otherwise save is prevented. \n         * \n         * @example\n         * <pre>\n         * //In example projectsModel.ts\n         *  export class Project extends ap.ListItem<Project>{\n         *      title: string;\n         *      users: User[];\n         *      ...some other expected attributes\n         *      constructor(obj) {\n         *          super(obj);\n         *          _.assign(this, obj);\n         *      }\n         *  }\n         * \n         *  let unregister = Project.prototype.registerPreSaveAction(function() {\n         *      //Do some validation here and return true if user can save\n         *      //otherwise return false to prevent save action\n         *  });\n         * \n         *  //At some point in the future if no longer necessary\n         *  unregister();\n         * \n         * </pre>\n         */\n        registerPreSaveAction(action: () => boolean): () => void {\n            this.preSaveAction = action;\n            //Return function to unregister\n            return () => delete this.preSaveAction;\n        }\n        \n        /**\n         * @ngdoc function\n         * @name ListItem.prototype.registerPostSaveAction\n         * @param {Function} action Callback function that accepts no arguments, returns nothing, and is called\n         * after a list item has completed saving.\n         * @returns {Function} Function that can be called to unregister.\n         * @description\n         * Register a function on the model prototype that is executed after saving.  Good use case\n         * is to perform cleanup after save. \n         * \n         * @example\n         * <pre>\n         * //In example projectsModel.ts\n         *  export class Project extends ap.ListItem<Project>{\n         *      title: string;\n         *      users: User[];\n         *      ...some other expected attributes\n         *      constructor(obj) {\n         *          super(obj);\n         *          _.assign(this, obj);\n         *      }\n         *  }\n         * \n         *  let unregister = Project.prototype.registerPostSaveAction(function() {\n         *      //Use this method to perform any cleanup after save event\n         *      //for any list item of this type\n         *  });\n         * \n         *  //At some point in the future if no longer necessary\n         *  unregister();\n         * \n         * </pre>\n         */\n        registerPostSaveAction(action: () => void): () => void {\n            this.postSaveAction = action;\n            //Return function to unregister\n            return () => delete this.postSaveAction;\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name ListItem.resolvePermissions\n         * @description\n         * See apModelService.resolvePermissions for details on what we expect to have returned.\n         * @returns {Object} Contains properties for each permission level evaluated for current user.\n         * @example\n         * Lets assume we're checking to see if a user has edit rights for a given task list item.\n         * <pre>\n         * var canUserEdit = function(task) {\n         *      var userPermissions = task.resolvePermissions();\n         *      return userPermissions.EditListItems;\n         * };\n         * </pre>\n         * Example of what the returned object would look like\n         * for a site admin.\n         * <pre>\n         * userPermissions = {\n         *    \"ViewListItems\": true,\n         *    \"AddListItems\": true,\n         *    \"EditListItems\": true,\n         *    \"DeleteListItems\": true,\n         *    \"ApproveItems\": true,\n         *    \"OpenItems\": true,\n         *    \"ViewVersions\": true,\n         *    \"DeleteVersions\": true,\n         *    \"CancelCheckout\": true,\n         *    \"PersonalViews\": true,\n         *    \"ManageLists\": true,\n         *    \"ViewFormPages\": true,\n         *    \"Open\": true,\n         *    \"ViewPages\": true,\n         *    \"AddAndCustomizePages\": true,\n         *    \"ApplyThemeAndBorder\": true,\n         *    \"ApplyStyleSheets\": true,\n         *    \"ViewUsageData\": true,\n         *    \"CreateSSCSite\": true,\n         *    \"ManageSubwebs\": true,\n         *    \"CreateGroups\": true,\n         *    \"ManagePermissions\": true,\n         *    \"BrowseDirectories\": true,\n         *    \"BrowseUserInfo\": true,\n         *    \"AddDelPrivateWebParts\": true,\n         *    \"UpdatePersonalWebParts\": true,\n         *    \"ManageWeb\": true,\n         *    \"UseRemoteAPIs\": true,\n         *    \"ManageAlerts\": true,\n         *    \"CreateAlerts\": true,\n         *    \"EditMyUserInfo\": true,\n         *    \"EnumeratePermissions\": true,\n         *    \"FullMask\": true\n         * }\n         * </pre>\n         */\n        resolvePermissions(): IUserPermissionsObject {\n            return apUtilityService.resolvePermissions(this.permMask);\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name ListItem.saveChanges\n         * @description\n         * Updates record directly from the object\n         * @param {object} [options] Optionally pass params to the data service.\n         * @param {boolean} [options.updateAllCaches=false] Search through the cache for each query to ensure listItem is\n         * updated everywhere.  This is more process intensive so by default we only update the cached listItem in the\n         * cache where this listItem is currently stored.\n         * @returns {object} Promise which resolved with the updated list item from the server.\n         * @example\n         * <pre>\n         * // Example of save function on a fictitious\n         * // app/modules/tasks/TaskDetailsCtrl.js modal form.\n         * $scope.saveChanges = function(task) {\n         *      task.saveChanges().then(function() {\n         *          // Successfully saved so we can do something\n         *          // like close form\n         *\n         *          }, function() {\n         *          // Failure\n         *\n         *          });\n         * }\n         * </pre>\n         */\n        saveChanges(options?: IListItemCrudOptions<T>): ng.IPromise<T> {\n            var listItem = this;\n            var model = listItem.getModel();\n            var deferred = $q.defer();\n\n            if (_.isFunction(listItem.preSaveAction) && !listItem.preSaveAction()) {\n                //preSaveAction exists but returned false so we don't save\n                deferred.reject('Pre-Save Action Returned False');\n            } else {\n                //Either no preSaveAction registered or it passed validation\n                \n                /** Redirect if the request is actually creating a new list item.  This can occur if we create\n                 * an empty item that is instantiated from the model and then attempt to save instead of using\n                 * model.addNewItem */\n                if (!listItem.id) {\n                    return model.addNewItem(listItem, options);\n                }\n\n                apDataService.updateListItem<T>(model, listItem, options)\n                    .then((updatedListItem) => {\n                        deferred.resolve(updatedListItem);\n                        /** Optionally broadcast change event */\n                        apUtilityService.registerChange(model, 'update', updatedListItem.id);\n                        \n                        //Optionally perform any post save cleanup if registered\n                        if (_.isFunction(listItem.postSaveAction)) {\n                            listItem.postSaveAction();\n                        };\n                    });\n            }\n\n            return deferred.promise;\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name ListItem.saveFields\n         * @description\n         * Saves a named subset of fields back to SharePoint.  This is an alternative to saving all fields.\n         * @param {array|string} fieldArray Array of internal field names that should be saved to SharePoint or a single\n         * string to save an individual field.\n         * @param {object} [options] Optionally pass params to the data service.\n         * @param {boolean} [options.updateAllCaches=false] Search through the cache for each query to ensure listItem is\n         * updated everywhere.  This is more process intensive so by default we only update the cached listItem in the\n         * cache where this listItem is currently stored.\n         * @returns {object} Promise which resolves with the updated list item from the server.\n         * @example\n         * <pre>\n         * // Example of saveFields function on a fictitious\n         * // app/modules/tasks/TaskDetailsCtrl.js modal form.\n         * // Similar to saveChanges but instead we only save\n         * // specified fields instead of pushing everything.\n         * $scope.updateStatus = function(task) {\n         *      task.saveFields(['status', 'notes']).then(function() {\n         *          // Successfully updated the status and\n         *          // notes fields for the given task\n         *\n         *          }, function() {\n         *          // Failure to update the field\n         *\n         *          });\n         * }\n         * </pre>\n         */\n        saveFields(fieldArray: string[], options?: IListItemCrudOptions<T>): ng.IPromise<T> {\n\n            var listItem = this;\n            var model = listItem.getModel();\n            var deferred = $q.defer();\n            var definitions = [];\n            /** Allow a string to be passed in to save a single field */\n            var fieldNames = _.isString(fieldArray) ? [fieldArray] : fieldArray;\n            /** Find the field definition for each of the requested fields */\n            _.each(fieldNames, (field) => {\n                var match = _.find(model.list.customFields, { mappedName: field });\n                if (match) {\n                    definitions.push(match);\n                }\n            });\n\n            /** Generate value pairs for specified fields */\n            var valuePairs = apEncodeService.generateValuePairs(definitions, listItem);\n\n            var defaults = { buildValuePairs: false, valuePairs: valuePairs };\n\n            /** Extend defaults with any provided options */\n            var opts = _.assign({}, defaults, options);\n\n            apDataService.updateListItem<T>(model, listItem, opts)\n                .then((updatedListItem) => {\n                    deferred.resolve(updatedListItem);\n                    /** Optionally broadcast change event */\n                    apUtilityService.registerChange(model, 'update', updatedListItem.id);\n                });\n\n            return deferred.promise;\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name ListItem.setPristine\n         * @param {ListItem} [listItem] Optionally pass list item object back to the list item constructor to\n         * run any initialization logic.  Otherwise we just overwrite existing values on the object with a copy from the\n         * original object.\n         * @description\n         * Resets all list item properties back to a pristine state but doesn't update any properties added\n         * manually to the list item.\n         */\n        setPristine(listItem?: ListItem<any>): void {\n            if (!this.id || !_.isFunction(this.getPristine)) {\n                throw new Error('Unable to find the pristine state for this list item.');\n            }\n            var pristineState = this.getPristine();\n\n            if (listItem) {\n                listItem.constructor(pristineState);\n            } else {\n                _.assign(this, pristineState);\n            }\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name ListItem.startWorkflow\n         * @description\n         * Given a workflow name or templateId we initiate a given workflow using apDataService.startWorkflow.\n         * @param {object} options Params for method and pass through options to apDataService.startWorkflow.\n         * @param {string} [options.templateId] Used to directly start the workflow without looking up the templateId.\n         * @param {string} [options.workflowName] Use this value to lookup the templateId and then start the workflow.\n         * @returns {promise} Resolves with server response.\n         */\n        startWorkflow(options: IStartWorkflowParams): ng.IPromise<any> {\n            var listItem = this,\n                deferred = $q.defer();\n\n            /** Set the relative file reference */\n            options.fileRef = listItem.fileRef.lookupValue;\n\n            if (!options.templateId && !options.workflowName) {\n                throw 'Either a templateId or workflowName is required to initiate a workflow.';\n            } else if (options.templateId) {\n                /** The templateId is already provided so we don't need to look for it */\n                initiateRequest();\n            } else {\n                /** We first need to get the template GUID for the workflow */\n                listItem.getAvailableWorkflows()\n                    .then((workflows) => {\n                        var targetWorklow = _.findWhere(workflows, { name: options.workflowName });\n                        if (!targetWorklow) {\n                            throw 'A workflow with the specified name wasn\\'t found.';\n                        }\n                        /** Create an extended set of options to pass any overrides to apDataService */\n                        options.templateId = targetWorklow.templateId;\n                        initiateRequest();\n                    });\n            }\n\n            return deferred.promise;\n\n            function initiateRequest() {\n                apDataService.startWorkflow(options)\n                    .then((xmlResponse) => {\n                        deferred.resolve(xmlResponse);\n                    });\n            }\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name ListItem.validateEntity\n         * @description\n         * Helper function that passes the current item to Model.validateEntity\n         * @param {object} [options] Optionally pass params to the dataService.\n         * @param {boolean} [options.toast=true] Set to false to prevent toastr messages from being displayed.\n         * @returns {boolean} Evaluation of validity.\n         */\n        validateEntity(options?: Object): boolean {\n            var listItem = this,\n                model = listItem.getModel();\n            return model.validateEntity(listItem, options);\n        }\n\n    }\n\n\n    /** In the event that a factory isn't specified, just use a\n     * standard constructor to allow it to inherit from ListItem */\n    export class StandardListItem {\n        constructor(obj?: Object) {\n            _.assign(this, obj);\n        }\n    }\n\n    /**\n     * @ngdoc object\n     * @name apListItemFactory\n     * @description\n     * Exposes the ListItem prototype and a constructor to instantiate a new ListItem.\n     * See [ListItem](#/api/ListItem) for details of the methods available on the prototype.\n     *\n     * @requires ListItem\n     * @requires apCacheService\n     * @requires apDataService\n     * @requires apUtilityService\n     */\n\n    export class ListItemFactory {\n        ListItem = ListItem;\n        static $inject = ['$q', 'apCacheService', 'apConfig', 'apDataService', 'apDecodeService', 'apEncodeService', 'apFormattedFieldValueService', 'apUtilityService', 'toastr'];\n\n        constructor(_$q_, _apCacheService_, _apConfig_, _apDataService_, _apDecodeService_, _apEncodeService_, _apFormattedFieldValueService_, _apUtilityService_, _toastr_) {\n            $q = _$q_;\n            apCacheService = _apCacheService_;\n            apConfig = _apConfig_;\n            apDataService = _apDataService_;\n            apDecodeService = _apDecodeService_;\n            apEncodeService = _apEncodeService_;\n            apFormattedFieldValueService = _apFormattedFieldValueService_;\n            apUtilityService = _apUtilityService_;\n            toastr = _toastr_;\n        }\n\n        /**\n         * @ngdoc function\n         * @name apListItemFactory: create\n         * @methodOf apListItemFactory\n         * @description\n         * Instantiates and returns a new ListItem.\n         */\n        create<T extends ListItem<any>>(): T {\n            return new ListItem<T>();\n        }\n\n        /**\n         * @ngdoc function\n         * @name apListItemFactory: createGenericFactory\n         * @methodOf apListItemFactory\n         * @description\n         * In the event that a factory isn't specified, just use a\n         * standard constructor to allow it to inherit from ListItem\n         */\n        createGenericFactory() {\n            return new StandardListItem();\n        }\n\n    }\n\n    angular\n        .module('angularPoint')\n        .service('apListItemFactory', ListItemFactory);\n}\n","/// <reference path=\"../app.module.ts\" />\n\nmodule ap {\n    'use strict';\n\n    var $q, apUtilityService;\n\n    export interface ILookup {\n        lookupValue: string;\n        lookupId: number;\n    }\n\n    /**\n     * @ngdoc function\n     * @name Lookup\n     * @description\n     * Allows for easier distinction when debugging if object type is shown as either Lookup or User.  Also allows us\n     * to create an async request for the entity being referenced by the lookup\n     * @param {string} s String to split into lookupValue and lookupId\n     * @param {object} options Contains a reference to the parent list item and the property name.\n     * @param {object} options.entity Reference to parent list item.\n     * @param {object} options.propertyName Key on list item object.\n     * @constructor\n     */\n    export class Lookup implements ILookup{\n        lookupId:number;\n        lookupValue:string;\n\n        constructor(s, options) {\n            var lookup = this;\n            var thisLookup = new apUtilityService.SplitIndex(s);\n            lookup.lookupId = thisLookup.id;\n            lookup.lookupValue = thisLookup.value || '';\n        }\n    }\n\n\n    export class LookupFactory {\n        Lookup = Lookup;\n        static $inject = ['$q', 'apUtilityService'];\n        constructor(_$q_, _apUtilityService_) {\n            $q = _$q_;\n            apUtilityService = _apUtilityService_;\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apLookupFactory:create\n         * @methodOf angularPoint.apLookupFactory\n         * @description\n         * Instantiates and returns a new Lookup field.\n         */\n        create(s, options) {\n            return new Lookup(s, options);\n        }\n    }\n\n    /**\n     * @ngdoc function\n     * @name angularPoint.apLookupFactory\n     * @description\n     * Tools to assist with the creation of CAML queries.\n     *\n     */\n    angular.module('angularPoint')\n        .service('apLookupFactory', LookupFactory);\n\n\n}\n","/// <reference path=\"../app.module.ts\" />\n\nmodule ap {\n    'use strict';\n\n    var apCacheService: CacheService, apDataService: DataService, apListFactory: ListFactory,\n        apQueryFactory: QueryFactory, apUtilityService: UtilityService,\n        apFieldService: FieldService, apConfig: IAPConfig, apIndexedCacheFactory: IndexedCacheFactory,\n        apDecodeService: DecodeService, $q: ng.IQService, toastr: toastr;\n\n    export interface IModel {\n        addNewItem<T extends ListItem<any>>(entity: Object, options?: Object): ng.IPromise<T>;\n        createEmptyItem<T extends ListItem<any>>(overrides?: Object): T;\n        deferredListDefinition: ng.IPromise<Object>;\n        executeQuery<T extends ListItem<any>>(queryName?: string, options?: Object): ng.IPromise<IndexedCache<T>>;\n        extendListMetadata(options?: Object): ng.IPromise<any>;\n        factory: IModelFactory;\n        generateMockData<T extends ListItem<any>>(options?: Object): T[];\n        getAllListItems<T extends ListItem<any>>(): ng.IPromise<IndexedCache<T>>;\n        getCache<T extends ListItem<any>>(queryName?: string): IndexedCache<T>;\n        getCachedEntities<T extends ListItem<any>>(): IndexedCache<T>;\n        getCachedEntity<T extends ListItem<any>>(listItemId: number): T;\n        getFieldDefinition(fieldName: string): IExtendedFieldDefinition | IFieldDefinition;\n        getList(): List;\n        getListId(): string;\n        getListItemById<T extends ListItem<any>>(listItemId: number, options?: Object): ng.IPromise<T>;\n        getModel(): Model;\n        getQuery<T extends ListItem<any>>(queryName: string): IQuery<T>;\n        isInitialised(): boolean;\n        lastServerUpdate: Date;\n        list: List;\n        queries: IQueriesContainer;\n        registerQuery<T extends ListItem<any>>(queryOptions: IQueryOptions): IQuery<T>;\n        resolvePermissions(): IUserPermissionsObject;\n        validateEntity<T extends ListItem<any>>(listItem: T, options?: Object): boolean;\n    }\n\n    export interface IUninitializedModel {\n        factory: Function;\n        list: IUninstantiatedList;\n        [key: string]: any;\n    }\n\n    export interface IQueriesContainer {\n        getAllListItems?: IQuery<any>;\n        [key: string]: IQuery<any>\n    }\n\n    interface IModelFactory {\n        new <T extends ListItem<any>>(rawObject: Object): T;\n    }\n\n\n    /**\n     * @ngdoc function\n     * @name Model\n     * @description\n     * Model Constructor\n     * Provides the Following\n     * - adds an empty \"data\" array\n     * - adds an empty \"queries\" object\n     * - adds a deferred obj \"ready\"\n     * - builds \"model.list\" with constructor\n     * - adds \"getAllListItems\" function\n     * - adds \"addNewItem\" function\n     * @param {object} config Object containing optional params.\n     * @param {object} [config.factory = apListItemFactory.createGenericFactory()] - Constructor function for\n     * individual list items.\n     * @param {boolean} [config.fieldDefinitionsExtended=false] Queries using the GetListItemChangesSinceToken\n     * operation return the full list definition along with the requested entities.  The first time one of these\n     * queries is executed we will try to extend our field definitions defined in the model with the additional\n     * information provided from the server.  Examples are options for a Choice field, display name of the field,\n     * field description, and any other field information provided for the fields specified in the model.  This\n     * flag is set once the first query is complete so we don't process again.\n     * @param {object} config.list - Definition of the list in SharePoint.\n     * be passed to the list constructor to extend further\n     * @param {string} config.list.title - List name, no spaces.  Offline XML file will need to be\n     * named the same (ex: CustomList so xml file would be apConfig.offlineXML + '/CustomList.xml')\n     * @param {string} config.list.getListId() - Unique SharePoint ID (ex: '{3DBEB25A-BEF0-4213-A634-00DAF46E3897}')\n     * @param {object[]} config.list.customFields - Maps SharePoint fields with names we'll use within the\n     * application.  Identifies field types and formats accordingly.  Also denotes if a field is read only.\n     * @constructor\n     *\n     * @example\n     * <pre>\n     * //Taken from a fictitious projectsModel.ts\n     *\n     * export class ProjectsModel extends ap.Model {\n     *      constructor() {\n     *          super({\n     *              factory: Project,\n     *              list: {\n     *                  guid: '{PROJECT LIST GUID}',\n     *                  title: 'Projects',\n     *                  customFields: [\n     *                      {\n     *                         staticName: 'Title',\n     *                         objectType: 'Text',\n     *                         mappedName: 'title',\n     *                         readOnly: false\n     *                      },\n     *                      {\n     *                         staticName: 'Customer',\n     *                         objectType: 'Lookup',\n     *                         mappedName: 'customer',\n     *                         readOnly: false\n     *                      },\n     *                      {\n     *                         staticName: 'ProjectDescription',\n     *                         objectType: 'Text',\n     *                         mappedName: 'projectDescription',\n     *                         readOnly: false\n     *                      },\n     *                      {\n     *                         staticName: 'Status',\n     *                         objectType: 'Text',\n     *                         mappedName: 'status',\n     *                         readOnly: false\n     *                      },\n     *                      {\n     *                         staticName: 'TaskManager',\n     *                         objectType: 'User',\n     *                         mappedName: 'taskManager',\n     *                         readOnly: false\n     *                      },\n     *                      {\n     *                         staticName: 'ProjectGroup',\n     *                         objectType: 'Lookup',\n     *                         mappedName: 'group',\n     *                         readOnly: false\n     *                      },\n     *                      {\n     *                         staticName: 'CostEstimate',\n     *                         objectType: 'Currency',\n     *                         mappedName: 'costEstimate',\n     *                         readOnly: false\n     *                      },\n     *                      {\n     *                         staticName: 'Active',\n     *                         objectType: 'Boolean',\n     *                         mappedName: 'active',\n     *                         readOnly: false\n     *                      },\n     *                      {\n     *                         staticName: 'Attachments',\n     *                         objectType: 'Attachments',\n     *                         mappedName: 'attachments',\n     *                         readOnly: true\n     *                      }\n     *                  ]\n     *              }\n     *          });\n     *\n     *          var model = this;\n     *\n     *          //Any other model setup\n     *      }\n     *      someExposedModelMethod() {\n     *          this.dosomething...\n     *      }\n     *\n     *   }\n     * </pre>\n     */\n    export class Model implements IModel {\n        data = [];\n        deferredListDefinition;\n        list: List;\n        factory: IModelFactory;\n        fieldDefinitionsExtended: boolean = false;\n        lastServerUpdate: Date;\n        queries: IQueriesContainer = {};\n        requestForFieldDefinitions;\n        constructor(config: IUninitializedModel) {\n\n            /** Assign all properties of config to the model */\n            _.assign(this, config);\n\n            /** Allow us to reference the model directly from the list item's factory prototype */\n            this.factory.prototype.getModel = () => this;\n\n            /** Use list constructor to instantiate valid list */\n            this.list = new List(this.list);\n\n            /** Register cache name with cache service so we can map factory name with list GUID */\n            apCacheService.registerModel(this);\n\n            /** Convenience query that simply returns all list items within a list. */\n            this.registerQuery({\n                name: 'getAllListItems',\n                operation: 'GetListItems'\n            });\n\n        }\n\n        /**\n         * @ngdoc function\n         * @name Model.addNewItem\n         * @module Model\n         * @description\n         * Using the definition of a list stored in a model, create a new list item in SharePoint.\n         * @param {object} entity An object that will be converted into key/value pairs based on the field definitions\n         * defined in the model.\n         * @param {object} [options] - Pass additional options to the data service.\n         * @returns {object} A promise which when resolved will returned the newly created list item from there server.\n         * This allows us to update the view with a valid new object that contains a unique list item id.\n         *\n         * @example\n         * <pre>\n         * <file name=\"app/modules/project/projectsModel.js\">\n         * projectModel.addNewItem({\n         *        title: 'A Project',\n         *        customer: {lookupValue: 'My Customer', lookupId: 123},\n         *        description: 'This is the project description'\n         *     }).then(function(newEntityFromServer) {\n         *         //The local query cache is automatically updated but\n         *         //any other dependent logic can go here\n         * };\n         * </file>\n         * </pre>\n         */\n        addNewItem<T extends ListItem<any>>(entity: Object, options?: Object): ng.IPromise<T> {\n            var model = this,\n                deferred = $q.defer();\n\n            apDataService.createListItem(model, entity, options)\n                .then((listItem) => {\n                    deferred.resolve(listItem);\n                    /** Optionally broadcast change event */\n                    apUtilityService.registerChange(model, 'create', listItem.id);\n                });\n            return deferred.promise;\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name Model.createEmptyItem\n         * @module Model\n         * @description\n         * Creates an object using the editable fields from the model, all attributes are empty based on the field\n         * type unless an overrides object is passed in.  The overrides object extends the defaults.  A benefit to this\n         * approach is the returned object inherits from the ListItem prototype so we have the ability to call\n         * entity.saveChanges instead of calling the model.addNewItem(entity).\n         *\n         * @param {object} [overrides] - Optionally extend the new empty item with specific values.\n         * @returns {object} Newly created list item.\n         */\n        createEmptyItem<T extends ListItem<any>>(overrides?: Object): T {\n            var model = this;\n            var newItem = {};\n            _.each(model.list.customFields, (fieldDefinition) => {\n                /** Create attributes for each non-readonly field definition */\n                if (!fieldDefinition.readOnly) {\n                    /** Create an attribute with the expected empty value based on field definition type */\n                    newItem[fieldDefinition.mappedName] = apFieldService.getDefaultValueForType(fieldDefinition.objectType);\n                }\n            });\n            /** Extend any values that should override the default empty values */\n            var rawObject = _.assign({}, newItem, overrides);\n            return new model.factory<T>(rawObject);\n        }\n\n        /**\n         * @ngdoc function\n         * @name Model.executeQuery\n         * @module Model\n         * @description\n         * The primary method for retrieving data from a query registered on a model.  It returns a promise\n         * which resolves to the local cache after post processing entities with constructors.\n         *\n         * @param {string} [queryName=apConfig.defaultQueryName] A unique key to identify this query\n         * @param {object} [options] Pass options to the data service.\n         * @returns {object} Promise that when resolves returns an array of list items which inherit from ListItem and\n         * optionally go through a defined constructor on the model.\n         *\n         * @example To call the query or check for changes since the last call.\n         * <pre>\n         * projectModel.executeQuery('MyCustomQuery').then(function(entities) {\n         *      //We now have a reference to array of entities stored in the local cache\n         *      //These inherit from the ListItem prototype as well as the Project prototype on the model\n         *      $scope.subsetOfProjects = entities;\n         *  });\n         * </pre>\n         */\n        executeQuery<T extends ListItem<any>>(queryName?: string, options?: Object): ng.IPromise<IndexedCache<T>> {\n            var model = this;\n            var query = model.getQuery(queryName);\n            if (query) {\n                return query.execute(options);\n            }\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name Model.extendListMetadata\n         * @module Model\n         * @description\n         * Extends the List and Fields with list information returned from the server.  Only runs once and after that\n         * returns the existing promise.\n         * @param {object} [options] Pass-through options to apDataService.getList\n         * @returns {object} Promise that is resolved once the information has been added.\n         */\n        extendListMetadata(options?: Object): ng.IPromise<any> {\n            var model = this,\n                deferred = $q.defer(),\n                defaults = { listName: model.list.getListId() };\n\n            /** Only request information if the list hasn't already been extended and is not currently being requested */\n            if (!model.deferredListDefinition) {\n                /** All Future Requests get this */\n                model.deferredListDefinition = deferred.promise;\n\n                var opts = _.assign({}, defaults, options);\n                apDataService.getList(opts)\n                    .then((responseXML) => {\n                        apDecodeService.extendListMetadata(model, responseXML);\n                        deferred.resolve(model);\n                    });\n            }\n            return model.deferredListDefinition;\n        }\n\n        /**\n         * @ngdoc function\n         * @name Model.generateMockData\n         * @module Model\n         * @description\n         * Generates 'n' mock records for testing using the field types defined in the model to provide something to visualize.\n         *\n         * @param {object} [options] Object containing optional parameters.\n         * @param {number} [options.quantity=10] The requested number of mock records to return.\n         * @param {string} [options.permissionLevel=FullMask] Sets the mask on the mock records to simulate desired\n         * permission level.\n         * @param {boolean} [options.staticValue=false] By default all mock data is dynamically created but if set,\n         * this will cause static data to be used instead.\n         */\n        generateMockData<T extends ListItem<any>>(options?: IMockDataOptions): T[] {\n            var mockData = [],\n                model = this;\n\n            var defaults = {\n                quantity: 10,\n                staticValue: false,\n                permissionLevel: 'FullMask'\n            };\n\n            /** Extend defaults with any provided options */\n            var opts: IMockDataOptions = _.assign({}, defaults, options);\n\n            _.times(opts.quantity, (count) => {\n                var mock = {\n                    id: count + 1\n                };\n                /** Create an attribute with mock data for each field */\n                _.each(model.list.fields, (field: IFieldDefinition) => {\n                    mock[field.mappedName] = field.getMockData(opts);\n                });\n\n                /** Use the factory on the model to extend the object */\n                mockData.push(new model.factory<T>(mock));\n            });\n            return mockData;\n        }\n\n        /**\n         * @ngdoc function\n         * @name Model.getAllListItems\n         * @description\n         * Inherited from Model constructor\n         * Gets all list items in the current list, processes the xml, and caches the data in model.\n         * @returns {object} Promise returning all list items when resolved.\n         * @example\n         * <pre>\n         * //Taken from a fictitious projectsModel.js\n         * projectModel.getAllListItems().then(function(entities) {\n         *     //Do something with all of the returned entities\n         *     $scope.projects = entities;\n         * };\n         * </pre>\n         */\n        getAllListItems<T extends ListItem<any>>(): ng.IPromise<IndexedCache<T>> {\n            var model = this;\n            var query = model.queries.getAllListItems;\n            return apDataService.executeQuery<T>(model, query, { target: query.indexedCache });\n        }\n\n        /**\n         * @ngdoc function\n         * @name Model.getCache\n         * @module Model\n         * @description\n         * Helper function that return the local cache for a named query if provided, otherwise\n         * it returns the cache for the primary query for the model.  Useful if you know the query\n         * has already been resolved and there's no need to check SharePoint for changes.\n         *\n         * @param {string} [queryName=apConfig.defaultQueryName] A unique key to identify this query.\n         * @returns {Array} Returns the contents of the current cache for a named query.\n         *\n         * @example\n         * <pre>\n         * var primaryQueryCache = projectModel.getCache();\n         * </pre>\n         *\n         * <pre>\n         * var primaryQueryCache = projectModel.getCache('primary');\n         * </pre>\n         *\n         * <pre>\n         * var namedQueryCache = projectModel.getCache('customQuery');\n         * </pre>\n         */\n        getCache<T extends ListItem<any>>(queryName?: string): IndexedCache<T> {\n            var model = this, query, cache;\n            query = model.getQuery(queryName);\n            if (query && query.indexedCache) {\n                cache = query.indexedCache;\n            }\n            return cache;\n        }\n\n        /**\n         * @ngdoc function\n         * @name Model.getCachedEntities\n         * @module Model\n         * @description\n         * Returns all entities registered for this model regardless of query.\n         * @returns {IndexedCache<T>} All registered entities for this model.\n         */\n        getCachedEntities<T extends ListItem<any>>(): IndexedCache<T> {\n            var model = this;\n            return apCacheService.getCachedEntities<T>(model.list.getListId());\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name Model.getCachedEntity\n         * @module Model\n         * @description\n         * Attempts to locate a model listItem by id.\n         * @param {number} listItemId The ID of the requested listItem.\n         * @returns {object} Returns either the requested listItem or undefined if it's not found.\n         */\n        getCachedEntity<T extends ListItem<any>>(listItemId: number): T {\n            var model = this;\n            return apCacheService.getCachedEntity<T>(model.list.getListId(), listItemId);\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name Model.getFieldDefinition\n         * @module Model\n         * @description\n         * Returns the field definition from the definitions defined in the custom fields array within a model.\n         * <pre>\n         * var project = {\n         *    title: 'Project 1',\n         *    location: {\n         *        lookupId: 5,\n         *        lookupValue: 'Some Building'\n         *    }\n         * };\n         *\n         * //To get field metadata\n         * var locationDefinition = projectsModel.getFieldDefinition('location');\n         * </pre>\n         * @param {string} fieldName Internal field name.\n         * @returns {object} Field definition.\n         */\n        getFieldDefinition(fieldName: string): IExtendedFieldDefinition {\n            var model = this;\n            return _.find(model.list.fields, { mappedName: fieldName });\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name ListItem.getList\n         * @description\n         * Allows us to reference the list definition directly from the list item.  This is added to the\n         * model.factory prototype in apModelFactory.  See the [List](#/api/List) documentation for more info.\n         * @returns {object} List for the list item.\n         */\n        getList(): List {\n            return this.list;\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name ListItem.getListId\n         * @description\n         * Allows us to reference the list ID directly from the model.\n         * @returns {string} List ID.\n         */\n        getListId(): string {\n            return this.list.getListId();\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name Model.getListItemById\n         * @param {number} listItemId Id of the item being requested.\n         * @param {object} options Used to override apDataService defaults.\n         * @description\n         * Inherited from Model constructor\n         * Attempts to retrieve the requested list item from the server.\n         * @returns {object} Promise that resolves with the requested list item if found.  Otherwise it returns undefined.\n         * @example\n         * <pre>\n         * //Taken from a fictitious projectsModel.js\n         * projectModel.getListItemById(12).then(function(listItem) {\n         *     //Do something with the located listItem\n         *     $scope.project = listItem;\n         * };\n         * </pre>\n         */\n        getListItemById<T extends ListItem<any>>(listItemId: number, options?: Object): ng.IPromise<T> {\n            var deferred = $q.defer(),\n                model = this,\n                /** Unique Query Name */\n                queryKey = 'GetListItemById-' + listItemId;\n\n            /** Register a new Query if it doesn't already exist */\n            if (!model.getQuery(queryKey)) {\n                var defaults = {\n                    name: queryKey,\n                    operation: 'GetListItems',\n                    CAMLRowLimit: 1,\n                    CAMLQuery: '' +\n                    '<Query>' +\n                    ' <Where>' +\n                    '   <Eq>' +\n                    '     <FieldRef Name=\"ID\"/>' +\n                    '     <Value Type=\"Number\">' + listItemId + '</Value>' +\n                    '   </Eq>' +\n                    ' </Where>' +\n                    '</Query>'\n                };\n                /** Allows us to override defaults */\n                var opts = _.assign({}, defaults, options);\n                model.registerQuery(opts);\n            }\n\n            model.executeQuery(queryKey)\n                .then((indexedCache) => {\n                    /** Should return an indexed cache object with a single listItem so just return the requested listItem */\n                    deferred.resolve(indexedCache.first());\n                }, (err) => {\n                    deferred.reject(err);\n                });\n\n            return deferred.promise;\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name ListItem.getModel\n         * @description\n         * Allows us to reference the parent model directly from the list item.  This is added to the\n         * model.factory prototype in apModelFactory.  See the [List](#/api/List) documentation for more info.\n         * @returns {object} Model for the list item.\n         */\n        getModel(): Model {\n            return this;\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name Model.getQuery\n         * @module Model\n         * @description\n         * Helper function that attempts to locate and return a reference to the requested or catchall query.\n         * @param {string} [queryName=apConfig.defaultQueryName] A unique key to identify this query.\n         * @returns {object} See Query prototype for additional details on what a Query looks like.\n         *\n         * @example\n         * <pre>\n         * var primaryQuery = projectModel.getQuery();\n         * </pre>\n         *\n         * <pre>\n         * var primaryQuery = projectModel.getQuery('primary');\n         * </pre>\n         *\n         * <pre>\n         * var namedQuery = projectModel.getQuery('customQuery');\n         * </pre>\n         */\n        getQuery<T extends ListItem<any>>(queryName: string): IQuery<T> {\n            var model = this, query;\n            if (_.isObject(model.queries[queryName])) {\n                /** The named query exists */\n                query = model.queries[queryName];\n            } else if (_.isObject(model.queries[apConfig.defaultQueryName]) && !queryName) {\n                /** A named query wasn't specified and the catchall query exists */\n                query = model.queries[apConfig.defaultQueryName];\n            } else {\n                /** Requested query not found */\n                query = undefined;\n            }\n            return query;\n        }\n\n\n\n        /**\n         * @ngdoc function\n         * @name Model.isInitialised\n         * @module Model\n         * @description\n         * Methods which allows us to easily determine if we've successfully made any queries this session.\n         * @returns {boolean} Returns evaluation.\n         */\n        isInitialised(): boolean {\n            var model = this;\n            return _.isDate(model.lastServerUpdate);\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name Model.registerQuery\n         * @module Model\n         * @description\n         * Constructor that allows us create a static query with the option to build dynamic queries as seen in the\n         * third example.  This construct is a passthrough to [SPServices](http: //spservices.codeplex.com/)\n         * @param {object} [queryOptions] Optional options to pass through to the\n         * [dataService](#/api/dataService.executeQuery).\n         * @param {string} [queryOptions.name=apConfig.defaultQueryName] Optional name of the new query (recommended but will\n         * default to 'Primary' if not specified)\n         * @param {string} [queryOptions.operation=\"GetListItemChangesSinceToken\"] Defaults to\n         * [GetListItemChangesSinceToken](http: //msdn.microsoft.com/en-us/library/lists.lists.getlistitemchangessincetoken%28v=office.12%29.aspx)\n         * but for a smaller payload and faster response you can use\n         * [GetListItems](http: //spservices.codeplex.com/wikipage?title=GetListItems&referringTitle=Lists).\n         * @param {boolean} [queryOptions.cacheXML=false] Typically don't need to store the XML response because it\n         * has already been parsed into JS objects.\n         * @param {string} [queryOptions.offlineXML] Optionally reference a specific XML file to use for this query instead\n         * of using the shared XML file used by all queries on this model.  Useful to mock custom query results.\n         * @param {string} [queryOptions.query] CAML Query - Josh McCarty has a good quick reference\n         * [here](http: //joshmccarty.com/2012/06/a-caml-query-quick-reference)\n         * @param {string} [queryOptions.queryOptions]\n         * <pre>\n         * // Default options\n         * '<QueryOptions>' +\n         * '   <IncludeMandatoryColumns>' +\n         *      'FALSE' +\n         *     '</IncludeMandatoryColumns>' +\n         * '   <IncludeAttachmentUrls>' +\n         *      'TRUE' +\n         *     '</IncludeAttachmentUrls>' +\n         * '   <IncludeAttachmentVersion>' +\n         *      'FALSE' +\n         *     '</IncludeAttachmentVersion>' +\n         * '   <ExpandUserField>' +\n         *      'FALSE' +\n         *     '</ExpandUserField>' +\n         * '</QueryOptions>',\n         * </pre>\n         *\n         *\n         * @returns {object} Query Returns a new query object.\n         *\n         * @example\n         * <h4>Example #1</h4>\n         * <pre>\n         * // Query to retrieve the most recent 25 modifications\n         * model.registerQuery({\n         *    name: 'recentChanges',\n         *    CAMLRowLimit: 25,\n         *    query: '' +\n         *        '<Query>' +\n         *        '   <OrderBy>' +\n         *        '       <FieldRef Name=\"Modified\" Ascending=\"FALSE\"/>' +\n         *        '   </OrderBy>' +\n         *            //Prevents any records from being returned if user doesn't\n         *            // have permissions on project\n         *        '   <Where>' +\n         *        '       <IsNotNull>' +\n         *        '           <FieldRef Name=\"Project\"/>' +\n         *        '       </IsNotNull>' +\n         *        '   </Where>' +\n         *        '</Query>'\n         * });\n         * </pre>\n         *\n         * <h4>Example #2</h4>\n         * <pre>\n         * // Could be placed on the projectModel and creates the query but doesn't\n         * // call it\n         * projectModel.registerQuery({\n         *     name: 'primary',\n         *     query: '' +\n         *         '<Query>' +\n         *         '   <OrderBy>' +\n         *         '       <FieldRef Name=\"Title\" Ascending=\"TRUE\"/>' +\n         *         '   </OrderBy>' +\n         *         '</Query>'\n         * });\n         *\n         * //To call the query or check for changes since the last call\n         * projectModel.executeQuery('primary').then(function(entities) {\n         *     // We now have a reference to array of entities stored in the local\n         *     // cache.  These inherit from the ListItem prototype as well as the\n         *     // Project prototype on the model\n         *     $scope.projects = entities;\n         * });\n         * </pre>\n         *\n         * <h4>Example #3</h4>\n         * <pre>\n         * // Advanced functionality that would allow us to dynamically create\n         * // queries for list items with a lookup field associated with a specific\n         * // project id.  Let's assume this is on the projectTasksModel.\n         * model.queryByProjectId(projectId) {\n         *     // Unique query name\n         *     var queryKey = 'pid' + projectId;\n         *\n         *     // Register project query if it doesn't exist\n         *     if (!_.isObject(model.queries[queryKey])) {\n         *         model.registerQuery({\n         *             name: queryKey,\n         *             query: '' +\n         *                 '<Query>' +\n         *                 '   <OrderBy>' +\n         *                 '       <FieldRef Name=\"ID\" Ascending=\"TRUE\"/>' +\n         *                 '   </OrderBy>' +\n         *                 '   <Where>' +\n         *                 '       <And>' +\n         *                              // Prevents any records from being returned\n         *                              //if user doesn't have permissions on project\n         *                 '           <IsNotNull>' +\n         *                 '               <FieldRef Name=\"Project\"/>' +\n         *                 '           </IsNotNull>' +\n         *                              // Return all records for the project matching\n         *                              // param projectId\n         *                 '           <Eq>' +\n         *                 '               <FieldRef Name=\"Project\" LookupId=\"TRUE\"/>' +\n         *                 '               <Value Type=\"Lookup\">' + projectId + '</Value>' +\n         *                 '           </Eq>' +\n         *                 '       </And>' +\n         *                 '   </Where>' +\n         *                 '</Query>'\n         *         });\n         *     }\n         *     //Still using execute query but now we have a custom query\n         *     return model.executeQuery(queryKey);\n         * };\n         * </pre>\n         */\n        registerQuery<T extends ListItem<any>>(queryOptions: IQueryOptions): IQuery<T> {\n            var model = this;\n\n            var defaults = {\n                /** If name isn't set, assume this is the only model and designate as primary */\n                name: apConfig.defaultQueryName\n            };\n\n            queryOptions = _.assign({}, defaults, queryOptions);\n\n            model.queries[queryOptions.name] = apQueryFactory.create(queryOptions, model);\n\n            /** Return the newly created query */\n            return model.queries[queryOptions.name];\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name Model.resolvePermissions\n         * @module Model\n         * @description\n         * See apModelFactory.resolvePermissions for details on what we expect to have returned.\n         * @returns {Object} Contains properties for each permission level evaluated for current user.\n         * @example\n         * Lets assume we're checking to see if a user has edit rights for a given list.\n         * <pre>\n         * var userPermissions = tasksModel.resolvePermissions();\n         * var userCanEdit = userPermissions.EditListItems;\n         * </pre>\n         * Example of what the returned object would look like\n         * for a site admin.\n         * <pre>\n         * perm = {\n            *    \"ViewListItems\": true,\n            *    \"AddListItems\": true,\n            *    \"EditListItems\": true,\n            *    \"DeleteListItems\": true,\n            *    \"ApproveItems\": true,\n            *    \"OpenItems\": true,\n            *    \"ViewVersions\": true,\n            *    \"DeleteVersions\": true,\n            *    \"CancelCheckout\": true,\n            *    \"PersonalViews\": true,\n            *    \"ManageLists\": true,\n            *    \"ViewFormPages\": true,\n            *    \"Open\": true,\n            *    \"ViewPages\": true,\n            *    \"AddAndCustomizePages\": true,\n            *    \"ApplyThemeAndBorder\": true,\n            *    \"ApplyStyleSheets\": true,\n            *    \"ViewUsageData\": true,\n            *    \"CreateSSCSite\": true,\n            *    \"ManageSubwebs\": true,\n            *    \"CreateGroups\": true,\n            *    \"ManagePermissions\": true,\n            *    \"BrowseDirectories\": true,\n            *    \"BrowseUserInfo\": true,\n            *    \"AddDelPrivateWebParts\": true,\n            *    \"UpdatePersonalWebParts\": true,\n            *    \"ManageWeb\": true,\n            *    \"UseRemoteAPIs\": true,\n            *    \"ManageAlerts\": true,\n            *    \"CreateAlerts\": true,\n            *    \"EditMyUserInfo\": true,\n            *    \"EnumeratePermissions\": true,\n            *    \"FullMask\": true\n            * }\n         * </pre>\n         */\n        resolvePermissions(): IUserPermissionsObject {\n            var model = this;\n            if (model.list && model.list.effectivePermMask) {\n                /** Get the permission mask from the permission mask name */\n                var permissionMask = apUtilityService.convertEffectivePermMask(model.list.effectivePermMask);\n                return apUtilityService.resolvePermissions(permissionMask);\n            } else {\n                window.console.error('Attempted to resolve permissions of a model that hasn\\'t been initialized.', model);\n                return apUtilityService.resolvePermissions(null);\n            }\n        }\n\n        /**\n         * @ngdoc function\n         * @name Model.validateEntity\n         * @module Model\n         * @description\n         * Uses the custom fields defined in an model to ensure each field (required = true) is evaluated\n         * based on field type\n         *\n         * @param {object} listItem SharePoint list item.\n         * @param {object} [options] Object containing optional parameters.\n         * @param {boolean} [options.toast=true] Should toasts be generated to alert the user of issues.\n         * @returns {boolean} Evaluation of validity.\n         */\n        validateEntity<T extends ListItem<any>>(listItem: T, options?: Object): boolean {\n            var valid = true,\n                model = this;\n\n            var defaults = {\n                toast: true\n            };\n\n            /** Extend defaults with any provided options */\n            var opts = _.assign({}, defaults, options);\n\n            var checkObject = (fieldValue) => {\n                return _.isObject(fieldValue) && _.isNumber(fieldValue.lookupId);\n            };\n\n            _.each(model.list.customFields, (fieldDefinition: IExtendedFieldDefinition) => {\n                var fieldValue = listItem[fieldDefinition.mappedName];\n                var fieldDescriptor = '\"' + fieldDefinition.objectType + '\" value.';\n                /** Only evaluate required fields */\n                if ((fieldDefinition.required || fieldDefinition.Required) && valid) {\n                    switch (fieldDefinition.objectType) {\n                        case 'Boolean':\n                            valid = _.isBoolean(fieldValue);\n                            break;\n                        case 'DateTime':\n                            valid = _.isDate(fieldValue);\n                            break;\n                        case 'Lookup':\n                        case 'User':\n                            valid = checkObject(fieldValue);\n                            break;\n                        case 'LookupMulti':\n                        case 'UserMulti':\n                            /** Ensure it's a valid array containing objects */\n                            valid = _.isArray(fieldValue) && fieldValue.length > 0;\n                            if (valid) {\n                                /** Additionally check that each lookup/person contains a lookupId */\n                                _.each(fieldValue, (fieldObject) => {\n                                    if (valid) {\n                                        valid = checkObject(fieldObject);\n                                    } else {\n                                        /** Short circuit */\n                                        return false;\n                                    }\n                                });\n                            }\n                            break;\n                        default:\n                            /** Evaluate everything else as a string */\n                            valid = !_.isEmpty(fieldValue);\n\n                    }\n                    if (!valid && opts.toast) {\n                        var fieldName = fieldDefinition.label || fieldDefinition.staticName;\n                        toastr.error(fieldName + ' does not appear to be a valid ' + fieldDescriptor);\n                    }\n                }\n                if (!valid) {\n                    return false;\n                }\n            });\n            return valid;\n        }\n    }\n\n    export class ModelFactory {\n        Model = Model;\n        static $inject = ['$q', 'apCacheService', 'apConfig', 'apDataService', 'apDecodeService', 'apFieldService', 'apIndexedCacheFactory', 'apListFactory', 'apQueryFactory', 'apUtilityService', 'toastr'];\n        constructor(_$q_, _apCacheService_, _apConfig_, _apDataService_, _apDecodeService_, _apFieldService_, _apIndexedCacheFactory_, _apListFactory_, _apQueryFactory_, _apUtilityService_, _toastr_) {\n\n            $q = _$q_;\n            apCacheService = _apCacheService_;\n            apConfig = _apConfig_;\n            apDataService = _apDataService_;\n            apDecodeService = _apDecodeService_;\n            apFieldService = _apFieldService_;\n            apIndexedCacheFactory = _apIndexedCacheFactory_;\n            apListFactory = _apListFactory_;\n            apQueryFactory = _apQueryFactory_;\n            apUtilityService = _apUtilityService_;\n            toastr = _toastr_;\n        }\n\n        create(config) {\n            return new Model(config);\n        }\n\n    }\n\n    interface IMockDataOptions {\n        permissionLevel?: string;\n        quantity?: number;\n    }\n\n    angular\n        .module('angularPoint')\n        .service('apModelFactory', ModelFactory);\n\n\n}\n","/// <reference path=\"../app.module.ts\" />\n\nmodule ap {\n    'use strict';\n\n    var $q, apIndexedCacheFactory: IndexedCacheFactory, apConfig: IAPConfig, apDefaultListItemQueryOptions,\n        apDataService: DataService;\n\n    export interface IQuery<T extends ListItem<any>> {\n        cacheXML?: boolean;\n        changeToken?: string;\n        execute(options?: Object): ng.IPromise<IndexedCache<T>>;\n        getModel(): Model;\n        indexedCache: IndexedCache<T>;\n        initialized: ng.IDeferred<IndexedCache<T>>\n        lastRun: Date;\n        listName: string;\n        name: string;\n        negotiatingWithServer: boolean;\n        offlineXML?: string;\n        operation?: string;\n        promise?: ng.IPromise<IndexedCache<T>>;\n        query?: string;\n        queryOptions?: IQueryOptions;\n        viewFields: string;\n        webURL?: string;\n    }\n\n    export interface IQueryOptions {\n        name?: string;\n        operation?: string;\n    }\n\n    /**\n     * @ngdoc function\n     * @name Query\n     * @description\n     * Primary constructor that all queries inherit from.\n     * @param {object} config Initialization parameters.\n     * @param {string} [config.operation=GetListItemChangesSinceToken] Optionally use 'GetListItems' to\n     * receive a more efficient response, just don't have the ability to check for changes since the last time\n     * the query was called.\n     * @param {boolean} [config.cacheXML=true] Set to false if you want a fresh request.\n     * @param {string} [config.offlineXML] Optionally reference a specific XML file to use for this query instead\n     * of using the shared XML file for this list.\n     * @param {string} [config.query=Ordered ascending by ID] CAML query passed to SharePoint to control\n     * the data SharePoint returns.\n     * @param {string} [config.queryOptions] SharePoint options.\n     * <pre>\n     * //Default\n     * queryOptions: '' +\n     * '<QueryOptions>' +\n     * '   <IncludeMandatoryColumns>' +\n     *      'FALSE' +\n     *     '</IncludeMandatoryColumns>' +\n     * '   <IncludeAttachmentUrls>' +\n     *      'TRUE' +\n     *     '</IncludeAttachmentUrls>' +\n     * '   <IncludeAttachmentVersion>' +\n     *      'FALSE' +\n     *     '</IncludeAttachmentVersion>' +\n     * '   <ExpandUserField>' +\n     *      'FALSE' +\n     *     '</ExpandUserField>' +\n     * '</QueryOptions>',\n     * </pre>\n     * @param {object} model Reference to the parent model for the query.  Allows us to reference when out of\n     * scope.\n     * @constructor\n     *\n     * @example\n     * <pre>\n     * // Query to retrieve the most recent 25 modifications\n     * model.registerQuery({\n         *    name: 'recentChanges',\n         *    CAMLRowLimit: 25,\n         *    query: '' +\n         *        '<Query>' +\n         *        '   <OrderBy>' +\n         *        '       <FieldRef Name=\"Modified\" Ascending=\"FALSE\"/>' +\n         *        '   </OrderBy>' +\n         *            // Prevents any records from being returned if user\n         *            // doesn't have permissions on project\n         *        '   <Where>' +\n         *        '       <IsNotNull>' +\n         *        '           <FieldRef Name=\"Project\"/>' +\n         *        '       </IsNotNull>' +\n         *        '   </Where>' +\n         *        '</Query>'\n         * });\n     * </pre>\n     */\n    export class Query<T extends ListItem<any>> implements IQuery<T> {\n        /** Very memory intensive to enable cacheXML which is disabled by default*/\n        cacheXML: boolean = false;\n        /** Reference to the most recent query when performing GetListItemChangesSinceToken */\n        changeToken = undefined;\n\n        getModel: () => Model;\n\n        /** Key value hash map with key being the id of the entity */\n        indexedCache: IndexedCache<T>;\n        /** Promise resolved after first time query is executed */\n        initialized: ng.IDeferred<IndexedCache<T>>;\n        /** Date/Time last run */\n        lastRun;\n        listName;\n        name: string;\n        /** Flag to prevent us from makeing concurrent requests */\n        negotiatingWithServer: boolean = false;\n        /** Every time we run we want to check to update our cached data with\n         * any changes made on the server */\n        operation = 'GetListItemChangesSinceToken';\n        promise;\n        /** Default query returns list items in ascending ID order */\n        query: string = `\n        <Query>\n           <OrderBy>\n               <FieldRef Name=\"ID\" Ascending=\"TRUE\"/>\n           </OrderBy>\n        </Query>`;\n        queryOptions;\n        viewFields;\n        webURL;\n\n        constructor(config, model: Model) {\n            this.indexedCache = apIndexedCacheFactory.create<T>();\n            this.initialized = $q.defer();\n            this.listName = model.list.getListId();\n            this.queryOptions = apDefaultListItemQueryOptions;\n            this.viewFields = model.list.viewFields;\n\n            /** Set the default url if the config param is defined, otherwise let SPServices handle it */\n            if (apConfig.defaultUrl) {\n                this.webURL = apConfig.defaultUrl;\n            }\n\n            _.assign(this, config);\n\n            /** Allow the model to be referenced at a later time */\n            this.getModel = () => model;\n        }\n\n        /**\n         * @ngdoc function\n         * @name Query.execute\n         * @methodOf Query\n         * @description\n         * Query SharePoint, pull down all initial records on first call along with list definition if using\n         * \"GetListItemChangesSinceToken\".  Note: this is  substantially larger than \"GetListItems\" on first call.\n         * Subsequent calls pulls down changes (Assuming operation: \"GetListItemChangesSinceToken\").\n         * @param {object} [options] Any options that should be passed to dataService.executeQuery.\n         * @returns {object[]} Array of list item objects.\n         */\n        execute(options): ng.IPromise<IndexedCache<T>> {\n            var query = this;\n            var model = query.getModel();\n            var deferred = $q.defer();\n\n            /** Return existing promise if request is already underway or has been previously executed in the past\n             * 1/10th of a second */\n            if (query.negotiatingWithServer || (_.isDate(query.lastRun) && query.lastRun.getTime() + 100 > new Date().getTime())) {\n                return query.promise;\n            } else {\n                /** Set flag to prevent another call while this query is active */\n                query.negotiatingWithServer = true;\n\n                /** Set flag if this if the first time this query has been run */\n                var firstRunQuery = _.isNull(query.lastRun);\n\n                var defaults = {\n                    /** Designate the central cache for this query if not already set */\n                    target: query.getCache()\n                };\n\n                /** Extend defaults with any options */\n                var queryOptions = _.assign({}, defaults, options);\n\n                apDataService.executeQuery(model, query, queryOptions).then((results) => {\n                    if (firstRunQuery) {\n                        /** Promise resolved the first time query is completed */\n                        query.initialized.resolve(queryOptions.target);\n                    }\n\n                    /** Remove lock to allow for future requests */\n                    query.negotiatingWithServer = false;\n\n                    /** Store query completion date/time on model to allow us to identify age of data */\n                    model.lastServerUpdate = new Date();\n\n                    deferred.resolve(queryOptions.target);\n                });\n\n                /** Save reference on the query **/\n                query.promise = deferred.promise;\n                return deferred.promise;\n            }\n        }\n\n        getCache(): IndexedCache<T> {\n            return this.indexedCache;\n        }\n    }\n\n\n    export class QueryFactory {\n        Query = Query;\n        static $inject = ['$q', 'apConfig', 'apDataService', 'apDefaultListItemQueryOptions', 'apIndexedCacheFactory'];\n\n        constructor(_$q_, _apConfig_, _apDataService_, _apDefaultListItemQueryOptions_, _apIndexedCacheFactory_) {\n\n            $q = _$q_;\n            apConfig = _apConfig_;\n            apDataService = _apDataService_;\n            apDefaultListItemQueryOptions = _apDefaultListItemQueryOptions_;\n            apIndexedCacheFactory = _apIndexedCacheFactory_;\n\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apQueryFactory:create\n         * @methodOf angularPoint.apQueryFactory\n         * @param {object} config Options object.\n         * @param {object} model Reference to the model.\n         * @description\n         * Instantiates and returns a new Query.\n         */\n        create<T extends ListItem<any>>(config, model): IQuery<T> {\n            return new Query<T>(config, model);\n        }\n    }\n\n    /**\n     * @ngdoc object\n     * @name angularPoint.apQueryFactory\n     * @description\n     * Exposes the Query prototype and a constructor to instantiate a new Query.\n     *\n     * @requires angularPoint.apDataService\n     * @requires angularPoint.apConfig\n     */\n    angular.module('angularPoint')\n        .service('apQueryFactory', QueryFactory);\n\n\n}\n","/// <reference path=\"../app.module.ts\" />\n\nmodule ap {\n    'use strict';\n\n    var apUtilityService;\n\n    export interface IUser {\n        email?:string;\n        loginName?:string;\n        lookupId: number;\n        lookupValue: string;\n        sipAddress?:string;\n        title?:string;\n    }\n\n    /**\n     * @ngdoc function\n     * @name User\n     * @description\n     * Allows for easier distinction when debugging if object type is shown as a User.  Turns a delimited \";#\"\n     * string into an object shown below depeinding on field settings:\n     * <pre>\n     * {\n         *      lookupId: 1,\n         *      lookupValue: 'Joe User'\n         * }\n     * </pre>\n     * or\n     * <pre>\n     * {\n         *      lookupId: 1,\n         *      lookupValue: 'Joe User',\n         *      loginName: 'joe.user',\n         *      email: 'joe@company.com',\n         *      sipAddress: 'whatever',\n         *      title: 'Sr. Widget Maker'\n         * }\n     * </pre>\n     * @param {string} s Delimited string used to create a User object.\n     * @constructor\n     */\n    class User implements IUser {\n        lookupValue: string;\n        lookupId: number;\n        loginName: string;\n        email: string;\n        sipAddress: string;\n        title: string;\n\n        constructor(str: string) {\n            var self = this;\n            var thisUser = new apUtilityService.SplitIndex(str);\n\n            var thisUserExpanded = thisUser.value.split(',#');\n            if (thisUserExpanded.length === 1) {\n                //Standard user columns only return a id,#value pair\n                self.lookupId = thisUser.id;\n                self.lookupValue = thisUser.value;\n            } else {\n                //Allow for case where user adds additional properties when setting up field\n                self.lookupId = thisUser.id;\n                self.lookupValue = thisUserExpanded[0].replace(/(,,)/g, ',');\n                self.loginName = thisUserExpanded[1].replace(/(,,)/g, ',');\n                self.email = thisUserExpanded[2].replace(/(,,)/g, ',');\n                self.sipAddress = thisUserExpanded[3].replace(/(,,)/g, ',');\n                self.title = thisUserExpanded[4].replace(/(,,)/g, ',');\n            }\n        }\n    }\n\n\n    export class UserFactory {\n        User = User;\n        static $inject = ['apUtilityService'];\n\n        constructor(_apUtilityService_) {\n            apUtilityService = _apUtilityService_;\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apUserFactory:create\n         * @methodOf angularPoint.apUserFactory\n         * @description\n         * Instantiates and returns a new User field.\n         */\n        create(s) {\n            return new User(s);\n        }\n    }\n\n    /**\n     * @ngdoc function\n     * @name angularPoint.apUserFactory\n     * @description\n     * Tools to assist with the creation of CAML queries.\n     *\n     */\n    angular.module('angularPoint')\n        .service('apUserFactory', UserFactory);\n\n\n}\n","/// <reference path=\"../app.module.ts\" />\n/// <reference path=\"../../typings/tsd.d.ts\" />\n\ndeclare module ap {\n\n    export interface IXMLGroup {\n        Description: string;\n        ID: string;\n        Name: string;\n        OwnerID: string;\n        OwnerIsUser: string;\n    }\n\n    export interface IXMLUser {\n        Email: string;\n        Flags: string;\n        ID: string;\n        IsDomainGroup: string;\n        IsSiteAdmin: string;\n        LoginName: string;\n        Name: string;\n        Notes: string;\n        Sid: string;\n    }\n\n    export interface IXMLUserProfile {\n        userLoginName: string; //Added to allow us to optionally add a prefix if necessary from apConfig\n        UserProfile_GUID: string;\n        AccountName: string;\n        FirstName: string;\n        \"SPS-PhoneticFirstName\": string;\n        LastName: string;\n        \"SPS-PhoneticLastName\": string;\n        PreferredName: string;\n        \"SPS-PhoneticDisplayName\": string;\n        WorkPhone: string;\n        Department: string;\n        Title: string;\n        \"SPS-JobTitle\": string;\n        Manager: string;\n        AboutMe: string;\n        PersonalSpace: string;\n        PictureURL: string;\n        UserName: string;\n        QuickLinks: string;\n        WebSite: string;\n        PublicSiteRedirect: string;\n        \"SPS-Dotted-line\": string;\n        \"SPS-Peers\": string;\n        \"SPS-Responsibility\": string;\n        \"SPS-SipAddress\": string;\n        \"SPS-MySiteUpgrade\": string;\n        \"SPS-DontSuggestList\": string;\n        \"SPS-ProxyAddresses\": string;\n        \"SPS-HireDate\": string;\n        \"SPS-DisplayOrder\": string;\n        \"SPS-ClaimID\": string;\n        \"SPS-ClaimProviderID\": string;\n        \"SPS-ClaimProviderType\": string;\n        \"SPS-LastColleagueAdded\": string;\n        \"SPS-OWAUrl\": string;\n        \"SPS-SavedAccountName\": string;\n        \"SPS-ResourceAccountName\": string;\n        \"SPS-ObjectExists\": string;\n        \"SPS-MasterAccountName\": string;\n        \"SPS-DistinguishedName\": string;\n        \"SPS-SourceObjectDN\": string;\n        \"SPS-LastKeywordAdded\": string;\n        WorkEmail: string;\n        CellPhone: string;\n        Fax: string;\n        HomePhone: string;\n        Office: string;\n        \"SPS-Location\": string;\n        \"SPS-TimeZone\": string;\n        Assistant: string;\n        \"SPS-PastProjects\": string;\n        \"SPS-Skills\": string;\n        \"SPS-School\": string;\n        \"SPS-Birthday\": string;\n        \"SPS-StatusNotes\": string;\n        \"SPS-Interests\": string;\n        \"SPS-EmailOptin\": string;\n    }\n\n    export interface IListItemCrudOptions<T extends ListItem<any>> {\n        target: IndexedCache<T>;\n    }\n\n\n    export interface IListItemVersion<T extends ListItem<any>> extends ListItem<T> {\n        modified: Date;\n        version: number;\n        [key: string]: any;\n    }\n\n    export interface IWorkflowDefinition {\n        instantiationUrl: string;\n        name: string;\n        templateId: string;\n    }\n\n    export interface IStartWorkflowParams {\n        fileRef?: string;\n        item: string;\n        templateId: string;\n        workflowName?: string;\n        workflowParameters?: string;\n    }\n\n\n    //    export interface IDiscussionThread {\n    //        posts: IDiscussionThreadPost[];\n    //        nextId: number;\n    //        getNextId(): number;\n    //        createPost(parentId: number, content: string): IDiscussionThreadPost;\n    //        getListItem(): IListItem;\n    //        prune(): void;\n    //        saveChanges(): ng.IPromise<IListItem>;\n    //    }\n\n    //    export interface IDiscussionThreadPost {\n    //        content: string;\n    //        id: number;\n    //        parentId: number;\n    //        created: Date;\n    //        user: IUser;\n    //        removePost(): void;\n    //        deletePost(): ng.IPromise<IListItem>;\n    //        savePost(): ng.IPromise<IListItem>;\n    //        reply(): ng.IPromise<IListItem>;\n    //    }\n\n    //    export interface ICache<T> extends IndexedCache<T>{\n    //        //TODO Populate me!\n    //    }\n\n    export interface IUserPermissionsObject {\n        AddAndCustomizePages: boolean;\n        AddDelPrivateWebParts: boolean;\n        AddListItems: boolean;\n        ApplyStyleSheets: boolean;\n        ApplyThemeAndBorder: boolean;\n        ApproveItems: boolean;\n        BrowseDirectories: boolean;\n        BrowseUserInfo: boolean;\n        CancelCheckout: boolean;\n        CreateAlerts: boolean;\n        CreateGroups: boolean;\n        CreateSSCSite: boolean;\n        DeleteListItems: boolean;\n        DeleteVersions: boolean;\n        EditListItems: boolean;\n        EditMyUserInfo: boolean;\n        EnumeratePermissions: boolean;\n        FullMask: boolean;\n        ManageAlerts: boolean;\n        ManageLists: boolean;\n        ManagePermissions: boolean;\n        ManageSubwebs: boolean;\n        ManageWeb: boolean;\n        Open: boolean;\n        OpenItems: boolean;\n        PersonalViews: boolean;\n        UpdatePersonalWebParts: boolean;\n        UseRemoteAPIs: boolean;\n        ViewFormPages: boolean;\n        ViewListItems: boolean;\n        ViewPages: boolean;\n        ViewUsageData: boolean;\n        ViewVersions: boolean;\n    }\n\n\n}\n\n// declare module \"lodash\"  {\n//     isGuid(string): boolean;\n//     deepIn(Object, string): boolean;\n//     deepGet(Object, string): any;\n//     isDefined(val: any): boolean;\n// }\n\ninterface IToast {\n    toastId: number;\n    scope: ng.IScope;\n    iconClass: string;\n}\n\ninterface toastr {\n    error(message: string, title?: string, optionsOverride?: Object): IToast;\n    info(message: string, title?: string, optionsOverride?: Object): IToast;\n    success(message: string, title?: string, optionsOverride?: Object): IToast;\n    warning(message: string, title?: string, optionsOverride?: Object): IToast;\n    clear(IToast?): void;\n}\n\ndeclare module ngTable {\n    export interface INGTableParamsObject {\n        count?: number;\n        filter?: Object;\n        page?: number;\n        sorting?: Object;\n    }\n\n    interface INGTableParamsReference {\n        count(): number;\n        filter(): Object;\n        orderBy(): string[]\n        page(): number;\n        sorting(): Object;\n        total(): number;\n        total(number): void;\n    }\n\n    export interface INGTableSettings {\n        total?: number;\n        counts?: number[];\n        defaultSort?: string; //options: ['asc', 'desc']\n        groupBy?: string | Function;\n        filterDelay?: number;\n        getData($defer: ng.IDeferred<ap.ListItem<any>[]>, params: INGTableParamsReference): void;\n    }\n\n    export interface INGTableParams {\n        new (parameters: INGTableParamsObject, settings: INGTableSettings): INGTable;\n    }\n\n    export interface INGTable {\n        reload(): void;\n    }\n}\n\n","/// <reference path=\"../app.module.ts\" />\n\nmodule ap {\n    'use strict';\n\n    /** Local references to cached promises */\n    var _getGroupCollection, _getUserProfile;\n\n    export interface IUserModel {\n        checkIfMember(groupName: string, force?: boolean): angular.IPromise<IXMLGroup>;\n        getGroupCollection(force?: boolean): angular.IPromise<IXMLGroup[]>;\n        getUserProfile(force?: boolean): ng.IPromise<IXMLUserProfile>;\n    }\n\n    export class UserModel {\n        static $inject = ['$q', 'apDataService'];\n        constructor(private $q: ng.IQService, private apDataService: DataService) {\n\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apUserModel:checkIfMember\n         * @methodOf angularPoint.apUserModel\n         * @description\n         * Checks to see if current user is a member of the specified group.\n         * @param {string} groupName Name of the group.\n         * @param {boolean} [force=false] Ignore any cached value.\n         * @returns {object} Returns the group definition if the user is a member. {ID:string, Name:string, Description:string, OwnerId:string, OwnerIsUser:string}\n         * @example\n         * <pre>{ID: \"190\", Name: \"Blog Contributors\", Description: \"We are bloggers...\", OwnerID: \"126\", OwnerIsUser: \"False\"}</pre>\n         */\n        checkIfMember(groupName: string, force: boolean = false): angular.IPromise<IXMLGroup> {\n            //Allow function to be called before group collection is ready\n            var deferred = this.$q.defer();\n\n            //Initially ensure groups are ready, any future calls will receive the return\n            this.getGroupCollection(force).then((groupCollection) => {\n                var groupDefinition = _.find(groupCollection, { Name: groupName });\n                deferred.resolve(groupDefinition);\n            });\n\n            return deferred.promise;\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apUserModel:getGroupCollection\n         * @methodOf angularPoint.apUserModel\n         * @description\n         * Returns the group definitions for the current user and caches results.\n         * @param {boolean} [force=false] Ignore any cached value.\n         * @returns {IGroupDefinition[]} Promise which resolves with the array of groups the user belongs to.\n         */\n        getGroupCollection(force: boolean = false): angular.IPromise<IXMLGroup[]> {\n            if (!_getGroupCollection || force) {\n                /** Create a new deferred object if not already defined */\n                var deferred = this.$q.defer();\n                this.getUserProfile(force).then((userProfile) => {\n                    this.apDataService.getGroupCollectionFromUser(userProfile.userLoginName)\n                        .then((groupCollection) => {\n                        deferred.resolve(groupCollection);\n                    });\n                });\n                _getGroupCollection = deferred.promise;\n            }\n            return _getGroupCollection;\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apUserModel:getUserProfile\n         * @methodOf angularPoint.apUserModel\n         * @description\n         * Returns the user profile for the current user and caches results.\n         * Pull user profile info and parse into a profile object\n         * http://spservices.codeplex.com/wikipage?title=GetUserProfileByName\n         * @param {boolean} [force=false] Ignore any cached value.\n         * @returns {object} Promise which resolves with the requested user profile.\n         */\n        getUserProfile(force: boolean = false): ng.IPromise<IXMLUserProfile> {\n            if (!_getUserProfile || force) {\n                /** Create a new deferred object if not already defined */\n                _getUserProfile = this.apDataService.getUserProfileByName();\n            }\n            return _getUserProfile;\n        }\n\n\n    }\n\n    /**\n     * @ngdoc service\n     * @name angularPoint.apUserModel\n     * @description\n     * Simple service that allows us to request and cache both the current user and their group memberships.\n     *\n     * @requires apDataService\n     *\n     */\n    angular.module('angularPoint')\n        .service('apUserModel', UserModel);\n\n}\n","/// <reference path=\"../app.module.ts\" />\n\nmodule ap {\n    'use strict';\n\n    interface ICacheService {\n        deleteEntity(listId: string, entityId: number): void;\n        getCachedEntities<T extends ListItem<any>>(listId: string): IndexedCache<T>;\n        getCachedEntity<T extends ListItem<any>>(listId: string, entityId: number): T;\n        getEntity<T extends ListItem<any>>(listId: string, entityId: number): ng.IPromise<T>;\n        getListId(keyString: string): string;\n        getListIdFromListName(name: string): string;\n        getModel(listId: string): Model;\n        getModelCache(listId: string): ModelCache;\n        registerEntity<T extends ListItem<any>>(entity: T, targetCache?: IndexedCache<T>): T;\n        registerModel(model: Model): void;\n        removeEntity(listId: string, entityId: number): void;\n    }\n\n    var service: CacheService, $q: ng.IQService, $log: ng.ILogService, apIndexedCacheFactory: IndexedCacheFactory;\n\n    /**\n     * @description Stores list names when a new model is registered along with the GUID to allow us to\n     *     retrieve the GUID in future\n     * @example\n     * <pre>\n     *     listNameToIdMap = {\n         *          list1Name: {\n         *              model: list1Model,\n         *              listId: list1GUID\n         *          },\n         *          list2Name: {\n         *              model: list2Model,\n         *              listId: list2GUID\n         *          }\n         *          ...\n         *     }\n     * </pre>\n     */\n    var listNameToIdMap = {},\n\n        /**\n         * @description Stores list GUID when a new model is registered with a reference to the model for\n         *     future reference.\n         * @example\n         * <pre>\n         *     listsMappedByListId = {\n         *          list1GUID: {\n         *              model: list1Model\n         *          },\n         *          list2GUID: {\n         *              model: list2Model\n         *          }\n         *          ...\n         *     }\n         * </pre>\n         */\n        listsMappedByListId = {},\n        /**\n         * @description The Main cache object which stores ModelCache objects.  Keys being the model GUID and\n         *     value being an a ModelCache object\n         * @example\n         * <pre>\n         *     entityCache = {\n         *          list1GUID: {\n         *              item1ID: { //EnityCache for entity 1\n         *                  associationQueue: [],\n         *                  updateCount: 3,\n         *                  listId: list1GUID,\n         *                  entityId: item1ID,\n         *                  entityLocations: [],\n         *                  entity: {} //This is where the actual entity is referenced\n         *              }\n         *              item2ID: { //EnityCache for entity 2\n         *                  ...\n         *              }\n         *          },\n         *          list2GUID: {\n         *              item1ID: ...\n         *          }\n         *          ...\n         *     }\n         * </pre>\n         */\n        entityCache = {};\n\n\n    /**\n     * @name EntityCache\n     * @description\n     * Cache constructor that maintains a queue of all requests for a list item, counter for the number of times\n     * the cache has been updated, timestamp of last update, and add/update/remove functionality.\n     * @constructor apCacheService\n     * @param {string} listId GUID for list the list item belongs to.\n     * @param {number} entityId The entity.id.\n     */\n    class EntityContainer {\n        associationQueue = [];\n        entity;\n        entityLocations = [];\n        listId;\n        updateCount = 0;\n\n        constructor(listId: string, private entityId: number) {\n            this.listId = service.getListId(listId);\n        }\n\n        /**\n         * @name EntityContainer.getEntity\n         * @description\n         * Promise which returns the requested entity once it has been registered in the cache.\n         */\n        getEntity() {\n            var entityContainer = this;\n            var deferred = $q.defer();\n            if (entityContainer.entity) {\n                /** Entity already exists so resolve immediately */\n                deferred.resolve(entityContainer.entity);\n            } else {\n                entityContainer.associationQueue.push(deferred);\n            }\n            return deferred.promise;\n        }\n\n\n        removeEntity() {\n            var entityContainer = this;\n            service.removeEntity(entityContainer.listId, entityContainer.entityId);\n        }\n\n    }\n\n    /**\n     * @name ModelCache\n     * @description\n     * Cache of Entity Containers for each registered entity retrieved by the model.\n     * @constructor\n     */\n    class ModelCache extends IndexedCache<any> {\n\n    }\n\n    export class CacheService implements ICacheService {\n        entityCache = entityCache;\n        static $inject = ['$q', '$log', 'apIndexedCacheFactory'];\n\n        constructor(_$q_, _$log_, _apIndexedCacheFactory_) {\n\n            $q = _$q_;\n            $log = _$log_;\n            apIndexedCacheFactory = _apIndexedCacheFactory_;\n\n            service = this;\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apCacheService:deleteEntity\n         * @methodOf angularPoint.apCacheService\n         * @description\n         * Deletes all references to an entity.\n         * @param {string} listId GUID for list the list item belongs to.\n         * @param {number} entityId The entity.id.\n         */\n        deleteEntity(listId: string, entityId: number): void {\n            var entityTypeKey = this.getListId(listId);\n            this.removeEntity(entityTypeKey, entityId);\n            var model = this.getModel(entityTypeKey);\n            _.each(model.queries, (query: Query<any>) => {\n                var cache = query.getCache();\n                cache.removeEntity(entityId);\n            });\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apCacheService:getCachedEntities\n         * @methodOf angularPoint.apCacheService\n         * @description\n         * Returns all entities for a given model as an indexed cache with keys being the entity id's.\n         * @param {string} listId GUID for list the list item belongs to.\n         * @returns {object} Indexed cache containing all entities for a model.\n         */\n        getCachedEntities<T extends ListItem<any>>(listId: string): IndexedCache<T> {\n            var modelCache = this.getModelCache(listId),\n                allEntities = apIndexedCacheFactory.create<T>();\n            _.each(modelCache, (entityContainer: EntityContainer) => {\n                if (entityContainer.entity && entityContainer.entity.id) {\n                    allEntities.addEntity(entityContainer.entity);\n                }\n            });\n            return allEntities;\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apCacheService:getCachedEntity\n         * @methodOf angularPoint.apCacheService\n         * @description\n         * Synchronise call to return a cached entity;\n         * @param {string} listId GUID for list the list item belongs to.\n         * @param {number} entityId The entity.id.\n         * @returns {object} entity || undefined\n         */\n        getCachedEntity<T extends ListItem<any>>(listId: string, entityId: number): T {\n            return this.getEntityContainer(listId, entityId).entity;\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apCacheService:getEntity\n         * @methodOf angularPoint.apCacheService\n         * @description\n         * Returns a deferred object that resolves with the requested entity immediately if already present or at\n         *     some point in the future assuming the entity is eventually registered.\n         * @param {string} listId GUID for list the list item belongs to.\n         * @param {number} entityId The entity.id.\n         * @returns {promise} entity\n         */\n        getEntity<T extends ListItem<any>>(listId: string, entityId: number): ng.IPromise<T> {\n            var entityContainer = this.getEntityContainer(listId, entityId);\n            return entityContainer.getEntity();\n        }\n\n        private getEntityContainer(listId: string, entityId: number): EntityContainer {\n            var entityTypeKey = this.getListId(listId);\n            var modelCache = this.getModelCache(entityTypeKey);\n            /** Create the object structure if it doesn't already exist */\n            modelCache[entityId] = modelCache[entityId] || new EntityContainer(entityTypeKey, entityId);\n            return modelCache[entityId];\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apCacheService:getListId\n         * @methodOf angularPoint.apCacheService\n         * @description\n         * Allows us to use either the List Name or the list GUID and returns the lowercase GUID\n         * @param {string} keyString List GUID or name.\n         * @returns {string} Lowercase list GUID.\n         */\n        getListId(keyString: string): string {\n            if (_.isGuid(keyString)) {\n                /** GUID */\n                return keyString.toLowerCase();\n            } else {\n                /** List Title */\n                return this.getListIdFromListName(keyString);\n            }\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apCacheService:getListIdFromListName\n         * @methodOf angularPoint.apCacheService\n         * @description\n         * Allows us to lookup an entity cache using the name of the list instead of the GUID.\n         * @param {string} name The name of the list.\n         * @returns {string} GUID for the list.\n         */\n        getListIdFromListName(name: string): string {\n            var guid;\n            if (listNameToIdMap[name] && listNameToIdMap[name].listId) {\n                guid = listNameToIdMap[name].listId;\n            }\n            return guid;\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apCacheService:getModel\n         * @methodOf angularPoint.apCacheService\n         * @description\n         * Allows us to retrieve a reference to a given model by either the list title or list GUID.\n         * @param {string} listId List title or list GUID.\n         * @returns {object} A reference to the requested model.\n         */\n        getModel(listId: string): Model {\n            var model,\n                entityTypeKey = this.getListId(listId);\n\n            if (listsMappedByListId[entityTypeKey]) {\n                model = listsMappedByListId[entityTypeKey].model;\n            }\n            return model;\n        }\n\n        /** Locates the stored cache for a model */\n        getModelCache(listId: string): ModelCache {\n            var entityTypeKey = this.getListId(listId);\n            entityCache[entityTypeKey] = entityCache[entityTypeKey] || new ModelCache();\n            return entityCache[entityTypeKey];\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apCacheService:registerEntity\n         * @methodOf angularPoint.apCacheService\n         * @description\n         * Registers an entity in the cache and fulfills any pending deferred requests for the entity. If the\n         * entity already exists in the cache, we extend the existing object with the updated entity and return a\n         * reference to this updated object so the there is only a single instance of this entity withing the cache.\n         * @param {object} entity Pass in a newly created entity to add to the cache.\n         * @param {object} [targetCache] Optionally pass in a secondary cache to add a reference to this entity.\n         */\n        registerEntity<T extends ListItem<any>>(entity: T, targetCache?: IndexedCache<T>): T {\n            var model = entity.getModel();\n            var entityContainer = this.getEntityContainer(model.list.getListId(), entity.id);\n            /** Maintain a single object in cache for this entity */\n            if (!_.isObject(entityContainer.entity)) {\n                /** Entity isn't currently in the cache */\n                entityContainer.entity = entity;\n            } else {\n                /** Already exists so update to maintain any other references being used for this entity. */\n                    //TODO Look at performance hit from extending and see if it would be acceptable just to replace\n                _.assign(entityContainer.entity, entity);\n            }\n\n            /** Counter to keep track of the number of updates for this entity */\n            entityContainer.updateCount++;\n\n            if (_.isObject(targetCache) && !_.isArray(targetCache) && !targetCache[entity.id]) {\n                /** Entity hasn't been added to the target cache yet */\n                targetCache[entity.id] = entityContainer.entity;\n            }\n\n            /** Resolve any requests for this entity */\n            _.each(entityContainer.associationQueue, (deferredRequest) => {\n                deferredRequest.resolve(entityContainer.entity);\n                /** Remove request from queue */\n                entityContainer.associationQueue.shift();\n            });\n\n            return entityContainer.entity;\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apCacheService:registerModel\n         * @methodOf angularPoint.apCacheService\n         * @description\n         * Creates a new ModelCache for the provide model where all list items will be stored with the key equaling\n         * the entity id's and value being a EntityContainer.  The entity is stored at EntityContainer.entity.\n         * @param {object} model Model to create the cache for.\n         */\n        registerModel(model: Model): void {\n            if (model.list && model.list.getListId() && model.list.title) {\n                var listId = model.list.getListId().toLowerCase();\n                /** Store a reference to the model by list title */\n                listNameToIdMap[model.list.title] = {\n                    model: model,\n                    listId: listId\n                };\n\n                /** Store a reference to the model by list guid */\n                listsMappedByListId[listId] = {\n                    model: model\n                };\n            }\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apCacheService:removeEntity\n         * @methodOf angularPoint.apCacheService\n         * @description\n         * Removes the entity from the local entity cache.\n         * @param {string} listId GUID for list the list item belongs to.\n         * @param {number} entityId The entity.id.\n         */\n        removeEntity(listId: string, entityId: number): void {\n            var modelCache = this.getModelCache(listId);\n            if (modelCache[entityId]) {\n                delete modelCache[entityId];\n            }\n        }\n\n\n    }\n\n    /**\n     * @ngdoc service\n     * @name angularPoint.apCacheService\n     * @description\n     * Stores a reference for all list items based on list GUID and list item id.  Allows us to then register promises\n     *     that resolve once a requested list item is registered in the future.\n     */\n    angular.module('angularPoint')\n        .service('apCacheService', CacheService);\n\n}\n","/// <reference path=\"../app.module.ts\" />\n\nmodule ap {\n    'use strict';\n\n    interface IUpdateOptions<T extends ListItem<any>>{\n        batchCmd: string;\n        buildValuePairs:boolean;\n        ID: number;\n        listName: string;\n        operation: string;\n        target: IndexedCache<T>;\n        valuePairs: string[][];\n        webURL: string;\n    }\n\n    export interface IChangeServiceCallback{\n        (entity: ListItem<any>, options: IUpdateOptions<any>, promise: ng.IPromise<any>): void\n    }\n\n    /**\n     * @ngdoc service\n     * @name apChangeService\n     * @description\n     * Primarily used for apMockBackend so we can know what to expect before an attempt to update a list\n     * item is intercepted.\n     */\n    export class ChangeService {\n        callbackQueue: IChangeServiceCallback[] = [];\n        registerListItemUpdate<T extends ListItem<any>>(entity: T, options: IUpdateOptions<T>, promise: ng.IPromise<T>) {\n            _.each(this.callbackQueue, (callback) => {\n                callback(entity, options, promise);\n            });\n        }\n        subscribeToUpdates(callback: IChangeServiceCallback ) {\n            this.callbackQueue.push(callback);\n        }\n    }\n\n    angular\n        .module('angularPoint')\n        .service('apChangeService', ChangeService);\n\n}\n","/// <reference path=\"../app.module.ts\" />\n\nmodule ap {\n    'use strict';\n\n    var service: DataService, $q: ng.IQService, $timeout: ng.ITimeoutService, $http: ng.IHttpService, apConfig: IAPConfig,\n        apUtilityService: UtilityService, apCacheService: CacheService, apDecodeService: DecodeService,\n        apEncodeService: EncodeService, apFieldService: FieldService, apIndexedCacheFactory: IndexedCacheFactory,\n        toastr, SPServices, apDefaultListItemQueryOptions: DefaultListItemQueryOptions, apWebServiceOperationConstants: WebServiceOperationConstants,\n        apXMLToJSONService: XMLToJSONService, apChangeService: ChangeService;\n\n    export interface IDataService {\n        createListItem<T extends ListItem<any>>(model: Model, listItem: Object, options?: { buildValuePairs: boolean; valuePairs: [string, any][] }): ng.IPromise<T>;\n        createItemUrlFromFileRef(fileRefString: string): string;\n        deleteAttachment(options: { listItemID: number; url: string; listName: string; }): ng.IPromise<any>;\n        deleteListItem(model: Model, listItem: ListItem<any>, options?: { target: IndexedCache<any> }): ng.IPromise<any>;\n        executeQuery<T extends ListItem<any>>(model: Model, query: IQuery<T>, options?: IExecuteQueryOptions): ng.IPromise<IndexedCache<T>>\n        generateWebServiceUrl(service: string, webURL?: string): ng.IPromise<string>;\n        getAvailableWorkflows(fileRefString: string): ng.IPromise<IWorkflowDefinition[]>;\n        getCollection(options: { operation: string; userLoginName?: string; groupName?: string; listName?: string; filterNode: string; }): ng.IPromise<Object[]>;\n        getCurrentSite(): ng.IPromise<string>;\n        getFieldVersionHistory<T extends ListItem<any>>(options: { operation?: string; webURL?: string; strListID: string; strListItemID: number; strFieldName?: string; }, fieldDefinition: IFieldDefinition): ng.IPromise<ap.IListItemVersion<T>[]>;\n        getGroupCollectionFromUser(login?: string): ng.IPromise<IXMLGroup[]>;\n        getList(options: { listName: string }): ng.IPromise<Object>;\n        getListFields(options: { listName: string; }): ng.IPromise<IXMLFieldDefinition[]>;\n        getUserProfileByName(login?: string): ng.IPromise<IXMLUserProfile>;\n        processChangeTokenXML<T extends ListItem<any>>(model: Model, query: IQuery<T>, responseXML: XMLDocument, opts): void;\n        processDeletionsSinceToken(responseXML: XMLDocument, indexedCache: IndexedCache<any>): void;\n        requestData(opts): ng.IPromise<XMLDocument>;\n        retrieveChangeToken(responseXML: XMLDocument): string;\n        retrievePermMask(responseXML: XMLDocument): string;\n        serviceWrapper(options): ng.IPromise<any>;\n        startWorkflow(options: { item: string; templateId: string; workflowParameters?: string; fileRef?: string; }): ng.IPromise<any>;\n        updateListItem<T extends ListItem<any>>(model: Model, listItem: T, options): ng.IPromise<T>;\n        validateCollectionPayload(opts): boolean;\n    }\n\n    export class DataService implements IDataService {\n        queryForCurrentSite: ng.IPromise<string>;\n        static $inject = ['$http', '$q', '$timeout', 'apCacheService', 'apChangeService', 'apConfig', 'apDecodeService',\n            'apDefaultListItemQueryOptions', 'apEncodeService', 'apFieldService', 'apIndexedCacheFactory',\n            'apUtilityService', 'apWebServiceOperationConstants', 'apXMLToJSONService', 'SPServices', 'toastr'];\n\n        constructor(_$http_, _$q_, _$timeout_, _apCacheService_, _apChangeService_, _apConfig_, _apDecodeService_,\n            _apDefaultListItemQueryOptions_, _apEncodeService_, _apFieldService_, _apIndexedCacheFactory_,\n            _apUtilityService_, _apWebServiceOperationConstants_, _apXMLToJSONService_, _SPServices_, _toastr_) {\n            service = this;\n\n            $http = _$http_;\n            $q = _$q_;\n            $timeout = _$timeout_;\n            apCacheService = _apCacheService_;\n            apChangeService = _apChangeService_;\n            apConfig = _apConfig_;\n            apDecodeService = _apDecodeService_;\n            apDefaultListItemQueryOptions = _apDefaultListItemQueryOptions_;\n            apEncodeService = _apEncodeService_;\n            apFieldService = _apFieldService_;\n            apIndexedCacheFactory = _apIndexedCacheFactory_;\n            apUtilityService = _apUtilityService_;\n            apWebServiceOperationConstants = _apWebServiceOperationConstants_;\n            apXMLToJSONService = _apXMLToJSONService_;\n            SPServices = _SPServices_;\n            toastr = _toastr_;\n        }\n\n        /**\n         * @ngdoc function\n         * @name DataService.createListItem\n         * @description\n         * Creates a new list item for the provided model.\n         * @param {object} model Reference to the entities model.\n         * @param {object} listItem JavaScript object representing the SharePoint list item.\n         * @param {object} [options] Optional configuration params.\n         * @param {boolean} [options.buildValuePairs=true] Automatically generate pairs based on fields defined in model.\n         * @param {object} [options.indexedCache=apIndexedCacheFactory.create({})] Optionally place new item in a specified cache.\n         * @param {Array[]} [options.valuePairs] Precomputed value pairs to use instead of generating them for each\n         * field identified in the model.\n         * @returns {object} Promise which resolves with the newly created item.\n         */\n        createListItem<T extends ListItem<any>>(model: Model, listItem: T, options?: ICreateListItemOptions<T>): ng.IPromise<T> {\n            var defaults = {\n                batchCmd: 'New',\n                buildValuePairs: true,\n                indexedCache: apIndexedCacheFactory.create({}),\n                listName: model.list.getListId(),\n                operation: 'UpdateListItems',\n                target: undefined,\n                valuePairs: [],\n                webURL: model.list.identifyWebURL()\n            };\n            var deferred = $q.defer();\n\n            defaults.target = defaults.indexedCache;\n\n            var opts: ICreateListItemOptions<T> = _.assign({}, defaults, options);\n\n            //Method gets added onto new list item and allows access to parent cache\n            opts.getCache = () => opts.indexedCache;\n\n            if (opts.buildValuePairs === true) {\n                var editableFields: IFieldDefinition[] = _.where(model.list.fields, { readOnly: false });\n                opts.valuePairs = apEncodeService.generateValuePairs(editableFields, listItem);\n            }\n\n\n            /** Overload the function then pass anything past the first parameter to the supporting methods */\n            this.serviceWrapper(opts)\n                .then((response) => {\n                    /** Online this should return an XML object */\n                    var indexedCache = apDecodeService.processListItems(model, opts, response, opts);\n                    /** Return reference to last listItem in cache because it will have the new highest id */\n                    deferred.resolve(indexedCache.last());\n                }, (err) => {\n                    deferred.reject(err);\n                });\n            return deferred.promise;\n        }\n\n        createItemUrlFromFileRef(fileRefString: string): string {\n            return window.location.protocol + '//' + window.location.hostname + '/' + fileRefString;\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name DataService.deleteAttachment\n         * @description\n         * Deletes and attachment on a list item.  Most commonly used by ListItem.deleteAttachment which is shown\n         * in the example.\n         *\n         * @param {object} options Configuration parameters.\n         * @param {string} options.listItemId ID of the list item with the attachment.\n         * @param {string} options.url Requires the URL for the attachment we want to delete.\n         * @param {string} options.listName Best option is the GUID of the list.\n         * <pre>'{37388A98-534C-4A28-BFFA-22429276897B}'</pre>\n         *\n         * @returns {object} Promise which resolves with the updated attachment collection.\n         *\n         * @example\n         * <pre>\n         * ListItem.prototype.deleteAttachment = function (url) {\n         *    var listItem = this;\n         *    return DataService.deleteAttachment({\n         *        listItemId: listItem.id,\n         *        url: url,\n         *        listName: listItem.getModel().list.getListId()\n         *    });\n         * };\n         * </pre>\n         */\n        deleteAttachment(options: { listItemID: number; url: string; listName: string; }): ng.IPromise<any> {\n            var defaults = {\n                operation: 'DeleteAttachment',\n                filterNode: 'Field'\n            };\n\n            var opts = _.assign({}, defaults, options);\n\n            return this.serviceWrapper(opts);\n        }\n\n        /**\n         * @ngdoc function\n         * @name DataService.deleteListItem\n         * @description\n         * Typically called directly from a list item, removes the list item from SharePoint\n         * and the local cache.\n         * @param {object} model Reference to the entities model.\n         * @param {object} listItem JavaScript object representing the SharePoint list item.\n         * @param {object} [options] Optional configuration params.\n         * @param {Array} [options.target=item.getCache()] Optional location to search through and remove the\n         * local cached copy.\n         * @returns {object} Promise which resolves when the operation is complete.  Nothing of importance is returned.\n         */\n        deleteListItem(model: Model, listItem: ListItem<any>, options?: { target: IndexedCache<any> }): ng.IPromise<any> {\n            var defaults = {\n                target: _.isFunction(listItem.getCache) ? listItem.getCache() : model.getCache(),\n                operation: 'UpdateListItems',\n                listName: model.list.getListId(),\n                batchCmd: 'Delete',\n                ID: listItem.id,\n                webURL: model.list.identifyWebURL()\n            };\n\n            var opts = _.assign({}, defaults, options);\n\n            /** Check to see if list item or document because documents need the FileRef as well as id to delete */\n            if (listItem.fileRef && listItem.fileRef.lookupValue) {\n                var fileExtension = listItem.fileRef.lookupValue.split('.').pop();\n                if (isNaN(fileExtension)) {\n                    /** File extension instead of numeric extension so it's a document\n                     * @Example\n                     * Document: \"Site/library/file.csv\"\n                     * List Item: \"Site/List/5_.000\"\n                     * */\n                    opts.valuePairs = [['FileRef', listItem.fileRef.lookupValue]];\n\n                }\n            }\n\n            var deferred = $q.defer();\n\n            this.serviceWrapper(opts)\n                .then(() => {\n                    /** Success */\n                    apCacheService.deleteEntity(opts.listName, listItem.id);\n                    deferred.resolve();\n                }, (outcome) => {\n                    //In the event of an error, display toast\n                    toastr.error('There was an error deleting a list item from ' + model.list.title);\n                    deferred.reject(outcome);\n                });\n\n            return deferred.promise;\n        }\n\n        /**\n         * @ngdoc function\n         * @name DataService.executeQuery\n         * @description\n         * Primary method of retrieving list items from SharePoint.  Look at Query and Model for specifics.\n         * @param {object} model Reference to the model where the Query resides.\n         * @param {object} query Reference to the Query making the call.\n         * @param {object} [options] Optional configuration parameters.\n         * @param {object} [options.target=model.getCache()] The target destination for returned entities\n         * @returns {object} - Key value hash containing all list item id's as keys with the listItem as the value.\n         */\n        executeQuery<T extends ListItem<any>>(model: Model, query: IQuery<T>, options?: IExecuteQueryOptions): ng.IPromise<IndexedCache<T>> {\n\n            var defaults = {\n                target: model.getCache()\n            };\n\n            var deferred = $q.defer();\n\n            /** Extend defaults **/\n            var opts: IExecuteQueryOptions = _.assign({}, defaults, options);\n\n            this.serviceWrapper(query)\n                .then((responseXML) => {\n                    if (query.operation === 'GetListItemChangesSinceToken') {\n                        this.processChangeTokenXML<T>(model, query, responseXML, opts);\n                    }\n\n                    /** Convert the XML into JS objects */\n                    var entities = apDecodeService.processListItems<T>(model, query, responseXML, opts);\n                    deferred.resolve(entities);\n\n                    /** Set date time to allow for time based updates */\n                    query.lastRun = new Date();\n                });\n\n            return deferred.promise;\n        }\n\n        /**\n         * @ngdoc function\n         * @name DataService.generateWebServiceUrl\n         * @description\n         * Builds the appropriate SharePoint resource URL.  If a URL isn't provided and it hasn't already been cached\n         * we make a call to the server to find the root URL.  All future requests will then use this cached value.\n         * @param {string} service The name of the service the SOAP operation is using.\n         * @param {string} [webURL] Optionally provide the URL so we don't need to make a call to the server.\n         * @returns {promise} Resolves with the url for the service.\n         */\n        generateWebServiceUrl(service: string, webURL?: string): ng.IPromise<string> {\n            var ajaxURL = \"_vti_bin/\" + service + \".asmx\",\n                deferred = $q.defer();\n\n            if (webURL) {\n                ajaxURL = webURL.charAt(webURL.length - 1) === '/' ?\n                    webURL + ajaxURL : webURL + '/' + ajaxURL;\n                deferred.resolve(ajaxURL);\n            } else {\n                this.getCurrentSite().then((thisSite) => {\n                    ajaxURL = thisSite + ((thisSite.charAt(thisSite.length - 1) === '/') ? ajaxURL : ('/' + ajaxURL));\n                    deferred.resolve(ajaxURL);\n                });\n            }\n            return deferred.promise;\n        }\n\n        /**\n         * @ngdoc function\n         * @name DataService.getAvailableWorkflows\n         * @description\n         * Given a list item or document, return an array of all available workflows.  This is used in combination with\n         * DataService.startWorkflow because it requires the template GUID for the target workflow.\n         * @example\n         * <pre>\n         * DataService.getAvailableWorkflows(listItem.fileRef.lookupValue)\n         *     .then(function(templateArray) {\n         *          ....templateArray = [{\n         *              \"name\": \"WidgetApproval\",\n         *              \"instantiationUrl\": \"https: //sharepoint.mycompany.com/_layouts/IniWrkflIP.aspx?List=fc17890e-8c0…311-cea9-40d1-a183-6edde9333815}&Web={ec744d8e-ae0a-45dd-bcd1-8a63b9b399bd}\",\n         *              \"templateId\": \"59062311-cea9-40d1-a183-6edde9333815\"\n         *          }]\n         *     });\n         * </pre>\n         * @param {string} fileRefString Relative or static url referencing the item.\n         * @returns {object} Resolves with an array of objects defining each of the available workflows for the item.\n         */\n        getAvailableWorkflows(fileRefString: string): ng.IPromise<IWorkflowDefinition[]> {\n            var deferred = $q.defer();\n            /** Build the full url for the fileRef if not already provided.  FileRef for an item defaults to a relative url */\n            var itemUrl = fileRefString.indexOf(': //') > -1 ? fileRefString : this.createItemUrlFromFileRef(fileRefString);\n\n            this.serviceWrapper({\n                operation: 'GetTemplatesForItem',\n                item: itemUrl\n            }).then(function(responseXML) {\n                var workflowTemplates = [];\n                var xmlTemplates = apXMLToJSONService.filterNodes(responseXML, 'WorkflowTemplate');\n                _.each(xmlTemplates, function(xmlTemplate: JQuery) {\n                    var template = {\n                        name: $(xmlTemplate).attr('Name'),\n                        instantiationUrl: $(xmlTemplate).attr('InstantiationUrl'),\n                        templateId: '{' + $(xmlTemplate).find('WorkflowTemplateIdSet').attr('TemplateId') + '}'\n                    };\n                    workflowTemplates.push(template);\n                });\n                deferred.resolve(workflowTemplates);\n            });\n\n\n            return deferred.promise;\n        }\n\n        /**\n         * @ngdoc function\n         * @name DataService.getCollection\n         * @description\n         * Used to handle any of the Get[filterNode]Collection calls to SharePoint\n         *\n         * @param {Object} options - object used to extend payload and needs to include all SPServices required attributes\n         * @param {string} options.operation Can be any of the below or any other requests for collections:\n         *  - GetAttachmentCollection @requires options.listName & options.ID\n         *  - GetGroupCollectionFromSite\n         *  - GetGroupCollectionFromUser @requires options.userLoginName\n         *  - GetListCollection\n         *  - GetUserCollectionFromGroup @requires options.groupName\n         *  - GetUserCollectionFromSite\n         *  - GetViewCollection @requires options.listName\n         * @param {string} options.filterNode Value to iterate over in returned XML\n         *         if not provided it's extracted from the name of the operation\n         *         ex: Get[User]CollectionFromSite, \"User\" is used as the filterNode\n         * @param {string} [options.groupName] Valid for 'GetUserCollectionFromGroup'\n         * @param {string} [options.listName] Valid for 'GetViewCollection' or 'GetAttachmentCollection'\n         * @param {string} [options.userLoginName] Valid for 'GetGroupCollectionFromUser'\n         * @returns {Promise<object[]>} Promise which when resolved will contain an array of objects representing the\n         * requested collection.\n         *\n         * @example\n         * <pre>\n         * DataService.getCollection({\n         *        operation: \"GetGroupCollectionFromUser\",\n         *        userLoginName: $scope.state.selectedUser.LoginName\n         *        }).then(function (response) {\n         *            postProcessFunction(response);\n         *       });\n         * </pre>\n         */\n        getCollection(options: IGetCollectionOptions): ng.IPromise<Object[]> {\n            var defaults = {\n                postProcess: processXML\n            };\n            var opts: IGetCollectionOptions = _.assign({}, defaults, options);\n\n            /** Determine the XML node to iterate over if filterNode isn't provided */\n            var filterNode = opts.filterNode || opts.operation.split('Get')[1].split('Collection')[0];\n\n            var deferred = $q.defer();\n\n            /** Convert the xml returned from the server into an array of js objects */\n            function processXML(responseXML: XMLDocument) {\n                var convertedItems: Object[] = [];\n                var filteredNodes = apXMLToJSONService.filterNodes(responseXML, filterNode);\n                /** Get attachments only returns the links associated with a list item */\n                if (opts.operation === 'GetAttachmentCollection') {\n                    /** Unlike other call, get attachments only returns strings instead of an object with attributes */\n                    _.each(filteredNodes, (node: JQuery) => convertedItems.push($(node).text()));\n                } else {\n                    convertedItems = apXMLToJSONService.parse(filteredNodes, { includeAllAttrs: true, removeOws: false });\n                }\n                return convertedItems;\n            }\n\n            var validPayload = this.validateCollectionPayload(opts);\n            if (validPayload) {\n                this.serviceWrapper(opts)\n                    .then((response) => {\n                        deferred.resolve(response);\n                    });\n            } else {\n                toastr.error('Invalid payload: ', opts);\n                deferred.reject();\n            }\n\n            return deferred.promise;\n        }\n\n        /**\n         * @ngdoc function\n         * @name DataService.getCurrentSite\n         * @description\n         * Requests and caches the root url for the current site.  It caches the response so any future calls receive\n         * the cached promise.\n         * @returns {promise} Resolves with the current site root url.\n         */\n        getCurrentSite(): ng.IPromise<string> {\n            var deferred = $q.defer();\n            //var self = this.getCurrentSite;\n            if (!this.queryForCurrentSite) {\n                /** We only want to run this once so cache the promise the first time and just reference it in the future */\n                this.queryForCurrentSite = deferred.promise;\n\n                var msg = SPServices.SOAPEnvelope.header +\n                    \"<WebUrlFromPageUrl xmlns='\" + SPServices.SCHEMASharePoint + \"/soap/' ><pageUrl>\" +\n                    ((location.href.indexOf(\"?\") > 0) ? location.href.substr(0, location.href.indexOf(\"?\")) : location.href) +\n                    \"</pageUrl></WebUrlFromPageUrl>\" +\n                    SPServices.SOAPEnvelope.footer;\n\n                $http({\n                    method: 'POST',\n                    url: '/_vti_bin/Webs.asmx',\n                    data: msg,\n                    responseType: \"document\",\n                    headers: {\n                        \"Content-Type\": \"text/xml;charset='utf-8'\"\n                    }\n                }).then((response) => {\n                    /** Success */\n                    apConfig.defaultUrl = $(response.data).find(\"WebUrlFromPageUrlResult\").text();\n                    deferred.resolve(apConfig.defaultUrl)\n                }, (response) => {\n                    /** Error */\n                    var error = apDecodeService.checkResponseForErrors(response.data);\n                    deferred.reject(error);\n                });\n            }\n            return this.queryForCurrentSite;\n        }\n\n        /**\n         * @ngdoc function\n         * @name DataService.getFieldVersionHistory\n         * @description\n         * Returns the version history for a field in a list item.\n         * @param {object} options Configuration object passed to SPServices.\n         * <pre>\n         * var options = {\n         *        operation: 'GetVersionCollection',\n         *        webURL: apConfig.defaultUrl,\n         *        strlistID: model.list.getListId(),\n         *        strlistItemID: listItem.id,\n         *        strFieldName: fieldDefinition.staticName\n         *    };\n         * </pre>\n         * @param {object} fieldDefinition Field definition object from the model.\n         * @returns {object[]} Promise which resolves with an array of list item changes for the specified field.\n         */\n        getFieldVersionHistory<T extends ListItem<any>>(options: { operation?: string; webURL?: string; strListID: string; strListItemID: number; strFieldName?: string; }, fieldDefinition: IFieldDefinition): ng.IPromise<ap.IListItemVersion<T>[]> {\n            var defaults = {\n                operation: 'GetVersionCollection'\n            };\n            var opts = _.assign({}, defaults, options);\n\n            var deferred = $q.defer();\n\n            this.serviceWrapper(opts)\n                .then((response) => {\n                    /** Parse XML response */\n                    var versions = apDecodeService.parseFieldVersions(response, fieldDefinition);\n                    /** Resolve with an array of all field versions */\n                    deferred.resolve(versions);\n                }, (outcome) => {\n                    /** Failure */\n                    toastr.error('Failed to fetch version history.');\n                    deferred.reject(outcome);\n                });\n            return deferred.promise;\n        }\n\n        /**\n         * @ngdoc function\n         * @name DataService.getGroupCollectionFromUser\n         * @description\n         * Fetches an array of group names the user is a member of.  If no user is provided we use the current user.\n         * @param {string} [login=CurrentUser] Optional param of another user's login to return the profile for.\n         * @returns {string[]} Promise which resolves with the array of groups the user belongs to.\n         */\n        getGroupCollectionFromUser(login?: string): ng.IPromise<IXMLGroup[]> {\n            /** Create a new deferred object if not already defined */\n            var deferred = $q.defer();\n            var getGroupCollection = (userLoginName) => {\n                this.serviceWrapper({\n                    operation: 'GetGroupCollectionFromUser',\n                    userLoginName: userLoginName,\n                    filterNode: 'Group'\n                }).then((groupCollection: IXMLGroup[]) => deferred.resolve(groupCollection));\n            };\n\n            if (!login) {\n                /** No login name provided so lookup profile for current user */\n                this.getUserProfileByName()\n                    .then((userProfile) => getGroupCollection(userProfile.userLoginName));\n            } else {\n                getGroupCollection(login);\n            }\n            return deferred.promise;\n        }\n\n        /**\n         * @ngdoc function\n         * @name DataService.getList\n         * @description\n         * Returns all list details including field and list config.\n         * @param {object} options Configuration parameters.\n         * @param {string} options.listName GUID of the list.\n         * @returns {object} Promise which resolves with an object defining field and list config.\n         */\n        getList(options: { listName: string }): ng.IPromise<Object> {\n            var defaults = {\n                operation: 'GetList'\n            };\n\n            var opts = _.assign({}, defaults, options);\n            return this.serviceWrapper(opts);\n        }\n\n        /**\n         * @ngdoc function\n         * @name DataService.getListFields\n         * @description\n         * Returns field definitions for a specified list.\n         * @param {object} options Configuration parameters.\n         * @param {string} options.listName GUID of the list.\n         * @returns {Promise} Promise which resolves with an array of field definitions for the list.\n         */\n        getListFields(options: { listName: string; }): ng.IPromise<IXMLFieldDefinition[]> {\n            var deferred = $q.defer();\n            this.getList(options)\n                .then((responseXML) => {\n                    var filteredNodes = apXMLToJSONService.filterNodes(responseXML, 'Field');\n                    var fields = apXMLToJSONService.parse(filteredNodes, { includeAllAttrs: true, removeOws: false });\n                    deferred.resolve(fields);\n                });\n            return deferred.promise;\n        }\n\n        /**\n         * @ngdoc function\n         * @name DataService.getUserProfile\n         * @description\n         * Returns the profile for an optional user, but defaults the the current user if one isn't provided.\n         * Pull user profile info and parse into a profile object\n         * http: //spservices.codeplex.com/wikipage?title=GetUserProfileByName\n         * @param {string} [login=CurrentUser] Optional param of another user's login to return the profile for.\n         * @returns {object} Promise which resolves with the requested user profile.\n         */\n        getUserProfileByName(login?: string): ng.IPromise<IXMLUserProfile> {\n            var deferred = $q.defer();\n            var payload = {\n                accountName: undefined,\n                operation: 'GetUserProfileByName'\n            };\n            if (login) {\n                payload.accountName = login;\n            }\n\n            this.serviceWrapper(payload)\n                .then((responseXML) => {\n                    var userProfile = {\n                        AccountName: undefined,\n                        userLoginName: undefined\n                    };\n                    //Not formatted like a normal SP response so need to manually parse\n                    var filteredNodes = apXMLToJSONService.filterNodes(responseXML, 'PropertyData');\n                    _.each(filteredNodes, (node: JQuery) => {\n                        var nodeName = apXMLToJSONService.filterNodes(node, 'Name');\n                        var nodeValue = apXMLToJSONService.filterNodes(node, 'Value');\n                        if (nodeName.length > 0 && nodeValue.length > 0) {\n                            userProfile[nodeName.text().trim()] = nodeValue.text().trim();\n                        }\n                    });\n\n                    /** Optionally specify a necessary prefix that should appear before the user login */\n                    userProfile.userLoginName = apConfig.userLoginNamePrefix ?\n                        (apConfig.userLoginNamePrefix + userProfile.AccountName) : userProfile.AccountName;\n                    deferred.resolve(userProfile);\n                });\n            return deferred.promise;\n        }\n\n        /**\n         * @ngdoc function\n         * @name DataService.processChangeTokenXML\n         * @description\n         * The initial call to GetListItemChangesSinceToken also includes the field definitions for the\n         * list so extend the existing field definitions and list defined in the model.  After that, store\n         * the change token and make any changes to the user's permissions for the list.\n         * @param {Model} model List model.\n         * @param {IQuery} query Valid query object.\n         * @param {XMLDocument} responseXML XML response from the server.\n         * @param {object} opts Config options built up along the way.\n         */\n        processChangeTokenXML<T extends ListItem<any>>(model: Model, query: IQuery<T>, responseXML: XMLDocument, opts): void {\n            if (!model.deferredListDefinition) {\n                var deferred = $q.defer();\n\n                /** Replace the null placeholder with this promise so we don't have to process in the future and also\n                 * don't have to query again if we run Model.extendListMetadata. */\n                model.deferredListDefinition = deferred.promise;\n\n                /** Immediately resolve because there's no need to perform any async actions */\n                deferred.resolve(model);\n                apDecodeService.extendListMetadata(model, responseXML);\n            }\n\n            /** Store token for future web service calls to return changes */\n            query.changeToken = this.retrieveChangeToken(responseXML);\n\n            /** Update the user permissions for this list */\n            var effectivePermissionMask = this.retrievePermMask(responseXML);\n            if (effectivePermissionMask) {\n                model.list.effectivePermMask = effectivePermissionMask;\n            }\n\n            /** Change token query includes deleted items as well so we need to process them separately */\n            this.processDeletionsSinceToken(responseXML, opts.target);\n        }\n\n        /**\n         * @ngdoc function\n         * @name DataService.processDeletionsSinceToken\n         * @description\n         * GetListItemChangesSinceToken returns items that have been added as well as deleted so we need\n         * to remove the deleted items from the local cache.\n         * @param {XMLDocument} responseXML XML response from the server.\n         * @param {Object} indexedCache Cached object of key value pairs.\n         */\n        processDeletionsSinceToken(responseXML: XMLDocument, indexedCache: IndexedCache<any>): void {\n            /** Remove any locally cached entities that were deleted from the server */\n            var filteredNodes = apXMLToJSONService.filterNodes(responseXML, 'Id');\n            _.each(filteredNodes, (node: JQuery) => {\n                /** Check for the type of change */\n                var changeType = $(node).attr('ChangeType');\n\n                if (changeType === 'Delete') {\n                    var listItemId = parseInt($(node).text(), 10);\n                    /** Remove from local data array */\n                    indexedCache.removeEntity(listItemId);\n                }\n            });\n        }\n\n        /**\n         * @ngdoc function\n         * @name DataService.requestData\n         * @description\n         * The primary function that handles all communication with the server.  This is very low level and isn't\n         * intended to be called directly.\n         * @param {object} opts Payload object containing the details of the request.\n         * @returns {promise} Promise that resolves with the server response.\n         */\n        requestData(opts): ng.IPromise<XMLDocument> {\n            var deferred = $q.defer();\n\n            var soapData = SPServices.generateXMLComponents(opts);\n            var service = apWebServiceOperationConstants[opts.operation][0];\n            this.generateWebServiceUrl(service, opts.webURL)\n                .then((url) => {\n                    $http.post(url, soapData.msg, {\n                        responseType: \"document\",\n                        headers: {\n                            \"Content-Type\": \"text/xml;charset='utf-8'\",\n                            SOAPAction: () => soapData.SOAPAction ? soapData.SOAPAction : null\n                        },\n                        transformResponse: (data, headersGetter) => {\n                            if (_.isString(data)) {\n                                data = $.parseXML(data);\n                            }\n                            return data;\n                        }\n                    }).then((response) => {\n                        /** Success */\n                        /** Errors can still be resolved without throwing an error so check the XML */\n                        var error = apDecodeService.checkResponseForErrors(response.data);\n                        if (error) {\n                            console.error(error, opts);\n                            deferred.reject(error);\n                        } else {\n                            deferred.resolve(response.data);\n                        }\n                    }, (response) => {\n                        /** Failure */\n                        var error = apDecodeService.checkResponseForErrors(response.data);\n                        console.error(response.statusText, opts);\n                        deferred.reject(response.statusText + ': ' + error);\n                    });\n                });\n\n            return deferred.promise;\n        }\n\n        /**\n         * @ngdoc function\n         * @name DataService.retrieveChangeToken\n         * @description\n         * Returns the change token from the xml response of a GetListItemChangesSinceToken query\n         * Note: this attribute is only found when using 'GetListItemChangesSinceToken'\n         * @param {XMLDocument} responseXML XML response from the server.\n         */\n        retrieveChangeToken(responseXML: XMLDocument): string {\n            return $(responseXML).find('Changes').attr('LastChangeToken');\n        }\n\n        /**\n         * @ngdoc function\n         * @name DataService.retrievePermMask\n         * @description\n         * Returns the text representation of the users permission mask\n         * Note: this attribute is only found when using 'GetListItemChangesSinceToken'\n         * @param {XMLDocument} responseXML XML response from the server.\n         */\n        retrievePermMask(responseXML: XMLDocument): string {\n            return $(responseXML).find('listitems').attr('EffectivePermMask');\n        }\n\n        /**\n         * @ngdoc function\n         * @name DataService.serviceWrapper\n         * @description\n         * Generic wrapper for any SPServices web service call.  The big benefit to this function is it allows us\n         * to continue to use the $q promise model throughout the application instead of using the promise\n         * implementation used in SPServices so we have a more consistent experience.\n         * Check http: //spservices.codeplex.com/documentation for details on expected parameters for each operation.\n         *\n         * @param {object} options Payload params that is directly passed to SPServices.\n         * @param {string} [options.filterNode] XML filter string used to find the elements to iterate over.\n         * This is typically 'z: row' for list items.\n         * @param {Function} [options.postProcess] Method to process responseXML prior to returning.\n         * @param {string} [options.webURL] XML filter string used to find the elements to iterate over.\n         * @returns {object} Returns a promise which when resolved either returns clean objects parsed by the value\n         * in options.filterNode or the raw XML response if a options.filterNode\n         *\n         *      If options.filterNode is provided, returns XML parsed by node name\n         *      Otherwise returns the server response\n         */\n        serviceWrapper(options: IServiceWrapperOptions): ng.IPromise<any> {\n            var defaults = {\n                postProcess: processXML,\n                webURL: apConfig.defaultUrl\n            };\n            var opts: IServiceWrapperOptions = _.assign({}, defaults, options);\n            var deferred = $q.defer();\n\n            /** Convert the xml returned from the server into an array of js objects */\n            function processXML(responseXML: Object) {\n                if (opts.filterNode) {\n                    var filteredNodes = apXMLToJSONService.filterNodes(responseXML, opts.filterNode);\n                    return apXMLToJSONService.parse(filteredNodes, { includeAllAttrs: true, removeOws: false });\n                } else {\n                    return responseXML;\n                }\n            }\n\n            this.requestData(opts)\n                .then(function(responseXML) {\n                    /** Failure */\n                    var data = opts.postProcess(responseXML);\n                    deferred.resolve(data);\n                }, function(err) {\n                    /** Failure */\n                    toastr.error('Failed to complete the requested ' + opts.operation + ' operation.');\n                    deferred.reject(err);\n                });\n\n            return deferred.promise;\n        }\n\n        /**\n         * @ngdoc function\n         * @name DataService.startWorkflow\n         * @description\n         * Initiate a workflow for a given list item or document.  You can view additional info at\n         * [StartWorkflow](http: //spservices.codeplex.com/wikipage?title=StartWorkflow&referringTitle=Workflow).\n         * @param {object} options Configuration options.\n         * @param {string} options.item Full fileRef for the given list item/document.\n         * @param {string} options.templateId The workflow template GUID.  You can use dataService.getAvailableWorkflows\n         * to locate to appropriate one.\n         * @param {string} [options.workflowParameters='<root />'] Optionally provide paramaters to the workflow.\n         * @param {string} [options.fileRef] Optionally pass in the relative fileRef of an listItem and then we can\n         * convert it to options.item.\n         * @returns {object} Deferred object that resolves once complete.\n         * @example\n         * <pre>\n         * DataService.startWorkflow({\n         *     item: \"https: //server/site/Lists/item\" + idData + \"_.000\",\n         *     templateId: \"{c29c1291-a25c-47d7-9345-8fb1de2a1fa3}\",\n         *     workflowParameters: \"<Data><monthName>\" + txtBox.value + \"</monthName></Data>\",\n         *   ...}).then(function() {\n         *       //Success\n         *   }, function(err) {\n         *       //Error\n         *   })\n         * </pre>\n         */\n        startWorkflow(options: { item: string; templateId: string; workflowParameters?: string; fileRef?: string; }): ng.IPromise<any> {\n            var defaults = {\n                operation: 'StartWorkflow',\n                item: '',\n                fileRef: '',\n                templateId: '',\n                workflowParameters: '<root />'\n            },\n                opts: { item: string; fileRef: string; } = _.assign({}, defaults, options);\n\n            /** We have the relative file reference but we need to create the fully qualified reference */\n            if (!opts.item && opts.fileRef) {\n                opts.item = this.createItemUrlFromFileRef(opts.fileRef);\n            }\n\n            return this.serviceWrapper(opts);\n\n        }\n\n        /**\n         * @ngdoc function\n         * @name DataService.updateListItem\n         * @description\n         * Updates an existing list item.\n         * @param {object} model Reference to the entities model.\n         * @param {object} listItem JavaScript object representing the SharePoint list item.\n         * @param {object} [options] Optional configuration params.\n         * @param {boolean} [options.buildValuePairs=true] Automatically generate pairs based on fields defined in model.\n         * @param {Array[]} [options.valuePairs] Precomputed value pairs to use instead of generating them for each\n         * field identified in the model.\n         * @returns {object} Promise which resolves with the newly created item.\n         */\n        updateListItem<T extends ListItem<any>>(model: Model, listItem: T, options?: IUpdateListitemOptions): ng.IPromise<T> {\n            var defaults = {\n                batchCmd: 'Update',\n                buildValuePairs: true,\n                ID: listItem.id,\n                listName: model.list.getListId(),\n                operation: 'UpdateListItems',\n                target: listItem.getCache(),\n                valuePairs: [],\n                webURL: model.list.identifyWebURL()\n            },\n                deferred = $q.defer(),\n                opts: { buildValuePairs: boolean; valuePairs: [string, any][]; webURL: string; } = _.assign({}, defaults, options);\n\n            if (opts.buildValuePairs === true) {\n                var editableFields = _.where(model.list.fields, { readOnly: false });\n                opts.valuePairs = apEncodeService.generateValuePairs(editableFields, listItem);\n            }\n\n            if (model.list.webURL && !opts.webURL) {\n                opts.webURL = model.list.webURL;\n            }\n\n            /** Notify any listeners to expect a change */\n            apChangeService.registerListItemUpdate(listItem, opts, deferred.promise);\n\n            ///** Overload the function then pass anything past the first parameter to the supporting methods */\n            //this.serviceWrapper(opts, listItem, model)\n            this.serviceWrapper(opts)\n                .then(function(response) {\n                    var indexedCache = apDecodeService.processListItems(model, listItem.getQuery(), response, opts);\n                    /** Return reference to updated listItem  */\n                    deferred.resolve(indexedCache[listItem.id]);\n                }, function(err) {\n                    deferred.reject(err);\n                });\n\n            return deferred.promise;\n        }\n\n        /**\n         * @description\n         * Simply verifies that all components of the payload are present.\n         * @param {object} opts Payload config.\n         * @returns {boolean} Collection is valid.\n         */\n        validateCollectionPayload(opts): boolean {\n            var validPayload = true;\n            var verifyParams = (params) => {\n                _.each(params, (param) => {\n                    if (!opts[param]) {\n                        toastr.error('options' + param + ' is required to complete this operation');\n                        validPayload = false;\n                    }\n                });\n            };\n\n            //Verify all required params are included\n            switch (opts.operation) {\n                case 'GetGroupCollectionFromUser':\n                    verifyParams(['userLoginName']);\n                    break;\n                case 'GetUserCollectionFromGroup':\n                    verifyParams(['groupName']);\n                    break;\n                case 'GetViewCollection':\n                    verifyParams(['listName']);\n                    break;\n                case 'GetAttachmentCollection':\n                    verifyParams(['listName', 'ID']);\n                    break;\n            }\n            return validPayload;\n        }\n\n\n    }\n\n    interface ICreateListItemOptions<T extends ListItem<any>> {\n        buildValuePairs?: boolean;\n        indexedCache?: IndexedCache<T>;\n        getCache?: () => IndexedCache<T>;\n        valuePairs?: [string, any][];\n    }\n\n    export interface IExecuteQueryOptions {\n        factory?: Function;\n        filter?: string;\n        mapping?: IFieldDefinition[];\n        target?: IndexedCache<any>;\n        [key: string]: any;\n    }\n\n    interface IGetCollectionOptions {\n        filterNode: string;\n        groupName?: string;\n        listName?: string;\n        operation: string;\n        userLoginName?: string;\n    }\n\n    interface IServiceWrapperOptions {\n        filterNode?: string;\n        operation: string;\n        postProcess?: (responseXML: Object) => any;\n        webURL?: string;\n    }\n\n    interface IUpdateListitemOptions {\n        buildValuePairs?: boolean;\n        valuePairs?: [string, any][];\n    }\n\n\n    angular\n        .module('angularPoint')\n        .service('apDataService', DataService);\n\n}\n","/// <reference path=\"../app.module.ts\" />\n\nmodule ap {\n    'use strict';\n\n    /**\n     * @ngdoc service\n     * @name angularPoint.apDecodeService\n     * @description\n     * Processes the XML received from SharePoint and converts it into JavaScript objects based on predefined field types.\n     *\n     * @requires angularPoint.apUtilityService\n     * @requires angularPoint.apConfig\n     * @requires angularPoint.apCacheService\n     */\n    export class DecodeService {\n        static $inject = ['apCacheService', 'apLookupFactory', 'apUserFactory', 'apFieldService',\n            'apXMLListAttributeTypes', 'apXMLFieldAttributeTypes', 'apXMLToJSONService'];\n\n        constructor(private apCacheService: CacheService, private apLookupFactory: LookupFactory,\n            private apUserFactory: UserFactory, private apFieldService: FieldService, private apXMLListAttributeTypes: XMLListAttributeTypes,\n            private apXMLFieldAttributeTypes: XMLFieldAttributeTypes, private apXMLToJSONService: XMLToJSONService) {\n\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apDecodeService:checkResponseForErrors\n         * @methodOf angularPoint.apDecodeService\n         * @description\n         * Errors don't always throw correctly from SPServices so this function checks to see if part\n         * of the XHR response contains an \"errorstring\" element.\n         * @param {object} responseXML XHR response from the server.\n         * @returns {string|null} Returns an error string if present, otherwise returns null.\n         */\n        checkResponseForErrors(responseXML: XMLDocument): string {\n            var error = null;\n            /** Look for <errorstring></errorstring> or <ErrorText></ErrorText> for details on any errors */\n            var errorElements = ['ErrorText', 'errorstring'];\n            _.each(errorElements, (element) => {\n                $(responseXML).find(element).each(function() {\n                    error = $(this).text();\n                    /** Break early if found */\n                    return false;\n                });\n            });\n            return error;\n        }\n\n        /** Converts UTC date to a localized date\n         * Taken from: http://stackoverflow.com/questions/6525538/convert-utc-date-time-to-local-date-time-using-javascript\n         * */\n        convertUTCDateToLocalDate(date: Date): Date {\n            var newDate = new Date(date.getTime() + date.getTimezoneOffset() * 60 * 1000);\n\n            var offset = date.getTimezoneOffset() / 60;\n            var hours = date.getHours();\n\n            newDate.setHours(hours - offset);\n\n            return newDate;\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apDecodeService:createListItemProvider\n         * @methodOf angularPoint.apDecodeService\n         * @description\n         * The initial constructor for a list item that references the array where the entity exists and the\n         * query used to fetch the entity.  From there it extends the entity using the factory defined in the\n         * model for the list item.\n         * @param {object} model Reference to the model for the list item.\n         * @param {object} query Reference to the query object used to retrieve the entity.\n         * @param {object} indexedCache Location where we'll be pushing the new entity.\n         * @returns {Function} Returns a function that takes the new list item while keeping model, query,\n         * and container in scope for future reference.\n         */\n        createListItemProvider<T extends ListItem<any>>(model: Model, query: IQuery<T>, indexedCache: IndexedCache<T>): (rawObject: Object) => T {\n            return (rawObject: { [key: string]: any, getCache(): IndexedCache<T>, getQuery(): IQuery<T>, id: number }) => {\n                var listItem: T;\n\n                if (indexedCache[rawObject.id]) {\n                    //Object already exists in cache so we just need to update properties\n                    listItem = indexedCache[rawObject.id];\n\n                    //Call constructor on original list item to perform any initialization logic again\n                    listItem.constructor(rawObject);\n\n                } else {\n                    //Creating a new List Item\n\n                    /** Create Reference to the indexed cache */\n                    rawObject.getCache = () => indexedCache;\n\n                    /** Allow us to reference the originating query that generated this object */\n                    rawObject.getQuery = () => query;\n\n                    listItem = new model.factory<T>(rawObject);\n\n                    /** Register in global application listItem cache */\n                    this.apCacheService.registerEntity<T>(listItem, indexedCache);\n                }\n\n                //Store the value instead of just a reference to the original object\n                var pristineValue = _.cloneDeep(rawObject);\n\n                //Allow us to reference the uninstantiated version of this list item\n                listItem.getPristine = () => pristineValue;\n\n                return indexedCache[rawObject.id];\n            }\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apDecodeService:extendFieldDefinitionsFromXML\n         * @methodOf angularPoint.apDecodeService\n         * @description\n         * Takes the XML response from a web service call and extends any field definitions in the model\n         * with additional field metadata.  Important to note that all properties will coming from the XML start\n         * with a capital letter.\n         * @param {object[]} fieldDefinitions Field definitions from the model.\n         * @param {object} responseXML XML response from the server.\n         */\n        extendFieldDefinitionsFromXML(fieldDefinitions: IFieldDefinition[], responseXML: XMLDocument): IExtendedFieldDefinition[] {\n            var fieldMap = {};\n\n            /** Map all custom fields with keys of the staticName and values = field definition */\n            _.each(fieldDefinitions, (field) => {\n                if (field.staticName) {\n                    fieldMap[field.staticName] = field;\n                }\n            });\n\n            /** Iterate over each of the field nodes */\n            var filteredNodes = this.apXMLToJSONService.filterNodes(responseXML, 'Field');\n\n            _.each(filteredNodes, (xmlField: JQuery) => {\n                var staticName = $(xmlField).attr('StaticName');\n                var fieldDefinition = fieldMap[staticName];\n\n                /** If we've defined this field then we should extend it */\n                if (fieldDefinition) {\n\n                    this.extendObjectWithXMLAttributes(xmlField, fieldDefinition, this.apXMLFieldAttributeTypes);\n\n                    /** Additional processing for Choice fields to include the default value and choices */\n                    if (fieldDefinition.objectType === 'Choice' || fieldDefinition.objectType === 'MultiChoice') {\n                        fieldDefinition.Choices = [];\n                        /** Convert XML Choices object to an array of choices */\n                        var xmlChoices = $(xmlField).find('CHOICE');\n                        _.each(xmlChoices, (xmlChoice) => {\n                            fieldDefinition.Choices.push($(xmlChoice).text());\n                        });\n                        fieldDefinition.Default = $(xmlField).find('Default').text();\n                    }\n                }\n            });\n\n            return fieldDefinitions;\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apDecodeService:extendListDefinitionFromXML\n         * @methodOf angularPoint.apDecodeService\n         * @description\n         * Takes the XML response from a web service call and extends the list definition in the model\n         * with additional field metadata.  Important to note that all properties will coming from the XML start\n         * with a capital letter.\n         * @param {object} list model.list\n         * @param {object} responseXML XML response from the server.\n         * @returns {object} Extended list object.\n         */\n        extendListDefinitionFromXML(list: List, responseXML: XMLDocument): List {\n            var service = this;\n            $(responseXML).find(\"List\").each(function() {\n                service.extendObjectWithXMLAttributes(this, list, service.apXMLListAttributeTypes);\n            });\n            return list;\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apDecodeService:extendListMetadata\n         * @methodOf angularPoint.apDecodeService\n         * @description\n         * Convenience method that extends the list definition and the field definitions from an xml list response\n         * from the server.  Can be used specifically with GetListItemsSinceToken and GetList operations.\n         * @param {object} model Model for a given list.\n         * @param {object} responseXML XML response from the server.\n         */\n        extendListMetadata(model: Model, responseXML: XMLDocument): void {\n            this.extendListDefinitionFromXML(model.list, responseXML);\n            this.extendFieldDefinitionsFromXML(model.list.fields, responseXML);\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apDecodeService:extendObjectWithXMLAttributes\n         * @methodOf angularPoint.apDecodeService\n         * @description\n         * Takes an XML element and copies all attributes over to a given JS object with corresponding values.  If\n         * no JS Object is provided, it extends an empty object and returns it.  If an attributeTypes object is provided\n         * we parse each of the defined field so they are typed correctly instead of being a simple string.\n         * Note: Properties are not necessarily CAMLCase.\n         * @param {object} xmlObject An XML element.\n         * @param {object} [jsObject={}] An optional JS Object to extend XML attributes to.\n         * @param {object} [attributeTypes={}] Key/Val object with keys being the name of the field and val being the\n         * type of field.\n         * @returns {object} JS Object\n         */\n        extendObjectWithXMLAttributes(xmlObject: JQuery, jsObject?: Object, attributeTypes?: Object): Object {\n            var objectToExtend = jsObject || {};\n            var attributeMap = attributeTypes || {};\n            var xmlAttributes = xmlObject.attributes;\n\n            _.each(xmlAttributes, (attr, attrNum) => {\n                var attrName = xmlAttributes[attrNum].name;\n                objectToExtend[attrName] = $(xmlObject).attr(attrName);\n                if (attributeMap[attrName]) {\n                    objectToExtend[attrName] = this.parseStringValue(objectToExtend[attrName], attributeMap[attrName]);\n                }\n            });\n            return objectToExtend;\n        }\n\n\n        jsAttachments(str): string[]|number|string {\n            /* Depending on CAMLQueryOptions Config an attachment can be formatted in 1 of the below 3 ways:\n             1. {number} The number of attachments for a given list item.\n             CAMLQueryOptions\n             <IncludeAttachmentUrls>FALSE</IncludeAttachmentUrls>\n             <IncludeAttachmentVersion>FALSE</IncludeAttachmentVersion>\n\n             Example\n             ows_Attachments=\"2\"\n\n             2. {string}\n             CAMLQueryOptions\n             <IncludeAttachmentUrls>TRUE</IncludeAttachmentUrls>\n             <IncludeAttachmentVersion>FALSE</IncludeAttachmentVersion>\n\n             Format\n             ;#[ListUrl]/Attachments/[ListItemId]/[FileName];#\n\n             Example:\n             ows_Attachments=\";#https://SharePointSite.com/Lists/Widgets/Attachments/4/DocumentName.xlsx;#\"\n\n             //Todo Check to see if there is any value in this option\n             3. {string} NOTE: We don't currently handle this format.\n             CAMLQueryOptions\n             <IncludeAttachmentUrls>TRUE</IncludeAttachmentUrls>\n             <IncludeAttachmentVersion>TRUE</IncludeAttachmentVersion>\n\n             Format\n             ;#[ListUrl]/Attachments/[ListItemId]/[FileName];#[AttachmentGUID],[Version Number];#\n\n             Example:\n             ows_Attachments=\";#https://SharePointSite.com/Lists/Widgets/Attachments/4/DocumentName.xlsx;#{4378D394-8601-480D-ABD0-0A0505E726FB},1;#\"\n             */\n            if (!isNaN(str)) {\n                /** Value is a number current stored as a string */\n                var int = parseInt(str);\n                if (int > 0) {\n                    return int;\n                } else {\n                    return '';\n                }\n            } else {\n                /** Split into an array of attachment URLs */\n                return this.jsChoiceMulti(str);\n            }\n        }\n\n        jsBoolean(str: string): boolean {\n            /** SharePoint uses different string representations for booleans in different places so account for each */\n            return str === '1' || str === 'True' || str === 'TRUE';\n        }\n\n        jsCalc(str: string): any {\n            if (str.length === 0) {\n                return null;\n            } else {\n                var thisCalc = str.split(';#');\n                // The first value will be the calculated column value type, the second will be the value\n                return this.parseStringValue(thisCalc[1], thisCalc[0]);\n            }\n        }\n\n        jsChoiceMulti(str: string): string[] {\n            if (str.length === 0) {\n                return [];\n            } else {\n                var thisChoiceMultiObject = [];\n                var thisChoiceMulti = str.split(';#');\n                for (var i = 0; i < thisChoiceMulti.length; i++) {\n                    if (thisChoiceMulti[i].length !== 0) {\n                        thisChoiceMultiObject.push(thisChoiceMulti[i]);\n                    }\n                }\n                return thisChoiceMultiObject;\n            }\n        }\n\n        jsDate(str: string): Date {\n            if (!str) {\n                return null;\n            } else {\n                /** Replace dashes with slashes and the \"T\" deliminator with a space if found */\n                var dt = str.split(\"T\")[0] !== str ? str.split(\"T\") : str.split(\" \");\n                var d = dt[0].split(\"-\");\n                var t = dt[1].split(\":\");\n                var t3 = t[2].split(\"Z\");\n                return new Date(d[0], (d[1] - 1), d[2], t[0], t[1], t3[0]);\n            }\n        }\n\n        jsFloat(str: string): number {\n            if (!str) {\n                return str;\n            } else {\n                return parseFloat(str);\n            }\n        }\n\n        jsInt(str: string): number {\n            if (!str) {\n                return str;\n            } else {\n                return parseInt(str, 10);\n            }\n        }\n\n        jsLookup(str: string, options?: Object): ILookup {\n            if (str.length === 0) {\n                return null;\n            } else {\n                //Send to constructor\n                return this.apLookupFactory.create(str, options);\n            }\n        }\n\n        jsLookupMulti(str: string, options?: Object): ILookup[] {\n            if (str.length === 0) {\n                return [];\n            } else {\n                var thisLookupMultiObject = [];\n                var thisLookupMulti = str.split(';#');\n                for (var i = 0; i < thisLookupMulti.length; i = i + 2) {\n                    /** Ensure a lookup id is present before attempting to push a new lookup */\n                    if (thisLookupMulti[i]) {\n                        var thisLookup = this.jsLookup(thisLookupMulti[i] + ';#' + thisLookupMulti[i + 1], options);\n                        thisLookupMultiObject.push(thisLookup);\n                    }\n                }\n                return thisLookupMultiObject;\n            }\n        }\n\n        jsObject(str: string): Object {\n            if (!str) {\n                return str;\n            } else {\n                /** Ensure JSON is valid and if not throw error with additional detail */\n                var json = null;\n                try {\n                    json = JSON.parse(str);\n                }\n                catch (err) {\n                    console.error('Invalid JSON: ', str);\n                }\n                return json;\n            }\n        }\n\n        jsString(str: string): string {\n            return str;\n        }\n\n        jsUser(str: string): IUser {\n            if (str.length === 0) {\n                return null;\n            }\n            //Send to constructor\n            return this.apUserFactory.create(str);\n        }\n\n        jsUserMulti(str: string): IUser[] {\n            if (str.length === 0) {\n                return [];\n            } else {\n                var thisUserMultiObject = [];\n                var thisUserMulti = str.split(';#');\n                for (var i = 0; i < thisUserMulti.length; i = i + 2) {\n                    var thisUser = this.jsUser(thisUserMulti[i] + ';#' + thisUserMulti[i + 1]);\n                    thisUserMultiObject.push(thisUser);\n                }\n                return thisUserMultiObject;\n            }\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apDecodeService:parseFieldVersions\n         * @methodOf angularPoint.apDecodeService\n         * @description\n         * Takes an XML response from SharePoint webservice and returns an array of field versions.\n         *\n         * @param {xml} responseXML Returned XML from web service call.\n         * @param {object} fieldDefinition Field definition from the model.\n         *\n         * @returns {Array} Array objects containing the various version of a field for each change.\n         */\n        parseFieldVersions(responseXML: XMLDocument, fieldDefinition: IFieldDefinition): IListItemVersion[] {\n            var versions = [];\n            var xmlVersions = $(responseXML).find('Version');\n            var versionCount = xmlVersions.length;\n\n            _.each(xmlVersions, (xmlVersion, index) => {\n\n                /** Bug in SOAP Web Service returns time in UTC time for version history\n                 *  Details: https://spservices.codeplex.com/discussions/391879\n                 */\n                var utcDate = this.parseStringValue($(xmlVersion).attr('Modified'), 'DateTime');\n\n                /** Parse the xml and create a representation of the version as a js object */\n                var version = {\n                    editor: this.parseStringValue($(xmlVersion).attr('Editor'), 'User'),\n                    /** Turn the SharePoint formatted date into a valid date object */\n                    modified: this.convertUTCDateToLocalDate(utcDate),\n                    /** Returns records in desc order so compute the version number from index */\n                    version: versionCount - index\n                };\n\n                /** Properly format field based on definition from model */\n                version[fieldDefinition.mappedName] =\n                this.parseStringValue($(xmlVersion).attr(fieldDefinition.staticName), fieldDefinition.objectType);\n\n                /** Push to beginning of array */\n                versions.unshift(version);\n            });\n\n            return versions;\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apDecodeService:parseStringValue\n         * @methodOf angularPoint.apDecodeService\n         * @description\n         * Converts a SharePoint string representation of a field into the correctly formatted JavaScript version\n         * based on object type.  A majority of this code is directly taken from Marc Anderson's incredible\n         * [SPServices](http://spservices.codeplex.com/) project but it needed some minor tweaking to work here.\n         * @param {string} str SharePoint string representing the value.\n         * @param {string} [objectType='Text'] The type based on field definition.  See\n         * See [List.customFields](#/api/List.FieldDefinition) for additional info on how to define a field type.\n         * @param {object} [options] Options to pass to the object constructor.\n         * @param {object} [options.entity] Reference to the parent list item which can be used by child constructors.\n         * @param {object} [options.propertyName] Name of property on the list item.\n         * @returns {*} The newly instantiated JavaScript value based on field type.\n         */\n        parseStringValue(str: string, objectType?: string, options?: { entity: Object; propertyName: string; }): any {\n\n            var unescapedValue = _.unescape(str);\n\n            var colValue;\n\n            switch (objectType) {\n                case 'Attachments':\n                    colValue = this.jsAttachments(unescapedValue);\n                    break;\n                case 'Boolean':\n                    colValue = this.jsBoolean(unescapedValue);\n                    break;\n                case 'Calculated': // Formatted like type;#value so we break it apart and then pass back in to format correctly\n                    colValue = this.jsCalc(unescapedValue);\n                    break;\n                case 'datetime': // For calculated columns, stored as datetime;#value\n                case 'DateTime':\n                    // Dates have dashes instead of slashes: ows_Created='2009-08-25 14:24:48'\n                    colValue = this.jsDate(unescapedValue);\n                    break;\n                case 'Lookup':\n                    colValue = this.jsLookup(unescapedValue, options);\n                    break;\n                case 'User':\n                    colValue = this.jsUser(unescapedValue);\n                    break;\n                case 'LookupMulti':\n                    colValue = this.jsLookupMulti(unescapedValue, options);\n                    break;\n                case 'UserMulti':\n                    colValue = this.jsUserMulti(unescapedValue);\n                    break;\n                case 'Integer':\n                case 'Counter': // Only really used for the ID field\n                    colValue = this.jsInt(unescapedValue);\n                    break;\n                case 'Number':\n                case 'Currency':\n                case 'float': // For calculated columns, stored as float;#value\n                case 'Float':\n                    colValue = this.jsFloat(unescapedValue);\n                    break;\n                case 'MultiChoice':\n                    colValue = this.jsChoiceMulti(unescapedValue);\n                    break;\n                case 'JSON': // Not a true SharePoint field type but acts as a decorator for Note\n                    colValue = this.jsObject(unescapedValue);\n                    break;\n                case 'Choice':\n                case 'HTML':\n                case 'Note':\n                default:\n                    // All other objectTypes will be simple strings\n                    colValue = this.jsString(unescapedValue);\n                    break;\n            }\n            return colValue;\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apDecodeService:parseXMLEntity\n         * @methodOf angularPoint.apDecodeService\n         * @description\n         * Convert an XML list item into a JS object using the fields defined in the model for the given list item.\n         * @param {object} xmlEntity XML Object.\n         * @param {object} options Configuration options.\n         * @param {string} options.mapping Mapping of fields we'd like to extend on our JS object.\n         * @param {boolean} [options.includeAllAttrs=false] If true, return all attributes, regardless whether\n         * @param {boolean} [options.listItemProvider] List item constructor.\n         * @param {boolean} [options.removeOws=true] Specifically for GetListItems, if true, the leading ows_ will\n         * @returns {object} New entity using the factory on the model.\n         */\n        parseXMLEntity<T extends ListItem<any>>(xmlEntity: JQuery, options: { mapping: IFieldDefinition[]; includeAllAttrs?: boolean; listItemProvider?: Function; removeOws?: boolean; target?: IndexedCache<T> }): Object {\n            var entity = {};\n            var rowAttrs = xmlEntity.attributes;\n\n            /** Bring back all mapped columns, even those with no value */\n            _.each(options.mapping, (fieldDefinition) => {\n                entity[fieldDefinition.mappedName] = this.apFieldService.getDefaultValueForType(fieldDefinition.objectType);\n            });\n\n            /** Parse through the element's attributes */\n            _.each(rowAttrs, (attr) => {\n                var thisAttrName = attr.name;\n                var thisMapping = options.mapping[thisAttrName];\n                var thisObjectName = typeof thisMapping !== 'undefined' ? thisMapping.mappedName : options.removeOws ? thisAttrName.split('ows_')[1] : thisAttrName;\n                var thisObjectType = typeof thisMapping !== 'undefined' ? thisMapping.objectType : undefined;\n                if (options.includeAllAttrs || thisMapping !== undefined) {\n                    entity[thisObjectName] = this.parseStringValue(attr.value, thisObjectType, {\n                        entity: entity,\n                        propertyName: thisObjectName\n                    });\n                }\n\n            });\n            return entity;\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apDecodeService:processListItems\n         * @methodOf angularPoint.apDecodeService\n         * @description\n         * Post processing of data after returning list items from server.  Returns a promise that resolves with\n         * the processed entities.  Promise allows us to batch conversions of large lists to prevent ui slowdowns.\n         * @param {object} model Reference to allow updating of model.\n         * @param {object} query Reference to the query responsible for requesting entities.\n         * @param {xml} responseXML Resolved promise from SPServices web service call.\n         * @param {object} [options] Optional configuration object.\n         * @param {function} [options.factory=model.factory] Constructor function typically stored on the model.\n         * @param {string} [options.filter='z:row'] XML filter string used to find the elements to iterate over.\n         * @param {Array} [options.mapping=model.list.mapping] Field definitions, typically stored on the model.\n         * @param {Array} [options.target=model.getCache()] Optionally pass in array to update after processing.\n         * @returns {Object} Inedexed Cache.\n         */\n        processListItems<T extends ListItem<any>>(model: Model, query: IQuery<T>, responseXML: XMLDocument, options?: IExecuteQueryOptions): IndexedCache<T> {\n            var defaults = {\n                factory: model.factory,\n                filter: 'z:row',\n                mapping: model.list.mapping,\n                target: model.getCache()\n            };\n\n            var opts: IExecuteQueryOptions = _.assign({}, defaults, options);\n\n            /** Map returned XML to JS objects based on mapping from model */\n            var filteredNodes = this.apXMLToJSONService.filterNodes(responseXML, opts.filter);\n\n            /** Prepare constructor for XML entities with references to the query and cached container */\n            var listItemProvider = this.createListItemProvider(model, query, opts.target);\n\n            /** Convert XML entities into JS objects and register in cache with listItemProvider, this returns an\n             * array of entities but at this point we're not using them because the indexed cache should be more\n             * performant. */\n            this.xmlToJson(filteredNodes, listItemProvider, opts);\n\n            return opts.target;\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apDecodeService:xmlToJson\n         * @methodOf angularPoint.apDecodeService\n         * @description\n         * Converts an XML node set to Javascript object array. This is a modified version of the SPServices\n         * \"SPXmlToJson\" function.\n         * @param {array} xmlEntities [\"z:rows\"] XML rows that need to be parsed.\n         * @param {function} listItemProvider Constructor function used to build the list item with references to\n         * the query, cached container, and registers each list item in the apCacheService.\n         * @param {object} options Options object.\n         * @param {object[]} options.mapping [columnName: \"mappedName\", objectType: \"objectType\"]\n         * @param {boolean} [options.includeAllAttrs=false] If true, return all attributes, regardless whether\n         * @param {boolean} [options.listItemProvider] List item constructor.\n         * @param {boolean} [options.removeOws=true] Specifically for GetListItems, if true, the leading ows_ will\n         * be stripped off the field name.\n         * @param {array} [options.target] Optional location to push parsed entities.\n         * @returns {object[]} An array of JavaScript objects.\n         */\n        xmlToJson<T extends ListItem<any>>(xmlEntities: JQuery, listItemProvider: (Object) => T, options: IXMLToJsonOptions<T>): T[] {\n\n            var defaults = {\n                mapping: {},\n                includeAllAttrs: false,\n                removeOws: true\n            };\n\n            var opts: IXMLToJsonOptions<T> = _.assign({}, defaults, options);\n            var parsedEntities = [];\n\n            _.each(xmlEntities, (xmlEntity) => {\n                var parsedEntity = this.parseXMLEntity(xmlEntity, opts);\n                var instantiatedListItem = listItemProvider(parsedEntity);\n                parsedEntities.push(instantiatedListItem);\n            });\n\n            return parsedEntities;\n        }\n\n\n    }\n\n\n    /**********************PRIVATE*********************/\n\n\n\n    interface IXMLToJsonOptions<T extends ListItem<any>> extends IExecuteQueryOptions {\n        includeAllAttrs?: boolean;\n        listItemProvider?: Function;\n        mapping: IFieldDefinition[];\n        removeOws?: boolean;\n        target?: IndexedCache<T>;\n    }\n\n\n\n    angular.module('angularPoint')\n        .service('apDecodeService', DecodeService)\n\n}\n","/// <reference path=\"../app.module.ts\" />\n\nmodule ap {\n    'use strict';\n\n\n    export class EncodeService {\n        savedTimeZone;\n        static $inject = ['apUtilityService', 'SPServices'];\n\n        constructor(private apUtilityService, private SPServices) {\n\n        }\n\n        /**\n         * Converts an array of selected values into a SharePoint MultiChoice string\n         * @param {string[]} arr\n         * @returns {string}\n         */\n        choiceMultiToString(arr: string[]): string {\n            var str = '';\n            var delim = ';#';\n\n            if (arr.length > 0) {\n                /** String is required to begin with deliminator */\n                str += delim;\n\n                /** Append each item in the supplied array followed by deliminator */\n                _.each(arr, (choice) => str += choice + delim);\n            }\n            return str;\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apEncodeService:createValuePair\n         * @methodOf angularPoint.apEncodeService\n         * @description\n         * Uses a field definition from a model to properly format a value for submission to SharePoint.  Typically\n         * used prior to saving a list item, we iterate over each of the non-readonly properties defined in the model\n         * for a list item and convert those value into value pairs that we can then hand off to SPServices.\n         * @param {object} fieldDefinition The field definition, typically defined in the model.\n         * <pre>\n         * {\n             *  staticName: \"Title\",\n             *  objectType: \"Text\",\n             *  mappedName: \"lastName\",\n             *  readOnly:false\n             * }\n         * </pre>\n         * @param {*} value Current field value.\n         * @returns {Array} [fieldName, fieldValue]\n         */\n        createValuePair(fieldDefinition: IFieldDefinition, value: any): [string, string] {\n            var encodedValue = this.encodeValue(fieldDefinition.objectType, value);\n            return [fieldDefinition.staticName, encodedValue];\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apEncodeService:encodeValue\n         * @methodOf angularPoint.apEncodeService\n         * @param {string} fieldType One of the valid field types.\n         * @param {*} value Value to be encoded.\n         * @returns {string} Encoded value ready to be sent to the server.\n         */\n        encodeValue(fieldType: string, value: any): string {\n            var str: string = '';\n            /** Only process if note empty, undefined, or null.  Allow false. */\n            if (value !== '' && !_.isUndefined(value) && !_.isNull(value)) {\n                switch (fieldType) {\n                    case 'Lookup':\n                    case 'User':\n                        if (value.lookupId) {\n                            /** Only include lookupValue if defined */\n                            str = value.lookupId + ';#' + (value.lookupValue || '');\n                        }\n                        break;\n                    case 'LookupMulti':\n                    case 'UserMulti':\n                        str = this.stringifySharePointMultiSelect(value, 'lookupId');\n                        break;\n                    case 'MultiChoice':\n                        str = this.choiceMultiToString(value);\n                        break;\n                    case 'Boolean':\n                        str = value ? \"1\" : \"0\";\n                        break;\n                    case 'DateTime':\n                        //A string date in ISO8601 format, e.g., '2013-05-08T01:20:29Z-05:00'\n                        str = this.stringifySharePointDate(value);\n                        break;\n                    case 'JSON':\n                        str = JSON.stringify(value);\n                        break;\n                    case 'HTML':\n                    case 'Note':\n                    default:\n                        str = value;\n                }\n            }\n            if (_.isString(str)) {\n                /** Ensure we encode before sending to server (replace \", <, >)*/\n                str = this.SPServices.encodeXml(str);\n            }\n            return str;\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apEncodeService:generateValuePairs\n         * @methodOf angularPoint.apEncodeService\n         * @description\n         * Typically used to iterate over the non-readonly field definitions stored in a model and convert a\n         * given list item entity into value pairs that we can pass to SPServices for saving.\n         * @param {Array} fieldDefinitions Definitions from the model.\n         * @param {object} listItem list item that we'll attempt to iterate over to find the properties that we need to\n         * save it to SharePoint.\n         * @returns {[string, string][]} Value pairs of all non-readonly fields.\n         * @example\n         * [[fieldName1, fieldValue1], [fieldName2, fieldValue2], ...]\n         */\n        generateValuePairs(fieldDefinitions: IFieldDefinition[], listItem: ListItem<any>): [string, string][] {\n            var pairs = [];\n            _.each(fieldDefinitions, (field) => {\n                /** Check to see if item contains data for this field */\n                if (_.has(listItem, field.mappedName)) {\n                    pairs.push(this.createValuePair(field, listItem[field.mappedName]));\n                }\n            });\n            return pairs;\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apEncodeService:stringifySharePointDate\n         * @methodOf angularPoint.apEncodeService\n         * @description\n         * Converts a JavaScript date into a modified ISO8601 date string using the TimeZone\n         * offset for the current user.\n         * @example\n         * <pre>'2014-05-08T08:12:18Z-07:00'</pre>\n         * @param {Date} date Valid JS date.\n         * @returns {string} ISO8601 date string.\n         */\n        stringifySharePointDate(date: Date | string): string {\n            var jsDate;\n            if (!_.isDate(date) && _.isString(date) && date.split('-').length === 3) {\n                /** Date string formatted YYYY-MM-DD */\n                var dateComponents = date.split('-');\n                jsDate = new Date(dateComponents[0], dateComponents[1] - 1, dateComponents[2], 0, 0, 0);\n            } else if (!_.isDate(date)) {\n                throw new Error('Invalid Date Provided: ' + date.toString());\n            } else {\n                jsDate = date;\n            }\n\n            var dateString = '';\n            dateString += jsDate.getFullYear();\n            dateString += '-';\n            dateString += this.apUtilityService.doubleDigit(jsDate.getMonth() + 1);\n            dateString += '-';\n            dateString += this.apUtilityService.doubleDigit(jsDate.getDate());\n            dateString += 'T';\n            dateString += this.apUtilityService.doubleDigit(jsDate.getHours());\n            dateString += ':';\n            dateString += this.apUtilityService.doubleDigit(jsDate.getMinutes());\n            dateString += ':';\n            dateString += this.apUtilityService.doubleDigit(jsDate.getSeconds());\n            dateString += 'Z-';\n\n            if (!this.savedTimeZone) {\n                //Get difference between UTC time and local time in minutes and convert to hours\n                //Store so we only need to do this once\n                this.savedTimeZone = new Date().getTimezoneOffset() / 60;\n            }\n            dateString += this.apUtilityService.doubleDigit(this.savedTimeZone);\n            dateString += ':00';\n            return dateString;\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apEncodeService:stringifySharePointMultiSelect\n         * @methodOf angularPoint.apEncodeService\n         * @description\n         * Turns an array of, typically {lookupId: someId, lookupValue: someValue}, objects into a string\n         * of delimited id's that can be passed to SharePoint for a multi select lookup or multi user selection\n         * field.  SharePoint doesn't need the lookup values so we only need to pass the ID's back.\n         *\n         * @param {object[]} multiSelectValue Array of {lookupId: #, lookupValue: 'Some Value'} objects.\n         * @param {string} [idProperty='lookupId'] Property name where we'll find the ID value on each of the objects.\n         * @param {string} [valueProperty='lookupValue'] Property name where we'll find the value for this object.\n         * @returns {string} Need to format string of id's in following format [ID0];#;#[ID1];#;#[ID1]\n         */\n        stringifySharePointMultiSelect(multiSelectValue: ILookup[], idProperty = 'lookupId', valueProperty = 'lookupValue'): string {\n            var stringifiedValues = '';\n            var idProp = idProperty || 'lookupId';\n            var valProp = valueProperty || 'lookupValue';\n            _.each(multiSelectValue, function (lookupObject, iteration) {\n                /** Need to format string of id's in following format [ID0];#[VAL0];#[ID1];#[VAL1] */\n                stringifiedValues += lookupObject[idProp] + ';#' + (lookupObject[valProp] || '');\n                /** Append delim after all but last because we don't want trailing ';#' at end of string */\n                if (iteration < (multiSelectValue.length - 1)) {\n                    stringifiedValues += ';#';\n                }\n            });\n            return stringifiedValues;\n        }\n\n\n    }\n\n\n    /**\n     * @ngdoc service\n     * @name angularPoint.apEncodeService\n     * @description\n     * Processes JavaScript objects and converts them to a format SharePoint expects.\n     *\n     * @requires angularPoint.apUtilityService\n     */\n    angular.module('angularPoint')\n        .service('apEncodeService', EncodeService);\n}\n","/// <reference path=\"../app.module.ts\" />\n\nmodule ap {\n\n    function exceptionLoggingService($log, $injector) {\n        function error(exception, cause) {\n\n            /** Need to inject otherwise get circular dependency when using dependency injection */\n            var apLogger: ILogger = $injector.get('apLogger');\n            // now try to log the error to the server side.\n            apLogger.exception(exception, cause);\n\n            // preserve the default behaviour which will log the error\n            // to the console, and allow the application to continue running.\n            $log.error.apply($log, arguments);\n\n        }\n\n        return error;\n    }\n\n    angular\n        .module('angularPoint')\n\t\t.factory('$exceptionHandler', exceptionLoggingService);\n\n}\n","/// <reference path=\"../app.module.ts\" />\n\nmodule ap {\n    'use strict';\n\n\n    export class ExportService {\n        static $inject = ['apUtilityService', 'apFormattedFieldValueService'];\n\n        constructor(private apUtilityService, private apFormattedFieldValueService) {\n\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apExportService:generateCSV\n         * @methodOf angularPoint.apExportService\n         * @description\n         * Converts an array of objects into a parsed array of arrays based on a field config object.\n         * @param {object[]} entities Array of objects to convert.\n         * @param {object|string[]} fields Array of objects defining the fields to parse.  Can also pass in strings representing the name of the field which will then be parsed based on field type.\n         * FieldDefinition:\n         * {string} object.field Property name on the object that we want to parse.\n         * {string} [object.label=object.field capitalized] Column Label\n         * {function} [object.getVal] Custom function that overrides the default method of parsing based on field type.\n         * @param {object} [options] Optional config settings.\n         * @param {string} [options.delim='; '] Delimiter used to separate fields that potentially contain multiple values that will be concatenated into a string.\n         * @returns {array[]} Return array of arrays, with the first array being the column names and every subsequent array representing a row in the csv dataset.\n         * @example\n         * <pre>\n         * var customDelimiter = ' | ';\n         * var saveCSV = function() {\n             *    var parsedCSV = apExportService.generateCSV(entities, [\n             *     //Field definition\n             *     { label: 'ID', field: 'id' },\n             *     //Field as simple string\n             *     'title',\n             *     'project',\n             *     { label: 'Project:ID', field: 'project.lookupId' },\n             *     { label: 'Type', field: 'eventType' },\n             *     { label: 'Start Date', field: 'startDate' },\n             *     { label: 'End Date', field: 'endDate' },\n             *     'location',\n             *     'description',\n             *     //Field definition with custom parse logic\n             *     { label: 'Comments', field: 'comments', stringify: function (comments) {\n             *       var str = '';\n             *       _.each(comments, function (comment, i) {\n             *         if (i > 0) {\n             *           str += '\\n';\n             *         }\n             *         str += comment.text + '\\n';\n             *       });\n             *       return str;\n             *     }}\n             *   ]);\n             *\n             *   //Save to user's machine\n             *   apExportService.saveCSV(parsedCSV, 'MyFile', {delim: customDelimiter});\n             * }\n         * </pre>\n         *\n         */\n        generateCSV(entities: ListItem<any>[], fields: [string[]|Object[]], options?: {delim:string}): string[][] {\n            var defaults = {\n                    dateFormat: 'json', //Format as JSON date rather than a formal date string\n                    delim: '; ',\n                    includeTitleRow: true\n                },\n                opts = _.assign({}, defaults, options),\n                entitiesArray = [\n                    []\n                ];\n\n            /** Process each of the entities in the data source */\n            _.each(entities, (entity, entityIndex) => {\n                var entityArray = [];\n                /** Process each of the specified fields */\n                _.each(fields, (f) => {\n\n                    /** Handle both string and object definition */\n                    var fieldDefinition = _.isString(f) ? {field: f} : f;\n\n                    /** Split the field name from the property if provided */\n                    var fieldComponents = fieldDefinition.field.split('.');\n                    var propertyName = fieldComponents[0];\n\n                    /** First array has the field names */\n                    if (entityIndex === 0 && opts.includeTitleRow) {\n                        /** Take a best guess if a column label isn't specified by capitalizing and inserting spaces between camel humps*/\n                        var label = fieldDefinition.label ?\n                            fieldDefinition.label : this.apUtilityService.fromCamelCase(propertyName);\n                        entitiesArray[0].push(label);\n                    }\n\n                    var val = '';\n\n                    if (_.isFunction(fieldDefinition.stringify)) {\n                        /** Allows us to override standard field logic for special cases */\n                        val = fieldDefinition.stringify(entity[fieldDefinition.field]);\n                    } else if (fieldComponents.length > 1) {\n                        /** Allow user to specify dot separated property path */\n                        if (_.deepIn(entity, fieldDefinition.field)) {\n                            val = _.deepGet(entity, fieldDefinition.field).toString();\n                        }\n                    } else {\n                        /** Get the value based on field type defined in the model for the entity*/\n                        var modelDefinition = entity.getFieldDefinition(propertyName);\n                        val = this.apFormattedFieldValueService.getFormattedFieldValue(\n                            entity[fieldDefinition.field],\n                            modelDefinition.objectType,\n                            opts\n                        )\n                    }\n                    /** Add string to column */\n                    entityArray.push(val);\n                });\n                /** Add row */\n                entitiesArray.push(entityArray);\n            });\n            return entitiesArray;\n        }\n\n        /**\n         * @description Replaces commonly-used Windows 1252 encoded chars that do not exist in ASCII or\n         *  ISO-8859-1 with ISO-8859-1 cognates.\n         * @param {string} text Text to be validated and cleaned.\n         * @returns {string}\n         */\n        replaceWordChars(text: string): string {\n            var s = text;\n            // smart single quotes and apostrophe\n            s = s.replace(/[\\u2018|\\u2019|\\u201A]/g, \"\\'\");\n            // smart double quotes\n            s = s.replace(/[\\u201C|\\u201D|\\u201E]/g, \"\\\"\");\n            // ellipsis\n            s = s.replace(/\\u2026/g, \"...\");\n            // dashes\n            s = s.replace(/[\\u2013|\\u2014]/g, \"-\");\n            // circumflex\n            s = s.replace(/\\u02C6/g, \"^\");\n            // open angle bracket\n            s = s.replace(/\\u2039/g, \"<\");\n            // close angle bracket\n            s = s.replace(/\\u203A/g, \">\");\n            // spaces\n            s = s.replace(/[\\u02DC|\\u00A0]/g, \" \");\n            return s;\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apExportService:saveCSV\n         * @methodOf angularPoint.apExportService\n         * @description\n         * Converts an array of arrays into a valid CSV file that is then downloaded to the users machine\n         * @requires angularPoint.apExportService:saveFile\n         * @param {array[]} data Array of arrays that we'd like to dump to a CSV file and save to the local machine.\n         * @param {string} [filename=debug.csv] Optionally name the file.\n         * @example\n         * <pre>\n         * //Lets assume we want to looks at an object that is too big to be easily viewed in the console.\n         * apExportService.saveCSV(objectToSave, 'MyFile');\n         * //This would download a file named MyFile.csv\n         * </pre>\n         *\n         */\n        saveCSV(data: string[][], filename = 'debug.csv'): void {\n            var csvString = '';\n            _.each(data, function (row) {\n                _.each(row, function (column, columnIndex) {\n                    var result = column === null ? '' : this.replaceWordChars(column);\n                    if (columnIndex > 0) {\n                        csvString += ',';\n                    }\n                    /** Escape single quotes with doubles in within the string */\n                    result = result.replace(/\"/g, '\"\"');\n\n                    /** Surround string with quotes so we can have line breaks */\n                    csvString += '\"' + result + '\"';\n                });\n                csvString += '\\n';\n            });\n            this.saveFile(csvString, 'csv;charset=utf-8;', filename);\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apExportService:saveFile\n         * @methodOf angularPoint.apExportService\n         * @description\n         * Used to convert a JS object or XML document into a file that is then downloaded on the users\n         * local machine.  Original work located:\n         * [here](http://bgrins.github.io/devtools-snippets/#console-save).\n         * @param {object} data JS object that we'd like to dump to a JSON file and save to the local machine.\n         * @param {string} fileType Can be either 'xml' or 'json'.\n         * @param {string} [filename=debug.json] Optionally name the file.\n         * @example\n         * <pre>\n         * //Lets assume we want to looks at an object that is too big to be easily viewed in the console.\n         * apExportService.saveJSON(objectToSave, 'myobject.json');\n         * </pre>\n         *\n         */\n        saveFile(data, fileType: string, filename = 'debug.json') {\n            if (!data) {\n                console.error('apExportService.save' + fileType.toUpperCase() + ': No data');\n                return;\n            }\n\n            /** If passed in fileType=\"csv;charset=utf-8;\" we just want to use \"csv\" */\n            var fileExtension = fileType.split(';')[0];\n\n            if (!filename) {\n                filename = 'debug.' + fileExtension;\n            }\n\n            if (fileType === 'json' && typeof data === 'object') {\n                data = JSON.stringify(data, undefined, 4);\n            }\n\n            var blob = new Blob([data], {type: 'text/' + fileType}),\n                e = document.createEvent('MouseEvents'),\n                a = document.createElement('a');\n\n            a.download = filename;\n            a.href = window.URL.createObjectURL(blob);\n            a.dataset.downloadurl = ['text/' + fileType, a.download, a.href].join(':');\n            e.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n            a.dispatchEvent(e);\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apExportService:saveJSON\n         * @methodOf angularPoint.apExportService\n         * @description\n         * Simple convenience function that uses angularPoint.apExportService:saveFile to download json to the local machine.\n         * @requires angularPoint.apExportService:saveFile\n         * @param {object} data JS object that we'd like to dump to a JSON file and save to the local machine.\n         * @param {string} [filename=debug.json] Optionally name the file.\n         * @example\n         * <pre>\n         * //Lets assume we want to looks at an object that is too big to be easily viewed in the console.\n         * apExportService.saveJSON(objectToSave, 'myobject.json');\n         * </pre>\n         *\n         */\n        saveJSON(data: Object, filename = 'debug.json') {\n            this.saveFile(data, 'json', filename);\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apExportService:saveXML\n         * @methodOf angularPoint.apExportService\n         * @description\n         * Simple convenience function that uses angularPoint.apExportService:saveFile to download xml to the local machine.\n         * @requires angularPoint.apExportService:saveFile\n         * @param {object} data XML object that we'd like to dump to a XML file and save to the local machine.\n         * @param {string} [filename=debug.xml] Optionally name the file.\n         * @example\n         * <pre>\n         * //Lets assume we want to looks at an object that is too big to be easily viewed in the console.\n         * apExportService.saveXML(objectToSave, 'myobject.xml');\n         * </pre>\n         *\n         */\n        saveXML(data: XMLDocument, filename = 'debug.xml') {\n            this.saveFile(data, 'xml', filename);\n        }\n\n\n    }\n\n    /**\n     * @ngdoc service\n     * @name angularPoint.apExportService\n     * @description\n     * Tools to assist with development.\n     * @requires angularPoint.apUtilityService\n     */\n    angular.module('angularPoint')\n        .service('apExportService', ExportService);\n\n}\n","/// <reference path=\"../app.module.ts\" />\n\nmodule ap {\n    'use strict';\n\n    var service: FieldService, uniqueCount = 0;\n\n\n    interface IFieldType {\n        defaultValue: string;\n        dynamicMock: Function;\n        staticMock: any;\n    }\n\n    export class FieldService {\n        fieldTypes;\n        constructor() {\n            service = this;\n            this.fieldTypes = getFieldTypes()\n        }\n\n        \n        /**\n         * @ngdoc function\n         * @name angularPoint.apFieldService:getDefaultValueForType\n         * @methodOf angularPoint.apFieldService\n         * @description\n         * Returns the empty value expected for a field type\n         * @param {string} fieldType Type of field.\n         * @returns {*} Default value based on field type.\n         */\n        getDefaultValueForType(fieldType) {\n            var fieldDefinition = service.getDefinition(fieldType),\n                defaultValue;\n\n            if (fieldDefinition) {\n                defaultValue = fieldDefinition.defaultValue;\n            }\n            return defaultValue;\n        }\n\n        /**\n         * Returns an object defining a specific field type\n         * @param {string} fieldType\n         * @returns {object} fieldTypeDefinition\n         */\n        getDefinition(fieldType) {\n            return service.fieldTypes[fieldType] ? service.fieldTypes[fieldType] : service.fieldTypes['Text'];\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apFieldService:getMockData\n         * @methodOf angularPoint.apFieldService\n         * @description\n         * Can return mock data appropriate for the field type, by default it dynamically generates data but\n         * the staticValue param will instead return a hard coded type specific value\n         *\n         * @requires ChanceJS to produce dynamic data.\n         * https://github.com/victorquinn/chancejs\n         * @param {string} fieldType Field type from the field definition.\n         * @param {object} [options] Optional params.\n         * @param {boolean} [options.staticValue=false] Default to dynamically build mock data.\n         * @returns {*} mockData\n         */\n        getMockData(fieldType, options) {\n            var mock;\n            var fieldDefinition = service.getDefinition(fieldType);\n            if (fieldDefinition) {\n                if (_.isFunction(window.Chance) && options && !options.staticValue) {\n                    /** Return dynamic data if ChanceJS is available and flag isn't set requiring static data */\n                    mock = fieldDefinition.dynamicMock(options);\n                } else {\n                    /** Return static data if the flag is set or ChanceJS isn't available */\n                    mock = fieldDefinition.staticMock;\n                }\n            }\n            return mock;\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apFieldService:mockPermMask\n         * @methodOf angularPoint.apFieldService\n         * @description\n         * Defaults to a full mask but allows simulation of each of main permission levels\n         * @param {object} [options] Options container.\n         * @param {string} [options.permissionLevel=FullMask] Optional mask.\n         * @returns {string} Values for mask.\n         */\n        mockPermMask(options?: { permissionLevel: string }) {\n            var mask = 'FullMask';\n            if (options && options.permissionLevel) {\n                mask = options.permissionLevel;\n            }\n            return service.resolveValueForEffectivePermMask(mask);\n        }\n        \n        /**\n         * @ngdoc function\n         * @name angularPoint.apFieldService:resolveValueForEffectivePermMask\n         * @methodOf angularPoint.apFieldService\n         * @description\n         * Takes the name of a permission mask and returns a permission value which can then be used\n         * to generate a permission object using modelService.resolvePermissions(outputfromthis)\n         * @param {string} perMask Options:\n         *  - AddListItems\n         *  - EditListItems\n         *  - DeleteListItems\n         *  - ApproveItems\n         *  - FullMask\n         *  - ViewListItems\n         * @returns {string} value\n         */\n        resolveValueForEffectivePermMask(perMask) {\n            var permissionValue;\n            switch (perMask) {\n                case 'AddListItems':\n                    permissionValue = '0x0000000000000002';\n                    break;\n                case 'EditListItems':\n                    permissionValue = '0x0000000000000004';\n                    break;\n                case 'DeleteListItems':\n                    permissionValue = '0x0000000000000008';\n                    break;\n                case 'ApproveItems':\n                    permissionValue = '0x0000000000000010';\n                    break;\n                case 'FullMask':\n                    permissionValue = '0x7FFFFFFFFFFFFFFF';\n                    break;\n                case 'ViewListItems':\n                default:\n                    permissionValue = '0x0000000000000001';\n                    break;\n            }\n            return permissionValue;\n        }\n\n    }\n\n\n\n    function getFieldTypes() {\n        return {\n            Text: {\n                defaultValue: '',\n                staticMock: 'Test String',\n                dynamicMock: randomString\n            },\n            Note: {\n                defaultValue: '',\n                staticMock: 'This is a sentence.',\n                dynamicMock: randomParagraph\n            },\n            Boolean: {\n                defaultValue: null,\n                staticMock: true,\n                dynamicMock: randomBoolean\n            },\n            Calculated: {\n                defaultValue: null,\n                staticMock: 'float;#123.45',\n                dynamicMock: randomCalc\n            },\n            Choice: {\n                defaultValue: '',\n                staticMock: 'My Choice',\n                dynamicMock: randomString\n            },\n            Counter: {\n                defaultValue: null,\n                staticMock: getUniqueCounter(),\n                dynamicMock: getUniqueCounter\n            },\n            Currency: {\n                defaultValue: null,\n                staticMock: 120.50,\n                dynamicMock: randomCurrency\n            },\n            DateTime: {\n                defaultValue: null,\n                staticMock: new Date(2014, 5, 4, 11, 33, 25),\n                dynamicMock: randomDate\n            },\n            Integer: {\n                defaultValue: null,\n                staticMock: 14,\n                dynamicMock: randomInteger\n            },\n            JSON: {\n                defaultValue: '',\n                staticMock: [\n                    { id: 1, title: 'test' },\n                    { id: 2 }\n                ],\n                dynamicMock: randomString\n            },\n            Lookup: {\n                defaultValue: '',\n                staticMock: { lookupId: 49, lookupValue: 'Static Lookup' },\n                dynamicMock: randomLookup\n            },\n            LookupMulti: {\n                defaultValue: [],\n                staticMock: [\n                    { lookupId: 50, lookupValue: 'Static Multi 1' },\n                    { lookupId: 51, lookupValue: 'Static Multi 2' }\n                ],\n                dynamicMock: randomLookupMulti\n            },\n            Mask: {\n                defaultValue: service.mockPermMask(),\n                staticMock: service.mockPermMask(),\n                dynamicMock: service.mockPermMask\n            },\n            MultiChoice: {\n                defaultValue: [],\n                staticMock: ['A Good Choice', 'A Bad Choice'],\n                dynamicMock: randomStringArray\n            },\n            User: {\n                defaultValue: '',\n                staticMock: { lookupId: 52, lookupValue: 'Static User' },\n                dynamicMock: randomUser\n            },\n            UserMulti: {\n                defaultValue: [],\n                staticMock: [\n                    { lookupId: 53, lookupValue: 'Static User 1' },\n                    { lookupId: 54, lookupValue: 'Static User 2' }\n                ],\n                dynamicMock: randomUserMulti\n            }\n        }\n    }\n\n    function getUniqueCounter() {\n        uniqueCount++;\n        return uniqueCount;\n    }\n\n    function randomBoolean() {\n        return chance.bool();\n    }\n\n    function randomCalc() {\n        return 'float;#' + chance.floating({ min: 0, max: 10000 });\n    }\n\n    function randomString() {\n        return chance.word() + ' ' + chance.word();\n    }\n\n    function randomStringArray() {\n        var randomArr = [];\n        /** Create a random (1-4) number of strings and add to array */\n        _.times(_.random(1, 4), function() {\n            randomArr.push(randomString());\n        });\n        return randomArr;\n    }\n\n    function randomParagraph() {\n        return chance.paragraph();\n    }\n\n    function randomCurrency() {\n        return parseInt(_.random(10000000, true) * 100) / 100;\n    }\n\n    function randomDate() {\n        return chance.date();\n    }\n\n    function randomInteger() {\n        return chance.integer();\n    }\n\n\n    function randomLookup() {\n        return {\n            lookupId: getUniqueCounter(),\n            lookupValue: chance.word()\n        };\n    }\n\n    function randomUser() {\n        return {\n            lookupId: getUniqueCounter(),\n            lookupValue: chance.name()\n        };\n    }\n\n    function randomLookupMulti() {\n        var mockData = [];\n        _.each(_.random(10), function() {\n            mockData.push(randomLookup());\n        });\n        return mockData;\n    }\n\n    function randomUserMulti() {\n        var mockData = [];\n        _.each(_.random(10), function() {\n            mockData.push(randomUser());\n        });\n        return mockData;\n    }\n    \n    \n\n    /**\n     * @ngdoc service\n     * @name angularPoint.apFieldService\n     * @description\n     * Handles the mapping of the various types of fields used within a SharePoint list\n     */\n    angular.module('angularPoint')\n        .service('apFieldService', FieldService);\n\n}\n","/// <reference path=\"../app.module.ts\" />\n\nmodule ap {\n    'use strict';\n\n    var service: FormattedFieldValueService, $filter;\n\n    /**\n     * @ngdoc service\n     * @name angularPoint.apFormattedFieldValueService\n     * @description\n     * Returns the formatted string value for a field based on field type.\n     */\n    export class FormattedFieldValueService {\n        static $inject = ['$filter'];\n        constructor(_$filter_) {\n            service = this;\n            $filter = _$filter_;\n        }\n        \n        /**\n         * @ngdoc function\n         * @name angularPoint.apFormattedFieldValueService:getFormattedFieldValue\n         * @methodOf angularPoint.apFormattedFieldValueService\n         * @param {object|array|string|integer|boolean} prop Target that we'd like to stringify.\n         * @param {string} [propertyType='String'] Assumes by default that it's already a string.  Most of the normal field\n         * types identified in the model field definitions are supported.\n         *\n         * - Lookup\n         * - User\n         * - Boolean\n         * - DateTime\n         * - Integer\n         * - Number\n         * - Counter\n         * - MultiChoice\n         * - UserMulti\n         * - LookupMulti\n         * @param {object} options Optional config.\n         * @param {string} [options.delim=', '] Optional delimiter to split concatenated strings.\n         * @param {string} [options.dateFormat='short'] Either 'json' which converts a date into ISO8601 date string\n         * or a mask for the angular date filter.\n         * @example\n         * <pre>\n         *  var project = {\n         *    title: 'Super Project',\n         *   members: [\n         *     { lookupId: 12, lookupValue: 'Joe' },\n         *     { lookupId: 19, lookupValue: 'Beth' }\n         *   ]\n         * };\n         *\n         * var membersAsString = apFormattedFieldValueService:getFormattedFieldValue({\n         *    project.members,\n         *    'UserMulti',\n         *    { delim: ' | '} //Custom Delimiter\n         * });\n         *\n         * // membersAsString = 'Joe | Beth';\n         *\n         * </pre>\n         * @returns {string} Stringified property on the object based on the field type.\n         */\n        getFormattedFieldValue(prop: any, propertyType = 'String', options?: { delim?: string; dateFormat?: string }): string {\n            var defaults = {\n                delim: ', ',\n                dateFormat: 'short'\n            },\n                opts = _.assign({}, defaults, options);\n\n            var str: string = '';\n            /** Only process if prop is defined */\n            if (prop) {\n                switch (propertyType) {\n                    case 'Boolean':\n                        str = service.stringifyBoolean(prop);\n                        break;\n                    case 'Calculated': // Can be DateTime, Float, or String\n                        str = service.stringifyCalc(prop);\n                        break;\n                    case 'Lookup':\n                    case 'User':\n                        str = service.stringifyLookup(prop);\n                        break;\n                    case 'DateTime':\n                        str = service.stringifyDate(prop, opts.dateFormat);\n                        break;\n                    case 'Integer':\n                    case 'Number':\n                    case 'Float':\n                    case 'Counter':\n                        str = service.stringifyNumber(prop);\n                        break;\n                    case 'Currency':\n                        str = service.stringifyCurrency(prop);\n                        break;\n                    case 'MultiChoice':\n                        str = service.stringifyMultiChoice(prop, opts.delim);\n                        break;\n                    case 'UserMulti':\n                    case 'LookupMulti':\n                        str = service.stringifyMultiLookup(prop, opts.delim);\n                        break;\n                    default:\n                        str = prop;\n                }\n            }\n            return str;\n        }\n        \n        /**\n         * @ngdoc function\n         * @name angularPoint.apFormattedFieldValueService:stringifyBoolean\n         * @methodOf angularPoint.apFormattedFieldValueService\n         * @param {boolean} prop Boolean to stringify.\n         * @description\n         * Returns the stringified boolean if it is set.\n         * @returns {string} Stringified boolean.\n         */\n        stringifyBoolean(prop: boolean): string {\n            var str = '';\n            if (_.isBoolean(prop)) {\n                str = prop.toString();\n            }\n            return str;\n        }\n\n        stringifyCalc(prop: any): string {\n            if (prop.length === 0) {\n                return '';\n            } else if (_.isNumber(prop)) {\n                return service.getFormattedFieldValue(prop, 'Number');\n            } else if (_.isDate(prop)) {\n                return service.getFormattedFieldValue(prop, 'DateTime');\n            } else {\n                return service.getFormattedFieldValue(prop, 'Text');\n            }\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apFormattedFieldValueService:stringifyCurrency\n         * @methodOf angularPoint.apFormattedFieldValueService\n         * @description\n         * Converts a numeric value into a formatted currency string.\n         * @param {number} prop Property on object to parse.\n         * @returns {string} Stringified currency.\n         */\n        stringifyCurrency(prop: number): string {\n            return $filter('currency')(prop, '$');\n        }\n        \n        /**\n         * @ngdoc function\n         * @name angularPoint.apFormattedFieldValueService:stringifyDate\n         * @methodOf angularPoint.apFormattedFieldValueService\n         * @param {date} prop Date object.\n         * @param {string} dateFormat Either 'json' which converts a date into ISO8601 date string or a mask for\n         * the angular date filter.\n         * @description\n         * Returns JSON date.\n         * @returns {string} JSON date.\n         */\n        stringifyDate(prop: Date, dateFormat: string): string {\n            var str = '';\n            if (_.isDate(prop)) {\n                str = dateFormat === 'json' ? prop.toJSON() : $filter('date')(prop, dateFormat);\n            }\n            return str;\n        }\n        \n        /**\n         * @ngdoc function\n         * @name angularPoint.apFormattedFieldValueService:stringifyLookup\n         * @methodOf angularPoint.apFormattedFieldValueService\n         * @param {obj} prop Property on object to parse.\n         * @description\n         * Returns the property.lookupValue if present.\n         * @returns {string} Property.lookupValue.\n         */\n        stringifyLookup(prop: ILookup): string {\n            var str = '';\n            if (prop && prop.lookupValue) {\n                str = prop.lookupValue;\n            }\n            return str;\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apFormattedFieldValueService:stringifyMultiChoice\n         * @methodOf angularPoint.apFormattedFieldValueService\n         * @param {string[]} prop Array of selected choices.\n         * @param {string} [delim='; '] Custom delimiter used between the concatenated values.\n         * @description\n         * Converts an array of strings into a single concatenated string.\n         * @returns {string} Concatenated string representation.\n         */\n        stringifyMultiChoice(prop: string[], delim = '; '): string {\n            var str = '';\n            _.each(prop, function(choice, i) {\n                if (i > 0) {\n                    str += delim;\n                }\n                str += choice;\n            });\n            return str;\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apFormattedFieldValueService:stringifyMultiLookup\n         * @methodOf angularPoint.apFormattedFieldValueService\n         * @param {object[]} prop Array of lookup objects.\n         * @param {string} [delim='; '] Custom delimiter used between the concatenated values.\n         * @description\n         * Converts an array of selected lookup values into a single concatenated string.\n         * @returns {string} Concatenated string representation.\n         */\n        stringifyMultiLookup(prop: ILookup[], delim = '; '): string {\n            var str = '';\n            _.each(prop, function(val, valIndex) {\n\n                /** Add artificial delim */\n                if (valIndex > 0) {\n                    str += delim;\n                }\n\n                str += service.stringifyLookup(val);\n            });\n            return str;\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apFormattedFieldValueService:stringifyNumber\n         * @methodOf angularPoint.apFormattedFieldValueService\n         * @param {number} prop Property on object to parse.\n         * @description\n         * Converts a number to a string representation.\n         * @returns {string} Stringified number.\n         */\n        stringifyNumber(prop: number): string {\n            var str = '';\n            if (_.isNumber(prop)) {\n                str = prop.toString();\n            }\n            return str;\n        }\n\n    }\n\n\n\n\n    angular\n        .module('angularPoint')\n        .service('apFormattedFieldValueService', FormattedFieldValueService);\n\n\n}\n","/// <reference path=\"../app.module.ts\" />\n\nmodule ap {\n    'use strict';\n\n    var deferred: ng.IDeferred<Function>,\n        registerCallback: ng.IPromise<Function>;\n\n    var logTypes = ['log', 'error', 'info', 'debug', 'warn'];\n\n    export interface ILogEvent {\n        cause?: string;\n        event?: string;\n        json?: Object;\n        message?: string;\n        stackTrace?: string[];\n        type?: string;\n        url?: string;\n    }\n\n    export interface ILogger {\n        debug(message: string, optionsOverride?: ILogEvent): ng.IPromise<ListItem<any>>;\n        error(message: string, optionsOverride?: ILogEvent): ng.IPromise<ListItem<any>>;\n        exception(exception, cause?, optionsOverride?: ILogEvent): void;\n        info(message: string, optionsOverride?: ILogEvent): ng.IPromise<ListItem<any>>;\n        log(message: string, optionsOverride?: ILogEvent): ng.IPromise<ListItem<any>>;\n        registerEvent(event: ILogEvent): ng.IPromise<ListItem<any>>;\n        subscribe(callback: Function): void;\n        warn(message: string, optionsOverride?: ILogEvent): ng.IPromise<ListItem<any>>;\n    }\n\n    export class Logger implements ILogger {\n\n        /**\n         * @ngdoc function\n         * @name apLogger.debug\n         * @methodOf apLogger\n         * @param {string} message Message to log.\n         * @param {ILogger} [optionsOverride] Override any log options.\n         */\n        debug: (message: string, optionsOverride?: ILogEvent) => ng.IPromise<ListItem<any>>;\n\n        /**\n         * @ngdoc function\n         * @name apLogger.error\n         * @methodOf apLogger\n         * @param {string} message Message to log.\n         * @param {ILogger} [optionsOverride] Override any log options.\n         */\n        error: (message: string, optionsOverride?: ILogEvent) => ng.IPromise<ListItem<any>>;\n\n        /**\n         * @ngdoc function\n         * @name apLogger.info\n         * @methodOf apLogger\n         * @param {string} message Message to log.\n         * @param {ILogger} [optionsOverride] Override any log options.\n         */\n        info: (message: string, optionsOverride?: ILogEvent) => ng.IPromise<ListItem<any>>;\n\n        /**\n         * @ngdoc function\n         * @name apLogger.log\n         * @methodOf apLogger\n         * @param {string} message Message to log.\n         * @param {ILogger} [optionsOverride] Override any log options.\n         */\n        log: (message: string, optionsOverride?: ILogEvent) => ng.IPromise<ListItem<any>>;\n\n        /**\n         * @ngdoc function\n         * @name apLogger.warn\n         * @methodOf apLogger\n         * @param {string} message Message to log.\n         * @param {ILogger} [optionsOverride] Override any log options.\n         */\n        warn: (message: string, optionsOverride?: ILogEvent) => ng.IPromise<ListItem<any>>;\n\n        static $inject = ['$q', '$window', '$log', '$timeout'];\n\n        constructor($q, private $window, private $log, private $timeout) {\n            /** Create a deferred object we can use to delay functionality until log model is registered */\n            deferred = $q.defer();\n            registerCallback = deferred.promise;\n\n            /** Generate a method for each logger call */\n            _.each(logTypes, (logType) => {\n\n                /**\n                 * @Example\n                 *\n                 * info(message: string, optionsOverride?: ILogEvent): ng.IPromise<ListItem<any>> {\n                 *     var opts = _.assign({}, {\n                 *         message: message,\n                 *         type: 'info'\n                 *         url: $window.location.href,\n                 *     }, optionsOverride);\n                 *\n                 *     return this.notify(opts);\n                 * }\n                 *\n                 */\n\n                this[logType] = (message: string, optionsOverride?: ILogEvent): ng.IPromise<ListItem<any>> => {\n                    var opts = _.assign({}, {\n                        message: message,\n                        type: logType,\n                    }, optionsOverride);\n\n                    return this.notify(opts);\n                }\n\n            });\n        }\n\n        /**\n         * @ngdoc function\n         * @name apLogger.exception\n         * @methodOf apLogger\n         * @param {Error} exception Error which caused event.\n         * @param {string} [cause] Angular sometimes provides cause.\n         * @param {ILogger} optionsOverride Override any log options.\n         */\n        exception(exception: Object, cause?, optionsOverride?: ILogEvent): void {\n\n            try {\n                var errorMessage = exception.toString();\n                // generate a stack trace\n                /* global printStackTrace:true */\n                var stackTrace = printStackTrace({e: exception});\n\n                this.error(errorMessage, _.assign({}, {\n                    event: 'exception',\n                    stackTrace: stackTrace,\n                    cause: ( cause || \"\")\n                }, optionsOverride));\n\n            } catch (loggingError) {\n                this.$log.warn(\"Error server-side logging failed\");\n                this.$log.log(loggingError);\n            }\n\n        }\n\n        private notify(options: ILogEvent) {\n            return this.$timeout(() => {\n                /** Allow navigation to settle before capturing url */\n                return this.registerEvent(_.assign({}, {url: this.$window.location.href}, options));\n            }, 0);\n        }\n\n        registerEvent(logEvent: ILogEvent): ng.IPromise<ListItem<any>> {\n            return registerCallback.then((callback: Function) => {\n                if (_.isFunction(callback)) {\n                    return callback(logEvent);\n                }\n            });\n        }\n\n        /**\n         * @ngdoc function\n         * @name apLogger.subscribe\n         * @methodOf apLogger\n         * @param {Function} callback Callend when event occurs.\n         * @description Callback fired when log event occurs\n         */\n        subscribe(callback: Function): void {\n            deferred.resolve(callback);\n        }\n\n    }\n\n\n    /**\n     * @ngdoc service\n     * @name apLogger\n     * @description\n     * Common definitions used in the application.\n     *\n     * HOW TO USE\n     * 1. Create a logging model for logs to be stored\n     * 2. Ensure everyone has write access to the list\n     * 3. Add the model as one of the dependencies in your .run so it'll be instantiated immediately\n     * 4. Subscribe to change events from on the model\n     *\n     *\n     * @example\n     * <pre>\n     * export class Log extends ap.ListItem{\n     *     cause: string;\n     *     event: string;\n     *     formattedStackTrace: string;\n     *     json: Object;\n     *     message: string;\n     *     stackTrace: string[];\n     *     type: string;\n     *     url: string;\n     *     constructor(obj){\n     *         _.assign(this, obj);\n     *         // Create a formatted representation of the stacktrace to display in email notification\n     *         if(this.stackTrace && !this.formattedStackTrace) {\n     *             this.formattedStackTrace = '';\n     *             _.each(this.stackTrace, (traceEntry) => {\n     *                 this.formattedStackTrace += `${traceEntry}\n     *             `;\n     *             });\n     *         }\n     *     }\n     * }\n     * var logCounter = 0;\n     * var maxLogsPerSesssion = 5;\n     * export class LogsModel extends ap.Model{\n     *     constructor(apLogger: ap.Logger) {\n     *         model = this;\n     *         super({\n     *             factory: Log,\n     *             list: {\n     *                 title: 'Logs',\n     *                 guid: '{LOG LIST GUID...CHANGE ME}',\n     *                 customFields: [\n     *                     {staticName: 'Message', objectType: 'Note', mappedName: 'message', readOnly: false},\n     *                     {staticName: 'Title', objectType: 'Text', mappedName: 'url', readOnly: false},\n     *                     {staticName: 'LogType', objectType: 'Text', mappedName: 'type', readOnly: false},\n     *                     {staticName: 'StackTrace', objectType: 'JSON', mappedName: 'stackTrace', readOnly: false},\n     *                     {staticName: 'Cause', objectType: 'Text', mappedName: 'cause', readOnly: false},\n     *                     {staticName: 'JSON', objectType: 'JSON', mappedName: 'json', readOnly: false},\n     *                     {staticName: 'Event', objectType: 'Text', mappedName: 'event', readOnly: false},\n     *                     {\n     *                         staticName: 'FormattedStackTrace',\n     *                         objectType: 'Note',\n     *                         mappedName: 'formattedStackTrace',\n     *                         readOnly: false,\n     *                         description: 'Trace formatted to be readable in email notification.'\n     *                     }\n     *                 ]\n     *             }\n     *         });\n     *         // Register this model as the list where all logs will be stored\n     *         apLogger.subscribe(function (event: ap.ILogEvent) {\n     *             // Ensure we keep logging under control, prevents spamming server if loop occurs\n     *             if(logCounter < maxLogsPerSesssion) {\n     *                 var newLog = model.createEmptyItem(event);\n     *                 console.log(newLog);\n     *                 newLog.saveChanges();\n     *                 logCounter++;\n     *             }\n     *         });\n     *     }\n     * }\n     *\n     * </pre>\n     *\n     */\n    angular\n        .module('angularPoint')\n        .service('apLogger', Logger);\n\n}\n","/// <reference path=\"../app.module.ts\" />\n\nmodule ap {\n    'use strict';\n\n    // Set up SOAP envelope\n    class SOAPEnvelope {\n        opheader: string;\n        opfooter: string;\n        header = \"<soap:Envelope xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' \" +\n        \"xmlns:xsd='http://www.w3.org/2001/XMLSchema' \" +\n        \"xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/'><soap:Body>\";\n        footer = \"</soap:Body></soap:Envelope>\";\n        payload = \"\";\n    }\n\n    //Definition file taken from SPServices project on GitHub, look at way to use as depency and link to it\n    interface SPServicesOptions {\n        /** If true, we'll cache the XML results with jQuery's .data() function */\n        cacheXML?: boolean;\n        /** The Web Service operation */\n        operation: string;\n        /** URL of the target Web */\n        webURL?: string;\n        /** true to make the view the default view for the list */\n        makeViewDefault?: boolean;\n\n        // For operations requiring CAML, these options will override any abstractions\n\n        /** View name in CAML format. */\n        viewName?: string;\n        /** Query in CAML format */\n        CAMLQuery?: string;\n        /** View fields in CAML format */\n        CAMLViewFields?: string;\n        /** Row limit as a string representation of an integer */\n        CAMLRowLimit?: number;\n        /** Query options in CAML format */\n        CAMLQueryOptions?: string;\n\n        // Abstractions for CAML syntax\n\n        /** Method Cmd for UpdateListItems */\n        batchCmd?: string;\n        /** Fieldname / Fieldvalue pairs for UpdateListItems */\n        valuepairs?: Array<any>;\n\n        // As of v0.7.1, removed all options which were assigned an empty string (\"\")\n\n        /** Array of destination URLs for copy operations */\n        DestinationUrls?: Array<any>;\n        /** An SPWebServiceBehavior indicating whether the client supports Windows SharePoint Services 2.0 or Windows SharePoint Services 3.0: {Version2 | Version3 } */\n        behavior?: string;\n        /** A Storage value indicating how the Web Part is stored: {None | Personal | Shared} */\n        storage?: string;\n        /** objectType for operations which require it */\n        objectType?: string;\n        /** true to delete a meeting;false to remove its association with a Meeting Workspace site */\n        cancelMeeting?: boolean;\n        /** true if the calendar is set to a format other than Gregorian;otherwise, false. */\n        nonGregorian?: boolean;\n        /** Specifies if the action is a claim or a release. Specifies true for a claim and false for a release. */\n        fClaim?: boolean;\n        /** The recurrence ID for the meeting that needs its association removed. This parameter can be set to 0 for single-instance meetings. */\n        recurrenceId?: number;\n        /** An integer that is used to determine the ordering of updates in case they arrive out of sequence. Updates with a lower-than-current sequence are discarded. If the sequence is equal to the current sequence, the latest update are applied. */\n        sequence?: number;\n        /** SocialDataService maximumItemsToReturn */\n        maximumItemsToReturn?: number;\n        /** SocialDataService startIndex */\n        startIndex?: number;\n        /** SocialDataService isHighPriority */\n        isHighPriority?: boolean;\n        /** SocialDataService isPrivate */\n        isPrivate?: boolean;\n        /** SocialDataService rating */\n        rating?: number;\n        /** Unless otherwise specified, the maximum number of principals that can be returned from a provider is 10. */\n        maxResults?: number;\n        /** Specifies user scope and other information? [None | User | DistributionList | SecurityGroup | SharePointGroup | All] */\n        principalType?: string;\n\n        /** Allow the user to force async */\n        async?: boolean;\n        /** Function to call on completion */\n        completefunc?: (xData: JQueryXHR, status: string) => void;\n    }\n\n\n    //TODO Cleanup and convert to TS\n    function Service(apWebServiceOperationConstants: IWebServiceOperationConstants, apWebServiceService: WebServiceService) {\n\n        /*\n         * SPServices - Work with SharePoint's Web Services using jQuery\n         * Version 2014.02a\n         * @requires jQuery v1.8 or greater - jQuery 1.10.x recommended\n         *\n         * Copyright (c) 2009-2013 Sympraxis Consulting LLC\n         * Examples and docs at:\n         * http://spservices.codeplex.com\n         * Licensed under the MIT license:\n         * http://www.opensource.org/licenses/mit-license.php\n         */\n        /*\n         * @description Work with SharePoint's Web Services using jQuery\n         * @type jQuery\n         * @name SPServices\n         * @category Plugins/SPServices\n         * @author Sympraxis Consulting LLC/marc.anderson@sympraxisconsulting.com\n         */\n        /* jshint undef: true */\n        /* global L_Menu_BaseUrl, _spUserId, _spPageContextInfo, GipAddSelectedItems, GipRemoveSelectedItems, GipGetGroupData */\n\n        // Global variables\n        var SCHEMASharePoint = \"http://schemas.microsoft.com/sharepoint\";\n        var i = 0; // Generic loop counter\n        var encodeOptionList = [\"listName\", \"description\"]; // Used to encode options which may contain special characters\n\n        // Defaults added as a function in our library means that the caller can override the defaults\n        // for their session by calling this function.  Each operation requires a different set of options;\n        // we allow for all in a standardized way.\n        var defaults = {\n\n            operation: \"\", // The Web Service operation\n            webURL: \"\", // URL of the target Web\n            makeViewDefault: false, // true to make the view the default view for the list\n\n            // For operations requiring CAML, these options will override any abstractions\n            CAMLViewName: \"\", // View name in CAML format.\n            CAMLQuery: \"\", // Query in CAML format\n            CAMLViewFields: \"\", // View fields in CAML format\n            CAMLRowLimit: 0, // Row limit as a string representation of an integer\n            CAMLQueryOptions: \"<QueryOptions></QueryOptions>\", // Query options in CAML format\n\n            // Abstractions for CAML syntax\n            batchCmd: \"Update\", // Method Cmd for UpdateListItems\n            valuePairs: [], // Fieldname / Fieldvalue pairs for UpdateListItems\n\n            // As of v0.7.1, removed all options which were assigned an empty string (\"\")\n            DestinationUrls: [], // Array of destination URLs for copy operations\n            behavior: \"Version3\", // An SPWebServiceBehavior indicating whether the client supports Windows SharePoint Services 2.0 or Windows SharePoint Services 3.0: {Version2 | Version3 }\n            storage: \"Shared\", // A Storage value indicating how the Web Part is stored: {None | Personal | Shared}\n            objectType: \"List\", // objectType for operations which require it\n            cancelMeeting: true, // true to delete a meeting;false to remove its association with a Meeting Workspace site\n            nonGregorian: false, // true if the calendar is set to a format other than Gregorian;otherwise, false.\n            fClaim: false, // Specifies if the action is a claim or a release. Specifies true for a claim and false for a release.\n            recurrenceId: 0, // The recurrence ID for the meeting that needs its association removed. This parameter can be set to 0 for single-instance meetings.\n            sequence: 0, // An integer that is used to determine the ordering of updates in case they arrive out of sequence. Updates with a lower-than-current sequence are discarded. If the sequence is equal to the current sequence, the latest update are applied.\n            maximumItemsToReturn: 0, // SocialDataService maximumItemsToReturn\n            startIndex: 0, // SocialDataService startIndex\n            isHighPriority: false, // SocialDataService isHighPriority\n            isPrivate: false, // SocialDataService isPrivate\n            rating: 1, // SocialDataService rating\n            maxResults: 10, // Unless otherwise specified, the maximum number of principals that can be returned from a provider is 10.\n            principalType: \"User\", // Specifies user scope and other information: [None | User | DistributionList | SecurityGroup | SharePointGroup | All]\n\n            async: true, // Allow the user to force async\n            completefunc: null // Function to call on completion\n\n        }; // End SPServices.defaults\n\n\n\n\n\n        // Main function, which calls SharePoint's Web Services directly.\n        var SPServices = {\n            defaults: defaults,\n            encodeXml: encodeXml,\n            generateXMLComponents: generateXMLComponents,\n            SCHEMASharePoint: SCHEMASharePoint,\n            SOAPEnvelope: new SOAPEnvelope()\n        };\n\n        function generateXMLComponents(options: SPServicesOptions) {\n\n            /** Key/Value mapping of SharePoint properties to SPServices properties */\n            var mapping = [\n                ['query', 'CAMLQuery'],\n                ['viewFields', 'CAMLViewFields'],\n                ['rowLimit', 'CAMLRowLimit'],\n                ['queryOptions', 'CAMLQueryOptions'],\n                ['listItemID', 'ID']\n            ];\n\n            /** Ensure the SharePoint properties are available prior to extending with defaults */\n            _.each(mapping, function(map) {\n                if (options[map[0]] && !options[map[1]]) {\n                    /** Ensure SPServices properties are added in the event the true property name is used */\n                    options[map[1]] = options[map[0]];\n                }\n            });\n\n            var soapEnvelope = new SOAPEnvelope();\n            var SOAPAction;\n\n            // If there are no options passed in, use the defaults.  Extend replaces each default with the passed option.\n            var opt: SPServicesOptions = _.assign({}, defaults, options);\n\n            // Encode options which may contain special character, esp. ampersand\n            _.each(encodeOptionList, function(optionName) {\n                if (_.isString(opt[optionName])) {\n                    opt[optionName] = encodeXml(opt[optionName]);\n                }\n            });\n\n            var service = apWebServiceOperationConstants[opt.operation][0];\n\n            // Put together operation header and SOAPAction for the SOAP call based on which Web Service we're calling\n            soapEnvelope.opheader = `<${opt.operation} xmlns=\"${apWebServiceService.xmlns(service) }\" >`;\n            SOAPAction = apWebServiceService.action(service);\n\n            // Add the operation to the SOAPAction and opfooter\n            SOAPAction += opt.operation;\n            soapEnvelope.opfooter = `</${opt.operation}>`;\n\n            // Each operation requires a different set of values.  This switch statement sets them up in the soapEnvelope.payload.\n            switch (opt.operation) {\n                // ALERT OPERATIONS\n                case \"GetAlerts\":\n                    break;\n                case \"DeleteAlerts\":\n                    soapEnvelope.payload += \"<IDs>\";\n                    for (i = 0; i < opt.IDs.length; i++) {\n                        soapEnvelope.payload += wrapNode(\"string\", opt.IDs[i]);\n                    }\n                    soapEnvelope.payload += \"</IDs>\";\n                    break;\n\n                // AUTHENTICATION OPERATIONS\n                case \"Mode\":\n                    break;\n                case \"Login\":\n                    addToPayload(opt, [\"username\", \"password\"]);\n                    break;\n\n                // COPY OPERATIONS\n                case \"CopyIntoItems\":\n                    addToPayload(opt, [\"SourceUrl\"]);\n                    soapEnvelope.payload += \"<DestinationUrls>\";\n                    for (i = 0; i < opt.DestinationUrls.length; i++) {\n                        soapEnvelope.payload += wrapNode(\"string\", opt.DestinationUrls[i]);\n                    }\n                    soapEnvelope.payload += \"</DestinationUrls>\";\n                    addToPayload(opt, [\"Fields\", \"Stream\", \"Results\"]);\n                    break;\n                case \"CopyIntoItemsLocal\":\n                    addToPayload(opt, [\"SourceUrl\"]);\n                    soapEnvelope.payload += \"<DestinationUrls>\";\n                    for (i = 0; i < opt.DestinationUrls.length; i++) {\n                        soapEnvelope.payload += wrapNode(\"string\", opt.DestinationUrls[i]);\n                    }\n                    soapEnvelope.payload += \"</DestinationUrls>\";\n                    break;\n                case \"GetItem\":\n                    addToPayload(opt, [\"Url\", \"Fields\", \"Stream\"]);\n                    break;\n\n                // FORM OPERATIONS\n                case \"GetForm\":\n                    addToPayload(opt, [\"listName\", \"formUrl\"]);\n                    break;\n                case \"GetFormCollection\":\n                    addToPayload(opt, [\"listName\"]);\n                    break;\n\n                // LIST OPERATIONS\n                case \"AddAttachment\":\n                    addToPayload(opt, [\"listName\", \"listItemID\", \"fileName\", \"attachment\"]);\n                    break;\n                case \"AddDiscussionBoardItem\":\n                    addToPayload(opt, [\"listName\", \"message\"]);\n                    break;\n                case \"AddList\":\n                    addToPayload(opt, [\"listName\", \"description\", \"templateID\"]);\n                    break;\n                case \"AddListFromFeature\":\n                    addToPayload(opt, [\"listName\", \"description\", \"featureID\", \"templateID\"]);\n                    break;\n                case \"ApplyContentTypeToList\":\n                    addToPayload(opt, [\"webUrl\", \"contentTypeId\", \"listName\"]);\n                    break;\n                case \"CheckInFile\":\n                    addToPayload(opt, [\"pageUrl\", \"comment\", \"CheckinType\"]);\n                    break;\n                case \"CheckOutFile\":\n                    addToPayload(opt, [\"pageUrl\", \"checkoutToLocal\", \"lastmodified\"]);\n                    break;\n                case \"CreateContentType\":\n                    addToPayload(opt, [\"listName\", \"displayName\", \"parentType\", \"fields\", \"contentTypeProperties\", \"addToView\"]);\n                    break;\n                case \"DeleteAttachment\":\n                    addToPayload(opt, [\"listName\", \"listItemID\", \"url\"]);\n                    break;\n                case \"DeleteContentType\":\n                    addToPayload(opt, [\"listName\", \"contentTypeId\"]);\n                    break;\n                case \"DeleteContentTypeXmlDocument\":\n                    addToPayload(opt, [\"listName\", \"contentTypeId\", \"documentUri\"]);\n                    break;\n                case \"DeleteList\":\n                    addToPayload(opt, [\"listName\"]);\n                    break;\n                case \"GetAttachmentCollection\":\n                    addToPayload(opt, [\"listName\", [\"listItemID\", \"ID\"]]);\n                    break;\n                case \"GetList\":\n                    addToPayload(opt, [\"listName\"]);\n                    break;\n                case \"GetListAndView\":\n                    addToPayload(opt, [\"listName\", \"viewName\"]);\n                    break;\n                case \"GetListCollection\":\n                    break;\n                case \"GetListContentType\":\n                    addToPayload(opt, [\"listName\", \"contentTypeId\"]);\n                    break;\n                case \"GetListContentTypes\":\n                    addToPayload(opt, [\"listName\"]);\n                    break;\n                case \"GetListItems\":\n                    addToPayload(opt,\n                        [\"listName\", \"viewName\",\n                            [\"query\", \"CAMLQuery\"],\n                            [\"viewFields\", \"CAMLViewFields\"],\n                            [\"rowLimit\", \"CAMLRowLimit\"],\n                            [\"queryOptions\", \"CAMLQueryOptions\"]\n                        ]);\n                    break;\n                case \"GetListItemChanges\":\n                    addToPayload(opt, [\"listName\", \"viewFields\", \"since\", \"contains\"]);\n                    break;\n                case \"GetListItemChangesSinceToken\":\n                    addToPayload(opt,\n                        [\"listName\", \"viewName\",\n                            [\"query\", \"CAMLQuery\"],\n                            [\"viewFields\", \"CAMLViewFields\"],\n                            [\"rowLimit\", \"CAMLRowLimit\"],\n                            [\"queryOptions\", \"CAMLQueryOptions\"],\n                            {\n                                name: \"changeToken\",\n                                sendNull: false\n                            },\n                            {\n                                name: \"contains\",\n                                sendNull: false\n                            }\n                        ]);\n                    break;\n                case \"GetVersionCollection\":\n                    addToPayload(opt, [\"strlistID\", \"strlistItemID\", \"strFieldName\"]);\n                    break;\n                case \"UndoCheckOut\":\n                    addToPayload(opt, [\"pageUrl\"]);\n                    break;\n                case \"UpdateContentType\":\n                    addToPayload(opt, [\"listName\", \"contentTypeId\", \"contentTypeProperties\", \"newFields\", \"updateFields\", \"deleteFields\", \"addToView\"]);\n                    break;\n                case \"UpdateContentTypesXmlDocument\":\n                    addToPayload(opt, [\"listName\", \"newDocument\"]);\n                    break;\n                case \"UpdateContentTypeXmlDocument\":\n                    addToPayload(opt, [\"listName\", \"contentTypeId\", \"newDocument\"]);\n                    break;\n                case \"UpdateList\":\n                    addToPayload(opt, [\"listName\", \"listProperties\", \"newFields\", \"updateFields\", \"deleteFields\", \"listVersion\"]);\n                    break;\n                case \"UpdateListItems\":\n                    addToPayload(opt, [\"listName\"]);\n                    if (typeof opt.updates !== \"undefined\" && opt.updates.length > 0) {\n                        addToPayload(opt, [\"updates\"]);\n                    } else {\n                        soapEnvelope.payload += `<updates><Batch OnError=\"Continue\"><Method ID=\"1\" Cmd=\"${opt.batchCmd}\">`;\n                        for (i = 0; i < opt.valuePairs.length; i++) {\n                            soapEnvelope.payload += `<Field Name=\"${opt.valuePairs[i][0]}\">${escapeColumnValue(opt.valuePairs[i][1]) }</Field>`;\n                        }\n                        if (opt.batchCmd !== \"New\") {\n                            soapEnvelope.payload += `<Field Name=\"ID\">${opt.ID}</Field>`;\n                        }\n                        soapEnvelope.payload += \"</Method></Batch></updates>\";\n                    }\n                    break;\n\n                // MEETINGS OPERATIONS\n                case \"AddMeeting\":\n                    addToPayload(opt, [\"organizerEmail\", \"uid\", \"sequence\", \"utcDateStamp\", \"title\", \"location\", \"utcDateStart\", \"utcDateEnd\", \"nonGregorian\"]);\n                    break;\n                case \"CreateWorkspace\":\n                    addToPayload(opt, [\"title\", \"templateName\", \"lcid\", \"timeZoneInformation\"]);\n                    break;\n                case \"RemoveMeeting\":\n                    addToPayload(opt, [\"recurrenceId\", \"uid\", \"sequence\", \"utcDateStamp\", \"cancelMeeting\"]);\n                    break;\n                case \"SetWorkspaceTitle\":\n                    addToPayload(opt, [\"title\"]);\n                    break;\n\n                // PEOPLE OPERATIONS\n                case \"ResolvePrincipals\":\n                    addToPayload(opt, [\"principalKeys\", \"principalType\", \"addToUserInfoList\"]);\n                    break;\n                case \"SearchPrincipals\":\n                    addToPayload(opt, [\"searchText\", \"maxResults\", \"principalType\"]);\n                    break;\n\n                // PERMISSION OPERATIONS\n                case \"AddPermission\":\n                    addToPayload(opt, [\"objectName\", \"objectType\", \"permissionIdentifier\", \"permissionType\", \"permissionMask\"]);\n                    break;\n                case \"AddPermissionCollection\":\n                    addToPayload(opt, [\"objectName\", \"objectType\", \"permissionsInfoXml\"]);\n                    break;\n                case \"GetPermissionCollection\":\n                    addToPayload(opt, [\"objectName\", \"objectType\"]);\n                    break;\n                case \"RemovePermission\":\n                    addToPayload(opt, [\"objectName\", \"objectType\", \"permissionIdentifier\", \"permissionType\"]);\n                    break;\n                case \"RemovePermissionCollection\":\n                    addToPayload(opt, [\"objectName\", \"objectType\", \"memberIdsXml\"]);\n                    break;\n                case \"UpdatePermission\":\n                    addToPayload(opt, [\"objectName\", \"objectType\", \"permissionIdentifier\", \"permissionType\", \"permissionMask\"]);\n                    break;\n\n                // PUBLISHEDLINKSSERVICE OPERATIONS\n                case \"GetLinks\":\n                    break;\n\n                // SEARCH OPERATIONS\n                case \"GetPortalSearchInfo\":\n                    soapEnvelope.opheader = \"<\" + opt.operation + \" xmlns='http://microsoft.com/webservices/OfficeServer/QueryService'>\";\n                    SOAPAction = \"http://microsoft.com/webservices/OfficeServer/QueryService/\" + opt.operation;\n                    break;\n                case \"GetQuerySuggestions\":\n                    soapEnvelope.opheader = \"<\" + opt.operation + \" xmlns='http://microsoft.com/webservices/OfficeServer/QueryService'>\";\n                    SOAPAction = \"http://microsoft.com/webservices/OfficeServer/QueryService/\" + opt.operation;\n                    soapEnvelope.payload += wrapNode(\"queryXml\", encodeXml(opt.queryXml));\n                    break;\n                case \"GetSearchMetadata\":\n                    soapEnvelope.opheader = \"<\" + opt.operation + \" xmlns='http://microsoft.com/webservices/OfficeServer/QueryService'>\";\n                    SOAPAction = \"http://microsoft.com/webservices/OfficeServer/QueryService/\" + opt.operation;\n                    break;\n                case \"Query\":\n                    soapEnvelope.payload += wrapNode(\"queryXml\", encodeXml(opt.queryXml));\n                    break;\n                case \"QueryEx\":\n                    soapEnvelope.opheader = \"<\" + opt.operation + \" xmlns='http://microsoft.com/webservices/OfficeServer/QueryService'>\";\n                    SOAPAction = \"http://microsoft.com/webservices/OfficeServer/QueryService/\" + opt.operation;\n                    soapEnvelope.payload += wrapNode(\"queryXml\", encodeXml(opt.queryXml));\n                    break;\n                case \"Registration\":\n                    soapEnvelope.payload += wrapNode(\"registrationXml\", encodeXml(opt.registrationXml));\n                    break;\n                case \"Status\":\n                    break;\n\n                // SHAREPOINTDIAGNOSTICS OPERATIONS\n                case \"SendClientScriptErrorReport\":\n                    addToPayload(opt, [\"message\", \"file\", \"line\", \"client\", \"stack\", \"team\", \"originalFile\"]);\n                    break;\n\n                // SITEDATA OPERATIONS\n                case \"EnumerateFolder\":\n                    addToPayload(opt, [\"strFolderUrl\"]);\n                    break;\n                case \"GetAttachments\":\n                    addToPayload(opt, [\"strListName\", \"strItemId\"]);\n                    break;\n                case \"SiteDataGetList\":\n                    addToPayload(opt, [\"strListName\"]);\n                    // Because this operation has a name which duplicates the Lists WS, need to handle\n                    soapEnvelope = siteDataFixSOAPEnvelope(soapEnvelope, opt.operation);\n                    break;\n                case \"SiteDataGetListCollection\":\n                    // Because this operation has a name which duplicates the Lists WS, need to handle\n                    soapEnvelope = siteDataFixSOAPEnvelope(soapEnvelope, opt.operation);\n                    break;\n                case \"SiteDataGetSite\":\n                    // Because this operation has a name which duplicates the Lists WS, need to handle\n                    soapEnvelope = siteDataFixSOAPEnvelope(soapEnvelope, opt.operation);\n                    break;\n                case \"SiteDataGetSiteUrl\":\n                    addToPayload(opt, [\"Url\"]);\n                    // Because this operation has a name which duplicates the Lists WS, need to handle\n                    soapEnvelope = siteDataFixSOAPEnvelope(soapEnvelope, opt.operation);\n                    break;\n                case \"SiteDataGetWeb\":\n                    // Because this operation has a name which duplicates the Lists WS, need to handle\n                    soapEnvelope = siteDataFixSOAPEnvelope(soapEnvelope, opt.operation);\n                    break;\n\n                // SITES OPERATIONS\n                case \"CreateWeb\":\n                    addToPayload(opt, [\"url\", \"title\", \"description\", \"templateName\", \"language\", \"languageSpecified\",\n                        \"locale\", \"localeSpecified\", \"collationLocale\", \"collationLocaleSpecified\", \"uniquePermissions\",\n                        \"uniquePermissionsSpecified\", \"anonymous\", \"anonymousSpecified\", \"presence\", \"presenceSpecified\"\n                    ]);\n                    break;\n                case \"DeleteWeb\":\n                    addToPayload(opt, [\"url\"]);\n                    break;\n                case \"GetSite\":\n                    addToPayload(opt, [\"SiteUrl\"]);\n                    break;\n                case \"GetSiteTemplates\":\n                    addToPayload(opt, [\"LCID\", \"TemplateList\"]);\n                    break;\n\n                // SOCIALDATASERVICE OPERATIONS\n                case \"AddComment\":\n                    addToPayload(opt, [\"url\", \"comment\", \"isHighPriority\", \"title\"]);\n                    break;\n                case \"AddTag\":\n                    addToPayload(opt, [\"url\", \"termID\", \"title\", \"isPrivate\"]);\n                    break;\n                case \"AddTagByKeyword\":\n                    addToPayload(opt, [\"url\", \"keyword\", \"title\", \"isPrivate\"]);\n                    break;\n                case \"CountCommentsOfUser\":\n                    addToPayload(opt, [\"userAccountName\"]);\n                    break;\n                case \"CountCommentsOfUserOnUrl\":\n                    addToPayload(opt, [\"userAccountName\", \"url\"]);\n                    break;\n                case \"CountCommentsOnUrl\":\n                    addToPayload(opt, [\"url\"]);\n                    break;\n                case \"CountRatingsOnUrl\":\n                    addToPayload(opt, [\"url\"]);\n                    break;\n                case \"CountTagsOfUser\":\n                    addToPayload(opt, [\"userAccountName\"]);\n                    break;\n                case \"DeleteComment\":\n                    addToPayload(opt, [\"url\", \"lastModifiedTime\"]);\n                    break;\n                case \"DeleteRating\":\n                    addToPayload(opt, [\"url\"]);\n                    break;\n                case \"DeleteTag\":\n                    addToPayload(opt, [\"url\", \"termID\"]);\n                    break;\n                case \"DeleteTagByKeyword\":\n                    addToPayload(opt, [\"url\", \"keyword\"]);\n                    break;\n                case \"DeleteTags\":\n                    addToPayload(opt, [\"url\"]);\n                    break;\n                case \"GetAllTagTerms\":\n                    addToPayload(opt, [\"maximumItemsToReturn\"]);\n                    break;\n                case \"GetAllTagTermsForUrlFolder\":\n                    addToPayload(opt, [\"urlFolder\", \"maximumItemsToReturn\"]);\n                    break;\n                case \"GetAllTagUrls\":\n                    addToPayload(opt, [\"termID\"]);\n                    break;\n                case \"GetAllTagUrlsByKeyword\":\n                    addToPayload(opt, [\"keyword\"]);\n                    break;\n                case \"GetCommentsOfUser\":\n                    addToPayload(opt, [\"userAccountName\", \"maximumItemsToReturn\", \"startIndex\"]);\n                    break;\n                case \"GetCommentsOfUserOnUrl\":\n                    addToPayload(opt, [\"userAccountName\", \"url\"]);\n                    break;\n                case \"GetCommentsOnUrl\":\n                    addToPayload(opt, [\"url\", \"maximumItemsToReturn\", \"startIndex\"]);\n                    if (typeof opt.excludeItemsTime !== \"undefined\" && opt.excludeItemsTime.length > 0) {\n                        soapEnvelope.payload += wrapNode(\"excludeItemsTime\", opt.excludeItemsTime);\n                    }\n                    break;\n                case \"GetRatingAverageOnUrl\":\n                    addToPayload(opt, [\"url\"]);\n                    break;\n                case \"GetRatingOfUserOnUrl\":\n                    addToPayload(opt, [\"userAccountName\", \"url\"]);\n                    break;\n                case \"GetRatingOnUrl\":\n                    addToPayload(opt, [\"url\"]);\n                    break;\n                case \"GetRatingsOfUser\":\n                    addToPayload(opt, [\"userAccountName\"]);\n                    break;\n                case \"GetRatingsOnUrl\":\n                    addToPayload(opt, [\"url\"]);\n                    break;\n                case \"GetSocialDataForFullReplication\":\n                    addToPayload(opt, [\"userAccountName\"]);\n                    break;\n                case \"GetTags\":\n                    addToPayload(opt, [\"url\"]);\n                    break;\n                case \"GetTagsOfUser\":\n                    addToPayload(opt, [\"userAccountName\", \"maximumItemsToReturn\", \"startIndex\"]);\n                    break;\n                case \"GetTagTerms\":\n                    addToPayload(opt, [\"maximumItemsToReturn\"]);\n                    break;\n                case \"GetTagTermsOfUser\":\n                    addToPayload(opt, [\"userAccountName\", \"maximumItemsToReturn\"]);\n                    break;\n                case \"GetTagTermsOnUrl\":\n                    addToPayload(opt, [\"url\", \"maximumItemsToReturn\"]);\n                    break;\n                case \"GetTagUrls\":\n                    addToPayload(opt, [\"termID\"]);\n                    break;\n                case \"GetTagUrlsByKeyword\":\n                    addToPayload(opt, [\"keyword\"]);\n                    break;\n                case \"GetTagUrlsOfUser\":\n                    addToPayload(opt, [\"termID\", \"userAccountName\"]);\n                    break;\n                case \"GetTagUrlsOfUserByKeyword\":\n                    addToPayload(opt, [\"keyword\", \"userAccountName\"]);\n                    break;\n                case \"SetRating\":\n                    addToPayload(opt, [\"url\", \"rating\", \"title\", \"analysisDataEntry\"]);\n                    break;\n                case \"UpdateComment\":\n                    addToPayload(opt, [\"url\", \"lastModifiedTime\", \"comment\", \"isHighPriority\"]);\n                    break;\n\n                // SPELLCHECK OPERATIONS\n                case \"SpellCheck\":\n                    addToPayload(opt, [\"chunksToSpell\", \"declaredLanguage\", \"useLad\"]);\n                    break;\n\n                // TAXONOMY OPERATIONS\n                case \"AddTerms\":\n                    addToPayload(opt, [\"sharedServiceId\", \"termSetId\", \"lcid\", \"newTerms\"]);\n                    break;\n                case \"GetChildTermsInTerm\":\n                    addToPayload(opt, [\"sspId\", \"lcid\", \"termId\", \"termSetId\"]);\n                    break;\n                case \"GetChildTermsInTermSet\":\n                    addToPayload(opt, [\"sspId\", \"lcid\", \"termSetId\"]);\n                    break;\n                case \"GetKeywordTermsByGuids\":\n                    addToPayload(opt, [\"termIds\", \"lcid\"]);\n                    break;\n                case \"GetTermsByLabel\":\n                    addToPayload(opt, [\"label\", \"lcid\", \"matchOption\", \"resultCollectionSize\", \"termIds\", \"addIfNotFound\"]);\n                    break;\n                case \"GetTermSets\":\n                    addToPayload(opt, [\"sharedServiceId\", \"termSetId\", \"lcid\", \"clientTimeStamps\", \"clientVersions\"]);\n                    break;\n\n                // USERS AND GROUPS OPERATIONS\n                case \"AddGroup\":\n                    addToPayload(opt, [\"groupName\", \"ownerIdentifier\", \"ownerType\", \"defaultUserLoginName\", \"description\"]);\n                    break;\n                case \"AddGroupToRole\":\n                    addToPayload(opt, [\"groupName\", \"roleName\"]);\n                    break;\n                case \"AddRole\":\n                    addToPayload(opt, [\"roleName\", \"description\", \"permissionMask\"]);\n                    break;\n                case \"AddRoleDef\":\n                    addToPayload(opt, [\"roleName\", \"description\", \"permissionMask\"]);\n                    break;\n                case \"AddUserCollectionToGroup\":\n                    addToPayload(opt, [\"groupName\", \"usersInfoXml\"]);\n                    break;\n                case \"AddUserCollectionToRole\":\n                    addToPayload(opt, [\"roleName\", \"usersInfoXml\"]);\n                    break;\n                case \"AddUserToGroup\":\n                    addToPayload(opt, [\"groupName\", \"userName\", \"userLoginName\", \"userEmail\", \"userNotes\"]);\n                    break;\n                case \"AddUserToRole\":\n                    addToPayload(opt, [\"roleName\", \"userName\", \"userLoginName\", \"userEmail\", \"userNotes\"]);\n                    break;\n                case \"GetAllUserCollectionFromWeb\":\n                    break;\n                case \"GetGroupCollection\":\n                    addToPayload(opt, [\"groupNamesXml\"]);\n                    break;\n                case \"GetGroupCollectionFromRole\":\n                    addToPayload(opt, [\"roleName\"]);\n                    break;\n                case \"GetGroupCollectionFromSite\":\n                    break;\n                case \"GetGroupCollectionFromUser\":\n                    addToPayload(opt, [\"userLoginName\"]);\n                    break;\n                case \"GetGroupCollectionFromWeb\":\n                    break;\n                case \"GetGroupInfo\":\n                    addToPayload(opt, [\"groupName\"]);\n                    break;\n                case \"GetRoleCollection\":\n                    addToPayload(opt, [\"roleNamesXml\"]);\n                    break;\n                case \"GetRoleCollectionFromGroup\":\n                    addToPayload(opt, [\"groupName\"]);\n                    break;\n                case \"GetRoleCollectionFromUser\":\n                    addToPayload(opt, [\"userLoginName\"]);\n                    break;\n                case \"GetRoleCollectionFromWeb\":\n                    break;\n                case \"GetRoleInfo\":\n                    addToPayload(opt, [\"roleName\"]);\n                    break;\n                case \"GetRolesAndPermissionsForCurrentUser\":\n                    break;\n                case \"GetRolesAndPermissionsForSite\":\n                    break;\n                case \"GetUserCollection\":\n                    addToPayload(opt, [\"userLoginNamesXml\"]);\n                    break;\n                case \"GetUserCollectionFromGroup\":\n                    addToPayload(opt, [\"groupName\"]);\n                    break;\n                case \"GetUserCollectionFromRole\":\n                    addToPayload(opt, [\"roleName\"]);\n                    break;\n                case \"GetUserCollectionFromSite\":\n                    break;\n                case \"GetUserCollectionFromWeb\":\n                    break;\n                case \"GetUserInfo\":\n                    addToPayload(opt, [\"userLoginName\"]);\n                    break;\n                case \"GetUserLoginFromEmail\":\n                    addToPayload(opt, [\"emailXml\"]);\n                    break;\n                case \"RemoveGroup\":\n                    addToPayload(opt, [\"groupName\"]);\n                    break;\n                case \"RemoveGroupFromRole\":\n                    addToPayload(opt, [\"roleName\", \"groupName\"]);\n                    break;\n                case \"RemoveRole\":\n                    addToPayload(opt, [\"roleName\"]);\n                    break;\n                case \"RemoveUserCollectionFromGroup\":\n                    addToPayload(opt, [\"groupName\", \"userLoginNamesXml\"]);\n                    break;\n                case \"RemoveUserCollectionFromRole\":\n                    addToPayload(opt, [\"roleName\", \"userLoginNamesXml\"]);\n                    break;\n                case \"RemoveUserCollectionFromSite\":\n                    addToPayload(opt, [\"userLoginNamesXml\"]);\n                    break;\n                case \"RemoveUserFromGroup\":\n                    addToPayload(opt, [\"groupName\", \"userLoginName\"]);\n                    break;\n                case \"RemoveUserFromRole\":\n                    addToPayload(opt, [\"roleName\", \"userLoginName\"]);\n                    break;\n                case \"RemoveUserFromSite\":\n                    addToPayload(opt, [\"userLoginName\"]);\n                    break;\n                case \"RemoveUserFromWeb\":\n                    addToPayload(opt, [\"userLoginName\"]);\n                    break;\n                case \"UpdateGroupInfo\":\n                    addToPayload(opt, [\"oldGroupName\", \"groupName\", \"ownerIdentifier\", \"ownerType\", \"description\"]);\n                    break;\n                case \"UpdateRoleDefInfo\":\n                    addToPayload(opt, [\"oldRoleName\", \"roleName\", \"description\", \"permissionMask\"]);\n                    break;\n                case \"UpdateRoleInfo\":\n                    addToPayload(opt, [\"oldRoleName\", \"roleName\", \"description\", \"permissionMask\"]);\n                    break;\n                case \"UpdateUserInfo\":\n                    addToPayload(opt, [\"userLoginName\", \"userName\", \"userEmail\", \"userNotes\"]);\n                    break;\n\n                // USERPROFILESERVICE OPERATIONS\n                case \"AddColleague\":\n                    addToPayload(opt, [\"accountName\", \"colleagueAccountName\", \"group\", \"privacy\", \"isInWorkGroup\"]);\n                    break;\n                case \"AddLink\":\n                    addToPayload(opt, [\"accountName\", \"name\", \"url\", \"group\", \"privacy\"]);\n                    break;\n                case \"AddMembership\":\n                    addToPayload(opt, [\"accountName\", \"membershipInfo\", \"group\", \"privacy\"]);\n                    break;\n                case \"AddPinnedLink\":\n                    addToPayload(opt, [\"accountName\", \"name\", \"url\"]);\n                    break;\n                case \"CreateMemberGroup\":\n                    addToPayload(opt, [\"membershipInfo\"]);\n                    break;\n                case \"CreateUserProfileByAccountName\":\n                    addToPayload(opt, [\"accountName\"]);\n                    break;\n                case \"GetCommonColleagues\":\n                    addToPayload(opt, [\"accountName\"]);\n                    break;\n                case \"GetCommonManager\":\n                    addToPayload(opt, [\"accountName\"]);\n                    break;\n                case \"GetCommonMemberships\":\n                    addToPayload(opt, [\"accountName\"]);\n                    break;\n                case \"GetInCommon\":\n                    addToPayload(opt, [\"accountName\"]);\n                    break;\n                case \"GetPropertyChoiceList\":\n                    addToPayload(opt, [\"propertyName\"]);\n                    break;\n                case \"GetUserColleagues\":\n                    addToPayload(opt, [\"accountName\"]);\n                    break;\n                case \"GetUserLinks\":\n                    addToPayload(opt, [\"accountName\"]);\n                    break;\n                case \"GetUserMemberships\":\n                    addToPayload(opt, [\"accountName\"]);\n                    break;\n                case \"GetUserPinnedLinks\":\n                    addToPayload(opt, [\"accountName\"]);\n                    break;\n                case \"GetUserProfileByGuid\":\n                    addToPayload(opt, [\"guid\"]);\n                    break;\n                case \"GetUserProfileByIndex\":\n                    addToPayload(opt, [\"index\"]);\n                    break;\n                case \"GetUserProfileByName\":\n                    // Note that this operation is inconsistent with the others, using AccountName rather than accountName\n                    if (typeof opt.accountName !== \"undefined\" && opt.accountName.length > 0) {\n                        addToPayload(opt, [\n                            [\"AccountName\", \"accountName\"]\n                        ]);\n                    } else {\n                        addToPayload(opt, [\"AccountName\"]);\n                    }\n                    break;\n                case \"GetUserProfileCount\":\n                    break;\n                case \"GetUserProfileSchema\":\n                    break;\n                case \"GetUserPropertyByAccountName\":\n                    addToPayload(opt, [\"accountName\", \"propertyName\"]);\n                    break;\n                case \"ModifyUserPropertyByAccountName\":\n                    addToPayload(opt, [\"accountName\", \"newData\"]);\n                    break;\n                case \"RemoveAllColleagues\":\n                    addToPayload(opt, [\"accountName\"]);\n                    break;\n                case \"RemoveAllLinks\":\n                    addToPayload(opt, [\"accountName\"]);\n                    break;\n                case \"RemoveAllMemberships\":\n                    addToPayload(opt, [\"accountName\"]);\n                    break;\n                case \"RemoveAllPinnedLinks\":\n                    addToPayload(opt, [\"accountName\"]);\n                    break;\n                case \"RemoveColleague\":\n                    addToPayload(opt, [\"accountName\", \"colleagueAccountName\"]);\n                    break;\n                case \"RemoveLink\":\n                    addToPayload(opt, [\"accountName\", \"id\"]);\n                    break;\n                case \"RemoveMembership\":\n                    addToPayload(opt, [\"accountName\", \"sourceInternal\", \"sourceReference\"]);\n                    break;\n                case \"RemovePinnedLink\":\n                    addToPayload(opt, [\"accountName\", \"id\"]);\n                    break;\n                case \"UpdateColleaguePrivacy\":\n                    addToPayload(opt, [\"accountName\", \"colleagueAccountName\", \"newPrivacy\"]);\n                    break;\n                case \"UpdateLink\":\n                    addToPayload(opt, [\"accountName\", \"data\"]);\n                    break;\n                case \"UpdateMembershipPrivacy\":\n                    addToPayload(opt, [\"accountName\", \"sourceInternal\", \"sourceReference\", \"newPrivacy\"]);\n                    break;\n                case \"UpdatePinnedLink \":\n                    addToPayload(opt, [\"accountName\", \"data\"]);\n                    break;\n\n                // VERSIONS OPERATIONS\n                case \"DeleteAllVersions\":\n                    addToPayload(opt, [\"fileName\"]);\n                    break;\n                case \"DeleteVersion\":\n                    addToPayload(opt, [\"fileName\", \"fileVersion\"]);\n                    break;\n                case \"GetVersions\":\n                    addToPayload(opt, [\"fileName\"]);\n                    break;\n                case \"RestoreVersion\":\n                    addToPayload(opt, [\"fileName\", \"fileVersion\"]);\n                    break;\n\n                // VIEW OPERATIONS\n                case \"AddView\":\n                    addToPayload(opt, [\"listName\", \"viewName\", \"viewFields\", \"query\", \"rowLimit\", \"rowLimit\", \"type\", \"makeViewDefault\"]);\n                    break;\n                case \"DeleteView\":\n                    addToPayload(opt, [\"listName\", \"viewName\"]);\n                    break;\n                case \"GetView\":\n                    addToPayload(opt, [\"listName\", \"viewName\"]);\n                    break;\n                case \"GetViewCollection\":\n                    addToPayload(opt, [\"listName\"]);\n                    break;\n                case \"GetViewHtml\":\n                    addToPayload(opt, [\"listName\", \"viewName\"]);\n                    break;\n                case \"UpdateView\":\n                    addToPayload(opt, [\"listName\", \"viewName\", \"viewProperties\", \"query\", \"viewFields\", \"aggregations\", \"formats\", \"rowLimit\"]);\n                    break;\n                case \"UpdateViewHtml\":\n                    addToPayload(opt, [\"listName\", \"viewName\", \"viewProperties\", \"toolbar\", \"viewHeader\", \"viewBody\", \"viewFooter\", \"viewEmpty\", \"rowLimitExceeded\",\n                        \"query\", \"viewFields\", \"aggregations\", \"formats\", \"rowLimit\"\n                    ]);\n                    break;\n\n                // WEBPARTPAGES OPERATIONS\n                case \"AddWebPart\":\n                    addToPayload(opt, [\"pageUrl\", \"webPartXml\", \"storage\"]);\n                    break;\n                case \"AddWebPartToZone\":\n                    addToPayload(opt, [\"pageUrl\", \"webPartXml\", \"storage\", \"zoneId\", \"zoneIndex\"]);\n                    break;\n                case \"GetWebPart2\":\n                    addToPayload(opt, [\"pageUrl\", \"storageKey\", \"storage\", \"behavior\"]);\n                    break;\n                case \"GetWebPartPage\":\n                    addToPayload(opt, [\"documentName\", \"behavior\"]);\n                    break;\n                case \"GetWebPartProperties\":\n                    addToPayload(opt, [\"pageUrl\", \"storage\"]);\n                    break;\n                case \"GetWebPartProperties2\":\n                    addToPayload(opt, [\"pageUrl\", \"storage\", \"behavior\"]);\n                    break;\n\n                // WEBS OPERATIONS\n                case \"Webs.CreateContentType\":\n                    addToPayload(opt, [\"displayName\", \"parentType\", \"newFields\", \"contentTypeProperties\"]);\n                    break;\n                case \"GetColumns\":\n                    addToPayload(opt, [\"webUrl\"]);\n                    break;\n                case \"GetContentType\":\n                    addToPayload(opt, [\"contentTypeId\"]);\n                    break;\n                case \"GetContentTypes\":\n                    break;\n                case \"GetCustomizedPageStatus\":\n                    addToPayload(opt, [\"fileUrl\"]);\n                    break;\n                case \"GetListTemplates\":\n                    break;\n                case \"GetObjectIdFromUrl\":\n                    addToPayload(opt, [\"objectUrl\"]);\n                    break;\n                case \"GetWeb\":\n                    addToPayload(opt, [\n                        [\"webUrl\", \"webURL\"]\n                    ]);\n                    break;\n                case \"GetWebCollection\":\n                    break;\n                case \"GetAllSubWebCollection\":\n                    break;\n                case \"UpdateColumns\":\n                    addToPayload(opt, [\"newFields\", \"updateFields\", \"deleteFields\"]);\n                    break;\n                case \"Webs.UpdateContentType\":\n                    addToPayload(opt, [\"contentTypeId\", \"contentTypeProperties\", \"newFields\", \"updateFields\", \"deleteFields\"]);\n                    break;\n                case \"WebUrlFromPageUrl\":\n                    addToPayload(opt, [\n                        [\"pageUrl\", \"pageURL\"]\n                    ]);\n                    break;\n\n                // WORKFLOW OPERATIONS\n                case \"AlterToDo\":\n                    addToPayload(opt, [\"item\", \"todoId\", \"todoListId\", \"taskData\"]);\n                    break;\n                case \"ClaimReleaseTask\":\n                    addToPayload(opt, [\"item\", \"taskId\", \"listId\", \"fClaim\"]);\n                    break;\n                case \"GetTemplatesForItem\":\n                    addToPayload(opt, [\"item\"]);\n                    break;\n                case \"GetToDosForItem\":\n                    addToPayload(opt, [\"item\"]);\n                    break;\n                case \"GetWorkflowDataForItem\":\n                    addToPayload(opt, [\"item\"]);\n                    break;\n                case \"GetWorkflowTaskData\":\n                    addToPayload(opt, [\"item\", \"listId\", \"taskId\"]);\n                    break;\n                case \"StartWorkflow\":\n                    addToPayload(opt, [\"item\", \"templateId\", \"workflowParameters\"]);\n                    break;\n\n                default:\n                    break;\n            }\n\n            // Glue together the pieces of the SOAP message\n            var msg = soapEnvelope.header + soapEnvelope.opheader + soapEnvelope.payload + soapEnvelope.opfooter + soapEnvelope.footer;\n            var soapAction = apWebServiceOperationConstants[opt.operation][1] ? SOAPAction : false;\n\n            return {\n                msg: msg,\n                SOAPEnvelope: soapEnvelope,\n                SOAPAction: soapAction\n            };\n\n            // Add the option values to the soapEnvelope.payload for the operation\n            //  opt = options for the call\n            //  paramArray = an array of option names to add to the payload\n            //      \"paramName\" if the parameter name and the option name match\n            //      [\"paramName\", \"optionName\"] if the parameter name and the option name are different (this handles early \"wrappings\" with inconsistent naming)\n            //      {name: \"paramName\", sendNull: false} indicates the element is marked as \"add to payload only if non-null\"\n            function addToPayload(opt, paramArray) {\n\n                var i;\n\n                for (i = 0; i < paramArray.length; i++) {\n                    // the parameter name and the option name match\n                    if (typeof paramArray[i] === \"string\") {\n                        soapEnvelope.payload += wrapNode(paramArray[i], opt[paramArray[i]]);\n                        // the parameter name and the option name are different\n                    } else if (_.isArray(paramArray[i]) && paramArray[i].length === 2) {\n                        soapEnvelope.payload += wrapNode(paramArray[i][0], opt[paramArray[i][1]]);\n                        // the element not a string or an array and is marked as \"add to payload only if non-null\"\n                    } else if ((typeof paramArray[i] === \"object\") && (paramArray[i].sendNull !== undefined)) {\n                        soapEnvelope.payload += ((opt[paramArray[i].name] === undefined) || (opt[paramArray[i].name].length === 0)) ? \"\" : wrapNode(paramArray[i].name, opt[paramArray[i].name]);\n                        // something isn't right, so report it\n                    } else {\n                        console.error(opt.operation, \"paramArray[\" + i + \"]: \" + paramArray[i], \"Invalid paramArray element passed to addToPayload()\");\n                    }\n                }\n            } // End of function addToPayload\n\n            // The SiteData operations have the same names as other Web Service operations. To make them easy to call and unique, I'm using\n            // the SiteData prefix on their names. This function replaces that name with the right name in the soapEnvelope.\n            function siteDataFixSOAPEnvelope(SOAPEnvelope, siteDataOperation) {\n                var siteDataOp = siteDataOperation.substring(8);\n                SOAPEnvelope.opheader = SOAPEnvelope.opheader.replace(siteDataOperation, siteDataOp);\n                SOAPEnvelope.opfooter = SOAPEnvelope.opfooter.replace(siteDataOperation, siteDataOp);\n                return SOAPEnvelope;\n            } // End of function siteDataFixSOAPEnvelope\n\n\n        }; // End SPServices.generateXMLComponents\n\n\n        ////// PRIVATE FUNCTIONS ////////\n        // Wrap an XML node (n) around a value (v)\n        function wrapNode(n, v) {\n            var thisValue = typeof v !== \"undefined\" ? v : \"\";\n            return \"<\" + n + \">\" + thisValue + \"</\" + n + \">\";\n        }\n\n        // Get the filename from the full URL\n        function fileName(s) {\n            return s.substring(s.lastIndexOf(\"/\") + 1, s.length);\n        }\n\n        /* Taken from http://dracoblue.net/dev/encodedecode-special-xml-characters-in-javascript/155/ */\n        var xml_special_to_escaped_one_map = {\n            '&': '&amp;',\n            '\"': '&quot;',\n            '<': '&lt;',\n            '>': '&gt;'\n        };\n\n        function encodeXml(string) {\n            return string.replace(/([\\&\"<>])/g, function(str, item) {\n                return xml_special_to_escaped_one_map[item];\n            });\n        }\n\n        /* Taken from http://dracoblue.net/dev/encodedecode-special-xml-characters-in-javascript/155/ */\n        // Escape column values\n        function escapeColumnValue(s) {\n            if (typeof s === \"string\") {\n                return s.replace(/&(?![a-zA-Z]{1,8};)/g, \"&amp;\");\n            } else {\n                return s;\n            }\n        }\n\n        // James Padolsey's Regex Selector for jQuery http://james.padolsey.com/javascript/regex-selector-for-jquery/\n        $.expr[':'].regex = function(elem, index, match) {\n            var matchParams = match[3].split(','),\n                validLabels = /^(data|css):/,\n                attr = {\n                    method: matchParams[0].match(validLabels) ?\n                        matchParams[0].split(':')[0] : 'attr',\n                    property: matchParams.shift().replace(validLabels, '')\n                },\n                regexFlags = 'ig',\n                regex = new RegExp(matchParams.join('').replace(/^\\s+|\\s+$/g, ''), regexFlags);\n            return regex.test(jQuery(elem)[attr.method](attr.property));\n        };\n\n        return SPServices;\n\n    }\n\n\n    /**\n     * @ngdoc service\n     * @name angularPoint.SPServices\n     * @description\n     * This is just a trimmed down version of Marc Anderson's awesome [SPServices](http://spservices.codeplex.com/) library.\n     * We're primarily looking for the ability to create the SOAP envelope and let AngularJS's $http service handle all\n     * communication with the server.\n     *\n     * */\n    angular.module('angularPoint')\n        .factory('SPServices', Service);\n}\n","/// <reference path=\"../app.module.ts\" />\n\n\nmodule ap {\n    'use strict';\n\n    interface _ {\n        isDefined(val): boolean;\n        isGuid(val): boolean;\n    }\n\n\n    // Split values like 1;#value into id and value\n    class SplitIndex {\n        id: number;\n        value: string;\n\n        constructor(str) {\n            var spl = str.split(';#');\n            this.id = parseInt(spl[0], 10);\n            this.value = spl[1];\n        }\n    }\n\n    var service: UtilityService, $q, apConfig, $timeout;\n\n    export class UtilityService {\n        SplitIndex = SplitIndex;\n        static $inject = ['$q', '$timeout', 'apConfig'];\n\n        constructor(_$q_, _$timeout_, _apConfig_) {\n            service = this;\n            $q = _$q_;\n            $timeout = _$timeout_;\n            apConfig = _apConfig_;\n\n        }\n                \n        /**\n         * @ngdoc function\n         * @name angularPoint.apUtilityService:batchProcess\n         * @methodOf angularPoint.apUtilityService\n         * @description\n         * We REALLY don't want to lock the user's browser (blocking the UI thread) while iterating over an array of\n         * entities and performing some process on them.  This function cuts the process into as many 50ms chunks as are\n         * necessary. Based on example found in the following article:\n         * [Timed array processing in JavaScript](http://www.nczonline.net/blog/2009/08/11/timed-array-processing-in-javascript/);\n         * @param {Object[]} entities The entities that need to be processed.\n         * @param {Function} process Reference to the process to be executed for each of the entities.\n         * @param {Object} context this\n         * @param {Number} [delay=25] Number of milliseconds to delay between batches.\n         * @param {Number} [maxItems=entities.length] Maximum number of entities to process before pausing.\n         * @returns {Object} Promise\n         * @example\n         * <pre>\n         * function buildProjectSummary = function() {\n             *    var deferred = $q.defer();\n             *\n             *    // Taken from a fictitious projectsModel.js\n             *    projectModel.getAllListItems().then(function(entities) {\n             *      var summaryObject = {};\n             *      var extendProjectSummary = function(project) {\n             *          // Do some process intensive stuff here\n             *\n             *      };\n             *\n             *      // Now that we have all of our projects we want to iterate\n             *      // over each to create our summary object. The problem is\n             *      // this could easily cause the page to hang with a sufficient\n             *      // number of entities.\n             *      apUtilityService.batchProcess(entities, extendProjectSummary, function() {\n             *          // Long running process is complete so resolve promise\n             *          deferred.resolve(summaryObject);\n             *      }, 25, 1000);\n             *    };\n             *\n             *    return deferred.promise;\n             * }\n         *\n         * </pre>\n         */\n\n        batchProcess(entities, process, context, delay, maxItems) {\n            var itemCount = entities.length,\n                batchCount = 0,\n                chunkMax = maxItems || itemCount,\n                delay = delay || 25,\n                index = 0,\n                deferred = $q.defer();\n\n            function chunkTimer() {\n                batchCount++;\n                var start = +new Date(),\n                    chunkIndex = index;\n\n                while (index < itemCount && (index - chunkIndex) < chunkMax && (new Date() - start < 100)) {\n                    process.call(context, entities[index], index, batchCount);\n                    index += 1;\n                }\n\n                if (index < itemCount) {\n                    $timeout(chunkTimer, delay);\n                }\n                else {\n                    deferred.resolve(entities);\n                }\n            }\n\n            chunkTimer();\n\n            return deferred.promise;\n        }\n        \n        \n        /**\n         * @ngdoc function\n         * @name angularPoint.apUtilityService:convertEffectivePermMask\n         * @methodOf angularPoint.apUtilityService\n         * @description\n         * GetListItemsSinceToken operation returns the list element with an EffectivePermMask attribute which is the\n         * name of the PermissionMask.  We then need to convert the name into an actual mask so this function contains\n         * the known permission names with their masks.  If a provided mask name is found, the cooresponding mask\n         * is returned.  Otherwise returns null.  [MSDN Source](http://msdn.microsoft.com/en-us/library/jj575178(v=office.12).aspx)\n         * @param {string} permMaskName Permission mask name.\n         * @returns {string|null} Return the mask for the name.\n         */\n        convertEffectivePermMask(permMaskName: string): string {\n            var permissionMask = null;\n\n            var permissions = {\n                //General\n                EmptyMask: '0x0000000000000000',\n                FullMask: '0x7FFFFFFFFFFFFFFF',\n\n                //List and document permissions\n                ViewListItems: '0x0000000000000001',\n                AddListItems: '',\n                EditListItems: '0x0000000000000004',\n                DeleteListItems: '0x0000000000000008',\n                ApproveItems: '0x0000000000000010',\n                OpenItems: '0x0000000000000020',\n                ViewVersions: '0x0000000000000040',\n                DeleteVersions: '0x0000000000000080',\n                CancelCheckout: '0x0000000000000100',\n                ManagePersonalViews: '0x0000000000000200',\n                ManageLists: '0x0000000000000800',\n                ViewFormPages: '0x0000000000001000',\n\n                //Web level permissions\n                Open: '0x0000000000010000',\n                ViewPages: '0x0000000000020000',\n                AddAndCustomizePages: '0x0000000000040000',\n                ApplyThemeAndBorder: '0x0000000000080000',\n                ApplyStyleSheets: '0x0000000000100000',\n                ViewUsageData: '0x0000000000200000',\n                CreateSSCSite: '0x0000000000400000',\n                ManageSubwebs: '0x0000000000800000',\n                CreateGroups: '0x0000000001000000',\n                ManagePermissions: '0x0000000002000000',\n                BrowseDirectories: '0x0000000004000000',\n                BrowseUserInfo: '0x0000000008000000',\n                AddDelPrivateWebParts: '0x0000000010000000',\n                UpdatePersonalWebParts: '0x0000000020000000',\n                ManageWeb: '0x0000000040000000',\n                UseClientIntegration: '0x0000001000000000',\n                UseRemoteAPIs: '0x0000002000000000',\n                ManageAlerts: '0x0000004000000000',\n                CreateAlerts: '0x0000008000000000',\n                EditMyUserInfo: '0x0000010000000000',\n\n                //Special Permissions\n                EnumeratePermissions: '0x4000000000000000'\n            };\n\n            if (permissions[permMaskName]) {\n                permissionMask = permissions[permMaskName];\n            }\n            return permissionMask;\n        }\n        \n        /**\n         * @ngdoc function\n         * @name angularPoint.apUtilityService:dateWithinRange\n         * @methodOf angularPoint.apUtilityService\n         * @description\n         * Converts dates into yyyymmdd formatted ints and evaluates to determine if the dateToCheck\n         * falls within the date range provided\n         * @param {Date} startDate Starting date.\n         * @param {Date} endDate Ending date.\n         * @param {Date} [dateToCheck=new Date()] Defaults to the current date.\n         * @returns {boolean} Does the date fall within the range?\n         */\n        dateWithinRange(startDate: Date, endDate: Date, dateToCheck = new Date()): boolean {\n            /** Ensure both a start and end date are provided **/\n            if (!startDate || !endDate) {\n                return false;\n            }\n\n            /** Create an int representation of each of the dates */\n            var startInt = service.yyyymmdd(startDate);\n            var endInt = service.yyyymmdd(endDate);\n            var dateToCheckInt = service.yyyymmdd(dateToCheck);\n\n            return startInt <= dateToCheckInt && dateToCheckInt <= endInt;\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apUtilityService:doubleDigit\n         * @methodOf angularPoint.apUtilityService\n         * @description Add a leading zero if a number/string only contains a single character.  So in the case\n         * where the number 9 is passed in the string '09' is returned.\n         * @param {(number|string)} val A number or string to evaluate.\n         * @returns {string} Two digit string.\n         */\n        doubleDigit(val: number | string): string {\n            if (typeof val === 'number') {\n                return val > 9 ? val.toString() : '0' + val;\n            } else {\n                return service.doubleDigit(parseInt(val));\n            }\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apUtilityService:fromCamelCase\n         * @methodOf angularPoint.apUtilityService\n         * @param {string} str String to convert.\n         * @description\n         * Converts a camel case string into a space delimited string with each word having a capitalized first letter.\n         * @returns {string} Humanized string.\n         */\n        fromCamelCase(str): string {\n            // insert a space before all caps\n            return str.replace(/([A-Z])/g, ' $1')\n            // uppercase the first character\n                .replace(/^./, function(str) {\n                    return str.toUpperCase();\n                });\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apUtilityService:registerChange\n         * @methodOf angularPoint.apUtilityService\n         * @description\n         * If online and sync is being used, notify all online users that a change has been made.\n         * //Todo Break this functionality into FireBase module that can be used if desired.\n         * @param {object} model event\n         */\n        registerChange(model, changeType: string, listItemId: number) {\n            /** Disabled this functionality until I can spend the necessary time to test */\n            if (model.sync && _.isFunction(model.sync.registerChange)) {\n                /** Register change after successful update */\n                model.sync.registerChange(changeType, listItemId);\n            }\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apUtilityService:resolvePermissions\n         * @methodOf angularPoint.apUtilityService\n         * @param {string} permissionsMask The WSS Rights Mask is an 8-byte, unsigned integer that specifies\n         * the rights that can be assigned to a user or site group. This bit mask can have zero or more flags set.\n         * @description\n         * Converts permMask into something usable to determine permission level for current user.  Typically used\n         * directly from a list item.  See ListItem.resolvePermissions.\n         *\n         * <h3>Additional Info</h3>\n         *\n         * -   [PermMask in SharePoint DVWPs](http://sympmarc.com/2009/02/03/permmask-in-sharepoint-dvwps/)\n         * -   [$().SPServices.SPLookupAddNew and security trimming](http://spservices.codeplex.com/discussions/208708)\n         *\n         * @returns {object} Object with properties for each permission level identifying if current user has rights (true || false)\n         * @example\n         * <pre>\n         * var perm = apUtilityService.resolvePermissions('0x0000000000000010');\n         * </pre>\n         * Example of what the returned object would look like\n         * for a site admin.\n         * <pre>\n         * perm = {\n             *    \"ViewListItems\":true,\n             *    \"AddListItems\":true,\n             *    \"EditListItems\":true,\n             *    \"DeleteListItems\":true,\n             *    \"ApproveItems\":true,\n             *    \"OpenItems\":true,\n             *    \"ViewVersions\":true,\n             *    \"DeleteVersions\":true,\n             *    \"CancelCheckout\":true,\n             *    \"PersonalViews\":true,\n             *    \"ManageLists\":true,\n             *    \"ViewFormPages\":true,\n             *    \"Open\":true,\n             *    \"ViewPages\":true,\n             *    \"AddAndCustomizePages\":true,\n             *    \"ApplyThemeAndBorder\":true,\n             *    \"ApplyStyleSheets\":true,\n             *    \"ViewUsageData\":true,\n             *    \"CreateSSCSite\":true,\n             *    \"ManageSubwebs\":true,\n             *    \"CreateGroups\":true,\n             *    \"ManagePermissions\":true,\n             *    \"BrowseDirectories\":true,\n             *    \"BrowseUserInfo\":true,\n             *    \"AddDelPrivateWebParts\":true,\n             *    \"UpdatePersonalWebParts\":true,\n             *    \"ManageWeb\":true,\n             *    \"UseRemoteAPIs\":true,\n             *    \"ManageAlerts\":true,\n             *    \"CreateAlerts\":true,\n             *    \"EditMyUserInfo\":true,\n             *    \"EnumeratePermissions\":true,\n             *    \"FullMask\":true\n             * }\n         * </pre>\n         */\n        resolvePermissions(permissionsMask): IUserPermissionsObject {\n            var permissionSet = {\n                ViewListItems: (1 & permissionsMask) > 0,\n                AddListItems: (2 & permissionsMask) > 0,\n                EditListItems: (4 & permissionsMask) > 0,\n                DeleteListItems: (8 & permissionsMask) > 0,\n                ApproveItems: (16 & permissionsMask) > 0,\n                OpenItems: (32 & permissionsMask) > 0,\n                ViewVersions: (64 & permissionsMask) > 0,\n                DeleteVersions: (128 & permissionsMask) > 0,\n                CancelCheckout: (256 & permissionsMask) > 0,\n                PersonalViews: (512 & permissionsMask) > 0,\n\n                ManageLists: (2048 & permissionsMask) > 0,\n                ViewFormPages: (4096 & permissionsMask) > 0,\n\n                Open: (permissionsMask & 65536) > 0,\n                ViewPages: (permissionsMask & 131072) > 0,\n                AddAndCustomizePages: (permissionsMask & 262144) > 0,\n                ApplyThemeAndBorder: (permissionsMask & 524288) > 0,\n                ApplyStyleSheets: (1048576 & permissionsMask) > 0,\n                ViewUsageData: (permissionsMask & 2097152) > 0,\n                CreateSSCSite: (permissionsMask & 4194314) > 0,\n                ManageSubwebs: (permissionsMask & 8388608) > 0,\n                CreateGroups: (permissionsMask & 16777216) > 0,\n                ManagePermissions: (permissionsMask & 33554432) > 0,\n                BrowseDirectories: (permissionsMask & 67108864) > 0,\n                BrowseUserInfo: (permissionsMask & 134217728) > 0,\n                AddDelPrivateWebParts: (permissionsMask & 268435456) > 0,\n                UpdatePersonalWebParts: (permissionsMask & 536870912) > 0,\n                ManageWeb: (permissionsMask & 1073741824) > 0,\n                UseRemoteAPIs: (permissionsMask & 137438953472) > 0,\n                ManageAlerts: (permissionsMask & 274877906944) > 0,\n                CreateAlerts: (permissionsMask & 549755813888) > 0,\n                EditMyUserInfo: (permissionsMask & 1099511627776) > 0,\n                EnumeratePermissions: (permissionsMask & 4611686018427387904) > 0,\n                FullMask: (permissionsMask == 9223372036854775807)\n            };\n\n            /**\n             * Full Mask only resolves correctly for the Full Mask level\n             * so in that case, set everything to true\n             */\n            if (permissionSet.FullMask) {\n                _.each(permissionSet, function(perm, key) {\n                    permissionSet[key] = true;\n                });\n            }\n\n            return permissionSet;\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apUtilityService:stringifyXML\n         * @methodOf angularPoint.apUtilityService\n         * @description Simple utility to convert an XML object into a string and remove unnecessary whitespace.\n         * @param {object} xml XML object.\n         * @returns {string} Stringified version of the XML object.\n         */\n        stringifyXML(xml: XMLDocument): string {\n            var str;\n\n            if (_.isObject(xml)) {\n                str = service.xmlToString(xml).replace(/\\s+/g, ' ');\n            } else if (_.isString(xml)) {\n                str = xml;\n            }\n            return str;\n        }\n\n\n        toCamelCase(str): string {\n            return str.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function(letter, index) {\n                return index == 0 ? letter.toLowerCase() : letter.toUpperCase();\n            }).replace(/\\s+/g, '');\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apUtilityService:yyyymmdd\n         * @methodOf angularPoint.apUtilityService\n         * @description\n         * Convert date into a int formatted as yyyymmdd\n         * We don't need the time portion of comparison so an int makes this easier to evaluate\n         */\n        yyyymmdd(date: Date): number {\n            var yyyy = date.getFullYear();\n            var mm = date.getMonth() + 1;\n            var dd = date.getDate();\n            /** Add leading 0's to month and day if necessary */\n            return parseInt(yyyy + service.doubleDigit(mm) + service.doubleDigit(dd));\n        }\n\n        xmlToString(xmlData) {\n            var xmlString;\n            if (typeof XMLSerializer !== 'undefined') {\n                /** Modern Browsers */\n                xmlString = (new XMLSerializer()).serializeToString(xmlData);\n            } else {\n                /** Old versions of IE */\n                xmlString = xmlData.xml;\n            }\n            return xmlString;\n        }\n\n\n    }\n\n    /** Extend underscore with a simple helper function */\n    _.mixin({\n        isDefined: function(value) {\n            return !_.isUndefined(value);\n        },\n        /** Based on functionality in Breeze.js */\n        isGuid: function(value) {\n            return (typeof value === \"string\") && /[a-fA-F\\d]{8}-(?:[a-fA-F\\d]{4}-){3}[a-fA-F\\d]{12}/\n                .test(value);\n        }\n    });\n\n\n    /**\n     * @ngdoc service\n     * @name angularPoint.apUtilityService\n     * @description\n     * Provides shared utility functionality across the application.\n     *\n     * @requires angularPoint.apConfig\n     */\n    angular.module('angularPoint')\n        .service('apUtilityService', UtilityService);\n\n}\n","/// <reference path=\"../app.module.ts\" />\n\nmodule ap {\n    'use strict';\n\n    var SCHEMASharePoint = \"http://schemas.microsoft.com/sharepoint\";\n    var serviceDefinitions = {\n        Alerts: {\n            action: SCHEMASharePoint + '/soap/2002/1/alerts/',\n            xmlns: SCHEMASharePoint + '/soap/2002/1/alerts/'\n        },\n        Meetings: {\n            action: SCHEMASharePoint + '/soap/meetings/',\n            xmlns: SCHEMASharePoint + '/soap/meetings/'\n        },\n        Permissions: {\n            action: SCHEMASharePoint + '/soap/directory/',\n            xmlns: SCHEMASharePoint + '/soap/directory/'\n        },\n        PublishedLinksService: {\n            action: 'http://microsoft.com/webservices/SharePointPortalServer/PublishedLinksService/',\n            xmlns: 'http://microsoft.com/webservices/SharePointPortalServer/PublishedLinksService/'\n        },\n        Search: {\n            action: 'urn:Microsoft.Search/',\n            xmlns: 'urn:Microsoft.Search'\n        },\n        SharePointDiagnostics: {\n            action: 'http://schemas.microsoft.com/sharepoint/diagnostics/',\n            xmlns: SCHEMASharePoint + '/diagnostics/'\n        },\n        SocialDataService: {\n            action: 'http://microsoft.com/webservices/SharePointPortalServer/SocialDataService/',\n            xmlns: 'http://microsoft.com/webservices/SharePointPortalServer/SocialDataService'\n        },\n        SpellCheck: {\n            action: 'http://schemas.microsoft.com/sharepoint/publishing/spelling/SpellCheck',\n            xmlns: 'http://schemas.microsoft.com/sharepoint/publishing/spelling/'\n        },\n        TaxonomyClientService: {\n            action: SCHEMASharePoint + '/taxonomy/soap/',\n            xmlns: SCHEMASharePoint + '/taxonomy/soap/'\n        },\n        usergroup: {\n            action: SCHEMASharePoint + '/soap/directory/',\n            xmlns: SCHEMASharePoint + '/soap/directory/'\n        },\n        UserProfileService: {\n            action: 'http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/',\n            xmlns: 'http://microsoft.com/webservices/SharePointPortalServer/UserProfileService'\n        },\n        WebPartPages: {\n            action: 'http://microsoft.com/sharepoint/webpartpages/',\n            xmlns: 'http://microsoft.com/sharepoint/webpartpages'\n        },\n        Workflow: {\n            action: SCHEMASharePoint + '/soap/workflow/',\n            xmlns: SCHEMASharePoint + '/soap/workflow/'\n        }\n    };\n\n    export class WebServiceService{\n        action(service) {\n            return serviceDefinitions[service] ? serviceDefinitions[service].action : SCHEMASharePoint + '/soap/';\n        }\n        webServices = [\n            'Alerts',\n            'Authentication',\n            'Copy',\n            'Forms',\n            'Lists',\n            'Meetings',\n            'People',\n            'Permissions',\n            'PublishedLinksService',\n            'Search',\n            'SharePointDiagnostics',\n            'SiteData',\n            'Sites',\n            'SocialDataService',\n            'SpellCheck',\n            'TaxonomyClientService',\n            'usergroup',\n            'UserProfileService',\n            'Versions',\n            'Views',\n            'WebPartPages',\n            'Webs',\n            'Workflow'\n        ];\n        xmlns(service) {\n            return serviceDefinitions[service] ? serviceDefinitions[service].xmlns : SCHEMASharePoint + '/soap/';\n        }\n    }\n\n\n//  apWebServiceOperationConstants.OpName = [WebService, needs_SOAPAction];\n//      OpName              The name of the Web Service operation -> These names are unique\n//      WebService          The name of the WebService this operation belongs to\n//      needs_SOAPAction    Boolean indicating whether the operation needs to have the SOAPAction passed in the\n// setRequestHeaderfunction. true if the operation does a write, else false\n    angular.module('angularPoint')\n        .service('apWebServiceService', WebServiceService);\n\n}\n","/// <reference path=\"../app.module.ts\" />\n\nmodule ap {\n    'use strict';\n\n    export class XMLToJSONService {\n        static $inject = ['$injector'];\n\n        constructor(private $injector: ng.auto.IInjectorService) {\n\n        }\n\n        /**\n         * @ngdoc function\n         * @name apXMLToJSONService.filterXMLNodeService\n         * @methodOf apXMLToJSONService\n         * @param {JQuery|Object} xmlObject Object to parse, can either be a jQuery object or an xml response.\n         * @param {string} name Name of node we're looking for.\n         * @description\n         * This method for finding specific nodes in the returned XML was developed by Steve Workman. See his blog post\n         * http://www.steveworkman.com/html5-2/javascript/2011/improving-javascript-xml-node-finding-performance-by-2000/\n         * for performance details.\n         * @returns {JQuery} Object with jQuery values.\n         */\n        filterNodes(xmlObject: JQuery | Object, name: string): JQuery {\n            //Convert to jQuery object if not already\n            var jQueryObject: JQuery = xmlObject instanceof jQuery ? xmlObject : $(xmlObject);\n\n            return jQueryObject.find('*').filter(function() {\n                return this.nodeName === name;\n            });\n        }\n\n        /**\n         * @ngdoc function\n         * @name apXMLToJSONService.parse\n         * @methodOf apXMLToJSONService\n         * @param {JQuery|XMLDocument} xmlObject Object to parse, can either be a jQuery object or an xml response.\n         * @param {string} name Name of node we're looking for.\n         * @description\n         * This method for finding specific nodes in the returned XML was developed by Steve Workman. See his blog post\n         * http://www.steveworkman.com/html5-2/javascript/2011/improving-javascript-xml-node-finding-performance-by-2000/\n         * for performance details.\n         * @returns {JQuery} Object with jQuery values.\n         */\n        parse(xmlNodeSet: JQuery, options?: IParseOptions): Object[]{\n            //Need to use injector because apDecode service also relies on this service so we'd otherwise have a circular dependency.\n            var apDecodeService: DecodeService = this.$injector.get('apDecodeService');\n            var defaults = {\n                includeAllAttrs: false, // If true, return all attributes, regardless whether they are in the mapping\n                mapping: {}, // columnName: mappedName: \"mappedName\", objectType: \"objectType\"\n                removeOws: true, // Specifically for GetListItems, if true, the leading ows_ will be stripped off the field name\n                sparse: false // If true, empty (\"\") values will not be returned\n            };\n\n            var opts: IParseOptions = _.assign({}, defaults, options);\n\n            var jsonObjectArray = [];\n\n            _.each(xmlNodeSet, (node: JQuery) => {\n                var row = {};\n                var rowAttrs = node.attributes;\n\n                if (!opts.sparse) {\n                    // Bring back all mapped columns, even those with no value\n                    _.each(opts.mapping, (column) => row[column.mappedName] = '');\n                }\n\n                _.each(rowAttrs, (rowAttribute) => {\n                    var attributeName = rowAttribute.name;\n                    var columnMapping = opts.mapping[attributeName];\n                    var objectName = typeof columnMapping !== \"undefined\" ? columnMapping.mappedName : opts.removeOws ? attributeName.split(\"ows_\")[1] : attributeName;\n                    var objectType = typeof columnMapping !== \"undefined\" ? columnMapping.objectType : undefined;\n                    if (opts.includeAllAttrs || columnMapping !== undefined) {\n                        row[objectName] = apDecodeService.parseStringValue(rowAttribute.value, objectType);\n                    }\n                });\n\n                // Push this item into the JSON Object\n                jsonObjectArray.push(row);\n            });\n\n            // Return the JSON object\n            return jsonObjectArray;\n\n        }\n    }\n\n    interface IParseOptions {\n        includeAllAttrs?: boolean;\n        mapping?: Object;\n        removeOws?: boolean;\n        sparse?: boolean;\n    }\n\n    /**\n     * @ngdoc service\n     * @name apXMLToJSONService\n     * @description\n     * This function converts an XML node set into an array of JS objects.\n     * This is essentially Marc Anderson's [SPServices](http://spservices.codeplex.com/) SPXmlTOJson function wrapped in\n     * an Angular service to make it more modular and allow for testing.\n     *\n     */\n    angular.module('angularPoint')\n        .service('apXMLToJSONService', XMLToJSONService);\n\n\n}\n"],"sourceRoot":"/source/"}