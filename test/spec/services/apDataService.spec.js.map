{"version":3,"sources":["spec/services/apDataService.spec.ts"],"names":["ap"],"mappings":"AAAA,sDAAsD;AAEtD,IAAO,EAAE,CA+QR;AA/QD,WAAO,EAAE,EAAC,CAAC;IACPA,YAAYA,CAACA;IAEbA,QAAQA,CAACA,wBAAwBA,EAAEA;QAE/B,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;QAEnC,IAAI,OAAoB,EACpB,iBAA6C,EAC7C,mBAA+C,EAC/C,SAAoB,EACpB,YAA0B,EAC1B,OAAO,EACP,cAAc,EACd,YAAY,CAAC;QAGjB,UAAU,CAAC,MAAM,CAAC,UAAS,eAAe,EAAE,WAAW,EAAE,gBAAgB,EAAE,SAAS;YAChF,OAAO,GAAG,eAAe,CAAC;YAC1B,SAAS,GAAG,WAAW,CAAC;YACxB,cAAc,GAAG,gBAAgB,CAAC;YAClC,OAAO,GAAG,cAAc,CAAC,4BAA4B,CAAC;YACtD,SAAS,CAAC,WAAW,EAAE,CAAC;YACxB,iBAAiB,GAAG,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YAClD,mBAAmB,GAAG,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YACtD,YAAY,GAAG,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YAEhD,AACA,yCADyC;YACzC,YAAY,GAAG,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QAGjD,CAAC,CAAC,CAAC,CAAC;QAEJ,QAAQ,CAAC,0BAA0B,EAAE;YACjC,EAAE,CAAC,sBAAsB,EAAE;gBACvB,OAAO,CAAC,cAAc,EAAE;qBACnB,IAAI,CAAC,UAAS,QAAQ;oBACnB,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,6CAA6C,CAAC,CAAC;gBAC5E,CAAC,CAAC,CAAC;gBACP,YAAY,CAAC,KAAK,EAAE,CAAC;YACzB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,0BAA0B,EAAE;YACjC,EAAE,CAAC,uBAAuB,EAAE;gBACxB,YAAY,CAAC,OAAO,GAAG,EAAE,CAAC;gBAC1B,OAAO,CAAC,cAAc,CAAC,SAAS,EAAE,YAAY,CAAC;qBAC1C,IAAI,CAAC,UAAS,QAAQ;oBACnB,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;oBACzC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;gBACzC,CAAC,CAAC,CAAC;gBACP,YAAY,CAAC,KAAK,EAAE,CAAC;YACzB,CAAC,CAAC,CAAC;YACH,EAAE,CAAC,sEAAsE,EAAE;gBACvE,OAAO,CAAC,cAAc,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC,CAAC,CAAC;qBAClD,IAAI,CAAC,UAAS,QAAQ;oBACnB,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC7D,MAAM,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;gBACrE,CAAC,CAAC,CAAC;gBACP,YAAY,CAAC,KAAK,EAAE,CAAC;YACzB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,0BAA0B,EAAE;YACjC,EAAE,CAAC,yBAAyB,EAAE;gBAC1B,OAAO,CAAC,cAAc,CAAC,SAAS,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;qBAC7C,IAAI,CAAC,UAAS,QAAQ;oBACnB,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;gBACzC,CAAC,CAAC,CAAC;gBACP,YAAY,CAAC,KAAK,EAAE,CAAC;YACzB,CAAC,CAAC,CAAC;YACH,EAAE,CAAC,oCAAoC,EAAE;gBACrC,OAAO,CAAC,cAAc,CAAC,SAAS,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;qBAC7C,IAAI,CAAC,UAAS,QAAQ;oBACnB,MAAM,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,aAAa,EAAE,CAAC;gBAC7D,CAAC,CAAC,CAAC;gBACP,YAAY,CAAC,KAAK,EAAE,CAAC;YACzB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,0BAA0B,EAAE;YACjC,EAAE,CAAC,oDAAoD,EAAE;gBACrD,OAAO,CAAC,cAAc,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC,CAAC,EAAE,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC;qBAC7E,IAAI,CAAC;oBACF,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,EAAE,CAAC;oBAC7C,MAAM,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,EAAE,CAAC;gBACnD,CAAC,CAAC,CAAC;gBACP,YAAY,CAAC,KAAK,EAAE,CAAC;YACzB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAGH,QAAQ,CAAC,4BAA4B,EAAE;YACnC,EAAE,CAAC,uCAAuC,EAAE;gBACxC,OAAO,CAAC,gBAAgB,CAAC,EAAE,CAAC;qBACvB,IAAI,CAAC,UAAS,QAAQ;oBACnB,AACA,+DAD+D;oBAC/D,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;gBACnC,CAAC,CAAC,CAAC;YACX,CAAC,CAAC,CAAA;QACN,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,+BAA+B,EAAE;YACtC,EAAE,CAAC,uCAAuC,EAAE;gBACxC,MAAM,CAAC,OAAO,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;qBACvC,OAAO,CAAC,oEAAoE,CAAC,CAAC;YACvF,CAAC,CAAC,CAAA;QACN,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,4BAA4B,EAAE;YACnC,EAAE,CAAC,qDAAqD,EAAE;gBACtD,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAClE,CAAC,CAAC,CAAA;QACN,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,yBAAyB,EAAE;YAChC,EAAE,CAAC,sCAAsC,EAAE;gBACvC,OAAO,CAAC,aAAa,CAAC,EAAE,SAAS,EAAE,mBAAmB,EAAE,CAAC;qBACpD,IAAI,CAAC,UAAS,cAAc;oBACzB,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBAC7C,CAAC,CAAC,CAAC;gBACP,YAAY,CAAC,KAAK,EAAE,CAAC;YACzB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,AAUA,qDAVqD;QACrD,oDAAoD;QACpD,+CAA+C;QAC/C,yCAAyC;QACzC,iDAAiD;QACjD,iBAAiB;QACjB,+BAA+B;QAC/B,SAAS;QACT,KAAK;QAEL,QAAQ,CAAC,gCAAgC,EAAE;YACvC,EAAE,CAAC,+BAA+B,EAAE;gBAChC,OAAO,CAAC,oBAAoB,EAAE;qBACzB,IAAI,CAAC,UAAS,QAAQ;oBACnB,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC;wBACrB,gBAAgB,EAAE,sCAAsC;wBACxD,WAAW,EAAE,kBAAkB;wBAC/B,aAAa,EAAE,kBAAkB;wBACjC,QAAQ,EAAE,UAAU;wBACpB,aAAa,EAAE,kBAAkB;qBACpC,CAAC,CAAC;gBACP,CAAC,CAAC,CAAC;gBACP,YAAY,CAAC,KAAK,EAAE,CAAC;YACzB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,iCAAiC,EAAE;YACxC,EAAE,CAAC,+BAA+B,EAAE;gBAChC,OAAO,CAAC,qBAAqB,CAAC,WAAW,CAAC;qBACrC,IAAI,CAAC,UAAS,QAA+B;oBAC1C,IAAI,+BAA+B,GAAG;wBAClC,gBAAgB,EAAE,mNAAmN;wBACrO,IAAI,EAAE,gBAAgB;wBACtB,UAAU,EAAE,wCAAwC;qBACvD,CAAA;oBACD,AAEA,iGAFiG;oBACjG,oCAAoC;oBACpC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,+BAA+B,CAAC,IAAI,CAAC,CAAC;gBAC3E,CAAC,CAAC,CAAC;gBACP,YAAY,CAAC,KAAK,EAAE,CAAC;YACzB,CAAC,CAAC,CAAC;QAEP,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,sCAAsC,EAAE;YAC7C,EAAE,CAAC,gDAAgD,EAAE;gBACjD,OAAO,CAAC,0BAA0B,EAAE;qBAC/B,IAAI,CAAC,UAAS,QAAQ;oBACnB,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;4BACtB,EAAE,EAAE,KAAK;4BACT,IAAI,EAAE,oBAAoB;4BAC1B,WAAW,EAAE,EAAE;4BACf,OAAO,EAAE,KAAK;4BACd,WAAW,EAAE,MAAM;yBACtB,EAAE;4BACK,EAAE,EAAE,KAAK;4BACT,IAAI,EAAE,0BAA0B;4BAChC,WAAW,EAAE,kFAAkF;4BAC/F,OAAO,EAAE,KAAK;4BACd,WAAW,EAAE,OAAO;yBACvB,EAAE;4BACC,EAAE,EAAE,KAAK;4BACT,IAAI,EAAE,qBAAqB;4BAC3B,WAAW,EAAE,sEAAsE;4BACnF,OAAO,EAAE,KAAK;4BACd,WAAW,EAAE,OAAO;yBACvB,CAAC,CAAC,CAAC;gBACZ,CAAC,CAAC,CAAC;gBACP,YAAY,CAAC,KAAK,EAAE,CAAC;YACzB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,AAUA,8CAV8C;QAC9C,uDAAuD;QACvD,gEAAgE;QAChE,yCAAyC;QACzC,4DAA4D;QAC5D,iBAAiB;QACjB,+BAA+B;QAC/B,SAAS;QACT,KAAK;QAEL,QAAQ,CAAC,mBAAmB,EAAE;YAC1B,EAAE,CAAC,+BAA+B,EAAE;gBAChC,OAAO,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;qBAC7C,IAAI,CAAC,UAAS,QAAQ;oBACnB,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;gBACnC,CAAC,CAAC,CAAC;gBACP,YAAY,CAAC,KAAK,EAAE,CAAC;YACzB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,yBAAyB,EAAE;YAChC,EAAE,CAAC,8CAA8C,EAAE;gBAC/C,OAAO,CAAC,aAAa,CAAC,EAAE,QAAQ,EAAE,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;qBACnD,IAAI,CAAC,UAAS,QAAQ;oBACnB,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;gBACxC,CAAC,CAAC,CAAC;gBACP,YAAY,CAAC,KAAK,EAAE,CAAC;YACzB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,kCAAkC,EAAE;YACzC,EAAE,CAAC,kEAAkE,EAAE;gBACnE,IAAI,eAAe,GAAG,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;gBACpD,OAAO,CAAC,sBAAsB,CAAC,EAAE,EAAE,eAAe,CAAC;qBAC9C,IAAI,CAAC,UAAS,QAAQ;oBACnB,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBACvC,CAAC,CAAC,CAAC;gBACP,YAAY,CAAC,KAAK,EAAE,CAAC;YACzB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,wBAAwB,EAAE;YAC/B,EAAE,CAAC,yCAAyC,EAAE;gBAC1C,iBAAiB,CAAC,KAAK,EAAE,CAAC;gBAC1B,AACA,oFADoF;gBACpF,MAAM,CAAC,iBAAiB,CAAC,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBAC7C,SAAS,CAAC,QAAQ,EAAE,CAAC,WAAW,GAAG,SAAS,CAAC;gBAC7C,OAAO,CAAC,YAAY,CAAC,SAAS,EAAE,SAAS,CAAC,QAAQ,EAAE,CAAC;qBAChD,IAAI,CAAC,UAAS,QAAQ;oBACnB,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBACxC,CAAC,CAAC,CAAC;gBACP,YAAY,CAAC,KAAK,EAAE,CAAC;YACzB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,sCAAsC,EAAE;YAC7C,EAAE,CAAC,yCAAyC,EAAE;gBAC1C,OAAO,CAAC,0BAA0B,CAAC,cAAc,CAAC,qBAAqB,EAAE,iBAAiB,CAAC,CAAC;gBAC5F,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,EAAE,CAAC;YACjD,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,iCAAiC,EAAE;YACxC,EAAE,CAAC,yCAAyC,EAAE;gBAC1C,OAAO,CAAC,qBAAqB,CAAC,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC;qBAC1D,IAAI,CAAC,UAAS,SAAS;oBACpB,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;oBAC5C,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;gBACxD,CAAC,CAAC,CAAC;gBACP,YAAY,CAAC,KAAK,EAAE,CAAC;YACzB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IAEP,CAAC,CAACA,CAACA;AACPA,CAACA,EA/QM,EAAE,KAAF,EAAE,QA+QR","file":"spec/services/apDataService.spec.js","sourcesContent":["/// <reference path=\"../../mock/app.module.mock.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n    describe(\"Service: apDataService\", function() {\r\n\r\n        beforeEach(module(\"angularPoint\"));\r\n\r\n        var service: DataService,\r\n            primaryQueryCache: IndexedCache<MockListItem>,\r\n            secondaryQueryCache: IndexedCache<MockListItem>,\r\n            mockModel: MockModel,\r\n            mockToUpdate: MockListItem,\r\n            mockXML,\r\n            mockXMLService,\r\n            $httpBackend;\r\n\r\n\r\n        beforeEach(inject(function(_apDataService_, _mockModel_, _mockXMLService_, $injector) {\r\n            service = _apDataService_;\r\n            mockModel = _mockModel_;\r\n            mockXMLService = _mockXMLService_;\r\n            mockXML = mockXMLService.GetListItemChangesSinceToken;\r\n            mockModel.importMocks();\r\n            primaryQueryCache = mockModel.getCache('primary');\r\n            secondaryQueryCache = mockModel.getCache('secondary');\r\n            mockToUpdate = mockModel.getCache('primary')[1];\r\n\r\n            // Set up the mock http service responses\r\n            $httpBackend = $injector.get('$httpBackend');\r\n\r\n\r\n        }));\r\n\r\n        describe('Function: getCurrentSite', function() {\r\n            it('returns the site url', function() {\r\n                service.getCurrentSite()\r\n                    .then(function(response) {\r\n                        expect(response).toEqual('http://sharepoint.company-server.com/mysite');\r\n                    });\r\n                $httpBackend.flush();\r\n            });\r\n        });\r\n\r\n        describe('Function: updateListItem', function() {\r\n            it('updates the list item', function() {\r\n                mockToUpdate.integer = 44;\r\n                service.updateListItem(mockModel, mockToUpdate)\r\n                    .then(function(response) {\r\n                        expect(mockToUpdate.integer).toEqual(44);\r\n                        expect(response.integer).toEqual(44);\r\n                    });\r\n                $httpBackend.flush();\r\n            });\r\n            it('updates all cache\\'s because they are be referencing the same object', function() {\r\n                service.updateListItem(mockModel, primaryQueryCache[1])\r\n                    .then(function(response) {\r\n                        expect(primaryQueryCache[1]).toEqual(secondaryQueryCache[1]);\r\n                        expect(secondaryQueryCache[1].integer).toEqual(response.integer);\r\n                    });\r\n                $httpBackend.flush();\r\n            });\r\n        });\r\n\r\n        describe('Function: createListItem', function() {\r\n            it('creates a new list item', function() {\r\n                service.createListItem(mockModel, { integer: 11 })\r\n                    .then(function(response) {\r\n                        expect(response.integer).toEqual(11);\r\n                    });\r\n                $httpBackend.flush();\r\n            });\r\n            it('doesn\\'t add it to existing caches', function() {\r\n                service.createListItem(mockModel, { integer: 11 })\r\n                    .then(function(response) {\r\n                        expect(secondaryQueryCache[response.id]).toBeUndefined();\r\n                    });\r\n                $httpBackend.flush();\r\n            });\r\n        });\r\n\r\n        describe('Function: deleteListItem', function() {\r\n            it('removes entity with ID of 1 from all cache objects', function() {\r\n                service.deleteListItem(mockModel, primaryQueryCache[1], { updateAllCaches: true })\r\n                    .then(function() {\r\n                        expect(primaryQueryCache[1]).toBeUndefined();\r\n                        expect(secondaryQueryCache[1]).toBeUndefined();\r\n                    });\r\n                $httpBackend.flush();\r\n            });\r\n        });\r\n\r\n\r\n        describe('Function: deleteAttachment', function() {\r\n            it('resolves the deleteAttachment request', function() {\r\n                service.deleteAttachment({})\r\n                    .then(function(response) {\r\n                        /** If an error isn't returned, the operation was successful */\r\n                        expect(response).toBeDefined();\r\n                    });\r\n            })\r\n        });\r\n\r\n        describe('Function: retrieveChangeToken', function() {\r\n            it('returns the change token from the XML', function() {\r\n                expect(service.retrieveChangeToken(mockXML))\r\n                    .toEqual('1;3;f5345fe7-2f7c-49f7-87d0-dbfebdd0ce61;635452551037430000;387547');\r\n            })\r\n        });\r\n\r\n        describe('Function: retrievePermMask', function() {\r\n            it('returns perm mask for the current user on this lsit', function() {\r\n                expect(service.retrievePermMask(mockXML)).toEqual('FullMask');\r\n            })\r\n        });\r\n\r\n        describe('Function: getCollection', function() {\r\n            it('can process a GetListCollection call', function() {\r\n                service.getCollection({ operation: 'GetListCollection' })\r\n                    .then(function(listCollection) {\r\n                        expect(listCollection.length).toEqual(1);\r\n                    });\r\n                $httpBackend.flush();\r\n            });\r\n        });\r\n\r\n        //describe('Function: getListItemById', function () {\r\n        //    it('returns a single list item', function () {\r\n        //        service.getListItemById(1, mockModel)\r\n        //            .then(function (response) {\r\n        //                expect(response.id).toEqual(1);\r\n        //            });\r\n        //        $httpBackend.flush();\r\n        //    });\r\n        //});\r\n\r\n        describe('Function: getUserProfileByName', function() {\r\n            it('returns a user profile object', function() {\r\n                service.getUserProfileByName()\r\n                    .then(function(response) {\r\n                        expect(response).toEqual({\r\n                            UserProfile_GUID: 'e1234f12-6992-42eb-9bbc-b3a123b29295',\r\n                            AccountName: 'DOMAIN\\\\John.Doe',\r\n                            PreferredName: 'DOMAIN\\\\John.Doe',\r\n                            UserName: 'John.Doe',\r\n                            userLoginName: 'DOMAIN\\\\John.Doe'\r\n                        });\r\n                    });\r\n                $httpBackend.flush();\r\n            });\r\n        });\r\n\r\n        describe('Function: getAvailableWorkflows', function() {\r\n            it('returns a workflow definition', function() {\r\n                service.getAvailableWorkflows('myFileRef')\r\n                    .then(function(response: IWorkflowDefinition[]) {\r\n                        var expectedFirstWorkflowDefinition = {\r\n                            instantiationUrl: \"https://sharepoint.mycompany.com/_layouts/IniWrkflIP.aspx?List=fc17890e-8c0f-43b5-8e3e-ffae6f456727&amp;ID=5&amp;TemplateID={59062311-cea9-40d1-a183-6edde9333815}&amp;Web={ec744d8e-ae0a-45dd-bcd1-8a63b9b399bd}\",\r\n                            name: \"WidgetApproval\",\r\n                            templateId: \"{59062311-cea9-40d1-a183-6edde9333815}\"\r\n                        }\r\n                        //Have issues comparing these objects because there's an issue with the instantiationUrl matching\r\n                        //so just compare the name for each.\r\n                        expect(response[0].name).toEqual(expectedFirstWorkflowDefinition.name);\r\n                    });\r\n                $httpBackend.flush();\r\n            });\r\n\r\n        });\r\n\r\n        describe('Function: getGroupCollectionFromUser', function() {\r\n            it('returns an array of groups the user belongs to', function() {\r\n                service.getGroupCollectionFromUser()\r\n                    .then(function(response) {\r\n                        expect(response).toEqual([{\r\n                            ID: '385',\r\n                            Name: 'Super Duper Admins',\r\n                            Description: '',\r\n                            OwnerID: '338',\r\n                            OwnerIsUser: 'True'\r\n                        }, {\r\n                                ID: '396',\r\n                                Name: 'Super Duper Contributors',\r\n                                Description: 'Members of this group are able to contribute to create and edit project records.',\r\n                                OwnerID: '385',\r\n                                OwnerIsUser: 'False'\r\n                            }, {\r\n                                ID: '398',\r\n                                Name: 'Super Duper Viewers',\r\n                                Description: 'Members of this group are able to view project specific information.',\r\n                                OwnerID: '385',\r\n                                OwnerIsUser: 'False'\r\n                            }]);\r\n                    });\r\n                $httpBackend.flush();\r\n            });\r\n        });\r\n\r\n        //ddescribe('Function: getView', function () {\r\n        //    it('can process a list definition', function () {\r\n        //        apDataService.getView({listName: mockModel.list.guid})\r\n        //            .then(function (response) {\r\n        //                expect(response.viewFields).toBeDefined();\r\n        //            });\r\n        //        $httpBackend.flush();\r\n        //    });\r\n        //});\r\n\r\n        describe('Function: getList', function() {\r\n            it('can process a list definition', function() {\r\n                service.getList({ listName: mockModel.list.guid })\r\n                    .then(function(response) {\r\n                        expect(response).toBeDefined();\r\n                    });\r\n                $httpBackend.flush();\r\n            });\r\n        });\r\n\r\n        describe('Function: getListFields', function() {\r\n            it('returns an array of field definition objects', function() {\r\n                service.getListFields({ listName: mockModel.list.guid })\r\n                    .then(function(response) {\r\n                        expect(response.length).toEqual(98);\r\n                    });\r\n                $httpBackend.flush();\r\n            });\r\n        });\r\n\r\n        describe('Function: getFieldVersionHistory', function() {\r\n            it('returns an array containing 3 versions of the mock.integer field', function() {\r\n                var fieldDefinition = mockModel.getField('integer');\r\n                service.getFieldVersionHistory({}, fieldDefinition)\r\n                    .then(function(response) {\r\n                        expect(response.length).toEqual(3);\r\n                    });\r\n                $httpBackend.flush();\r\n            });\r\n        });\r\n\r\n        describe('Function: executeQuery', function() {\r\n            it('can complete a query form a known model', function() {\r\n                primaryQueryCache.clear();\r\n                ////Ensure there's nothing left in the cache and we remove any existing change token\r\n                expect(primaryQueryCache.count()).toEqual(0);\r\n                mockModel.getQuery().changeToken = undefined;\r\n                service.executeQuery(mockModel, mockModel.getQuery())\r\n                    .then(function(response) {\r\n                        expect(response.count()).toEqual(2);\r\n                    });\r\n                $httpBackend.flush();\r\n            });\r\n        });\r\n\r\n        describe('Function: processDeletionsSinceToken', function() {\r\n            it('removes a deleted entity from the array', function() {\r\n                service.processDeletionsSinceToken(mockXMLService.getChangeToken_Delete, primaryQueryCache);\r\n                expect(primaryQueryCache[1]).toBeUndefined();\r\n            });\r\n        });\r\n\r\n        describe('Function: getAvailableWorkflows', function() {\r\n            it('removes a deleted entity from the array', function() {\r\n                service.getAvailableWorkflows(mockToUpdate.fileRef.lookupValue)\r\n                    .then(function(templates) {\r\n                        expect(templates.length).toBeGreaterThan(0);\r\n                        expect(templates[0].name).toEqual('WidgetApproval');\r\n                    });\r\n                $httpBackend.flush();\r\n            });\r\n        });\r\n\r\n    });\r\n}"],"sourceRoot":"/source/"}