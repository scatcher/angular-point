{"version":3,"sources":["spec/factories/apListItemFactory.spec.ts"],"names":["ap"],"mappings":"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","file":"spec/factories/apListItemFactory.spec.js","sourcesContent":["/// <reference path=\"../../mock/app.module.mock.ts\" />\nmodule ap {\n    'use strict';\n\n    describe(\"Factory: apListItemFactory\", function() {\n\n        beforeEach(module(\"angularPoint\"));\n\n        var factory: ListItemFactory,\n            mockModel: MockModel,\n            mockLookupModel: MockLookupModel,\n            mockListItem: MockListItem,\n            apCachedXML: ICachedXML,\n            $httpBackend: ng.IHttpBackendService,\n            utils: MockUtils;\n\n        beforeEach(inject(function(_apListItemFactory_, _mockModel_, _mockLookupModel_, _$httpBackend_, _apCachedXML_\n            , apMockUtils) {\n            factory = _apListItemFactory_;\n            mockModel = _mockModel_;\n            mockLookupModel = _mockLookupModel_;\n            $httpBackend = _$httpBackend_;\n            apCachedXML = _apCachedXML_;\n            mockModel.importMocks();\n            mockListItem = mockModel.getCache<MockListItem>('primary').first();\n            if (!mockListItem) throw new Error(\"List item not found\");\n            utils = apMockUtils;\n\n        }));\n\n        describe('Function create', function() {\n            it(\"instantiates a new List item using constructor\", function() {\n                expect(factory.create()).toEqual(new factory.ListItem);\n            });\n        });\n\n        describe('Method: changes', function() {\n            it('detects a change and the field that was changed', function() {\n                let listItem = mockModel.createEmptyItem<MockListItem>({ integer: 99 });\n                listItem.saveChanges()\n                    .then((newListItem) => {\n                        //Newly instnatiated item now has pristine state stored\n                        newListItem.integer = 100;\n                        expect(newListItem.changes().fieldsChanged.integer).toBeDefined();\n                    })\n                $httpBackend.flush();\n            });\n        });\n\n        describe('Method: deleteItem', function() {\n            it('removes entity with ID of 1 from the cache', function() {\n                mockListItem.deleteItem()\n                    .then(function() {\n                        expect(mockModel.getCache('primary')[1]).toBeUndefined();\n                    });\n                $httpBackend.flush();\n            });\n        });\n\n        describe('Method: validateEntity', function() {\n            it('validates a valid entity.', function() {\n                mockListItem.boolean = false;\n                expect(mockListItem.validateEntity()).toBe(true);\n\n            });\n\n            it('rejects an invalid entity.', function() {\n                mockListItem.boolean = 'this is a test';\n                expect(mockListItem.validateEntity()).toBe(false);\n            });\n        });\n\n        describe('Method: getChanges', function() {\n            it('returns a promise which resolves with a ChangeSummary object', () => {\n                mockListItem.getChangeSummary('integer')\n                    .then(function(response) {\n                        expect(response.constructor.name).toEqual('ChangeSummary');\n                    });\n                $httpBackend.flush();\n            });\n        });\n\n\n        describe('Method: getFieldDefinition', function() {\n            it('returns the field definition.', function() {\n                expect(mockListItem.getFieldDefinition('json').objectType).toEqual('JSON');\n            });\n\n            it('returns undefined if a valid field isn\\'t provided.', function() {\n                expect(mockListItem.getFieldDefinition('invalidField')).toBeUndefined();\n            })\n\n        });\n\n        describe('Method: getFieldLabel', function() {\n            it('defaults to title case.', function() {\n                expect(mockListItem.getFieldLabel('dateTime')).toEqual('DateTime');\n            });\n            it('uses the DisplayName from the server if available', function() {\n                var fieldDefinition = mockListItem.getFieldDefinition('dateTime');\n                fieldDefinition.DisplayName = 'My Date Field';\n                expect(mockListItem.getFieldLabel('dateTime')).toEqual('My Date Field');\n            });\n            it('uses the label attribute to override anything else', function() {\n                var fieldDefinition = mockListItem.getFieldDefinition('dateTime');\n                fieldDefinition.DisplayName = 'My Date Field';\n                fieldDefinition.label = 'My Manually Set Field Label';\n                expect(mockListItem.getFieldLabel('dateTime')).toEqual('My Manually Set Field Label');\n            });\n\n        });\n\n        describe('Method: getFieldDescription', function() {\n            it('defaults to an empty string', function() {\n                expect(mockListItem.getFieldDescription('title')).toEqual('');\n            });\n            it('uses the Description from the server if available', function() {\n                var fieldDefinition = mockListItem.getFieldDefinition('title');\n                fieldDefinition.Description = 'My server description.';\n                expect(mockListItem.getFieldDescription('title')).toEqual('My server description.');\n            });\n            it('uses the description attribute to override anything else', function() {\n                var fieldDefinition = mockListItem.getFieldDefinition('title');\n                fieldDefinition.Description = 'My Title Field';\n                fieldDefinition.description = 'My Manually Set Title Label';\n                expect(mockListItem.getFieldDescription('title')).toEqual('My Manually Set Title Label');\n            });\n\n        });\n\n        describe('Method: getFieldChoices', function() {\n            var fakeDefinition = {\n                Choices: ['one', 'two', 'three'],\n                choices: ['four', 'five']\n            };\n            it('defaults to an empty array', function() {\n                var fieldDefinition = mockListItem.getFieldDefinition('choice');\n                delete fieldDefinition.Choices;\n                expect(mockListItem.getFieldChoices('choice')).toEqual([]);\n            });\n            it('uses the Choices from the server if available', function() {\n                var fieldDefinition = mockListItem.getFieldDefinition('choice');\n                fieldDefinition.Choices = fakeDefinition.Choices;\n                expect(mockListItem.getFieldChoices('choice')).toEqual(fakeDefinition.Choices);\n            });\n            it('uses the choices attribute to override anything else', function() {\n                var fieldDefinition = mockListItem.getFieldDefinition('choice');\n                fieldDefinition.choices = fakeDefinition.choices;\n                fieldDefinition.Choices = fakeDefinition.Choices;\n                expect(mockListItem.getFieldChoices('choice')).toEqual(fakeDefinition.choices);\n            });\n        });\n\n        describe('Method: getFormattedValue', function() {\n            it('throws an error if the provided field name isn\\'t valid', function() {\n                expect(function() {\n                    mockListItem.getFormattedValue('invalidField');\n                }).toThrow();\n            });\n\n            it('returns a stringified date without params', function() {\n                expect(mockListItem.getFormattedValue('date')).toEqual('8/19/14 12:00 AM');\n            });\n\n            it('returns a stringified json date with params', function() {\n                expect(mockListItem.getFormattedValue('date', { dateFormat: 'json' }))\n                    .toEqual('2014-08-19T07:00:00.000Z');\n                //.toEqual('2014-08-19T' + utils.getTimezoneOffsetString() + ':00.000Z');\n            });\n        });\n\n        describe('Method: getLookupReference', function() {\n            var mockLookupItem,\n                mockLookupReference;\n\n            beforeEach(function() {\n                mockLookupModel.importMocks();\n                mockLookupItem = mockLookupModel.getCache('primary')[1];\n                mockLookupReference = mockListItem.getLookupReference('lookup');\n            });\n\n            it('returns the entity a lookup item is referencing', function() {\n                expect(mockLookupReference).toEqual(mockLookupItem);\n            });\n\n            it('should throw an error if a field name isn\\'t provided', function() {\n                expect(function() {\n                    mockListItem.getLookupReference<MockLookup>();\n                }).toThrow();\n            });\n\n            it('returns an empty string if the lookup is empty', function() {\n                mockListItem.lookup = undefined;\n                expect(mockListItem.getLookupReference('lookup')).toEqual('');\n            });\n\n            it('throws an error if the fieldDefinition.List isn\\'t available', function() {\n                delete mockListItem.getFieldDefinition('lookup').List;\n                expect(function() {\n                    mockListItem.getLookupReference('lookup');\n                }).toThrow();\n            });\n\n        });\n\n        describe('Method: isPristine', function() {\n            it('returns false when no longer pristine', function() {\n                let listItem = mockModel.createEmptyItem<MockListItem>({ integer: 99 });\n                listItem.saveChanges()\n                    .then((newListItem) => {\n                        //Newly instnatiated item now has pristine state stored\n                        newListItem.integer = 100;\n                        expect(newListItem.isPristine()).toBeFalsy();\n                    })\n                $httpBackend.flush();\n            });\n            it('returns true if still pristine', function() {\n                let listItem = mockModel.createEmptyItem<MockListItem>({ integer: 99 });\n                listItem.saveChanges()\n                    .then((newListItem) => {\n                        //Not making any changes so still should be pristine\n                        expect(newListItem.isPristine()).toBeTruthy();\n                    })\n                $httpBackend.flush();\n            });\n        });\n\n        describe('Method: resolvePermissions', function() {\n\n            it('allows admin to approve.', function() {\n                //Full rights mask\n                mockListItem.permMask = '0x7FFFFFFFFFFFFFFF';\n                var adminUserPermissions = mockListItem.resolvePermissions();\n                expect(adminUserPermissions.ApproveItems).toBe(true);\n            });\n            it('prevents read-only user from approving.', function() {\n                //Limited user (view only)\n                mockListItem.permMask = '0x0000000000000001';\n                var standardUserPermissions = mockListItem.resolvePermissions();\n                expect(standardUserPermissions.ApproveItems).toBe(false);\n            });\n            it('allows a user with edit rights to edit.', function() {\n                //User can edit\n                mockListItem.permMask = '0x0000000000000004';\n                var standardUserPermissions = mockListItem.resolvePermissions();\n                expect(standardUserPermissions.EditListItems).toBe(true);\n            });\n\n        });\n\n        describe('Method: saveChanges', function() {\n            describe('successful calls', function() {\n                beforeEach(function() {\n                    expect(mockListItem.integer).toEqual(12);\n                    mockListItem.integer = 13;\n                    mockListItem.saveChanges()\n                        .then(function(response) {\n                            expect(response.integer).toEqual(13);\n                        });\n                    $httpBackend.flush();\n                });\n                it('has the updated value', function() {\n                    expect(mockListItem.integer).toEqual(13);\n                });\n                it('is also updated in the other caches because they should be referencing the same object', function() {\n                    expect(mockModel.getCache('secondary')[1]).toEqual(mockListItem);\n                });\n            });\n\n            //describe('the ability to identity an error', function () {\n            //    it('rejects the promise with an error message', function () {\n            //        mockXMLService.xhrStub('errorUpdatingListItem');\n            //        mockListItem.saveChanges()\n            //            .then(function (response) {\n            //\n            //            }, function (err) {\n            //                expect(_.isString(err)).toBeTrue();\n            //            });\n            //        $rootScope.$digest();\n            //    });\n            //});\n        });\n\n        describe('Method: saveFields', function() {\n            it('has the initial value before updating', function() {\n                expect(mockListItem.integer).toEqual(12);\n            });\n            it('has the updated value after updating', function() {\n                mockListItem.integer = 29;\n                mockListItem.saveFields(['integer'])\n                    .then(function(response) {\n                        expect(response.integer).toEqual(29);\n                    });\n                $httpBackend.flush();\n            });\n            it('shows the updating value in the secondary cache', function() {\n                mockListItem.integer = 41;\n                mockListItem.saveFields(['integer'])\n                    .then(function(response) {\n                        expect(mockModel.getCache<MockListItem>('secondary')[1].integer).toEqual(41);\n                    });\n                $httpBackend.flush();\n            });\n            //it('resolves the promise with the updated entity', function () {\n            //    mockXMLService.xhrStub('UpdateListItem');\n            //    mockListItem.saveFields('integer')\n            //        .then(function (response) {\n            //            expect(response.integer).toEqual(13);\n            //        });\n            //    $rootScope.$digest();\n            //});\n            //it('rejects the promise with an error message', function () {\n            //    $httpBackend.whenPOST('/test/_vti_bin/Lists.asmx')\n            //        .respond(function (method, url, data) {\n            //            return [200, apCachedXML.ErrorUpdatingListItem];\n            //        });\n            //    mockListItem.saveFields('integer')\n            //        .then(function (response) {\n            //\n            //        }, function (err) {\n            //            expect(_.isString(err)).toBeTrue();\n            //        });\n            //    $httpBackend.flush();\n            //});\n\n        });\n\n        describe('Method: setPristine', function() {\n            var initialLookupValue = '[{\"lookupId\":2,\"lookupValue\":\"Lookup 2\"},{\"lookupId\":3,\"lookupValue\":\"Lookup 3\"}]';\n\n            it('restores any changes of primative back to the pristine state', function() {\n                //mockXMLService.xhrStub('getAttachmentCollection');\n                expect(mockListItem.integer).toEqual(12);\n                mockListItem.integer = 101;\n                mockListItem.setPristine(mockListItem);\n                expect(mockListItem.integer).toEqual(12);\n            });\n\n\n            it('restores any changes of a referenced object back to the pristine state', function() {\n                expect(JSON.stringify(mockListItem.lookupMulti)).toEqual(initialLookupValue);\n                mockListItem.lookupMulti.splice(0, 1);\n                expect(mockListItem.lookupMulti.length === 1);\n                mockListItem.setPristine(mockListItem);\n                expect(JSON.stringify(mockListItem.lookupMulti)).toEqual(initialLookupValue);\n            });\n\n            it('restores any changes of a referenced object back to the pristine state when optional list item is not provided', function() {\n                expect(JSON.stringify(mockListItem.lookupMulti)).toEqual(initialLookupValue);\n                mockListItem.lookupMulti.splice(0, 1);\n                expect(mockListItem.lookupMulti.length === 1);\n                mockListItem.setPristine();\n                expect(JSON.stringify(mockListItem.lookupMulti)).toEqual(initialLookupValue);\n            });\n        });\n\n        describe('Method: getAttachmentCollection', function() {\n            it('returns an array of attachments for the list item', function() {\n                //mockXMLService.xhrStub('getAttachmentCollection');\n                mockListItem.getAttachmentCollection()\n                    .then(function(response) {\n                        expect(response.length).toEqual(1);\n                    });\n                $httpBackend.flush();\n            });\n        });\n\n        describe('Method: deleteAttachment', function() {\n            it('resolves the promise when deleted', function() {\n                //mockXMLService.xhrStub('deleteAttachment');\n                mockListItem.deleteAttachment(mockListItem.attachments[0])\n                    .then(function(response) {\n                        expect(response).toBeDefined();\n                    });\n                $httpBackend.flush();\n            });\n        });\n\n        describe('Method: getVersionHistory', function() {\n            it('parses the version history for a field and returns all 4 versions', () => {\n                mockListItem.getVersionHistory('integer')\n                    .then(function(response) {\n                        expect(response.count()).toEqual(4);\n                    });\n                $httpBackend.flush();\n            });\n            it('works without passing any any fields to dynamically build field array', () => {\n                mockListItem.getVersionHistory()\n                    .then(function(response) {\n                        expect(response.count()).toEqual(4);\n                    });\n                $httpBackend.flush();\n            });\n            it('contains the correct version number', function() {\n                //mockXMLService.xhrStub('GetVersionCollection');\n                mockListItem.getVersionHistory()\n                    .then(function(response) {\n                        expect(response[0].version).toEqual(2);\n                    });\n                $httpBackend.flush();\n            });\n        });\n\n        describe('Method: registerPreDeleteAction', function() {\n            let unregister;\n\n            afterEach(function() {\n                if (_.isFunction(unregister)) {\n                    //Cleanup\n                    unregister();\n                }\n            });\n\n            it('prevents delete if validation action returns false', function() {\n                unregister = MockListItem.prototype.registerPreDeleteAction(function() {\n                    //this should be the list item in question\n                    expect(this).toEqual(mockListItem);\n                    return false;\n                });\n                unregister = mockListItem.deleteItem()\n                    .then(function(response) { }, function(response) {\n                        expect(mockModel.getCachedEntity(mockListItem.id)).toBeDefined();\n                    });\n            });\n\n            it('deletes if validation action returns true', function() {\n                unregister = MockListItem.prototype.registerPreDeleteAction(function() {\n                    expect(this).toEqual(mockListItem);\n                    return true;\n                });\n                mockListItem.deleteItem()\n                    .then(function(response) {\n                        expect(mockModel.getCachedEntity(mockListItem.id)).toBeUndefined();\n                    });\n                $httpBackend.flush();\n\n            });\n\n            it('returns an unregister function', function() {\n                unregister = MockListItem.prototype.registerPreDeleteAction(function() {\n                    //Would prevent delete but gets unregistered\n                    return false;\n                });\n                unregister();\n                expect(mockModel.getCachedEntity(mockListItem.id)).toBeDefined();\n                mockListItem.deleteItem()\n                    .then(function(response) {\n                        expect(mockModel.getCachedEntity(mockListItem.id)).toBeUndefined();\n                    });\n                $httpBackend.flush();\n\n            });\n\n        });\n\n        describe('Method: registerPreSaveAction', function() {\n\n            let unregister;\n\n            afterEach(function() {\n                if (_.isFunction(unregister)) {\n                    //Cleanup\n                    unregister();\n                }\n            });\n\n            it('saves if validation action returns true', function() {\n                mockListItem.currency = 777;\n                unregister = MockListItem.prototype.registerPreSaveAction(function() {\n                    expect(this).toEqual(mockListItem);\n                    return true;\n                });\n\n                mockListItem.saveChanges()\n                    .then(function(response) {\n                        //Saved correctly\n                        expect(response.currency).toEqual(777);\n                    });\n                $httpBackend.flush();\n\n            });\n\n            it('prevents save if validation action returns false', function() {\n                unregister = MockListItem.prototype.registerPreSaveAction(function() {\n                    //this should be the list item in question\n                    expect(this).toEqual(mockListItem);\n                    return false;\n                });\n\n                mockListItem.saveChanges()\n                    .then(function(response) { /*should only error */ }, function(response) {\n                        //Resolve with error string\n                        expect(_.isString(response)).toBeTruthy();\n                    });\n\n            });\n\n            it('returns an unregister function that serves to remove logic', function() {\n                mockListItem.currency = 888;\n                unregister = MockListItem.prototype.registerPreSaveAction(function() {\n                    //Would prevent save but gets unregistered\n                    return false;\n                });\n                unregister();\n\n                mockListItem.saveChanges()\n                    .then(function(response) {\n                        //Saved correctly and didn't hit validation because it was unregistered\n                        expect(response.currency).toEqual(888);\n                    });\n                $httpBackend.flush();\n            });\n\n        });\n\n        describe('Method: registerPostSaveAction', function() {\n\n            it('exectues callback after save event', function() {\n                mockListItem.currency = 999;\n                MockListItem.prototype.registerPostSaveAction(function() {\n                    expect(this).toEqual(mockListItem);\n                    expect(this.currency).toEqual(999);\n                });\n\n                mockListItem.saveChanges()\n                    .then(function(response) {\n                        //Saved correctly\n                        expect(this.currency).toEqual(999);\n                    });\n                $httpBackend.flush();\n\n            });\n\n        });\n\n\n    });\n}\n"],"sourceRoot":"/source/"}