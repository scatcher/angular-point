{"version":3,"sources":["spec/factories/apFieldFactory.spec.ts"],"names":["ap"],"mappings":"AAAA,AACA,sDADsD;AACtD,IAAO,EAAE,CAmCR;AAnCD,WAAO,EAAE,EAAC,CAAC;IACPA,YAAYA,CAACA;IAEbA,QAAQA,CAACA,yBAAyBA,EAAEA;QAEhC,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;QAEnC,IAAI,OAAqB,EACrB,SAAoB,CAAC;QAEzB,UAAU,CAAC,MAAM,CAAC,UAAS,gBAAgB,EAAE,WAAW;YACpD,OAAO,GAAG,gBAAgB,CAAC;YAC3B,SAAS,GAAG,WAAW,CAAC;QAC5B,CAAC,CAAC,CAAC,CAAC;QAEJ,QAAQ,CAAC,4BAA4B,EAAE;YACnC,EAAE,CAAC,sDAAsD,EAAE;gBACnE,IAAI,eAAe,GAAG,IAAI,OAAO,CAAC,eAAe,CAAC,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,CAAC;gBAClG,IAAI,QAAQ,GAAG,IAAI,SAAS,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,WAAW,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;gBAC3E,MAAM,CAAC,eAAe,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACvE,CAAC,CAAC,CAAC;YACH,EAAE,CAAC,6FAA6F,EAAE;gBAC1G,IAAI,eAAe,GAAG,IAAI,OAAO,CAAC,eAAe,CAAC;oBACjD,UAAU,EAAE,QAAQ;oBACpB,UAAU,EAAE,QAAQ;oBACpB,SAAS,EAAE,UAAC,QAAuB,EAAE,eAAiC;wBACrE,MAAM,CAAC,QAAQ,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC;oBACvE,CAAC;iBACD,CAAC,CAAC;gBACH,IAAI,QAAQ,GAAG,IAAI,SAAS,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,WAAW,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;gBAC3E,MAAM,CAAC,eAAe,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACvE,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IAEV,CAAC,CAACA,CAACA;AACJA,CAACA,EAnCM,EAAE,KAAF,EAAE,QAmCR","file":"spec/factories/apFieldFactory.spec.js","sourcesContent":["/// <reference path=\"../../mock/app.module.mock.ts\" />\r\nmodule ap {\r\n    'use strict';\r\n\r\n    describe(\"Factory: apFieldFactory\", function() {\r\n\r\n        beforeEach(module(\"angularPoint\"));\r\n\r\n        var factory: FieldFactory,\r\n            mockModel: MockModel;\r\n\r\n        beforeEach(inject(function(_apFieldFactory_, _mockModel_) {\r\n            factory = _apFieldFactory_;\r\n            mockModel = _mockModel_;\r\n        }));\r\n\r\n        describe('Function getFormattedValue', function() {\r\n            it(\"converts a lookup into a string using default method\", function() {\r\n\t\t\t\tvar fieldDefinition = new factory.FieldDefinition({ mappedName: 'lookup', objectType: 'Lookup' });\r\n\t\t\t\tvar listItem = new mockModel.factory({ lookup: { lookupId: 99, lookupValue: 'Bob' } });\r\n                expect(fieldDefinition.getFormattedValue(listItem)).toEqual('Bob');\r\n            });\r\n            it(\"converts a lookup into a custom string if a override method is included in field definition\", function() {\r\n\t\t\t\tvar fieldDefinition = new factory.FieldDefinition({\r\n\t\t\t\t\tmappedName: 'lookup',\r\n\t\t\t\t\tobjectType: 'Lookup',\r\n\t\t\t\t\tformatter: (listItem: ListItem<any>, fieldDefinition: IFieldDefinition) => {\r\n\t\t\t\t\t\treturn listItem[fieldDefinition.mappedName].lookupValue.toUpperCase();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tvar listItem = new mockModel.factory({ lookup: { lookupId: 99, lookupValue: 'Bob' } });\r\n                expect(fieldDefinition.getFormattedValue(listItem)).toEqual('BOB');\r\n            });\r\n        });\r\n\r\n\t});\r\n}"],"sourceRoot":"/source/"}