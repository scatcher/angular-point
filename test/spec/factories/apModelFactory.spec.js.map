{"version":3,"sources":["spec/factories/apModelFactory.spec.ts"],"names":["ap","getResponseXML","mockExecuteQuery"],"mappings":"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","file":"spec/factories/apModelFactory.spec.js","sourcesContent":["/// <reference path=\"../../mock/app.module.mock.ts\" />\nmodule ap {\n    'use strict';\n\n    describe('Factory: apModelFactory', function() {\n\n        beforeEach(module(\"angularPoint\"));\n\n        var factory: ModelFactory, mockModel: MockModel, mockEntityCache, mockXMLService, $rootScope: ng.IRootScopeService, $q:ng.IQService, apDataService: DataService, $httpBackend;\n\n        beforeEach(inject(function(_mockModel_, _apModelFactory_, _mockXMLService_, _$rootScope_, _$q_, _apDataService_, _$httpBackend_) {\n            mockModel = _mockModel_;\n            factory = _apModelFactory_;\n            mockXMLService = _mockXMLService_;\n            apDataService = _apDataService_;\n            $httpBackend = _$httpBackend_;\n            $rootScope = _$rootScope_;\n            $q = _$q_;\n            mockModel.importMocks();\n            mockEntityCache = mockModel.getCache('primary');\n        }));\n\n        describe('addNewItem', function() {\n            it('adds the new entity to the cacheService', function() {\n                mockModel.addNewItem({ title: 'I am a Mock' })\n                    .then(function(response) {\n                        expect(mockModel.getCachedEntity(response.id)).toBeDefined();\n                        expect(response.title).toEqual('I am a Mock');\n                    });\n                $httpBackend.flush();\n            });\n        });\n\n\n        describe('createEmptyItem', function() {\n\n            it('should return an object', function() {\n                var emptyItem = mockModel.createEmptyItem();\n                expect(emptyItem).toBeTruthy();\n            });\n\n            it('should have an attribute for each of the mocked fields except for \"ReadOnly\"', function() {\n                var emptyItem = mockModel.createEmptyItem();\n                var fieldsOnModel = mockModel.list.customFields.length;\n                var attributesOnEmptyItem = _.keys(emptyItem).length;\n                expect(fieldsOnModel - 1).toBe(attributesOnEmptyItem);\n            });\n        });\n\n        //DEPRECATED\n        //describe('searchLocalCache', function () {\n        //\n        //    it('returns the correct object when using an attribute directly on the object', function () {\n        //        var searchResults = mockModel.searchLocalCache(1);\n        //        expect(searchResults).toEqual(mockEntityCache[1]);\n        //    });\n        //\n        //    it('should return the correct object when a nested property path is used', function () {\n        //        var searchResults = mockModel.searchLocalCache(2, {\n        //            propertyPath: 'lookup.lookupId'\n        //        });\n        //        expect(searchResults).toEqual(mockEntityCache[2]);\n        //    });\n        //\n        //    it('should return undefined if no match is found', function () {\n        //        var searchResults = mockModel.searchLocalCache('fake id', {\n        //            propertyPath: 'lookup.lookupId'\n        //        });\n        //        expect(searchResults).toBeUndefined();\n        //    });\n        //\n        //    describe('count the number of times the cache is rebuilt', function () {\n        //\n        //        it('doesn\\'t use the cache when searching by id', function () {\n        //            mockModel.searchLocalCache(1);\n        //            mockModel.searchLocalCache(2);\n        //\n        //            expect(mockModel._cachedIndexes).toBeUndefined();\n        //        });\n        //\n        //        it('uses the cached results instead of building a new cache', function () {\n        //            mockModel.searchLocalCache(1, {\n        //                propertyPath: 'lookup.lookupId'\n        //            });\n        //            var initialBuildCount = getBuildCount();\n        //            mockModel.searchLocalCache(1, {\n        //                propertyPath: 'lookup.lookupId'\n        //            });\n        //            expect(initialBuildCount).toEqual(getBuildCount());\n        //        });\n        //\n        //        it('rebuilds the cache when a change is made', function () {\n        //            mockModel.searchLocalCache(1, {\n        //                propertyPath: 'lookup.lookupId'\n        //            });\n        //\n        //            var initialBuildCount = getBuildCount();\n        //\n        //            /** Add another entity to the cache */\n        //            mockModel.getCache()[3] = new mockModel.factory({\n        //                lookup: {lookupId: 3},\n        //                id: 3\n        //            });\n        //\n        //            mockModel.searchLocalCache(2, {\n        //                propertyPath: 'lookup.lookupId'\n        //            });\n        //\n        //            expect(initialBuildCount).not.toEqual(getBuildCount());\n        //        });\n        //    });\n        //\n        //    it('returns an array of items if an array is specified', function () {\n        //\n        //        expect(mockModel.searchLocalCache([1, 2]).length).toEqual(2);\n        //    });\n        //\n        //    function getBuildCount() {\n        //        return mockModel._cachedIndexes.main.lookup.lookupId.buildCount;\n        //    }\n        //\n        //\n        //});\n\n        describe('Method: getListItemById', function() {\n            it('returns a single list item', function() {\n                mockModel.getListItemById(1)\n                    .then(function(response) {\n                        expect(response.id).toEqual(1);\n                    });\n                $httpBackend.flush();\n            });\n            //it('returns undefined if no matching record is found', function () {\n            //    mockXMLService.xhrStub('emptyResponse');\n            //    mockModel.getListItemById(5)\n            //        .then(function (response) {\n            //            expect(response).toBeUndefined();\n            //        });\n            //    $rootScope.$digest();\n            //});\n        });\n\n        describe('Method: getAllListItems', function() {\n            it('returns both expected entities', function() {\n                mockModel.getAllListItems(1)\n                    .then(function(response) {\n                        expect(response.count()).toEqual(2);\n                    });\n                $httpBackend.flush();\n            });\n        });\n\n        describe('Method: getQuery', function() {\n            it('returns the query by name', function() {\n                expect(mockModel.getQuery('primary')).toBe(mockModel.queries.primary);\n            });\n            it('returns undefined if a query is requested that hasn\\'t been registered', function() {\n                expect(mockModel.getQuery('never registered')).toBeUndefined();\n            });\n        });\n\n        describe('Method: getFieldDefinition', function() {\n            it('correctly looks up the field definition given the field name', function() {\n                expect(mockModel.getFieldDefinition('id')).toBe(mockModel.list.fields[0]);\n            });\n        });\n\n        describe('Method: extendListMetadata', function() {\n            it('extends the list information from xml', function() {\n                mockModel.deferredListDefinition = null;\n                mockModel.extendListMetadata();\n                $httpBackend.flush();\n                expect(mockModel.deferredListDefinition).not.toBeNull();\n            });\n\n            it('only fetches the list definition once although it\\'s requested multiple times', function() {\n                spyOn(apDataService, 'getList').and.callThrough();\n                mockModel.deferredListDefinition = null;\n                mockModel.extendListMetadata();\n                mockModel.extendListMetadata();\n                $httpBackend.flush();\n                expect(apDataService.getList.calls.count()).toEqual(1);\n            });\n        });\n\n        describe('Method: isInitialized', function() {\n            it('should return true if an initial query has been made', function() {\n                mockModel.executeQuery('primary');\n                expect(mockModel.isInitialised()).toBe(true);\n            });\n        });\n\n        describe('Method: generateMockData', function() {\n            it('creates n mock records', function() {\n                expect(mockModel.generateMockData({ quantity: 12 }).length)\n                    .toEqual(12);\n            });\n        });\n\n        describe('Method: validateEntity', function() {\n            it('validates a valid entity', function() {\n                expect(mockModel.validateEntity(mockEntityCache[1])).toBe(true);\n            });\n\n            it('rejects a null value', function() {\n                mockEntityCache[1].boolean = null;\n                expect(mockModel.validateEntity(mockEntityCache[1])).toBe(false);\n            });\n        });\n\n        describe('Method: resolvePermissions', function() {\n            it('correctly identifies that the user can approve', function() {\n                mockModel.list.permissions = new ap.BasePermissionObject();\n                mockModel.list.permissions['ApproveItems'] = true;\n                expect(mockModel.resolvePermissions().ApproveItems).toBe(true);\n            });\n            it('falls back to use permission from first list item to resolve', function() {\n                let initialPermissions = mockModel.resolvePermissions();\n                expect(initialPermissions.AddListItems).toEqual(true);\n                //Make sure not to use saved permissions on list\n                mockModel.list.permissions = undefined;\n                //Update value on first list item which is what will be used to populate list permissions\n                var firstListItemPermissions = mockModel.getCachedEntities().first().resolvePermissions();\n\n                //Service will attempt to use same permissions as an existing list item\n                expect(mockModel.resolvePermissions()).toEqual(firstListItemPermissions);\n            });\n            it('correctly identifies that the user doesn\\'t have the required permissions', function() {\n                //Clear out any list permissions\n                mockModel.list.permissions = undefined;\n                let firstListItem = mockModel.getCachedEntities().first();\n                //Set permissions to allow approving list items\n                firstListItem.permMask = '0x0000000000000010';\n                let updatedPermissions = mockModel.resolvePermissions();\n\n                expect(firstListItem.resolvePermissions()).toEqual(updatedPermissions);\n\n                expect(updatedPermissions.EditListItems).toEqual(false);\n                expect(updatedPermissions.ApproveItems).toEqual(true);\n\n                mockModel.list.permissions = undefined;\n                //Update the permMask for the first list item, giving the user only the ability to ViewListItems\n                firstListItem.permMask = '0x0000000000000001';\n                updatedPermissions = mockModel.resolvePermissions();\n\n                expect(firstListItem.resolvePermissions()).toEqual(updatedPermissions);\n\n                expect(updatedPermissions.ViewListItems).toEqual(true);\n                expect(updatedPermissions.ApproveItems).toEqual(false);\n\n            });\n        });\n\n        function getResponseXML() {\n            var deferred = $q.defer();\n            deferred.resolve(mockXMLService.listItemsSinceChangeToken);\n            return deferred.promise;\n        }\n\n        function mockExecuteQuery() {\n            var deferred = $q.defer();\n            deferred.resolve(mockModel.getCache());\n            return deferred.promise;\n        }\n\n\n        //describe('Method: getLocalEntity', function () {\n        //    it('finds the correct entity using the list item id', function () {\n        //        expect(mockModel.getLocalEntity(2)).toEqual(mockEntityCache[2]);\n        //    });\n        //});\n    });\n}"],"sourceRoot":"/source/"}