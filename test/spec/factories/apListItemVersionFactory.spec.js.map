{"version":3,"sources":["spec/factories/apListItemVersionFactory.spec.ts"],"names":["ap","ap.resetFieldVersionCollection"],"mappings":"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","file":"spec/factories/apListItemVersionFactory.spec.js","sourcesContent":["/// <reference path=\"../../mock/app.module.mock.ts\" />\r\nmodule ap {\r\n    'use strict';\r\n\r\n    var mockModel: MockModel,\r\n        versionHistoryCollection: VersionHistoryCollection<MockListItem>,\r\n        integerFieldVersionCollection: FieldVersionCollection<MockListItem>,\r\n        integerFieldDefinition: FieldDefinition,\r\n        mockUser = {lookupId: 22, lookupValue: 'Some Guy'};\r\n\r\n\r\n    describe('Factory: apListItemVersionFactory', function () {\r\n\r\n        beforeEach(module('angularPoint'));\r\n\r\n        beforeEach(inject(function (_mockModel_) {\r\n            //factory = _apListItemFactory_;\r\n            mockModel = _mockModel_;\r\n\r\n            integerFieldDefinition = mockModel.getFieldDefinition('integer');\r\n            resetFieldVersionCollection();\r\n        }));\r\n\r\n        describe('Class FieldVersionCollection', function () {\r\n            it('allows versions to be added', function () {\r\n                integerFieldVersionCollection.addVersion(mockUser, new Date(2013, 9, 8), 5, 1);\r\n                expect(integerFieldVersionCollection.length).toEqual(1);\r\n                expect(integerFieldVersionCollection.versions[1]).toBeDefined();\r\n            });\r\n            it('exposes fields mapped name', function () {\r\n                expect(integerFieldDefinition.mappedName).toEqual('integer');\r\n            });\r\n        });\r\n\r\n        describe('Class FieldChangeSummary', function () {\r\n\r\n            it('correctly detects a change', function () {\r\n                var newVersion = new mockModel.factory<MockListItem>({integer: 4});\r\n                var oldVersion = new mockModel.factory<MockListItem>({integer: 3});\r\n                var changeSummary = new ap.FieldChangeSummary(newVersion, oldVersion);\r\n\r\n                expect(changeSummary.hasMajorChanges).toBeTruthy();\r\n            });\r\n\r\n        });\r\n\r\n        describe('Class VersionSummary', function () {\r\n\r\n            describe('getter hasMajorChanges', function () {\r\n                it('returns false when nothing changes between versions', function () {\r\n                    var newVersion = new mockModel.factory<MockListItem>({integer: 3, version: 2});\r\n                    var oldVersion = new mockModel.factory<MockListItem>({integer: 3, version: 1});\r\n                    var versionSummary = new ap.VersionSummary(newVersion, oldVersion);\r\n\r\n                    expect(versionSummary.hasMajorChanges).toBeFalsy();\r\n                });\r\n                it('returns true when nothing changes between versions', function () {\r\n                    var newVersion = new mockModel.factory<MockListItem>({integer: 4, version: 2});\r\n                    var oldVersion = new mockModel.factory<MockListItem>({integer: 3, version: 1});\r\n                    var versionSummary = new ap.VersionSummary(newVersion, oldVersion);\r\n\r\n                    expect(versionSummary.hasMajorChanges).toBeTruthy();\r\n                });\r\n            });\r\n\r\n            describe('change count', function () {\r\n                it('correctly identifies that 2 fields were changed', function () {\r\n                    var newVersion = new mockModel.factory<MockListItem>({boolean: false, integer: 3, version: 2});\r\n                    var oldVersion = new mockModel.factory<MockListItem>({boolean: true, integer: 4, version: 1});\r\n                    var versionSummary = new ap.VersionSummary(newVersion, oldVersion);\r\n\r\n                    expect(versionSummary.changeCount).toEqual(2);\r\n                });\r\n            });\r\n\r\n        });\r\n\r\n        describe('Class ChangeSummary', function() {\r\n                      \r\n            it('correctly determines which changes are significant', function () {\r\n                var changes = {\r\n                    /** Significant because it's the first */\r\n                    1: new mockModel.factory<MockListItem>({integer: 2, version: 1}),\r\n                    /** Significant because integer changed */\r\n                    2: new mockModel.factory<MockListItem>({integer: 3, version: 2}),\r\n                    /** Not a significant change */\r\n                    3: new mockModel.factory<MockListItem>({integer: 3, version: 3})\r\n                };\r\n                var changeSummary = new ap.ChangeSummary(changes);\r\n\r\n                expect(changeSummary.significantVersionCount).toEqual(2);\r\n            });\r\n        });\r\n\r\n        describe('Class VersionHistoryCollection', function() {\r\n            let v1Date = new Date(2014, 10, 9);\r\n            let v2Date = new Date(2014, 11, 1);\r\n            let mockUser2 = {lookupId: 7, lookupValue: 'James Bond'}\r\n            \r\n            let integerVersions = {\r\n                mappedName: 'integer',\r\n                versions: {\r\n                    1: {value: 2, editor: mockUser, modified: v1Date},\r\n                    2: {value: 3, editor: mockUser2, modified: v2Date}\r\n                }\r\n            }\r\n            let booleanVersions = {\r\n                mappedName: 'boolean',\r\n                versions: {\r\n                    1: {value: true, editor: mockUser, modified: new Date(2014, 10, 9)},\r\n                    2: {value: false, editor: mockUser2, modified: new Date(2014, 11, 1)}\r\n                }\r\n            }\r\n            let versionHistoryCollection;\r\n            \r\n            beforeEach(() => versionHistoryCollection = new ap.VersionHistoryCollection([integerVersions, booleanVersions], mockModel.factory));\r\n            \r\n            it('correctly combines two field version collections to build version 1', function() {\r\n                expect(versionHistoryCollection[1].integer).toEqual(2);\r\n                expect(versionHistoryCollection[1].boolean).toEqual(true);\r\n                expect(versionHistoryCollection[1].modified).toEqual(v1Date);\r\n                expect(versionHistoryCollection[1].editor).toEqual(mockUser);\r\n                expect(versionHistoryCollection[1].version).toEqual(1);\r\n            });\r\n            \r\n            it('correctly combines two field version collections to build version 2', function() {\r\n                expect(versionHistoryCollection[2].integer).toEqual(3);\r\n                expect(versionHistoryCollection[2].boolean).toEqual(false);\r\n                expect(versionHistoryCollection[2].modified).toEqual(v2Date);\r\n                expect(versionHistoryCollection[2].editor).toEqual(mockUser2);\r\n                expect(versionHistoryCollection[2].version).toEqual(2);                \r\n            });\r\n            \r\n            it('its count method to return the number of versions', function() {\r\n                expect(versionHistoryCollection.count()).toEqual(2);\r\n            });\r\n            \r\n            it('its toArray method converts the object into an array', function() {\r\n                expect(versionHistoryCollection.toArray()[1]).toEqual(versionHistoryCollection[2]);\r\n                expect(versionHistoryCollection.toArray()[0].version).toEqual(1);\r\n            });\r\n            \r\n            \r\n        });\r\n\r\n\r\n    });\r\n\r\n    function resetFieldVersionCollection() {\r\n        integerFieldVersionCollection = new ap.FieldVersionCollection(integerFieldDefinition);\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"/source/"}