{"version":3,"sources":["spec/factories/apQueryFactory.spec.ts"],"names":["ap","mockExecuteQuery","generateLocalStorageQuery"],"mappings":"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","file":"spec/factories/apQueryFactory.spec.js","sourcesContent":["/// <reference path=\"../../mock/app.module.mock.ts\" />\nmodule ap {\n    'use strict';\n\n\n    describe('Factory: apQueryFactory', function() {\n\n        beforeEach(module('angularPoint'));\n\n        var factory: QueryFactory, mockModel: MockModel, mockQuery: Query<MockListItem>, $rootScope, $q, apDataService: DataService,\n            LocalStorageQuery: LocalStorageQuery;\n\n        beforeEach(inject(function(_mockModel_, _apQueryFactory_, _$rootScope_, _$q_, _apDataService_) {\n\n            mockModel = _mockModel_;\n            factory = _apQueryFactory_;\n            $q = _$q_;\n            apDataService = _apDataService_;\n            mockQuery = mockModel.getQuery();\n            $rootScope = _$rootScope_;\n        }));\n\n        describe('Method: getModel', function() {\n            it('returns the model', function() {\n                expect(mockQuery.getModel()).toBe(mockModel);\n            });\n        });\n\n        describe('Method: getCache', function() {\n            it('returns the cache', function() {\n                expect(mockQuery.getCache()).toBe(mockQuery.indexedCache);\n            });\n        });\n\n        describe('Method: hydrateFromLocalStorage', function() {\n\n\n            // it('removes cache if expired', function() {\n            //     let query = new ap.Query<MockListItem>({\n            //         name: 'test',\n            //         sessionStorage: true\n            //     }, mockModel);\n            //     let fakeCache = \"{lastRun: \\\"2015-09-02T15:35:26.335Z\\\"}\"\n            //     sessionStorage.setItem('fakeCache', fakeCache);\n            //     let localStorageQuery = \n                \n            //     expect(mockQuery.getCache()).toBe(mockQuery.indexedCache);\n            // });\n        });\n\n        describe('Method: execute', function() {\n            var firstPromise, secondPromise, thirdPromise;\n            beforeEach(function() {\n                spyOn(apDataService, 'executeQuery').and.callFake(mockExecuteQuery);\n                firstPromise = mockModel.executeQuery('primary');\n                secondPromise = mockModel.executeQuery('primary');\n                thirdPromise = mockModel.executeQuery('secondary');\n            });\n            it('returns the same promise if the query is requested twice before it is resolved', function() {\n                expect(firstPromise).toBe(secondPromise);\n            });\n            it('returns a different promise if the two different queries are called', function() {\n                expect(firstPromise).not.toBe(thirdPromise);\n            });\n            it('sets the negotiating with server flag prior to completion', function() {\n                expect(mockQuery.negotiatingWithServer).toBe(true);\n            });\n            it('resets the negotiating with server flag once complete', function() {\n                $rootScope.$digest();\n                expect(mockQuery.negotiatingWithServer).toBe(false);\n            });\n\n        });\n\n        describe('Method: hydrateJSONDates', function() {\n            it('converts JSON dates to JS date object', function() {\n                let date1 = new Date();\n                let date2 = new Date(2012, 5, 10);\n                \n                let jsonString = JSON.stringify({\n                    aDate: date1,\n                    aString: 'testing',\n                    anotherDate: date2\n                });\n                \n                let jsonObject = JSON.parse(jsonString);\n                expect(_.isString(jsonObject.aDate)).toBeTruthy();\n                expect(_.isDate(jsonObject.aDate)).toBeFalsy();\n                \n                let revivedObject = mockQuery.hydrateJSONDates(jsonObject, ['aDate', 'anotherDate']);\n                expect(revivedObject.aDate).toEqual(date1);\n                expect(revivedObject.anotherDate).toEqual(date2);\n                \n            });\n        });\n        \n        // describe('Class: LocalStorageQuery', function() {\n        //     it('returns the model', function() {\n        //         expect(mockQuery.getModel()).toBe(mockModel);\n        //     });\n        // });\n        \n        function mockExecuteQuery() {\n            var deferred = $q.defer();\n            deferred.resolve(mockModel.getCache());\n            return deferred.promise;\n        }\n        \n        function generateLocalStorageQuery() {\n            \n        }\n\n    });\n}"],"sourceRoot":"/source/"}