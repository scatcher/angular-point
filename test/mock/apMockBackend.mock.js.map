{"version":3,"sources":["mock/apMockBackend.mock.ts"],"names":["ap","ap.test","ap.test.ModelChangeQueue","ap.test.ModelChangeQueue.constructor","ap.test.ModelChangeQueue.clear","ap.test.getMockId","ap.test.MockBackend","ap.test.MockBackend.constructor","routeMatcher","ap.test.MockBackend.constructor.ChangeCallback","ap.test.MockBackend.constructor.getListItems","ap.test.MockBackend.constructor.getListItemById","ap.test.MockBackend.constructor.getZRows","ap.test.MockBackend.constructor.convertUpdateRequestToResponse","ap.test.MockBackend.constructor.createZRow","ap.test.MockBackend.constructor.getMockUser","ap.test.MockBackend.constructor.updateListItem","ap.test.MockBackend.constructor.getListItemChangesSinceToken","ap.test.MockBackend.constructor.buildRSDataNode","ap.test.MockBackend.constructor.getChangesSinceToken","ap.test.MockBackend.constructor.registerUpdate","ap.test.MockBackend.constructor.registerDeletion","ap.test.MockBackend.constructor.getChangeTokenCache","ap.test.MockBackend.constructor.registerChangeToken","ap.test.MockBackend.constructor.generateChangeToken","ap.test.MockBackend.constructor.listsResponseEnvelope","ap.test.MockBackend.constructor.getListModel","ap.test.MockBackend.constructor.getListId","ap.test.MockBackend.constructor.getChangeToken","ap.test.MockBackend.constructor.getXMLNodeContents","ap.test.MockBackend.constructor.generateMockListItems","ap.test.MockBackend.constructor.getNamedListItems","ap.test.MockBackend.constructor.getCachedResponse","ap.test.MockBackend.constructor.responder"],"mappings":"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","file":"mock/apMockBackend.mock.js","sourcesContent":["/// <reference path=\"../../typings/ap.d.ts\" />\n/// <reference path=\"../../typings/tsd.d.ts\" />\n\nmodule ap.test {\n    'use strict';\n\n    export interface ICachedXML {\n        lists: {\n            [key: string]: { //List Item GUID\n                //Each list can have cached response for each type of call\n                GetListItemChangesSinceToken?: string;\n                GetListItems?: string;\n            }\n        }\n        operations: { //Common Cached Requests\n            AddAttachment?: string;\n            DeleteAttachment?: string;\n            GenericEmpty?: string;\n            GetAttachmentCollection?: string;\n            GetGroupCollectionFromSite?: string;\n            GetGroupCollectionFromUser?: string;\n            GetList?: string;\n            GetListCollection?: string;\n            GetTemplatesForItem?: string;\n            GetUserCollectionFromGroup?: string;\n            GetUserCollectionFromSite?: string;\n            GetUserProfileByName?: string;\n            GetVersionCollection?: string;\n            GetView?: string;\n            GetWorkflowDataForItem?: string;\n            StartWorkflow?: string;\n            UpdateListItems?: string;\n            WebUrlFromPageUrl?: string;\n        }\n    }\n\n    class ModelChangeQueue {\n        pendingDeletions = [];\n        pendingUpdates = [];\n        constructor(private token: string) { }\n        clear(updatedToken: string) {\n            this.token = updatedToken || '';\n            this.pendingDeletions = [];\n            this.pendingUpdates = [];\n        }\n    }\n\n    var activeEntities: { [key: number]: ListItem<any> } = {}, //{ listItem.id: ListItem, ...}\n        changeQueue: { [key: string]: ModelChangeQueue } = {},\n        mockId = 10000,\n        xmlNS = {\n            listItems: `xmlns:s=\"uuid:BDC6E3F0-6DA3-11d1-A2A3-00AA00C14882\" xmlns:dt=\"uuid:C2F41010-65B3-11d1-A29F-00AA00C14882\" xmlns:rs=\"urn:schemas-microsoft-com:rowset\" xmlns:z=\"#RowsetSchema\"`,\n            soap: `xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"`\n        };\n\n\n    function getMockId() {\n        return mockId++;\n    }\n\n    export class MockBackend {\n        constructor($httpBackend: ng.IHttpBackendService, apCachedXML: ICachedXML, apCacheService: CacheService, apWebServiceService: WebServiceService,\n            apUtilityService: UtilityService, $injector: ng.auto.IInjectorService, apEncodeService: EncodeService, apChangeService: ChangeService,\n            apXMLToJSONService: XMLToJSONService) {\n\n\n\n            /** Listen for each of the standard services being called and try to return a cached XML response for the\n             * operation */\n            _.each(apWebServiceService.webServices, function(service) {\n                /** Lists has many special cases so don't create generic backend for it */\n                if (service !== 'Lists') {\n                    $httpBackend.whenPOST(function routeMatcher(url) {\n                        return url.indexOf('bin/' + service + '.asmx') > -1;\n                    })\n                        .respond(function(method, url, data) {\n                            var requestXML = $.parseXML(data);\n                            /** Get the xml namespace for the current service */\n                            var soapAction = apWebServiceService.xmlns(service);\n                            var request = $(requestXML).find('[xmlns^=\"' + soapAction + '\"]');\n                            var operation = request[0].nodeName;\n                            var responseXML = apCachedXML.operations[operation];\n                            return responder(responseXML);\n                        });\n                }\n            });\n\n            $httpBackend.whenPOST(/Lists.asmx/)\n                .respond(function(method: string, url: string, data: string) {\n                    var requestXML = $.parseXML(data);\n                    var request = $(requestXML).find('[xmlns^=\"http://schemas.microsoft.com/sharepoint/\"]');\n                    var operation = request[0].nodeName;\n                    var responseXML;\n\n                    switch (operation) {\n                        case 'GetListItems':\n                            responseXML = getListItems(request);\n                            break;\n                        case 'GetList':\n                        case 'GetListItemChangesSinceToken':\n                            responseXML = getListItemChangesSinceToken(data, request);\n                            break;\n                        case 'UpdateListItems':\n                            responseXML = updateListItem(request);\n                            break;\n\n                        default:\n                            responseXML = apCachedXML.operations[operation];\n                    }\n                    return responder(responseXML);\n                });\n\n\n            apChangeService.subscribeToUpdates(function ChangeCallback(entity: ListItem<any>, options, promise) {\n                activeEntities[entity.id] = entity;\n            });\n\n\n\n\n\n            /////////////////////////// PRIVATE ////////////////////////////////\n\n\n            function getListItems(request: JQuery) {\n                var zrows = [];\n                var rowLimit = $(request).find('rowLimit').text();\n                if (rowLimit === \"1\") {\n                    var zrow = getListItemById(request);\n                    if (!zrow) {\n                        /** A match wasn't found so return a mock */\n                        zrow = generateMockListItems(request, 1)[0];\n                    }\n                    zrows.push(zrow);\n                } else {\n                    zrows = getZRows(request);\n                }\n\n                var responseEnvelope = listsResponseEnvelope('GetListItems');\n                var payload = '<listitems ' + xmlNS.listItems + '>' + buildRSDataNode(zrows) + '</listitems>';\n\n                return responseEnvelope.header + payload + responseEnvelope.footer;\n            }\n\n            /**\n             * @ngdoc function\n             * @name getListItemById\n             * @description\n             * Attempts to retrieve an xml zrow from cached xml.\n             * @param {xml} request XML Request.\n             * @returns {xml} zrow\n             */\n            function getListItemById(request: JQuery): JQuery {\n                var match;\n                /** Retrieve the list item id */\n                var id = $(request).find('Query').find('Value[Type=\"Number\"]').text();\n                var rows = getZRows(request);\n\n                /** Attempt to find the requested list item in the cached xml */\n                _.each(rows, function(row) {\n                    if ($(row).attr('ows_ID') == id) {\n                        match = row;\n                        /** Break loop */\n                        return false;\n                    }\n                });\n\n                /** Returns a single entity */\n                return match;\n            }\n\n            function getZRows(request: JQuery): JQuery {\n                var responseXML = getNamedListItems('GetListItems', request);\n\n                var parsedXML = $.parseXML(responseXML);\n                return apXMLToJSONService.filterNodes(parsedXML, 'z:row');\n            }\n\n            function convertUpdateRequestToResponse(request: JQuery, optionalAttributes): string {\n                var fields = $(request).find('Field');\n                var changeObject = {};\n                _.each(fields, function(field: JQuery) {\n                    var fieldName = $(field).attr('Name');\n                    var fieldValue = $(field).text();\n                    changeObject[fieldName] = _.unescape(fieldValue);\n                });\n                _.extend(changeObject, optionalAttributes);\n                return createZRow(changeObject);\n            }\n\n            function createZRow(changeObject: Object): string {\n                var zrow = '<z:row ';\n                _.each(changeObject, function(fieldValue: string, fieldName: string) {\n                    zrow += ' ows_' + fieldName + '=\"' + _.escape(fieldValue) + '\"';\n                });\n                zrow += ' xmlns:z=\"#RowsetSchema\"/>';\n                return zrow;\n            }\n\n            function getMockUser(): ap.IUser {\n                var mockUser = { lookupId: 100, lookupValue: 'Joe User' };\n\n                try {\n                    mockUser = $injector.get('mockUser');\n                } catch (err) {\n                    //Oh well, we tried to see if a default mock user was specified.\n                }\n                return mockUser;\n            }\n\n            function updateListItem(request: JQuery): string {\n\n                var zrow,\n                    overrides,\n                    updateMethod = request.find('Method'),\n                    cmd = updateMethod.attr('Cmd');\n\n                switch (cmd) {\n                    /** Create list item */\n                    case 'New':\n                        var model = getListModel(request);\n                        /** Need to create an id so find set it 1 higher than the id of the most recent entity */\n                        var lastEntity = model.getCachedEntities().last();\n                        var mockId = lastEntity ? lastEntity.id + 1 : getMockId();\n\n                        //Mock Fields that would be set upon list item creation\n                        overrides = {\n                            ID: mockId,\n                            Modified: apEncodeService.encodeValue('DateTime', new Date()),\n                            Created: apEncodeService.encodeValue('DateTime', new Date()),\n                            Author: apEncodeService.encodeValue('User', getMockUser()),\n                            Editor: apEncodeService.encodeValue('User', getMockUser()),\n                            PermMask: '0x7fffffffffffffff',\n                            UniqueId: mockId + ';#{11FF840D-9CE1-4961-B7FD-51B9DF07706B}',\n                            FileRef: mockId + ';#sitecollection/site/ListName/' + mockId + '_.000'\n                        }\n\n                        zrow = convertUpdateRequestToResponse(request, overrides);\n                        registerUpdate(request, zrow);\n                        break;\n                    case 'Update':\n                        var listItemStrId = $(request).find('Field[Name=\"ID\"]').text();\n                        //Retrieve the JS Object that is attempting to update\n                        var activeEntity = activeEntities[listItemStrId];\n\n                        //Mock fields that would be updated when a list item is update\n                        overrides = {\n                            Modified: apEncodeService.encodeValue('DateTime', new Date()),\n                            Editor: apEncodeService.encodeValue('User', getMockUser()),\n                            Version: activeEntity.version ? activeEntity.version + 1 : 2\n                        };\n                        \n                        var fieldDefinitions = activeEntity.getList().fields;\n                        var valuePairs = apEncodeService.generateValuePairs(fieldDefinitions, activeEntity);\n                        var encodedValues = {};\n                        _.each(valuePairs, function(pair) {\n                            encodedValues[pair[0]] = pair[1];\n                        });\n\n                        var opts = _.extend({}, encodedValues, overrides);\n\n                        zrow = convertUpdateRequestToResponse(request, opts);\n                        registerUpdate(request, zrow);\n\n                        //Cleanup\n                        delete activeEntities[listItemStrId];\n                        break;\n                    case 'Delete':\n                        /** No z:row element when deleted */\n                        zrow = '';\n                        _.each($(request).find('Field'), function(field) {\n                            var fieldId = parseInt($(field).text(), 10);\n                            registerDeletion(request, fieldId);\n                        });\n                        break;\n                }\n\n                var responseEnvelope = listsResponseEnvelope('UpdateListItems');\n\n                var payload = `<Results><Result ID=\"1,${cmd}\"><ErrorCode>0x00000000</ErrorCode>${zrow}</Result></Results>`;\n                var xmlResponse = responseEnvelope.header + payload + responseEnvelope.footer;\n                return xmlResponse;\n            }\n\n\n            function getListItemChangesSinceToken(data: string, request: JQuery): string {\n                var responseXML, responseEnvelope, changeNodes, payload;\n                var changeToken = getChangeToken(request);\n                var newChangeToken = generateChangeToken(request);\n                if (changeToken) {\n                    /** Follow on request */\n                    responseEnvelope = listsResponseEnvelope('GetListItemChangesSinceToken');\n                    changeNodes = getChangesSinceToken(request, newChangeToken);\n                    payload = `<listitems ${xmlNS.listItems}> ${changeNodes.changes} ${changeNodes.rsdata}</listitems>`;\n                    responseXML = responseEnvelope.header + payload + responseEnvelope.footer;\n                } else {\n                    var model = getListModel(request);\n                    registerChangeToken(request, newChangeToken);\n                    /** Initial request so register this token */\n                    if (apCachedXML.lists[model.list.title] && apCachedXML.lists[model.list.title].GetListItemChangesSinceToken) {\n                        /** Use Cached XML */\n                        responseXML = apCachedXML.lists[model.list.title].GetListItemChangesSinceToken;\n                    } else {\n                        /** Generate mocks if no cached XML is found */\n                        responseEnvelope = listsResponseEnvelope('GetListItemChangesSinceToken');\n                        /** Add mocked items to change queue */\n                        changeQueue[model.list.guid].pendingUpdates = generateMockListItems(request, 10);\n                        changeNodes = getChangesSinceToken(request, newChangeToken);\n                        payload = `<listitems ${xmlNS.listItems}>${changeNodes.changes} ${changeNodes.rsdata}</listitems>`;\n                        responseXML = responseEnvelope.header + payload + responseEnvelope.footer;\n                    }\n                }\n                return responseXML;\n            }\n\n            function buildRSDataNode(zrows: JQuery[]): string {\n\n                var rsdata = '<rs:data ItemCount=\"' + zrows.length + '\">';\n                _.each(zrows, function(zrow: JQuery) {\n                    /** Work with zrows that have been parsed to xml as well as those that are still strings */\n                    rsdata += typeof zrow === 'object' ? apUtilityService.stringifyXML(zrow) : zrow;\n                });\n                rsdata += '</rs:data>';\n                return rsdata;\n            }\n\n            function getChangesSinceToken(request: JQuery, token: string): { changes: string; rsdata: string; } {\n                var response = { changes: '', rsdata: '' };\n                var model = getListModel(request);\n                var changesSinceToken = getChangeTokenCache(request);\n                /** Build XML for any list items that have been added or updated */\n                response.rsdata = buildRSDataNode(changesSinceToken.pendingUpdates);\n\n                /* Build Changes XML node for entities that have been deleted.  There are other valid changes [Restore] but\n                 at this point we're only concerned with mocking deleted items */\n                response.changes = '<Changes LastChangeToken=\"' + token + '\">';\n                if (changesSinceToken.pendingDeletions.length > 0) {\n                    _.each(changesSinceToken.pendingDeletions, function(listItemId) {\n                        response.changes += '<Id ChangeType=\"Delete\" UniqueId=\"\">' + listItemId + '</Id>';\n                    });\n                }\n                response.changes += '</Changes>';\n\n                /** Clear out changes for next time */\n                changesSinceToken.clear(token);\n                return response;\n            }\n\n            function registerUpdate(request: JQuery, zrow: JQuery): void {\n                getChangeTokenCache(request).pendingUpdates.push(zrow);\n            }\n\n            function registerDeletion(request: JQuery, id: number): void {\n                getChangeTokenCache(request).pendingDeletions.push(id);\n            }\n\n            function getChangeTokenCache(request: JQuery) {\n                var model = getListModel(request);\n                changeQueue[model.list.guid] =\n                changeQueue[model.list.guid] || new ModelChangeQueue(generateChangeToken(request));\n                return changeQueue[model.list.guid];\n            }\n\n            function registerChangeToken(request: JQuery, token: string): void {\n                var model = getListModel(request);\n                changeQueue[model.list.guid] = new ModelChangeQueue(token);\n            }\n\n            function generateChangeToken(request: JQuery): string {\n                var model = getListModel(request);\n                return _.uniqueId(model ? model.list.guid : '');\n            }\n\n            function listsResponseEnvelope(operation: string): { footer: string; header: string; payload: string; } {\n                var response = {\n                    footer: `</${operation}Result></${operation}Response></soap:Body></soap:Envelope>`,\n                    header: `<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope ${xmlNS.soap}><soap:Body>\n                        <${operation}Response xmlns=\"http://schemas.microsoft.com/sharepoint/soap/\"><${operation}Result>`,\n                    payload: ''\n                };\n                return response;\n            }\n\n            function getListModel(request: JQuery): Model {\n                /** Find the list id */\n                var listGuid = getListId(request);\n                /** Check with cache service to see if a list with the matching guid has registered */\n                return apCacheService.getModel(listGuid);\n            }\n\n            function getListId(request: JQuery): string {\n                return getXMLNodeContents(request, 'listName');\n            }\n\n            function getChangeToken(request: JQuery): string {\n                return getXMLNodeContents(request, 'changeToken');\n            }\n\n            function getXMLNodeContents(request: JQuery, element): string {\n                var changeToken;\n                var changeTokenNode = $(request).find(element);\n                if (changeTokenNode.length) {\n                    changeToken = changeTokenNode.text();\n                }\n                return changeToken;\n            }\n\n            function generateMockListItems(request: JQuery, quantity: number): JQuery[] {\n                var model = getListModel(request);\n                var mockRecords = model.generateMockData({ quantity: quantity });\n                var zrows = [];\n                _.each(mockRecords, function(mockRecord) {\n                    var changeObject = {};\n                    /** Generate value pairs for each property on the mock object */\n                    var valuePairs = apEncodeService.generateValuePairs(model.list.fields, mockRecord);\n                    /** Create a key/val property for each valuePiar */\n                    _.each(valuePairs, function(valuePair) {\n                        changeObject[valuePair[0]] = valuePair[1];\n                    });\n                    zrows.push(createZRow(changeObject));\n                });\n                return zrows;\n            }\n\n            function getNamedListItems(operation: string, request: JQuery): string {\n                var responseXML;\n                /** Check with cache service to see if a list with the matching guid has registered */\n                var listModel = getListModel(request);\n                if (listModel) {\n                    /** Use the list name in the model to see if we have cached XML */\n                    responseXML = getCachedResponse(operation, listModel.list.title);\n                }\n                if (!responseXML) {\n                    console.info('No Cached Data Found For ' + listModel.list.title);\n                    /** No cached XML so just use the default operation response */\n                    responseXML = getCachedResponse(operation);\n                }\n                return responseXML;\n            }\n\n            function getCachedResponse(operation: string, fileName?: string): string {\n                var response;\n                fileName = fileName || operation;\n\n                if (apCachedXML.lists[fileName] && apCachedXML.lists[fileName][operation]) {\n                    response = apCachedXML.lists[fileName][operation];\n                } else if (_.keys(apCachedXML.lists[fileName]).length > 0) {\n                    /** The exact operation we'd looking for isn't found but there's another there so we'll try that */\n                    response = apCachedXML.lists[fileName][_.keys(apCachedXML.lists[fileName])[0]];\n                }\n                return response;\n            }\n\n            function responder(responseXML) {\n                return [200, responseXML];\n            }\n\n\n        }\n    }\n\n    angular.module('angularPoint')\n        .run(MockBackend);\n\n}"],"sourceRoot":"/source/"}