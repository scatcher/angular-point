{"version":3,"sources":["mock/apMockBackend.mock.ts"],"names":[],"mappings":"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","file":"mock/apMockBackend.mock.js","sourcesContent":["/// <reference path=\"../../typings/ap.d.ts\" />\r\n/// <reference path=\"../../typings/tsd.d.ts\" />\r\n\r\nmodule ap.test {\r\n    'use strict';\r\n\r\n    export interface ICachedXML {\r\n        lists: {\r\n            [key: string]: { //List Item GUID\r\n                //Each list can have cached response for each type of call\r\n                GetListItemChangesSinceToken?: string;\r\n                GetListItems?: string;\r\n            }\r\n        }\r\n        operations: { //Common Cached Requests\r\n            AddAttachment?: string;\r\n            DeleteAttachment?: string;\r\n            GenericEmpty?: string;\r\n            GetAttachmentCollection?: string;\r\n            GetGroupCollectionFromSite?: string;\r\n            GetGroupCollectionFromUser?: string;\r\n            GetList?: string;\r\n            GetListCollection?: string;\r\n            GetTemplatesForItem?: string;\r\n            GetUserCollectionFromGroup?: string;\r\n            GetUserCollectionFromSite?: string;\r\n            GetUserProfileByName?: string;\r\n            GetVersionCollection?: string;\r\n            GetView?: string;\r\n            GetWorkflowDataForItem?: string;\r\n            StartWorkflow?: string;\r\n            UpdateListItems?: string;\r\n            WebUrlFromPageUrl?: string;\r\n        }\r\n    }\r\n\r\n    class ModelChangeQueue {\r\n        pendingDeletions = [];\r\n        pendingUpdates = [];\r\n        constructor(private token: string) { }\r\n        clear(updatedToken: string) {\r\n            this.token = updatedToken || '';\r\n            this.pendingDeletions = [];\r\n            this.pendingUpdates = [];\r\n        }\r\n    }\r\n\r\n    var activeEntities: { [key: number]: ListItem<any> } = {}, //{ listItem.id: ListItem, ...}\r\n        changeQueue: { [key: string]: ModelChangeQueue } = {},\r\n        mockId = 10000,\r\n        xmlNS = {\r\n            listItems: `xmlns:s=\"uuid:BDC6E3F0-6DA3-11d1-A2A3-00AA00C14882\" xmlns:dt=\"uuid:C2F41010-65B3-11d1-A29F-00AA00C14882\" xmlns:rs=\"urn:schemas-microsoft-com:rowset\" xmlns:z=\"#RowsetSchema\"`,\r\n            soap: `xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"`\r\n        };\r\n\r\n\r\n    function getMockId() {\r\n        return mockId++;\r\n    }\r\n\r\n    export class MockBackend {\r\n        constructor($httpBackend: ng.IHttpBackendService, apCachedXML: ICachedXML, apCacheService: CacheService, apWebServiceService: WebServiceService,\r\n            apUtilityService: UtilityService, $injector: ng.auto.IInjectorService, apEncodeService: EncodeService, apChangeService: ChangeService,\r\n            apXMLToJSONService: XMLToJSONService) {\r\n\r\n\r\n\r\n            /** Listen for each of the standard services being called and try to return a cached XML response for the\r\n             * operation */\r\n            _.each(apWebServiceService.webServices, function(service) {\r\n                /** Lists has many special cases so don't create generic backend for it */\r\n                if (service !== 'Lists') {\r\n                    $httpBackend.whenPOST(function routeMatcher(url) {\r\n                        return url.indexOf('bin/' + service + '.asmx') > -1;\r\n                    })\r\n                        .respond(function(method, url, data) {\r\n                            var requestXML = $.parseXML(data);\r\n                            /** Get the xml namespace for the current service */\r\n                            var soapAction = apWebServiceService.xmlns(service);\r\n                            var request = $(requestXML).find('[xmlns^=\"' + soapAction + '\"]');\r\n                            var operation = request[0].nodeName;\r\n                            var responseXML = apCachedXML.operations[operation];\r\n                            return responder(responseXML);\r\n                        });\r\n                }\r\n            });\r\n\r\n            $httpBackend.whenPOST(/Lists.asmx/)\r\n                .respond(function(method: string, url: string, data: string) {\r\n                    var requestXML = $.parseXML(data);\r\n                    var request = $(requestXML).find('[xmlns^=\"http://schemas.microsoft.com/sharepoint/\"]');\r\n                    var operation = request[0].nodeName;\r\n                    var responseXML;\r\n\r\n                    switch (operation) {\r\n                        case 'GetListItems':\r\n                            responseXML = getListItems(request);\r\n                            break;\r\n                        case 'GetList':\r\n                        case 'GetListItemChangesSinceToken':\r\n                            responseXML = getListItemChangesSinceToken(data, request);\r\n                            break;\r\n                        case 'UpdateListItems':\r\n                            responseXML = updateListItem(request);\r\n                            break;\r\n\r\n                        default:\r\n                            responseXML = apCachedXML.operations[operation];\r\n                    }\r\n                    return responder(responseXML);\r\n                });\r\n\r\n\r\n            apChangeService.subscribeToUpdates(function ChangeCallback(entity: ListItem<any>, options, promise) {\r\n                activeEntities[entity.id] = entity;\r\n            });\r\n\r\n\r\n\r\n\r\n\r\n            /////////////////////////// PRIVATE ////////////////////////////////\r\n\r\n\r\n            function getListItems(request: JQuery) {\r\n                var zrows = [];\r\n                var rowLimit = $(request).find('rowLimit').text();\r\n                if (rowLimit === \"1\") {\r\n                    var zrow = getListItemById(request);\r\n                    if (!zrow) {\r\n                        /** A match wasn't found so return a mock */\r\n                        zrow = generateMockListItems(request, 1)[0];\r\n                    }\r\n                    zrows.push(zrow);\r\n                } else {\r\n                    zrows = getZRows(request);\r\n                }\r\n\r\n                var responseEnvelope = listsResponseEnvelope('GetListItems');\r\n                var payload = '<listitems ' + xmlNS.listItems + '>' + buildRSDataNode(zrows) + '</listitems>';\r\n\r\n                return responseEnvelope.header + payload + responseEnvelope.footer;\r\n            }\r\n\r\n            /**\r\n             * @ngdoc function\r\n             * @name getListItemById\r\n             * @description\r\n             * Attempts to retrieve an xml zrow from cached xml.\r\n             * @param {xml} request XML Request.\r\n             * @returns {xml} zrow\r\n             */\r\n            function getListItemById(request: JQuery): JQuery {\r\n                var match;\r\n                /** Retrieve the list item id */\r\n                var id = $(request).find('Query').find('Value[Type=\"Number\"]').text();\r\n                var rows = getZRows(request);\r\n\r\n                /** Attempt to find the requested list item in the cached xml */\r\n                _.each(rows, function(row) {\r\n                    if ($(row).attr('ows_ID') == id) {\r\n                        match = row;\r\n                        /** Break loop */\r\n                        return false;\r\n                    }\r\n                });\r\n\r\n                /** Returns a single entity */\r\n                return match;\r\n            }\r\n\r\n            function getZRows(request: JQuery): JQuery {\r\n                var responseXML = getNamedListItems('GetListItems', request);\r\n\r\n                var parsedXML = $.parseXML(responseXML);\r\n                return apXMLToJSONService.filterNodes(parsedXML, 'z:row');\r\n            }\r\n\r\n            function convertUpdateRequestToResponse(request: JQuery, optionalAttributes): string {\r\n                var fields = $(request).find('Field');\r\n                var changeObject = {};\r\n                _.each(fields, function(field: JQuery) {\r\n                    var fieldName = $(field).attr('Name');\r\n                    var fieldValue = $(field).text();\r\n                    changeObject[fieldName] = _.unescape(fieldValue);\r\n                });\r\n                _.extend(changeObject, optionalAttributes);\r\n                return createZRow(changeObject);\r\n            }\r\n\r\n            function createZRow(changeObject: Object): string {\r\n                var zrow = '<z:row ';\r\n                _.each(changeObject, function(fieldValue: string, fieldName: string) {\r\n                    zrow += ' ows_' + fieldName + '=\"' + _.escape(fieldValue) + '\"';\r\n                });\r\n                zrow += ' xmlns:z=\"#RowsetSchema\"/>';\r\n                return zrow;\r\n            }\r\n\r\n            function getMockUser(): ap.IUser {\r\n                var mockUser = { lookupId: 100, lookupValue: 'Joe User' };\r\n\r\n                try {\r\n                    mockUser = $injector.get('mockUser');\r\n                } catch (err) {\r\n                    //Oh well, we tried to see if a default mock user was specified.\r\n                }\r\n                return mockUser;\r\n            }\r\n\r\n            function updateListItem(request: JQuery): string {\r\n\r\n                var zrow,\r\n                    overrides,\r\n                    updateMethod = request.find('Method'),\r\n                    cmd = updateMethod.attr('Cmd');\r\n\r\n                switch (cmd) {\r\n                    /** Create list item */\r\n                    case 'New':\r\n                        var model = getListModel(request);\r\n                        /** Need to create an id so find set it 1 higher than the id of the most recent entity */\r\n                        var lastEntity = model.getCachedEntities().last();\r\n                        var mockId = lastEntity ? lastEntity.id + 1 : getMockId();\r\n\r\n                        //Mock Fields that would be set upon list item creation\r\n                        overrides = {\r\n                            ID: mockId,\r\n                            Modified: apEncodeService.encodeValue('DateTime', new Date()),\r\n                            Created: apEncodeService.encodeValue('DateTime', new Date()),\r\n                            Author: apEncodeService.encodeValue('User', getMockUser()),\r\n                            Editor: apEncodeService.encodeValue('User', getMockUser()),\r\n                            PermMask: '0x7fffffffffffffff',\r\n                            UniqueId: mockId + ';#{11FF840D-9CE1-4961-B7FD-51B9DF07706B}',\r\n                            FileRef: mockId + ';#sitecollection/site/ListName/' + mockId + '_.000'\r\n                        }\r\n\r\n                        zrow = convertUpdateRequestToResponse(request, overrides);\r\n                        registerUpdate(request, zrow);\r\n                        break;\r\n                    case 'Update':\r\n                        var listItemStrId = $(request).find('Field[Name=\"ID\"]').text();\r\n                        //Retrieve the JS Object that is attempting to update\r\n                        var activeEntity = activeEntities[listItemStrId];\r\n\r\n                        //Mock fields that would be updated when a list item is update\r\n                        overrides = {\r\n                            Modified: apEncodeService.encodeValue('DateTime', new Date()),\r\n                            Editor: apEncodeService.encodeValue('User', getMockUser()),\r\n                            Version: activeEntity.version ? activeEntity.version + 1 : 2\r\n                        };\r\n                        \r\n                        var fieldDefinitions = activeEntity.getList().fields;\r\n                        var valuePairs = apEncodeService.generateValuePairs(fieldDefinitions, activeEntity);\r\n                        var encodedValues = {};\r\n                        _.each(valuePairs, function(pair) {\r\n                            encodedValues[pair[0]] = pair[1];\r\n                        });\r\n\r\n                        var opts = _.extend({}, encodedValues, overrides);\r\n\r\n                        zrow = convertUpdateRequestToResponse(request, opts);\r\n                        registerUpdate(request, zrow);\r\n\r\n                        //Cleanup\r\n                        delete activeEntities[listItemStrId];\r\n                        break;\r\n                    case 'Delete':\r\n                        /** No z:row element when deleted */\r\n                        zrow = '';\r\n                        _.each($(request).find('Field'), function(field) {\r\n                            var fieldId = parseInt($(field).text(), 10);\r\n                            registerDeletion(request, fieldId);\r\n                        });\r\n                        break;\r\n                }\r\n\r\n                var responseEnvelope = listsResponseEnvelope('UpdateListItems');\r\n\r\n                var payload = `<Results><Result ID=\"1,${cmd}\"><ErrorCode>0x00000000</ErrorCode>${zrow}</Result></Results>`;\r\n                var xmlResponse = responseEnvelope.header + payload + responseEnvelope.footer;\r\n                return xmlResponse;\r\n            }\r\n\r\n\r\n            function getListItemChangesSinceToken(data: string, request: JQuery): string {\r\n                var responseXML, responseEnvelope, changeNodes, payload;\r\n                var changeToken = getChangeToken(request);\r\n                var newChangeToken = generateChangeToken(request);\r\n                if (changeToken) {\r\n                    /** Follow on request */\r\n                    responseEnvelope = listsResponseEnvelope('GetListItemChangesSinceToken');\r\n                    changeNodes = getChangesSinceToken(request, newChangeToken);\r\n                    payload = `<listitems ${xmlNS.listItems}> ${changeNodes.changes} ${changeNodes.rsdata}</listitems>`;\r\n                    responseXML = responseEnvelope.header + payload + responseEnvelope.footer;\r\n                } else {\r\n                    var model = getListModel(request);\r\n                    registerChangeToken(request, newChangeToken);\r\n                    /** Initial request so register this token */\r\n                    if (apCachedXML.lists[model.list.title] && apCachedXML.lists[model.list.title].GetListItemChangesSinceToken) {\r\n                        /** Use Cached XML */\r\n                        responseXML = apCachedXML.lists[model.list.title].GetListItemChangesSinceToken;\r\n                    } else {\r\n                        /** Generate mocks if no cached XML is found */\r\n                        responseEnvelope = listsResponseEnvelope('GetListItemChangesSinceToken');\r\n                        /** Add mocked items to change queue */\r\n                        changeQueue[model.list.guid].pendingUpdates = generateMockListItems(request, 10);\r\n                        changeNodes = getChangesSinceToken(request, newChangeToken);\r\n                        payload = `<listitems ${xmlNS.listItems}>${changeNodes.changes} ${changeNodes.rsdata}</listitems>`;\r\n                        responseXML = responseEnvelope.header + payload + responseEnvelope.footer;\r\n                    }\r\n                }\r\n                return responseXML;\r\n            }\r\n\r\n            function buildRSDataNode(zrows: JQuery[]): string {\r\n\r\n                var rsdata = '<rs:data ItemCount=\"' + zrows.length + '\">';\r\n                _.each(zrows, function(zrow: JQuery) {\r\n                    /** Work with zrows that have been parsed to xml as well as those that are still strings */\r\n                    rsdata += typeof zrow === 'object' ? apUtilityService.stringifyXML(zrow) : zrow;\r\n                });\r\n                rsdata += '</rs:data>';\r\n                return rsdata;\r\n            }\r\n\r\n            function getChangesSinceToken(request: JQuery, token: string): { changes: string; rsdata: string; } {\r\n                var response = { changes: '', rsdata: '' };\r\n                var model = getListModel(request);\r\n                var changesSinceToken = getChangeTokenCache(request);\r\n                /** Build XML for any list items that have been added or updated */\r\n                response.rsdata = buildRSDataNode(changesSinceToken.pendingUpdates);\r\n\r\n                /* Build Changes XML node for entities that have been deleted.  There are other valid changes [Restore] but\r\n                 at this point we're only concerned with mocking deleted items */\r\n                response.changes = '<Changes LastChangeToken=\"' + token + '\">';\r\n                if (changesSinceToken.pendingDeletions.length > 0) {\r\n                    _.each(changesSinceToken.pendingDeletions, function(listItemId) {\r\n                        response.changes += '<Id ChangeType=\"Delete\" UniqueId=\"\">' + listItemId + '</Id>';\r\n                    });\r\n                }\r\n                response.changes += '</Changes>';\r\n\r\n                /** Clear out changes for next time */\r\n                changesSinceToken.clear(token);\r\n                return response;\r\n            }\r\n\r\n            function registerUpdate(request: JQuery, zrow: JQuery): void {\r\n                getChangeTokenCache(request).pendingUpdates.push(zrow);\r\n            }\r\n\r\n            function registerDeletion(request: JQuery, id: number): void {\r\n                getChangeTokenCache(request).pendingDeletions.push(id);\r\n            }\r\n\r\n            function getChangeTokenCache(request: JQuery) {\r\n                var model = getListModel(request);\r\n                changeQueue[model.list.guid] =\r\n                changeQueue[model.list.guid] || new ModelChangeQueue(generateChangeToken(request));\r\n                return changeQueue[model.list.guid];\r\n            }\r\n\r\n            function registerChangeToken(request: JQuery, token: string): void {\r\n                var model = getListModel(request);\r\n                changeQueue[model.list.guid] = new ModelChangeQueue(token);\r\n            }\r\n\r\n            function generateChangeToken(request: JQuery): string {\r\n                var model = getListModel(request);\r\n                return _.uniqueId(model ? model.list.guid : '');\r\n            }\r\n\r\n            function listsResponseEnvelope(operation: string): { footer: string; header: string; payload: string; } {\r\n                var response = {\r\n                    footer: `</${operation}Result></${operation}Response></soap:Body></soap:Envelope>`,\r\n                    header: `<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope ${xmlNS.soap}><soap:Body>\r\n                        <${operation}Response xmlns=\"http://schemas.microsoft.com/sharepoint/soap/\"><${operation}Result>`,\r\n                    payload: ''\r\n                };\r\n                return response;\r\n            }\r\n\r\n            function getListModel(request: JQuery): Model {\r\n                /** Find the list id */\r\n                var listGuid = getListId(request);\r\n                /** Check with cache service to see if a list with the matching guid has registered */\r\n                return apCacheService.getModel(listGuid);\r\n            }\r\n\r\n            function getListId(request: JQuery): string {\r\n                return getXMLNodeContents(request, 'listName');\r\n            }\r\n\r\n            function getChangeToken(request: JQuery): string {\r\n                return getXMLNodeContents(request, 'changeToken');\r\n            }\r\n\r\n            function getXMLNodeContents(request: JQuery, element): string {\r\n                var changeToken;\r\n                var changeTokenNode = $(request).find(element);\r\n                if (changeTokenNode.length) {\r\n                    changeToken = changeTokenNode.text();\r\n                }\r\n                return changeToken;\r\n            }\r\n\r\n            function generateMockListItems(request: JQuery, quantity: number): JQuery[] {\r\n                var model = getListModel(request);\r\n                var mockRecords = model.generateMockData({ quantity: quantity });\r\n                var zrows = [];\r\n                _.each(mockRecords, function(mockRecord) {\r\n                    var changeObject = {};\r\n                    /** Generate value pairs for each property on the mock object */\r\n                    var valuePairs = apEncodeService.generateValuePairs(model.list.fields, mockRecord);\r\n                    /** Create a key/val property for each valuePiar */\r\n                    _.each(valuePairs, function(valuePair) {\r\n                        changeObject[valuePair[0]] = valuePair[1];\r\n                    });\r\n                    zrows.push(createZRow(changeObject));\r\n                });\r\n                return zrows;\r\n            }\r\n\r\n            function getNamedListItems(operation: string, request: JQuery): string {\r\n                var responseXML;\r\n                /** Check with cache service to see if a list with the matching guid has registered */\r\n                var listModel = getListModel(request);\r\n                if (listModel) {\r\n                    /** Use the list name in the model to see if we have cached XML */\r\n                    responseXML = getCachedResponse(operation, listModel.list.title);\r\n                }\r\n                if (!responseXML) {\r\n                    console.info('No Cached Data Found For ' + listModel.list.title);\r\n                    /** No cached XML so just use the default operation response */\r\n                    responseXML = getCachedResponse(operation);\r\n                }\r\n                return responseXML;\r\n            }\r\n\r\n            function getCachedResponse(operation: string, fileName?: string): string {\r\n                var response;\r\n                fileName = fileName || operation;\r\n\r\n                if (apCachedXML.lists[fileName] && apCachedXML.lists[fileName][operation]) {\r\n                    response = apCachedXML.lists[fileName][operation];\r\n                } else if (_.keys(apCachedXML.lists[fileName]).length > 0) {\r\n                    /** The exact operation we'd looking for isn't found but there's another there so we'll try that */\r\n                    response = apCachedXML.lists[fileName][_.keys(apCachedXML.lists[fileName])[0]];\r\n                }\r\n                return response;\r\n            }\r\n\r\n            function responder(responseXML) {\r\n                return [200, responseXML];\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n    angular.module('angularPoint')\r\n        .run(MockBackend);\r\n\r\n}"],"sourceRoot":"/source/"}