{"version":3,"sources":["mock/apMockBackend.mock.ts"],"names":["ap","ap.ModelChangeQueue","ap.ModelChangeQueue.constructor","ap.ModelChangeQueue.clear","ap.getMockId","ap.MockBackend","ap.MockBackend.constructor","routeMatcher","ap.MockBackend.constructor.ChangeCallback","ap.MockBackend.constructor.getListItems","ap.MockBackend.constructor.getListItemById","ap.MockBackend.constructor.getZRows","ap.MockBackend.constructor.convertUpdateRequestToResponse","ap.MockBackend.constructor.createZRow","ap.MockBackend.constructor.getMockUser","ap.MockBackend.constructor.updateListItem","ap.MockBackend.constructor.getListItemChangesSinceToken","ap.MockBackend.constructor.buildRSDataNode","ap.MockBackend.constructor.getChangesSinceToken","ap.MockBackend.constructor.registerUpdate","ap.MockBackend.constructor.registerDeletion","ap.MockBackend.constructor.getChangeTokenCache","ap.MockBackend.constructor.registerChangeToken","ap.MockBackend.constructor.generateChangeToken","ap.MockBackend.constructor.listsResponseEnvelope","ap.MockBackend.constructor.getListModel","ap.MockBackend.constructor.getListId","ap.MockBackend.constructor.getChangeToken","ap.MockBackend.constructor.getXMLNodeContents","ap.MockBackend.constructor.generateMockListItems","ap.MockBackend.constructor.getNamedListItems","ap.MockBackend.constructor.getCachedResponse","ap.MockBackend.constructor.responder"],"mappings":"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","file":"mock/apMockBackend.mock.js","sourcesContent":["/// <reference path=\"../../typings/ap.d.ts\" />\r\n/// <reference path=\"../../typings/tsd.d.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n    export interface ICachedXML {\r\n        lists: {\r\n            [key: string]: { //List Item GUID\r\n                //Each list can have cached response for each type of call\r\n                GetListItemChangesSinceToken?: string;\r\n                GetListItems?: string;\r\n            }\r\n        }\r\n        operations: { //Common Cached Requests\r\n            AddAttachment?: string;\r\n            DeleteAttachment?: string;\r\n            GenericEmpty?: string;\r\n            GetAttachmentCollection?: string;\r\n            GetGroupCollectionFromSite?: string;\r\n            GetGroupCollectionFromUser?: string;\r\n            GetList?: string;\r\n            GetListCollection?: string;\r\n            GetTemplatesForItem?: string;\r\n            GetUserCollectionFromGroup?: string;\r\n            GetUserCollectionFromSite?: string;\r\n            GetUserProfileByName?: string;\r\n            GetVersionCollection?: string;\r\n            GetView?: string;\r\n            GetWorkflowDataForItem?: string;\r\n            StartWorkflow?: string;\r\n            UpdateListItems?: string;\r\n            WebUrlFromPageUrl?: string;\r\n        }\r\n    }\r\n\r\n    class ModelChangeQueue {\r\n        pendingDeletions = [];\r\n        pendingUpdates = [];\r\n        constructor(private token: string) { }\r\n        clear(updatedToken: string) {\r\n            this.token = updatedToken || '';\r\n            this.pendingDeletions = [];\r\n            this.pendingUpdates = [];\r\n        }\r\n    }\r\n\r\n    var activeEntities: { [key: number]: ListItem<any> } = {}, //{ listItem.id: ListItem, ...}\r\n        changeQueue: { [key: string]: ModelChangeQueue } = {},\r\n        mockId = 10000,\r\n        xmlNS = {\r\n            listItems: `xmlns:s=\"uuid:BDC6E3F0-6DA3-11d1-A2A3-00AA00C14882\" xmlns:dt=\"uuid:C2F41010-65B3-11d1-A29F-00AA00C14882\" xmlns:rs=\"urn:schemas-microsoft-com:rowset\" xmlns:z=\"#RowsetSchema\"`,\r\n            soap: `xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"`\r\n        };\r\n\r\n\r\n    function getMockId() {\r\n        return mockId++;\r\n    }\r\n\r\n    export class MockBackend {\r\n        constructor($httpBackend: ng.IHttpBackendService, apCachedXML: ICachedXML, apCacheService: CacheService, apWebServiceService: WebServiceService,\r\n            apUtilityService: UtilityService, $injector: ng.auto.IInjectorService, apEncodeService: EncodeService, apChangeService: ChangeService,\r\n            apXMLToJSONService: XMLToJSONService) {\r\n\r\n\r\n\r\n            /** Listen for each of the standard services being called and try to return a cached XML response for the\r\n             * operation */\r\n            _.each(apWebServiceService.webServices, function(service) {\r\n                /** Lists has many special cases so don't create generic backend for it */\r\n                if (service !== 'Lists') {\r\n                    $httpBackend.whenPOST(function routeMatcher(url) {\r\n                        return url.indexOf('bin/' + service + '.asmx') > -1;\r\n                    })\r\n                        .respond(function(method, url, data) {\r\n                            var requestXML = $.parseXML(data);\r\n                            /** Get the xml namespace for the current service */\r\n                            var soapAction = apWebServiceService.xmlns(service);\r\n                            var request = $(requestXML).find('[xmlns^=\"' + soapAction + '\"]');\r\n                            var operation = request[0].nodeName;\r\n                            var responseXML = apCachedXML.operations[operation];\r\n                            return responder(responseXML);\r\n                        });\r\n                }\r\n            });\r\n\r\n            $httpBackend.whenPOST(/Lists.asmx/)\r\n                .respond(function(method: string, url: string, data: string) {\r\n                    var requestXML = $.parseXML(data);\r\n                    var request = $(requestXML).find('[xmlns^=\"http://schemas.microsoft.com/sharepoint/\"]');\r\n                    var operation = request[0].nodeName;\r\n                    var responseXML;\r\n\r\n                    switch (operation) {\r\n                        case 'GetListItems':\r\n                            responseXML = getListItems(request);\r\n                            break;\r\n                        case 'GetList':\r\n                        case 'GetListItemChangesSinceToken':\r\n                            responseXML = getListItemChangesSinceToken(data, request);\r\n                            break;\r\n                        case 'UpdateListItems':\r\n                            responseXML = updateListItem(request);\r\n                            break;\r\n\r\n                        default:\r\n                            responseXML = apCachedXML.operations[operation];\r\n                    }\r\n                    return responder(responseXML);\r\n                });\r\n\r\n\r\n            apChangeService.subscribeToUpdates(function ChangeCallback(entity: ListItem<any>, options, promise) {\r\n                activeEntities[entity.id] = entity;\r\n            });\r\n\r\n\r\n\r\n\r\n\r\n            /////////////////////////// PRIVATE ////////////////////////////////\r\n\r\n\r\n            function getListItems(request: JQuery) {\r\n                var zrows = [];\r\n                var rowLimit = $(request).find('rowLimit').text();\r\n                if (rowLimit === \"1\") {\r\n                    var zrow = getListItemById(request);\r\n                    if (!zrow) {\r\n                        /** A match wasn't found so return a mock */\r\n                        zrow = generateMockListItems(request, 1)[0];\r\n                    }\r\n                    zrows.push(zrow);\r\n                } else {\r\n                    zrows = getZRows(request);\r\n                }\r\n\r\n                var responseEnvelope = listsResponseEnvelope('GetListItems');\r\n                var payload = '<listitems ' + xmlNS.listItems + '>' + buildRSDataNode(zrows) + '</listitems>';\r\n\r\n                return responseEnvelope.header + payload + responseEnvelope.footer;\r\n            }\r\n\r\n            /**\r\n             * @ngdoc function\r\n             * @name getListItemById\r\n             * @description\r\n             * Attempts to retrieve an xml zrow from cached xml.\r\n             * @param {xml} request XML Request.\r\n             * @returns {xml} zrow\r\n             */\r\n            function getListItemById(request: JQuery): JQuery {\r\n                var match;\r\n                /** Retrieve the list item id */\r\n                var id = $(request).find('Query').find('Value[Type=\"Number\"]').text();\r\n                var rows = getZRows(request);\r\n\r\n                /** Attempt to find the requested list item in the cached xml */\r\n                _.each(rows, function(row) {\r\n                    if ($(row).attr('ows_ID') == id) {\r\n                        match = row;\r\n                        /** Break loop */\r\n                        return false;\r\n                    }\r\n                });\r\n\r\n                /** Returns a single entity */\r\n                return match;\r\n            }\r\n\r\n            function getZRows(request: JQuery): JQuery {\r\n                var responseXML = getNamedListItems('GetListItems', request);\r\n\r\n                var parsedXML = $.parseXML(responseXML);\r\n                return apXMLToJSONService.filterNodes(parsedXML, 'z:row');\r\n            }\r\n\r\n            function convertUpdateRequestToResponse(request: JQuery, optionalAttributes): string {\r\n                var fields = $(request).find('Field');\r\n                var changeObject = {};\r\n                _.each(fields, function(field: JQuery) {\r\n                    var fieldName = $(field).attr('Name');\r\n                    var fieldValue = $(field).text();\r\n                    changeObject[fieldName] = _.unescape(fieldValue);\r\n                });\r\n                _.extend(changeObject, optionalAttributes);\r\n                return createZRow(changeObject);\r\n            }\r\n\r\n            function createZRow(changeObject: Object): string {\r\n                var zrow = '<z:row ';\r\n                _.each(changeObject, function(fieldValue: string, fieldName: string) {\r\n                    zrow += ' ows_' + fieldName + '=\"' + _.escape(fieldValue) + '\"';\r\n                });\r\n                zrow += ' xmlns:z=\"#RowsetSchema\"/>';\r\n                return zrow;\r\n            }\r\n\r\n            function getMockUser(): ap.IUser {\r\n                var mockUser = { lookupId: 100, lookupValue: 'Joe User' };\r\n\r\n                try {\r\n                    mockUser = $injector.get('mockUser');\r\n                } catch (err) {\r\n                    //Oh well, we tried to see if a default mock user was specified.\r\n                }\r\n                return mockUser;\r\n            }\r\n\r\n            function updateListItem(request: JQuery): string {\r\n\r\n                var zrow,\r\n                    overrides,\r\n                    updateMethod = request.find('Method'),\r\n                    cmd = updateMethod.attr('Cmd');\r\n\r\n                switch (cmd) {\r\n                    /** Create list item */\r\n                    case 'New':\r\n                        var model = getListModel(request);\r\n                        /** Need to create an id so find set it 1 higher than the id of the most recent entity */\r\n                        var lastEntity = model.getCachedEntities().last();\r\n                        var mockId = lastEntity ? lastEntity.id + 1 : getMockId();\r\n\r\n                        //Mock Fields that would be set upon list item creation\r\n                        overrides = {\r\n                            ID: mockId,\r\n                            Modified: apEncodeService.encodeValue('DateTime', new Date()),\r\n                            Created: apEncodeService.encodeValue('DateTime', new Date()),\r\n                            Author: apEncodeService.encodeValue('User', getMockUser()),\r\n                            Editor: apEncodeService.encodeValue('User', getMockUser()),\r\n                            PermMask: '0x7fffffffffffffff',\r\n                            UniqueId: mockId + ';#{11FF840D-9CE1-4961-B7FD-51B9DF07706B}',\r\n                            FileRef: mockId + ';#sitecollection/site/ListName/' + mockId + '_.000'\r\n                        }\r\n\r\n                        zrow = convertUpdateRequestToResponse(request, overrides);\r\n                        registerUpdate(request, zrow);\r\n                        break;\r\n                    case 'Update':\r\n                        var listItemStrId = $(request).find('Field[Name=\"ID\"]').text();\r\n                        //Retrieve the JS Object that is attempting to update\r\n                        var activeEntity = activeEntities[listItemStrId];\r\n\r\n                        //Mock fields that would be updated when a list item is update\r\n                        overrides = {\r\n                            Modified: apEncodeService.encodeValue('DateTime', new Date()),\r\n                            Editor: apEncodeService.encodeValue('User', getMockUser()),\r\n                            Version: activeEntity.version ? activeEntity.version + 1 : 2\r\n                        };\r\n                        \r\n                        var fieldDefinitions = activeEntity.getList().fields;\r\n                        var valuePairs = apEncodeService.generateValuePairs(fieldDefinitions, activeEntity);\r\n                        var encodedValues = {};\r\n                        _.each(valuePairs, function(pair) {\r\n                            encodedValues[pair[0]] = pair[1];\r\n                        });\r\n\r\n                        var opts = _.extend({}, encodedValues, overrides);\r\n\r\n                        zrow = convertUpdateRequestToResponse(request, opts);\r\n                        registerUpdate(request, zrow);\r\n\r\n                        //Cleanup\r\n                        delete activeEntities[listItemStrId];\r\n                        break;\r\n                    case 'Delete':\r\n                        /** No z:row element when deleted */\r\n                        zrow = '';\r\n                        _.each($(request).find('Field'), function(field) {\r\n                            var fieldId = parseInt($(field).text(), 10);\r\n                            registerDeletion(request, fieldId);\r\n                        });\r\n                        break;\r\n                }\r\n\r\n                var responseEnvelope = listsResponseEnvelope('UpdateListItems');\r\n\r\n                var payload = `<Results><Result ID=\"1,${cmd}\"><ErrorCode>0x00000000</ErrorCode>${zrow}</Result></Results>`;\r\n                var xmlResponse = responseEnvelope.header + payload + responseEnvelope.footer;\r\n                return xmlResponse;\r\n            }\r\n\r\n\r\n            function getListItemChangesSinceToken(data: string, request: JQuery): string {\r\n                var responseXML, responseEnvelope, changeNodes, payload;\r\n                var changeToken = getChangeToken(request);\r\n                var newChangeToken = generateChangeToken(request);\r\n                if (changeToken) {\r\n                    /** Follow on request */\r\n                    responseEnvelope = listsResponseEnvelope('GetListItemChangesSinceToken');\r\n                    changeNodes = getChangesSinceToken(request, newChangeToken);\r\n                    payload = `<listitems ${xmlNS.listItems}> ${changeNodes.changes} ${changeNodes.rsdata}</listitems>`;\r\n                    responseXML = responseEnvelope.header + payload + responseEnvelope.footer;\r\n                } else {\r\n                    var model = getListModel(request);\r\n                    registerChangeToken(request, newChangeToken);\r\n                    /** Initial request so register this token */\r\n                    if (apCachedXML.lists[model.list.title] && apCachedXML.lists[model.list.title].GetListItemChangesSinceToken) {\r\n                        /** Use Cached XML */\r\n                        responseXML = apCachedXML.lists[model.list.title].GetListItemChangesSinceToken;\r\n                    } else {\r\n                        /** Generate mocks if no cached XML is found */\r\n                        responseEnvelope = listsResponseEnvelope('GetListItemChangesSinceToken');\r\n                        /** Add mocked items to change queue */\r\n                        changeQueue[model.list.guid].pendingUpdates = generateMockListItems(request, 10);\r\n                        changeNodes = getChangesSinceToken(request, newChangeToken);\r\n                        payload = `<listitems ${xmlNS.listItems}>${changeNodes.changes} ${changeNodes.rsdata}</listitems>`;\r\n                        responseXML = responseEnvelope.header + payload + responseEnvelope.footer;\r\n                    }\r\n                }\r\n                return responseXML;\r\n            }\r\n\r\n            function buildRSDataNode(zrows: JQuery[]): string {\r\n\r\n                var rsdata = '<rs:data ItemCount=\"' + zrows.length + '\">';\r\n                _.each(zrows, function(zrow: JQuery) {\r\n                    /** Work with zrows that have been parsed to xml as well as those that are still strings */\r\n                    rsdata += typeof zrow === 'object' ? apUtilityService.stringifyXML(zrow) : zrow;\r\n                });\r\n                rsdata += '</rs:data>';\r\n                return rsdata;\r\n            }\r\n\r\n            function getChangesSinceToken(request: JQuery, token: string): { changes: string; rsdata: string; } {\r\n                var response = { changes: '', rsdata: '' };\r\n                var model = getListModel(request);\r\n                var changesSinceToken = getChangeTokenCache(request);\r\n                /** Build XML for any list items that have been added or updated */\r\n                response.rsdata = buildRSDataNode(changesSinceToken.pendingUpdates);\r\n\r\n                /* Build Changes XML node for entities that have been deleted.  There are other valid changes [Restore] but\r\n                 at this point we're only concerned with mocking deleted items */\r\n                response.changes = '<Changes LastChangeToken=\"' + token + '\">';\r\n                if (changesSinceToken.pendingDeletions.length > 0) {\r\n                    _.each(changesSinceToken.pendingDeletions, function(listItemId) {\r\n                        response.changes += '<Id ChangeType=\"Delete\" UniqueId=\"\">' + listItemId + '</Id>';\r\n                    });\r\n                }\r\n                response.changes += '</Changes>';\r\n\r\n                /** Clear out changes for next time */\r\n                changesSinceToken.clear(token);\r\n                return response;\r\n            }\r\n\r\n            function registerUpdate(request: JQuery, zrow: JQuery): void {\r\n                getChangeTokenCache(request).pendingUpdates.push(zrow);\r\n            }\r\n\r\n            function registerDeletion(request: JQuery, id: number): void {\r\n                getChangeTokenCache(request).pendingDeletions.push(id);\r\n            }\r\n\r\n            function getChangeTokenCache(request: JQuery) {\r\n                var model = getListModel(request);\r\n                changeQueue[model.list.guid] =\r\n                changeQueue[model.list.guid] || new ModelChangeQueue(generateChangeToken(request));\r\n                return changeQueue[model.list.guid];\r\n            }\r\n\r\n            function registerChangeToken(request: JQuery, token: string): void {\r\n                var model = getListModel(request);\r\n                changeQueue[model.list.guid] = new ModelChangeQueue(token);\r\n            }\r\n\r\n            function generateChangeToken(request: JQuery): string {\r\n                var model = getListModel(request);\r\n                return _.uniqueId(model ? model.list.guid : '');\r\n            }\r\n\r\n            function listsResponseEnvelope(operation: string): { footer: string; header: string; payload: string; } {\r\n                var response = {\r\n                    footer: `</${operation}Result></${operation}Response></soap:Body></soap:Envelope>`,\r\n                    header: `<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope ${xmlNS.soap}><soap:Body>\r\n                        <${operation}Response xmlns=\"http://schemas.microsoft.com/sharepoint/soap/\"><${operation}Result>`,\r\n                    payload: ''\r\n                };\r\n                return response;\r\n            }\r\n\r\n            function getListModel(request: JQuery): Model {\r\n                /** Find the list id */\r\n                var listGuid = getListId(request);\r\n                /** Check with cache service to see if a list with the matching guid has registered */\r\n                return apCacheService.getModel(listGuid);\r\n            }\r\n\r\n            function getListId(request: JQuery): string {\r\n                return getXMLNodeContents(request, 'listName');\r\n            }\r\n\r\n            function getChangeToken(request: JQuery): string {\r\n                return getXMLNodeContents(request, 'changeToken');\r\n            }\r\n\r\n            function getXMLNodeContents(request: JQuery, element): string {\r\n                var changeToken;\r\n                var changeTokenNode = $(request).find(element);\r\n                if (changeTokenNode.length) {\r\n                    changeToken = changeTokenNode.text();\r\n                }\r\n                return changeToken;\r\n            }\r\n\r\n            function generateMockListItems(request: JQuery, quantity: number): JQuery[] {\r\n                var model = getListModel(request);\r\n                var mockRecords = model.generateMockData({ quantity: quantity });\r\n                var zrows = [];\r\n                _.each(mockRecords, function(mockRecord) {\r\n                    var changeObject = {};\r\n                    /** Generate value pairs for each property on the mock object */\r\n                    var valuePairs = apEncodeService.generateValuePairs(model.list.fields, mockRecord);\r\n                    /** Create a key/val property for each valuePiar */\r\n                    _.each(valuePairs, function(valuePair) {\r\n                        changeObject[valuePair[0]] = valuePair[1];\r\n                    });\r\n                    zrows.push(createZRow(changeObject));\r\n                });\r\n                return zrows;\r\n            }\r\n\r\n            function getNamedListItems(operation: string, request: JQuery): string {\r\n                var responseXML;\r\n                /** Check with cache service to see if a list with the matching guid has registered */\r\n                var listModel = getListModel(request);\r\n                if (listModel) {\r\n                    /** Use the list name in the model to see if we have cached XML */\r\n                    responseXML = getCachedResponse(operation, listModel.list.title);\r\n                }\r\n                if (!responseXML) {\r\n                    console.info('No Cached Data Found For ' + listModel.list.title);\r\n                    /** No cached XML so just use the default operation response */\r\n                    responseXML = getCachedResponse(operation);\r\n                }\r\n                return responseXML;\r\n            }\r\n\r\n            function getCachedResponse(operation: string, fileName?: string): string {\r\n                var response;\r\n                fileName = fileName || operation;\r\n\r\n                if (apCachedXML.lists[fileName] && apCachedXML.lists[fileName][operation]) {\r\n                    response = apCachedXML.lists[fileName][operation];\r\n                } else if (_.keys(apCachedXML.lists[fileName]).length > 0) {\r\n                    /** The exact operation we'd looking for isn't found but there's another there so we'll try that */\r\n                    response = apCachedXML.lists[fileName][_.keys(apCachedXML.lists[fileName])[0]];\r\n                }\r\n                return response;\r\n            }\r\n\r\n            function responder(responseXML) {\r\n                return [200, responseXML];\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n    angular.module('angularPoint')\r\n        .run(MockBackend);\r\n\r\n}"],"sourceRoot":"/source/"}