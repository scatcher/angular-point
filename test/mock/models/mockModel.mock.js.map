{"version":3,"sources":["mock/models/mockModel.mock.ts"],"names":[],"mappings":"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","file":"mock/models/mockModel.mock.js","sourcesContent":["/// <reference path=\"../app.module.mock.ts\" />\r\n\r\nmodule ap.test {\r\n    'use strict';\r\n\r\n    export class MockListItem extends ap.ListItem<MockListItem>{\r\n        attachments: string[];\r\n        boolean: boolean;\r\n        calculated: string;\r\n        choice: string;\r\n        currency: number;\r\n        date: Date;\r\n        dateTime: Date;\r\n        integer: number;\r\n        float: number;\r\n        html: string;\r\n        hyperlink: string;\r\n        json: Object;\r\n        lookup: ILookup;\r\n        lookupMulti: ILookup[];\r\n        multiChoice: string[];\r\n        note: string;\r\n        picture: string;\r\n        title: string;\r\n        user: IUser;\r\n        userMulti: IUser[];\r\n        constructor(obj) {\r\n            super();\r\n            _.assign(this, obj);\r\n        }\r\n    }\r\n\r\n    export class MockModel extends ap.Model {\r\n        constructor(private $httpBackend, private apCacheService) {\r\n\r\n            /********************* Model Definition ***************************************/\r\n\r\n            /** Model Constructor\r\n             *  Also passes list to List constructor to build viewFields (XML definition of fields to return) */\r\n            super({\r\n                factory: MockListItem,\r\n                list: {\r\n                    title: 'MockList',\r\n                    /**Maps to the offline XML file in dev folder (no spaces) */\r\n                    guid: '{F5345FE7-2F7C-49F7-87D0-DBFEBDD0CE61}',\r\n                    /**List GUID can be found in list properties in SharePoint designer */\r\n                    customFields: [\r\n                        { staticName: \"Title\", objectType: \"Text\", mappedName: \"title\", readOnly: false },\r\n                        // Has required = true to test field validation.\r\n                        {\r\n                            staticName: \"Boolean\",\r\n                            objectType: \"Boolean\",\r\n                            mappedName: \"boolean\",\r\n                            readOnly: false,\r\n                            required: true\r\n                        },\r\n                        { staticName: \"Calculated\", objectType: \"Calculated\", mappedName: \"calculated\", readOnly: true },\r\n                        { staticName: \"Choice\", objectType: \"Choice\", mappedName: \"choice\", readOnly: false },\r\n                        {\r\n                            staticName: 'MultiChoice',\r\n                            objectType: 'MultiChoice',\r\n                            mappedName: 'multiChoice',\r\n                            readOnly: false\r\n                        },\r\n                        { staticName: \"Currency\", objectType: \"Currency\", mappedName: \"currency\", readOnly: false },\r\n                        { staticName: \"Date\", objectType: \"DateTime\", mappedName: \"date\", readOnly: false },\r\n                        { staticName: \"DateTime\", objectType: \"DateTime\", mappedName: \"dateTime\", readOnly: false },\r\n                        { staticName: \"Integer\", objectType: \"Integer\", mappedName: \"integer\", readOnly: false },\r\n                        { staticName: 'Float', objectType: 'Float', mappedName: 'float', readOnly: false },\r\n                        { staticName: 'HTML', objectType: 'HTML', mappedName: 'html', readOnly: false },\r\n                        { staticName: \"JSON\", objectType: \"JSON\", mappedName: \"json\", readOnly: false },\r\n                        { staticName: \"Lookup\", objectType: \"Lookup\", mappedName: \"lookup\", readOnly: false },\r\n                        {\r\n                            staticName: \"LookupMulti\",\r\n                            objectType: \"LookupMulti\",\r\n                            mappedName: \"lookupMulti\",\r\n                            readOnly: false\r\n                        },\r\n                        { staticName: 'Note', objectType: 'Note', mappedName: 'note', readOnly: false },\r\n                        { staticName: \"User\", objectType: \"User\", mappedName: \"user\", readOnly: false },\r\n                        { staticName: \"UserMulti\", objectType: \"UserMulti\", mappedName: \"userMulti\", readOnly: false },\r\n                        { staticName: 'Hyperlink', objectType: 'Hyperlink', mappedName: 'hyperlink', readOnly: false },\r\n                        { staticName: 'Picture', objectType: 'Picture', mappedName: 'picture', readOnly: false },\r\n                        { staticName: 'Attachments', objectType: 'Attachments', mappedName: 'attachments', readOnly: false }\r\n                    ]\r\n                }\r\n            });\r\n\r\n            var model = this;\r\n\r\n            /*********************************** Queries ***************************************/\r\n\r\n            /** Fetch data (pulls local xml if offline named model.list.title + '.xml')\r\n             *  Initially pulls all requested data.  Each subsequent call just pulls records that have been changed,\r\n             *  updates the model, and returns a reference to the updated data array\r\n             * @returns {Array} Requested list items\r\n             */\r\n            model.registerQuery({\r\n                name: 'primary'\r\n            });\r\n\r\n            model.registerQuery({\r\n                name: 'secondary'\r\n            });\r\n\r\n        }\r\n\r\n        getField(name) {\r\n            return _.find(this.list.fields, { mappedName: name });\r\n        }\r\n\r\n        importMocks() {\r\n            var primaryCache = this.getCache('primary');\r\n            var secondaryCache = this.getCache('secondary');\r\n            primaryCache.clear();\r\n            secondaryCache.clear();\r\n\r\n            /** Clear out model cache */\r\n            _.each(this.apCacheService.entityCache, (val, key) => {\r\n                delete this.apCacheService.entityCache[key];\r\n            });\r\n            this.executeQuery('primary')\r\n                .then((data) => {\r\n                    //placeholder\r\n                })\r\n            this.executeQuery('secondary')\r\n                .then((data) => {\r\n                    //placeholder\r\n                })\r\n            this.$httpBackend.flush();\r\n        }\r\n    }\r\n\r\n\r\n    angular.module('angularPoint')\r\n        .service('mockModel', MockModel);\r\n\r\n}"],"sourceRoot":"/source/"}