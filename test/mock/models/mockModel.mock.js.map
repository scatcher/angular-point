{"version":3,"sources":["mock/models/mockModel.mock.ts"],"names":["ap","ap.test","ap.test.MockListItem","ap.test.MockListItem.constructor","ap.test.MockModel","ap.test.MockModel.constructor","ap.test.MockModel.getField","ap.test.MockModel.importMocks"],"mappings":"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","file":"mock/models/mockModel.mock.js","sourcesContent":["/// <reference path=\"../app.module.mock.ts\" />\n\nmodule ap.test {\n    'use strict';\n\n    export class MockListItem extends ap.ListItem<MockListItem>{\n        attachments: string[];\n        boolean: boolean;\n        calculated: string;\n        choice: string;\n        currency: number;\n        date: Date;\n        dateTime: Date;\n        integer: number;\n        float: number;\n        html: string;\n        hyperlink: string;\n        json: Object;\n        lookup: ILookup;\n        lookupMulti: ILookup[];\n        multiChoice: string[];\n        note: string;\n        picture: string;\n        title: string;\n        user: IUser;\n        userMulti: IUser[];\n        constructor(obj) {\n            super();\n            _.assign(this, obj);\n        }\n    }\n\n    export class MockModel extends ap.Model {\n        constructor(private $httpBackend, private apCacheService) {\n\n            /********************* Model Definition ***************************************/\n\n            /** Model Constructor\n             *  Also passes list to List constructor to build viewFields (XML definition of fields to return) */\n            super({\n                factory: MockListItem,\n                list: {\n                    title: 'MockList',\n                    /**Maps to the offline XML file in dev folder (no spaces) */\n                    guid: '{F5345FE7-2F7C-49F7-87D0-DBFEBDD0CE61}',\n                    /**List GUID can be found in list properties in SharePoint designer */\n                    customFields: [\n                        { staticName: \"Title\", objectType: \"Text\", mappedName: \"title\", readOnly: false },\n                        // Has required = true to test field validation.\n                        {\n                            staticName: \"Boolean\",\n                            objectType: \"Boolean\",\n                            mappedName: \"boolean\",\n                            readOnly: false,\n                            required: true\n                        },\n                        { staticName: \"Calculated\", objectType: \"Calculated\", mappedName: \"calculated\", readOnly: true },\n                        { staticName: \"Choice\", objectType: \"Choice\", mappedName: \"choice\", readOnly: false },\n                        {\n                            staticName: 'MultiChoice',\n                            objectType: 'MultiChoice',\n                            mappedName: 'multiChoice',\n                            readOnly: false\n                        },\n                        { staticName: \"Currency\", objectType: \"Currency\", mappedName: \"currency\", readOnly: false },\n                        { staticName: \"Date\", objectType: \"DateTime\", mappedName: \"date\", readOnly: false },\n                        { staticName: \"DateTime\", objectType: \"DateTime\", mappedName: \"dateTime\", readOnly: false },\n                        { staticName: \"Integer\", objectType: \"Integer\", mappedName: \"integer\", readOnly: false },\n                        { staticName: 'Float', objectType: 'Float', mappedName: 'float', readOnly: false },\n                        { staticName: 'HTML', objectType: 'HTML', mappedName: 'html', readOnly: false },\n                        { staticName: \"JSON\", objectType: \"JSON\", mappedName: \"json\", readOnly: false },\n                        { staticName: \"Lookup\", objectType: \"Lookup\", mappedName: \"lookup\", readOnly: false },\n                        {\n                            staticName: \"LookupMulti\",\n                            objectType: \"LookupMulti\",\n                            mappedName: \"lookupMulti\",\n                            readOnly: false\n                        },\n                        { staticName: 'Note', objectType: 'Note', mappedName: 'note', readOnly: false },\n                        { staticName: \"User\", objectType: \"User\", mappedName: \"user\", readOnly: false },\n                        { staticName: \"UserMulti\", objectType: \"UserMulti\", mappedName: \"userMulti\", readOnly: false },\n                        { staticName: 'Hyperlink', objectType: 'Hyperlink', mappedName: 'hyperlink', readOnly: false },\n                        { staticName: 'Picture', objectType: 'Picture', mappedName: 'picture', readOnly: false },\n                        { staticName: 'Attachments', objectType: 'Attachments', mappedName: 'attachments', readOnly: false }\n                    ]\n                }\n            });\n\n            var model = this;\n\n            /*********************************** Queries ***************************************/\n\n            /** Fetch data (pulls local xml if offline named model.list.title + '.xml')\n             *  Initially pulls all requested data.  Each subsequent call just pulls records that have been changed,\n             *  updates the model, and returns a reference to the updated data array\n             * @returns {Array} Requested list items\n             */\n            model.registerQuery({\n                name: 'primary'\n            });\n\n            model.registerQuery({\n                name: 'secondary'\n            });\n\n        }\n\n        getField(name) {\n            return _.find(this.list.fields, { mappedName: name });\n        }\n\n        importMocks() {\n            var primaryCache = this.getCache('primary');\n            var secondaryCache = this.getCache('secondary');\n            primaryCache.clear();\n            secondaryCache.clear();\n\n            /** Clear out model cache */\n            _.each(this.apCacheService.entityCache, (val, key) => {\n                delete this.apCacheService.entityCache[key];\n            });\n            this.executeQuery('primary')\n                .then((data) => {\n                    //placeholder\n                })\n            this.executeQuery('secondary')\n                .then((data) => {\n                    //placeholder\n                })\n            this.$httpBackend.flush();\n        }\n    }\n\n\n    angular.module('angularPoint')\n        .service('mockModel', MockModel);\n\n}"],"sourceRoot":"/source/"}