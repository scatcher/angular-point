{"version":3,"sources":["mock/models/lookupModel.mock.ts"],"names":["ap","ap.MockLookup","ap.MockLookup.constructor","ap.MockLookupModel","ap.MockLookupModel.constructor","ap.MockLookupModel.importMocks"],"mappings":"AAAA,8CAA8C;;;;;;AAE9C,IAAO,EAAE,CA+DR;AA/DD,WAAO,EAAE,EAAC,CAAC;IACPA,YAAYA,CAACA;IAEbA;QAAgCC,8BAAuBA;QACnDA,oBAAYA,GAAGA;YACXC,iBAAOA,CAACA;YACRA,CAACA,CAACA,MAAMA,CAACA,IAAIA,EAAEA,GAAGA,CAACA,CAACA;QACxBA,CAACA;QACLD,iBAACA;IAADA,CALAD,AAKCC,EAL+BD,EAAEA,CAACA,QAAQA,EAK1CA;IALYA,aAAUA,aAKtBA,CAAAA;IAEDA;QAAqCG,mCAAQA;QACzCA,yBAAoBA,eAAeA,EAAUA,cAAcA;YAEvDC,gFAAgFA;YAEhFA;gHACoGA;YACpGA,kBAAMA;gBACFA,OAAOA,EAAEA,UAAUA;gBACnBA,IAAIA,EAAEA;oBACFA,KAAKA,EAAEA,gBAAgBA;oBACvBA,IAAIA,EAAEA,wCAAwCA;oBAC9CA,YAAYA,EAAEA;wBACVA,EAAEA,UAAUA,EAAEA,OAAOA,EAAEA,UAAUA,EAAEA,MAAMA,EAAEA,UAAUA,EAAEA,OAAOA,EAAEA,QAAQA,EAAEA,KAAKA,EAAEA;qBACpFA;iBACJA;aACJA,CAACA,CAACA;YAfaA,oBAAeA,GAAfA,eAAeA,CAAAA;YAAUA,mBAAcA,GAAdA,cAAcA,CAAAA;YAiBvDA,IAAIA,KAAKA,GAAGA,IAAIA,CAACA;YAEjBA,qFAAqFA;YAErFA;;;;eAIGA;YACHA,KAAKA,CAACA,aAAaA,CAACA;gBAChBA,IAAIA,EAAEA,SAASA;gBACfA,UAAUA,EAAEA,mBAAmBA;gBAC/BA,KAAKA,EAAEA,EAAEA;oBACTA,SAASA;oBACTA,cAAcA;oBACdA,+CAA+CA;oBAC/CA,eAAeA;oBACfA,UAAUA;aACbA,CAACA,CAACA;QAGPA,CAACA;QACDD,qCAAWA,GAAXA;YACIE,IAAIA,YAAYA,GAAGA,IAAIA,CAACA,QAAQA,CAACA,SAASA,CAACA,CAACA;YAC5CA,YAAYA,CAACA,KAAKA,EAAEA,CAACA;YACrBA,IAAIA,CAACA,eAAeA,CAACA,gBAAgBA,CAACA,IAAIA,EAAEA,IAAIA,CAACA,QAAQA,CAACA,SAASA,CAACA,EAAEA,IAAIA,CAACA,cAAcA,CAACA,2BAA2BA,EAAEA;gBACnHA,MAAMA,EAAEA,YAAYA;aACvBA,CAACA,CAACA;YACHA,MAAMA,CAACA,YAAYA,CAACA;QACxBA,CAACA;QACLF,sBAACA;IAADA,CAhDAH,AAgDCG,EAhDoCH,EAAEA,CAACA,KAAKA,EAgD5CA;IAhDYA,kBAAeA,kBAgD3BA,CAAAA;IAEDA,OAAOA,CAACA,MAAMA,CAACA,cAAcA,CAACA;SACzBA,OAAOA,CAACA,iBAAiBA,EAAEA,eAAeA,CAACA,CAACA;AAErDA,CAACA,EA/DM,EAAE,KAAF,EAAE,QA+DR","file":"mock/models/lookupModel.mock.js","sourcesContent":["/// <reference path=\"../app.module.mock.ts\" />\n\nmodule ap {\n    'use strict';\n\n    export class MockLookup extends ap.ListItem<MockLookup>{\n        constructor(obj) {\n            super();\n            _.assign(this, obj);\n        }\n    }\n\n    export class MockLookupModel extends ap.Model {\n        constructor(private apDecodeService, private mockXMLService) {\n\n            /********************* Model Definition ***************************************/\n\n            /** Model Constructor\n             *  Also passes list to List constructor to build viewFields (XML definition of fields to return) */\n            super({\n                factory: MockLookup,\n                list: {\n                    title: 'MockLookupList', /**Maps to the offline XML file in dev folder (no spaces) */\n                    guid: '{D2448413-D9AE-4FE4-A499-1D8FE7201FDA}', /**List GUID can be found in list properties in SharePoint designer */\n                    customFields: [\n                        { staticName: \"Title\", objectType: \"Text\", mappedName: \"title\", readOnly: false }\n                    ]\n                }\n            });\n\n            var model = this;\n\n            /*********************************** Queries ***************************************/\n\n            /** Fetch data (pulls local xml if offline named model.list.title + '.xml')\n             *  Initially pulls all requested data.  Each subsequent call just pulls records that have been changed,\n             *  updates the model, and returns a reference to the updated data array\n             * @returns {Array} Requested list items\n             */\n            model.registerQuery({\n                name: 'primary',\n                offlineXML: '../MockLookup.xml',\n                query: '' +\n                '<Query>' +\n                '   <OrderBy>' +\n                '       <FieldRef Name=\"ID\" Ascending=\"TRUE\"/>' +\n                '   </OrderBy>' +\n                '</Query>'\n            });\n\n\n        }\n        importMocks() {\n            var primaryCache = this.getCache('primary');\n            primaryCache.clear();\n            this.apDecodeService.processListItems(this, this.getQuery('primary'), this.mockXMLService.lookupItemsSinceChangeToken, {\n                target: primaryCache\n            });\n            return primaryCache;\n        }\n    }\n\n    angular.module('angularPoint')\n        .service('mockLookupModel', MockLookupModel);\n\n} "],"sourceRoot":"/source/"}