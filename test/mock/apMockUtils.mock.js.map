{"version":3,"sources":["mock/apMockUtils.mock.ts"],"names":[],"mappings":"AAAA,8CAA8C;AAC9C,+CAA+C;AAE/C,IAAO,EAAE,CAqBR;AArBD,WAAO,EAAE;IAAC,IAAA,IAAI,CAqBb;IArBS,WAAA,IAAI,EAAC,CAAC;QACZ,YAAY,CAAC;QAEb;YACI,mBAAoB,gBAAgC;gBAAhC,qBAAgB,GAAhB,gBAAgB,CAAgB;YAAG,CAAC;YAExD;iDACqC;YACrC,2CAAuB,GAAvB;gBACI,IAAI,YAAY,GAAG,EAAE,EACjB,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE,CAAC;gBAErD,YAAY,IAAI,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;gBAC9D,YAAY,IAAI,KAAK,CAAC;gBACtB,MAAM,CAAC,YAAY,CAAC;YACxB,CAAC;YACL,gBAAC;QAAD,CAbA,AAaC,IAAA;QAbY,cAAS,YAarB,CAAA;QAED,OAAO,CAAC,MAAM,CAAC,cAAc,CAAC;aACzB,OAAO,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;IAE3C,CAAC,EArBS,IAAI,GAAJ,OAAI,KAAJ,OAAI,QAqBb;AAAD,CAAC,EArBM,EAAE,KAAF,EAAE,QAqBR","file":"mock/apMockUtils.mock.js","sourcesContent":["/// <reference path=\"../../typings/ap.d.ts\" />\r\n/// <reference path=\"../../typings/tsd.d.ts\" />\r\n\r\nmodule ap.test {\r\n    'use strict';\r\n\r\n    export class MockUtils {\r\n        constructor(private apUtilityService: UtilityService) {}\r\n        \r\n        /** We don't know the timezone of the test server so can't hard code it therefore we need the build system\r\n        * to return the anticipated offset */\r\n        getTimezoneOffsetString() {\r\n            var offsetString = '',\r\n                offsetZone = new Date().getTimezoneOffset() / 60;\r\n\r\n            offsetString += this.apUtilityService.doubleDigit(offsetZone);\r\n            offsetString += ':00';\r\n            return offsetString;\r\n        }\r\n    }\r\n\r\n    angular.module('angularPoint')\r\n        .service('apMockUtils', MockUtils);\r\n\r\n}"],"sourceRoot":"/source/"}