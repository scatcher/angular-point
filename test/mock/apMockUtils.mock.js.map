{"version":3,"sources":["mock/apMockUtils.mock.ts"],"names":["ap","ap.test","ap.test.MockUtils","ap.test.MockUtils.constructor","ap.test.MockUtils.getTimezoneOffsetString"],"mappings":"AAAA,8CAA8C;AAC9C,+CAA+C;AAE/C,IAAO,EAAE,CAqBR;AArBD,WAAO,EAAE;IAACA,IAAAA,IAAIA,CAqBbA;IArBSA,WAAAA,IAAIA,EAACA,CAACA;QACZC,YAAYA,CAACA;QAEbA;YACIC,mBAAoBA,gBAAgCA;gBAAhCC,qBAAgBA,GAAhBA,gBAAgBA,CAAgBA;YAAGA,CAACA;YAExDD;iDACqCA;YACrCA,2CAAuBA,GAAvBA;gBACIE,IAAIA,YAAYA,GAAGA,EAAEA,EACjBA,UAAUA,GAAGA,IAAIA,IAAIA,EAAEA,CAACA,iBAAiBA,EAAEA,GAAGA,EAAEA,CAACA;gBAErDA,YAAYA,IAAIA,IAAIA,CAACA,gBAAgBA,CAACA,WAAWA,CAACA,UAAUA,CAACA,CAACA;gBAC9DA,YAAYA,IAAIA,KAAKA,CAACA;gBACtBA,MAAMA,CAACA,YAAYA,CAACA;YACxBA,CAACA;YACLF,gBAACA;QAADA,CAbAD,AAaCC,IAAAD;QAbYA,cAASA,YAarBA,CAAAA;QAEDA,OAAOA,CAACA,MAAMA,CAACA,cAAcA,CAACA;aACzBA,OAAOA,CAACA,aAAaA,EAAEA,SAASA,CAACA,CAACA;IAE3CA,CAACA,EArBSD,IAAIA,GAAJA,OAAIA,KAAJA,OAAIA,QAqBbA;AAADA,CAACA,EArBM,EAAE,KAAF,EAAE,QAqBR","file":"mock/apMockUtils.mock.js","sourcesContent":["/// <reference path=\"../../typings/ap.d.ts\" />\n/// <reference path=\"../../typings/tsd.d.ts\" />\n\nmodule ap.test {\n    'use strict';\n\n    export class MockUtils {\n        constructor(private apUtilityService: UtilityService) {}\n        \n        /** We don't know the timezone of the test server so can't hard code it therefore we need the build system\n        * to return the anticipated offset */\n        getTimezoneOffsetString() {\n            var offsetString = '',\n                offsetZone = new Date().getTimezoneOffset() / 60;\n\n            offsetString += this.apUtilityService.doubleDigit(offsetZone);\n            offsetString += ':00';\n            return offsetString;\n        }\n    }\n\n    angular.module('angularPoint')\n        .service('apMockUtils', MockUtils);\n\n}"],"sourceRoot":"/source/"}