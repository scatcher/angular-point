{"version":3,"sources":["mock/apMockUtils.mock.ts"],"names":["ap","ap.MockUtils","ap.MockUtils.constructor","ap.MockUtils.getTimezoneOffsetString"],"mappings":"AAAA,8CAA8C;AAC9C,+CAA+C;AAE/C,IAAO,EAAE,CAqBR;AArBD,WAAO,EAAE,EAAC,CAAC;IACPA,YAAYA,CAACA;IAEbA;QACIC,mBAAoBA,gBAAgCA;YAAhCC,qBAAgBA,GAAhBA,gBAAgBA,CAAgBA;QAAGA,CAACA;QAExDD;6CACqCA;QACrCA,2CAAuBA,GAAvBA;YACIE,IAAIA,YAAYA,GAAGA,EAAEA,EACjBA,UAAUA,GAAGA,IAAIA,IAAIA,EAAEA,CAACA,iBAAiBA,EAAEA,GAAGA,EAAEA,CAACA;YAErDA,YAAYA,IAAIA,IAAIA,CAACA,gBAAgBA,CAACA,WAAWA,CAACA,UAAUA,CAACA,CAACA;YAC9DA,YAAYA,IAAIA,KAAKA,CAACA;YACtBA,MAAMA,CAACA,YAAYA,CAACA;QACxBA,CAACA;QACLF,gBAACA;IAADA,CAbAD,AAaCC,IAAAD;IAbYA,YAASA,YAarBA,CAAAA;IAEDA,OAAOA,CAACA,MAAMA,CAACA,cAAcA,CAACA;SACzBA,OAAOA,CAACA,aAAaA,EAAEA,SAASA,CAACA,CAACA;AAE3CA,CAACA,EArBM,EAAE,KAAF,EAAE,QAqBR","file":"mock/apMockUtils.mock.js","sourcesContent":["/// <reference path=\"../../typings/ap.d.ts\" />\r\n/// <reference path=\"../../typings/tsd.d.ts\" />\r\n\r\nmodule ap {\r\n    'use strict';\r\n\r\n    export class MockUtils {\r\n        constructor(private apUtilityService: UtilityService) {}\r\n        \r\n        /** We don't know the timezone of the test server so can't hard code it therefore we need the build system\r\n        * to return the anticipated offset */\r\n        getTimezoneOffsetString() {\r\n            var offsetString = '',\r\n                offsetZone = new Date().getTimezoneOffset() / 60;\r\n\r\n            offsetString += this.apUtilityService.doubleDigit(offsetZone);\r\n            offsetString += ':00';\r\n            return offsetString;\r\n        }\r\n    }\r\n\r\n    angular.module('angularPoint')\r\n        .service('apMockUtils', MockUtils);\r\n\r\n}"],"sourceRoot":"/source/"}