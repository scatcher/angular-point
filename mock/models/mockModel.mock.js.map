{"version":3,"sources":["mock/models/mockModel.mock.ts"],"names":["ap","ap.Mock","ap.Mock.constructor","ap.MockModel","ap.MockModel.constructor"],"mappings":"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","file":"mock/models/mockModel.mock.js","sourcesContent":["/// <reference path=\"../../typings/ap.d.ts\" />\n\nmodule ap {\n    'use strict';\n\n    /**\n     * Entity Constructor\n     * @param obj\n     * @constructor\n     */\n    class Mock extends ListItem{\n        constructor(obj) {\n            super();\n            _.extend(this, obj);\n        }\n    }\n\n\n\n    class MockModel extends Model{\n        getField;\n        importMocks;\n        constructor(apModelFactory, apListItemFactory, apDecodeService, mockXMLService, $httpBackend) {\n\n            /********************* Model Definition ***************************************/\n\n            /** Model Constructor\n             *  Also passes list to List constructor to build viewFields (XML definition of fields to return) */\n            super({\n                factory: Mock,\n                list: {\n                    title: 'MockList',\n                    /**Maps to the offline XML file in dev folder (no spaces) */\n                    guid: '{F5345FE7-2F7C-49F7-87D0-DBFEBDD0CE61}',\n                    /**List GUID can be found in list properties in SharePoint designer */\n                    customFields: [\n                        {staticName: \"Title\", objectType: \"Text\", mappedName: \"title\", readOnly: false},\n                        // Has required = true to test field validation.\n                        {\n                            staticName: \"Boolean\",\n                            objectType: \"Boolean\",\n                            mappedName: \"boolean\",\n                            readOnly: false,\n                            required: true\n                        },\n                        {staticName: \"Calculated\", objectType: \"Calculated\", mappedName: \"calculated\", readOnly: true},\n                        {staticName: \"Choice\", objectType: \"Choice\", mappedName: \"choice\", readOnly: false},\n                        {\n                            staticName: 'MultiChoice',\n                            objectType: 'MultiChoice',\n                            mappedName: 'multiChoice',\n                            readOnly: false\n                        },\n                        {staticName: \"Currency\", objectType: \"Currency\", mappedName: \"currency\", readOnly: false},\n                        {staticName: \"Date\", objectType: \"DateTime\", mappedName: \"date\", readOnly: false},\n                        {staticName: \"DateTime\", objectType: \"DateTime\", mappedName: \"dateTime\", readOnly: false},\n                        {staticName: \"Integer\", objectType: \"Integer\", mappedName: \"integer\", readOnly: false},\n                        {staticName: 'Float', objectType: 'Float', mappedName: 'float', readOnly: false},\n                        {staticName: 'HTML', objectType: 'HTML', mappedName: 'html', readOnly: false},\n                        {staticName: \"JSON\", objectType: \"JSON\", mappedName: \"json\", readOnly: false},\n                        {staticName: \"Lookup\", objectType: \"Lookup\", mappedName: \"lookup\", readOnly: false},\n                        {\n                            staticName: \"LookupMulti\",\n                            objectType: \"LookupMulti\",\n                            mappedName: \"lookupMulti\",\n                            readOnly: false\n                        },\n                        {staticName: 'Note', objectType: 'Note', mappedName: 'note', readOnly: false},\n                        {staticName: \"User\", objectType: \"User\", mappedName: \"user\", readOnly: false},\n                        {staticName: \"UserMulti\", objectType: \"UserMulti\", mappedName: \"userMulti\", readOnly: false},\n                        {staticName: 'Hyperlink', objectType: 'Hyperlink', mappedName: 'hyperlink', readOnly: false},\n                        {staticName: 'Picture', objectType: 'Picture', mappedName: 'picture', readOnly: false},\n                        {\n                            staticName: 'Attachments',\n                            objectType: 'Attachments',\n                            mappedName: 'attachments',\n                            readOnly: false\n                        }\n                    ]\n                }\n            });\n\n            /*********************************** Queries ***************************************/\n\n            /** Fetch data (pulls local xml if offline named model.list.title + '.xml')\n             *  Initially pulls all requested data.  Each subsequent call just pulls records that have been changed,\n             *  updates the model, and returns a reference to the updated data array\n             * @returns {Array} Requested list items\n             */\n            this.registerQuery({\n                name: 'primary',\n                offlineXML: '../mock.xml',\n                query: '' +\n                '<Query>' +\n                '   <OrderBy>' +\n                '       <FieldRef Name=\"ID\" Ascending=\"TRUE\"/>' +\n                '   </OrderBy>' +\n                '</Query>'\n            });\n\n            this.registerQuery({\n                name: 'secondary',\n                offlineXML: '../mock.xml',\n                query: '' +\n                '<Query>' +\n                '   <OrderBy>' +\n                '       <FieldRef Name=\"ID\" Ascending=\"TRUE\"/>' +\n                '   </OrderBy>' +\n                '</Query>'\n            });\n\n            //model.executeQuery('primary');\n            //model.executeQuery('secondary');\n            //$httpBackend.flush();\n\n\n            /********************* Model Specific Shared Functions ***************************************/\n\n                ///** Optionally add a modal form **/\n                //model.openModal = apModalService.modalModelProvider({\n                //    templateUrl: '',\n                //    controller: '',\n                //    expectedArguments: ['entity']\n                //});\n                //\n                //Mock.prototype.openModal = function () {\n                //    return model.openModal(this);\n                //};\n\n            this.getField = (name) => {\n                return _.find(this.list.fields, {mappedName: name});\n            };\n\n\n            this.importMocks = () => {\n                var primaryCache = this.getCache('primary');\n                var secondaryCache = this.getCache('secondary');\n                primaryCache.clear();\n                secondaryCache.clear();\n                //apDecodeService.processListItems(this, primaryCache, mockXMLService.GetListItemChangesSinceToken, {\n                //    target: primaryCache\n                //});\n                //apDecodeService.processListItems(this, secondaryCache, mockXMLService.GetListItemChangesSinceToken, {\n                //    target: secondaryCache\n                //});\n\n                this.executeQuery('primary');\n                this.executeQuery('secondary');\n                $httpBackend.flush();\n\n                /** Extend list and field definitions with mock XML */\n                //apDecodeService.extendListDefinitionFromXML(this.list, mockXMLService.GetListItemChangesSinceToken);\n                //apDecodeService.extendFieldDefinitionsFromXML(this.list.fields, mockXMLService.GetListItemChangesSinceToken);\n                //this.fieldDefinitionsExtended = true;\n\n                ///** Populate secondary query cache with same objects */\n                //_.extend(secondaryCache, primaryCache);\n\n                //return primaryCache;\n            };\n        }\n    }\n\n    /** Angular will instantiate this singleton by calling \"new\" on this function the first time it's referenced\n     /*  State will persist throughout life of session\n     */\n    angular.module('angularPoint')\n        .factory('mockModel', MockModel);\n\n\n}\n"],"sourceRoot":"/"}